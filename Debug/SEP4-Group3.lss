
SEP4-Group3.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000006dc  00800200  00006738  000067cc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00006738  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000103b  008008dc  008008dc  00006ea8  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00006ea8  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00006f04  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000be8  00000000  00000000  00006f44  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000e7d7  00000000  00000000  00007b2c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00003b5c  00000000  00000000  00016303  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00007493  00000000  00000000  00019e5f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00002914  00000000  00000000  000212f4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000044ff  00000000  00000000  00023c08  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000c669  00000000  00000000  00028107  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000ae8  00000000  00000000  00034770  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	e5 c0       	rjmp	.+458    	; 0x1cc <__ctors_end>
       2:	00 00       	nop
       4:	04 c1       	rjmp	.+520    	; 0x20e <__bad_interrupt>
       6:	00 00       	nop
       8:	02 c1       	rjmp	.+516    	; 0x20e <__bad_interrupt>
       a:	00 00       	nop
       c:	00 c1       	rjmp	.+512    	; 0x20e <__bad_interrupt>
       e:	00 00       	nop
      10:	fe c0       	rjmp	.+508    	; 0x20e <__bad_interrupt>
      12:	00 00       	nop
      14:	fc c0       	rjmp	.+504    	; 0x20e <__bad_interrupt>
      16:	00 00       	nop
      18:	fa c0       	rjmp	.+500    	; 0x20e <__bad_interrupt>
      1a:	00 00       	nop
      1c:	f8 c0       	rjmp	.+496    	; 0x20e <__bad_interrupt>
      1e:	00 00       	nop
      20:	f6 c0       	rjmp	.+492    	; 0x20e <__bad_interrupt>
      22:	00 00       	nop
      24:	f4 c0       	rjmp	.+488    	; 0x20e <__bad_interrupt>
      26:	00 00       	nop
      28:	f2 c0       	rjmp	.+484    	; 0x20e <__bad_interrupt>
      2a:	00 00       	nop
      2c:	f0 c0       	rjmp	.+480    	; 0x20e <__bad_interrupt>
      2e:	00 00       	nop
      30:	3e c5       	rjmp	.+2684   	; 0xaae <__vector_12>
      32:	00 00       	nop
      34:	ec c0       	rjmp	.+472    	; 0x20e <__bad_interrupt>
      36:	00 00       	nop
      38:	ea c0       	rjmp	.+468    	; 0x20e <__bad_interrupt>
      3a:	00 00       	nop
      3c:	e8 c0       	rjmp	.+464    	; 0x20e <__bad_interrupt>
      3e:	00 00       	nop
      40:	e6 c0       	rjmp	.+460    	; 0x20e <__bad_interrupt>
      42:	00 00       	nop
      44:	e4 c0       	rjmp	.+456    	; 0x20e <__bad_interrupt>
      46:	00 00       	nop
      48:	e2 c0       	rjmp	.+452    	; 0x20e <__bad_interrupt>
      4a:	00 00       	nop
      4c:	e0 c0       	rjmp	.+448    	; 0x20e <__bad_interrupt>
      4e:	00 00       	nop
      50:	de c0       	rjmp	.+444    	; 0x20e <__bad_interrupt>
      52:	00 00       	nop
      54:	dc c0       	rjmp	.+440    	; 0x20e <__bad_interrupt>
      56:	00 00       	nop
      58:	da c0       	rjmp	.+436    	; 0x20e <__bad_interrupt>
      5a:	00 00       	nop
      5c:	d8 c0       	rjmp	.+432    	; 0x20e <__bad_interrupt>
      5e:	00 00       	nop
      60:	d6 c0       	rjmp	.+428    	; 0x20e <__bad_interrupt>
      62:	00 00       	nop
      64:	0c 94 ef 27 	jmp	0x4fde	; 0x4fde <__vector_25>
      68:	0c 94 41 28 	jmp	0x5082	; 0x5082 <__vector_26>
      6c:	d0 c0       	rjmp	.+416    	; 0x20e <__bad_interrupt>
      6e:	00 00       	nop
      70:	ce c0       	rjmp	.+412    	; 0x20e <__bad_interrupt>
      72:	00 00       	nop
      74:	cc c0       	rjmp	.+408    	; 0x20e <__bad_interrupt>
      76:	00 00       	nop
      78:	ca c0       	rjmp	.+404    	; 0x20e <__bad_interrupt>
      7a:	00 00       	nop
      7c:	c8 c0       	rjmp	.+400    	; 0x20e <__bad_interrupt>
      7e:	00 00       	nop
      80:	c6 c0       	rjmp	.+396    	; 0x20e <__bad_interrupt>
      82:	00 00       	nop
      84:	c4 c0       	rjmp	.+392    	; 0x20e <__bad_interrupt>
      86:	00 00       	nop
      88:	c2 c0       	rjmp	.+388    	; 0x20e <__bad_interrupt>
      8a:	00 00       	nop
      8c:	c0 c0       	rjmp	.+384    	; 0x20e <__bad_interrupt>
      8e:	00 00       	nop
      90:	0c 94 85 28 	jmp	0x510a	; 0x510a <__vector_36>
      94:	0c 94 d7 28 	jmp	0x51ae	; 0x51ae <__vector_37>
      98:	ba c0       	rjmp	.+372    	; 0x20e <__bad_interrupt>
      9a:	00 00       	nop
      9c:	0c 94 8e 2c 	jmp	0x591c	; 0x591c <__vector_39>
      a0:	b6 c0       	rjmp	.+364    	; 0x20e <__bad_interrupt>
      a2:	00 00       	nop
      a4:	b4 c0       	rjmp	.+360    	; 0x20e <__bad_interrupt>
      a6:	00 00       	nop
      a8:	b2 c0       	rjmp	.+356    	; 0x20e <__bad_interrupt>
      aa:	00 00       	nop
      ac:	b0 c0       	rjmp	.+352    	; 0x20e <__bad_interrupt>
      ae:	00 00       	nop
      b0:	ae c0       	rjmp	.+348    	; 0x20e <__bad_interrupt>
      b2:	00 00       	nop
      b4:	ac c0       	rjmp	.+344    	; 0x20e <__bad_interrupt>
      b6:	00 00       	nop
      b8:	aa c0       	rjmp	.+340    	; 0x20e <__bad_interrupt>
      ba:	00 00       	nop
      bc:	a8 c0       	rjmp	.+336    	; 0x20e <__bad_interrupt>
      be:	00 00       	nop
      c0:	a6 c0       	rjmp	.+332    	; 0x20e <__bad_interrupt>
      c2:	00 00       	nop
      c4:	a4 c0       	rjmp	.+328    	; 0x20e <__bad_interrupt>
      c6:	00 00       	nop
      c8:	a2 c0       	rjmp	.+324    	; 0x20e <__bad_interrupt>
      ca:	00 00       	nop
      cc:	0c 94 1b 29 	jmp	0x5236	; 0x5236 <__vector_51>
      d0:	0c 94 6d 29 	jmp	0x52da	; 0x52da <__vector_52>
      d4:	9c c0       	rjmp	.+312    	; 0x20e <__bad_interrupt>
      d6:	00 00       	nop
      d8:	0c 94 b1 29 	jmp	0x5362	; 0x5362 <__vector_54>
      dc:	0c 94 03 2a 	jmp	0x5406	; 0x5406 <__vector_55>
      e0:	96 c0       	rjmp	.+300    	; 0x20e <__bad_interrupt>
      e2:	00 00       	nop
      e4:	31 1b       	sub	r19, r17
      e6:	31 1b       	sub	r19, r17
      e8:	31 1b       	sub	r19, r17
      ea:	68 1b       	sub	r22, r24
      ec:	70 1b       	sub	r23, r16
      ee:	85 1b       	sub	r24, r21
      f0:	31 1b       	sub	r19, r17
      f2:	31 1b       	sub	r19, r17
      f4:	68 1b       	sub	r22, r24
      f6:	70 1b       	sub	r23, r16
      f8:	b0 2c       	mov	r11, r0
      fa:	20 2d       	mov	r18, r0
      fc:	20 2d       	mov	r18, r0
      fe:	20 2d       	mov	r18, r0
     100:	20 2d       	mov	r18, r0
     102:	20 2d       	mov	r18, r0
     104:	20 2d       	mov	r18, r0
     106:	20 2d       	mov	r18, r0
     108:	b0 2c       	mov	r11, r0
     10a:	20 2d       	mov	r18, r0
     10c:	20 2d       	mov	r18, r0
     10e:	20 2d       	mov	r18, r0
     110:	20 2d       	mov	r18, r0
     112:	20 2d       	mov	r18, r0
     114:	20 2d       	mov	r18, r0
     116:	20 2d       	mov	r18, r0
     118:	b2 2c       	mov	r11, r2
     11a:	20 2d       	mov	r18, r0
     11c:	20 2d       	mov	r18, r0
     11e:	20 2d       	mov	r18, r0
     120:	20 2d       	mov	r18, r0
     122:	20 2d       	mov	r18, r0
     124:	20 2d       	mov	r18, r0
     126:	20 2d       	mov	r18, r0
     128:	20 2d       	mov	r18, r0
     12a:	20 2d       	mov	r18, r0
     12c:	20 2d       	mov	r18, r0
     12e:	20 2d       	mov	r18, r0
     130:	20 2d       	mov	r18, r0
     132:	20 2d       	mov	r18, r0
     134:	20 2d       	mov	r18, r0
     136:	20 2d       	mov	r18, r0
     138:	b2 2c       	mov	r11, r2
     13a:	20 2d       	mov	r18, r0
     13c:	20 2d       	mov	r18, r0
     13e:	20 2d       	mov	r18, r0
     140:	20 2d       	mov	r18, r0
     142:	20 2d       	mov	r18, r0
     144:	20 2d       	mov	r18, r0
     146:	20 2d       	mov	r18, r0
     148:	20 2d       	mov	r18, r0
     14a:	20 2d       	mov	r18, r0
     14c:	20 2d       	mov	r18, r0
     14e:	20 2d       	mov	r18, r0
     150:	20 2d       	mov	r18, r0
     152:	20 2d       	mov	r18, r0
     154:	20 2d       	mov	r18, r0
     156:	20 2d       	mov	r18, r0
     158:	1c 2d       	mov	r17, r12
     15a:	20 2d       	mov	r18, r0
     15c:	20 2d       	mov	r18, r0
     15e:	20 2d       	mov	r18, r0
     160:	20 2d       	mov	r18, r0
     162:	20 2d       	mov	r18, r0
     164:	20 2d       	mov	r18, r0
     166:	20 2d       	mov	r18, r0
     168:	e7 2c       	mov	r14, r7
     16a:	20 2d       	mov	r18, r0
     16c:	20 2d       	mov	r18, r0
     16e:	20 2d       	mov	r18, r0
     170:	20 2d       	mov	r18, r0
     172:	20 2d       	mov	r18, r0
     174:	20 2d       	mov	r18, r0
     176:	20 2d       	mov	r18, r0
     178:	20 2d       	mov	r18, r0
     17a:	20 2d       	mov	r18, r0
     17c:	20 2d       	mov	r18, r0
     17e:	20 2d       	mov	r18, r0
     180:	20 2d       	mov	r18, r0
     182:	20 2d       	mov	r18, r0
     184:	20 2d       	mov	r18, r0
     186:	20 2d       	mov	r18, r0
     188:	db 2c       	mov	r13, r11
     18a:	20 2d       	mov	r18, r0
     18c:	20 2d       	mov	r18, r0
     18e:	20 2d       	mov	r18, r0
     190:	20 2d       	mov	r18, r0
     192:	20 2d       	mov	r18, r0
     194:	20 2d       	mov	r18, r0
     196:	20 2d       	mov	r18, r0
     198:	ff 2c       	mov	r15, r15

0000019a <prvIdleTask>:
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
    }
     19a:	0e 94 72 0d 	call	0x1ae4	; 0x1ae4 <prvCheckTasksWaitingTermination>
     19e:	80 91 e9 16 	lds	r24, 0x16E9	; 0x8016e9 <pxReadyTasksLists>
     1a2:	82 30       	cpi	r24, 0x02	; 2
     1a4:	08 f0       	brcs	.+2      	; 0x1a8 <prvIdleTask+0xe>
     1a6:	bd d3       	rcall	.+1914   	; 0x922 <vPortYield>
     1a8:	0e 94 ae 1b 	call	0x375c	; 0x375c <vApplicationIdleHook>
     1ac:	f6 cf       	rjmp	.-20     	; 0x19a <prvIdleTask>

000001ae <prvTimerTask>:
                pxNewTimer->ucStatus = 0x00;
                prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
            }

            return pxNewTimer;
        }
     1ae:	cf 93       	push	r28
     1b0:	df 93       	push	r29
     1b2:	1f 92       	push	r1
     1b4:	cd b7       	in	r28, 0x3d	; 61
     1b6:	de b7       	in	r29, 0x3e	; 62
     1b8:	ce 01       	movw	r24, r28
     1ba:	01 96       	adiw	r24, 0x01	; 1
     1bc:	0e 94 ae 18 	call	0x315c	; 0x315c <prvGetNextExpireTime>
     1c0:	49 81       	ldd	r20, Y+1	; 0x01
     1c2:	0e 94 a3 1a 	call	0x3546	; 0x3546 <prvProcessTimerOrBlockTask>
     1c6:	0e 94 fa 1a 	call	0x35f4	; 0x35f4 <prvProcessReceivedCommands>
     1ca:	f6 cf       	rjmp	.-20     	; 0x1b8 <prvTimerTask+0xa>

000001cc <__ctors_end>:
     1cc:	11 24       	eor	r1, r1
     1ce:	1f be       	out	0x3f, r1	; 63
     1d0:	cf ef       	ldi	r28, 0xFF	; 255
     1d2:	d1 e2       	ldi	r29, 0x21	; 33
     1d4:	de bf       	out	0x3e, r29	; 62
     1d6:	cd bf       	out	0x3d, r28	; 61
     1d8:	00 e0       	ldi	r16, 0x00	; 0
     1da:	0c bf       	out	0x3c, r16	; 60

000001dc <__do_copy_data>:
     1dc:	18 e0       	ldi	r17, 0x08	; 8
     1de:	a0 e0       	ldi	r26, 0x00	; 0
     1e0:	b2 e0       	ldi	r27, 0x02	; 2
     1e2:	e8 e3       	ldi	r30, 0x38	; 56
     1e4:	f7 e6       	ldi	r31, 0x67	; 103
     1e6:	00 e0       	ldi	r16, 0x00	; 0
     1e8:	0b bf       	out	0x3b, r16	; 59
     1ea:	02 c0       	rjmp	.+4      	; 0x1f0 <__do_copy_data+0x14>
     1ec:	07 90       	elpm	r0, Z+
     1ee:	0d 92       	st	X+, r0
     1f0:	ac 3d       	cpi	r26, 0xDC	; 220
     1f2:	b1 07       	cpc	r27, r17
     1f4:	d9 f7       	brne	.-10     	; 0x1ec <__do_copy_data+0x10>

000001f6 <__do_clear_bss>:
     1f6:	29 e1       	ldi	r18, 0x19	; 25
     1f8:	ac ed       	ldi	r26, 0xDC	; 220
     1fa:	b8 e0       	ldi	r27, 0x08	; 8
     1fc:	01 c0       	rjmp	.+2      	; 0x200 <.do_clear_bss_start>

000001fe <.do_clear_bss_loop>:
     1fe:	1d 92       	st	X+, r1

00000200 <.do_clear_bss_start>:
     200:	a7 31       	cpi	r26, 0x17	; 23
     202:	b2 07       	cpc	r27, r18
     204:	e1 f7       	brne	.-8      	; 0x1fe <.do_clear_bss_loop>
     206:	0e 94 15 20 	call	0x402a	; 0x402a <main>
     20a:	0c 94 9a 33 	jmp	0x6734	; 0x6734 <_exit>

0000020e <__bad_interrupt>:
     20e:	f8 ce       	rjmp	.-528    	; 0x0 <__vectors>

00000210 <prvTestWaitCondition>:
        uxReturn = pxEventBits->uxEventBits;
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return uxReturn;
} /*lint !e818 EventGroupHandle_t is a typedef used in other functions to so can't be pointer to const. */
     210:	0f 93       	push	r16
     212:	01 11       	cpse	r16, r1
     214:	0c c0       	rjmp	.+24     	; 0x22e <prvTestWaitCondition+0x1e>
     216:	dc 01       	movw	r26, r24
     218:	cb 01       	movw	r24, r22
     21a:	82 23       	and	r24, r18
     21c:	93 23       	and	r25, r19
     21e:	a4 23       	and	r26, r20
     220:	b5 23       	and	r27, r21
     222:	89 2b       	or	r24, r25
     224:	8a 2b       	or	r24, r26
     226:	8b 2b       	or	r24, r27
     228:	79 f4       	brne	.+30     	; 0x248 <prvTestWaitCondition+0x38>
     22a:	80 e0       	ldi	r24, 0x00	; 0
     22c:	10 c0       	rjmp	.+32     	; 0x24e <prvTestWaitCondition+0x3e>
     22e:	dc 01       	movw	r26, r24
     230:	cb 01       	movw	r24, r22
     232:	82 23       	and	r24, r18
     234:	93 23       	and	r25, r19
     236:	a4 23       	and	r26, r20
     238:	b5 23       	and	r27, r21
     23a:	28 17       	cp	r18, r24
     23c:	39 07       	cpc	r19, r25
     23e:	4a 07       	cpc	r20, r26
     240:	5b 07       	cpc	r21, r27
     242:	21 f0       	breq	.+8      	; 0x24c <prvTestWaitCondition+0x3c>
     244:	80 e0       	ldi	r24, 0x00	; 0
     246:	03 c0       	rjmp	.+6      	; 0x24e <prvTestWaitCondition+0x3e>
     248:	81 e0       	ldi	r24, 0x01	; 1
     24a:	01 c0       	rjmp	.+2      	; 0x24e <prvTestWaitCondition+0x3e>
     24c:	81 e0       	ldi	r24, 0x01	; 1
     24e:	0f 91       	pop	r16
     250:	08 95       	ret

00000252 <xEventGroupCreate>:
     252:	cf 93       	push	r28
     254:	df 93       	push	r29
     256:	8f e0       	ldi	r24, 0x0F	; 15
     258:	90 e0       	ldi	r25, 0x00	; 0
     25a:	af d1       	rcall	.+862    	; 0x5ba <pvPortMalloc>
     25c:	ec 01       	movw	r28, r24
     25e:	00 97       	sbiw	r24, 0x00	; 0
     260:	39 f0       	breq	.+14     	; 0x270 <xEventGroupCreate+0x1e>
     262:	fc 01       	movw	r30, r24
     264:	11 92       	st	Z+, r1
     266:	11 92       	st	Z+, r1
     268:	11 92       	st	Z+, r1
     26a:	11 92       	st	Z+, r1
     26c:	cf 01       	movw	r24, r30
     26e:	8b d2       	rcall	.+1302   	; 0x786 <vListInitialise>
     270:	ce 01       	movw	r24, r28
     272:	df 91       	pop	r29
     274:	cf 91       	pop	r28
     276:	08 95       	ret

00000278 <xEventGroupWaitBits>:
     278:	2f 92       	push	r2
     27a:	3f 92       	push	r3
     27c:	4f 92       	push	r4
     27e:	5f 92       	push	r5
     280:	6f 92       	push	r6
     282:	7f 92       	push	r7
     284:	8f 92       	push	r8
     286:	9f 92       	push	r9
     288:	af 92       	push	r10
     28a:	bf 92       	push	r11
     28c:	cf 92       	push	r12
     28e:	df 92       	push	r13
     290:	ef 92       	push	r14
     292:	ff 92       	push	r15
     294:	0f 93       	push	r16
     296:	1f 93       	push	r17
     298:	cf 93       	push	r28
     29a:	df 93       	push	r29
     29c:	ec 01       	movw	r28, r24
     29e:	4a 01       	movw	r8, r20
     2a0:	5b 01       	movw	r10, r22
     2a2:	62 2e       	mov	r6, r18
     2a4:	70 2e       	mov	r7, r16
     2a6:	0e 94 bd 0e 	call	0x1d7a	; 0x1d7a <vTaskSuspendAll>
     2aa:	28 80       	ld	r2, Y
     2ac:	39 80       	ldd	r3, Y+1	; 0x01
     2ae:	4a 80       	ldd	r4, Y+2	; 0x02
     2b0:	5b 80       	ldd	r5, Y+3	; 0x03
     2b2:	a5 01       	movw	r20, r10
     2b4:	94 01       	movw	r18, r8
     2b6:	c2 01       	movw	r24, r4
     2b8:	b1 01       	movw	r22, r2
     2ba:	aa df       	rcall	.-172    	; 0x210 <prvTestWaitCondition>
     2bc:	88 23       	and	r24, r24
     2be:	a1 f0       	breq	.+40     	; 0x2e8 <xEventGroupWaitBits+0x70>
     2c0:	66 20       	and	r6, r6
     2c2:	89 f1       	breq	.+98     	; 0x326 <xEventGroupWaitBits+0xae>
     2c4:	d5 01       	movw	r26, r10
     2c6:	c4 01       	movw	r24, r8
     2c8:	80 95       	com	r24
     2ca:	90 95       	com	r25
     2cc:	a0 95       	com	r26
     2ce:	b0 95       	com	r27
     2d0:	82 21       	and	r24, r2
     2d2:	93 21       	and	r25, r3
     2d4:	a4 21       	and	r26, r4
     2d6:	b5 21       	and	r27, r5
     2d8:	88 83       	st	Y, r24
     2da:	99 83       	std	Y+1, r25	; 0x01
     2dc:	aa 83       	std	Y+2, r26	; 0x02
     2de:	bb 83       	std	Y+3, r27	; 0x03
     2e0:	c1 2c       	mov	r12, r1
     2e2:	d1 2c       	mov	r13, r1
     2e4:	76 01       	movw	r14, r12
     2e6:	22 c0       	rjmp	.+68     	; 0x32c <xEventGroupWaitBits+0xb4>
     2e8:	c1 14       	cp	r12, r1
     2ea:	d1 04       	cpc	r13, r1
     2ec:	e1 04       	cpc	r14, r1
     2ee:	f1 04       	cpc	r15, r1
     2f0:	e9 f0       	breq	.+58     	; 0x32c <xEventGroupWaitBits+0xb4>
     2f2:	61 10       	cpse	r6, r1
     2f4:	04 c0       	rjmp	.+8      	; 0x2fe <xEventGroupWaitBits+0x86>
     2f6:	40 e0       	ldi	r20, 0x00	; 0
     2f8:	50 e0       	ldi	r21, 0x00	; 0
     2fa:	ba 01       	movw	r22, r20
     2fc:	04 c0       	rjmp	.+8      	; 0x306 <xEventGroupWaitBits+0x8e>
     2fe:	40 e0       	ldi	r20, 0x00	; 0
     300:	50 e0       	ldi	r21, 0x00	; 0
     302:	60 e0       	ldi	r22, 0x00	; 0
     304:	71 e0       	ldi	r23, 0x01	; 1
     306:	71 10       	cpse	r7, r1
     308:	74 60       	ori	r23, 0x04	; 4
     30a:	48 29       	or	r20, r8
     30c:	59 29       	or	r21, r9
     30e:	6a 29       	or	r22, r10
     310:	7b 29       	or	r23, r11
     312:	97 01       	movw	r18, r14
     314:	86 01       	movw	r16, r12
     316:	ce 01       	movw	r24, r28
     318:	04 96       	adiw	r24, 0x04	; 4
     31a:	0e 94 d5 11 	call	0x23aa	; 0x23aa <vTaskPlaceOnUnorderedEventList>
     31e:	21 2c       	mov	r2, r1
     320:	31 2c       	mov	r3, r1
     322:	21 01       	movw	r4, r2
     324:	03 c0       	rjmp	.+6      	; 0x32c <xEventGroupWaitBits+0xb4>
     326:	c1 2c       	mov	r12, r1
     328:	d1 2c       	mov	r13, r1
     32a:	76 01       	movw	r14, r12
     32c:	0e 94 fd 0f 	call	0x1ffa	; 0x1ffa <xTaskResumeAll>
     330:	cd 28       	or	r12, r13
     332:	ce 28       	or	r12, r14
     334:	cf 28       	or	r12, r15
     336:	59 f1       	breq	.+86     	; 0x38e <xEventGroupWaitBits+0x116>
     338:	81 11       	cpse	r24, r1
     33a:	01 c0       	rjmp	.+2      	; 0x33e <xEventGroupWaitBits+0xc6>
     33c:	f2 d2       	rcall	.+1508   	; 0x922 <vPortYield>
     33e:	0e 94 97 15 	call	0x2b2e	; 0x2b2e <uxTaskResetEventItemValue>
     342:	6b 01       	movw	r12, r22
     344:	7c 01       	movw	r14, r24
     346:	91 fd       	sbrc	r25, 1
     348:	1f c0       	rjmp	.+62     	; 0x388 <xEventGroupWaitBits+0x110>
     34a:	0f b6       	in	r0, 0x3f	; 63
     34c:	f8 94       	cli
     34e:	0f 92       	push	r0
     350:	c8 80       	ld	r12, Y
     352:	d9 80       	ldd	r13, Y+1	; 0x01
     354:	ea 80       	ldd	r14, Y+2	; 0x02
     356:	fb 80       	ldd	r15, Y+3	; 0x03
     358:	07 2d       	mov	r16, r7
     35a:	a5 01       	movw	r20, r10
     35c:	94 01       	movw	r18, r8
     35e:	c7 01       	movw	r24, r14
     360:	b6 01       	movw	r22, r12
     362:	56 df       	rcall	.-340    	; 0x210 <prvTestWaitCondition>
     364:	88 23       	and	r24, r24
     366:	71 f0       	breq	.+28     	; 0x384 <xEventGroupWaitBits+0x10c>
     368:	66 20       	and	r6, r6
     36a:	61 f0       	breq	.+24     	; 0x384 <xEventGroupWaitBits+0x10c>
     36c:	80 94       	com	r8
     36e:	90 94       	com	r9
     370:	a0 94       	com	r10
     372:	b0 94       	com	r11
     374:	8c 20       	and	r8, r12
     376:	9d 20       	and	r9, r13
     378:	ae 20       	and	r10, r14
     37a:	bf 20       	and	r11, r15
     37c:	88 82       	st	Y, r8
     37e:	99 82       	std	Y+1, r9	; 0x01
     380:	aa 82       	std	Y+2, r10	; 0x02
     382:	bb 82       	std	Y+3, r11	; 0x03
     384:	0f 90       	pop	r0
     386:	0f be       	out	0x3f, r0	; 63
     388:	16 01       	movw	r2, r12
     38a:	27 01       	movw	r4, r14
     38c:	55 24       	eor	r5, r5
     38e:	c2 01       	movw	r24, r4
     390:	b1 01       	movw	r22, r2
     392:	df 91       	pop	r29
     394:	cf 91       	pop	r28
     396:	1f 91       	pop	r17
     398:	0f 91       	pop	r16
     39a:	ff 90       	pop	r15
     39c:	ef 90       	pop	r14
     39e:	df 90       	pop	r13
     3a0:	cf 90       	pop	r12
     3a2:	bf 90       	pop	r11
     3a4:	af 90       	pop	r10
     3a6:	9f 90       	pop	r9
     3a8:	8f 90       	pop	r8
     3aa:	7f 90       	pop	r7
     3ac:	6f 90       	pop	r6
     3ae:	5f 90       	pop	r5
     3b0:	4f 90       	pop	r4
     3b2:	3f 90       	pop	r3
     3b4:	2f 90       	pop	r2
     3b6:	08 95       	ret

000003b8 <xEventGroupSetBits>:
/*-----------------------------------------------------------*/

EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup,
                                const EventBits_t uxBitsToSet )
{
     3b8:	4f 92       	push	r4
     3ba:	5f 92       	push	r5
     3bc:	6f 92       	push	r6
     3be:	7f 92       	push	r7
     3c0:	af 92       	push	r10
     3c2:	bf 92       	push	r11
     3c4:	cf 92       	push	r12
     3c6:	df 92       	push	r13
     3c8:	ef 92       	push	r14
     3ca:	ff 92       	push	r15
     3cc:	0f 93       	push	r16
     3ce:	1f 93       	push	r17
     3d0:	cf 93       	push	r28
     3d2:	df 93       	push	r29
     3d4:	ec 01       	movw	r28, r24
     3d6:	6a 01       	movw	r12, r20
     3d8:	7b 01       	movw	r14, r22
     * itself. */
    configASSERT( xEventGroup );
    configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );

    pxList = &( pxEventBits->xTasksWaitingForBits );
    pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
     3da:	8c 01       	movw	r16, r24
     3dc:	09 5f       	subi	r16, 0xF9	; 249
     3de:	1f 4f       	sbci	r17, 0xFF	; 255
    vTaskSuspendAll();
     3e0:	0e 94 bd 0e 	call	0x1d7a	; 0x1d7a <vTaskSuspendAll>
    {
        traceEVENT_GROUP_SET_BITS( xEventGroup, uxBitsToSet );

        pxListItem = listGET_HEAD_ENTRY( pxList );
     3e4:	eb 85       	ldd	r30, Y+11	; 0x0b
     3e6:	fc 85       	ldd	r31, Y+12	; 0x0c

        /* Set the bits. */
        pxEventBits->uxEventBits |= uxBitsToSet;
     3e8:	88 81       	ld	r24, Y
     3ea:	99 81       	ldd	r25, Y+1	; 0x01
     3ec:	aa 81       	ldd	r26, Y+2	; 0x02
     3ee:	bb 81       	ldd	r27, Y+3	; 0x03
     3f0:	c8 2a       	or	r12, r24
     3f2:	d9 2a       	or	r13, r25
     3f4:	ea 2a       	or	r14, r26
     3f6:	fb 2a       	or	r15, r27
     3f8:	c8 82       	st	Y, r12
     3fa:	d9 82       	std	Y+1, r13	; 0x01
     3fc:	ea 82       	std	Y+2, r14	; 0x02
     3fe:	fb 82       	std	Y+3, r15	; 0x03
                                const EventBits_t uxBitsToSet )
{
    ListItem_t * pxListItem, * pxNext;
    ListItem_t const * pxListEnd;
    List_t const * pxList;
    EventBits_t uxBitsToClear = 0, uxBitsWaitedFor, uxControlBits;
     400:	c1 2c       	mov	r12, r1
     402:	d1 2c       	mov	r13, r1
     404:	76 01       	movw	r14, r12

        /* Set the bits. */
        pxEventBits->uxEventBits |= uxBitsToSet;

        /* See if the new bit value should unblock any tasks. */
        while( pxListItem != pxListEnd )
     406:	3d c0       	rjmp	.+122    	; 0x482 <__LOCK_REGION_LENGTH__+0x82>
        {
            pxNext = listGET_NEXT( pxListItem );
     408:	a4 80       	ldd	r10, Z+4	; 0x04
     40a:	b5 80       	ldd	r11, Z+5	; 0x05
            uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
     40c:	80 81       	ld	r24, Z
     40e:	91 81       	ldd	r25, Z+1	; 0x01
     410:	a2 81       	ldd	r26, Z+2	; 0x02
     412:	b3 81       	ldd	r27, Z+3	; 0x03
            xMatchFound = pdFALSE;

            /* Split the bits waited for from the control bits. */
            uxControlBits = uxBitsWaitedFor & eventEVENT_BITS_CONTROL_BYTES;
            uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
     414:	ac 01       	movw	r20, r24
     416:	bd 01       	movw	r22, r26
     418:	77 27       	eor	r23, r23

            if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
     41a:	b2 fd       	sbrc	r27, 2
     41c:	0e c0       	rjmp	.+28     	; 0x43a <__LOCK_REGION_LENGTH__+0x3a>
            {
                /* Just looking for single bit being set. */
                if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
     41e:	48 80       	ld	r4, Y
     420:	59 80       	ldd	r5, Y+1	; 0x01
     422:	6a 80       	ldd	r6, Y+2	; 0x02
     424:	7b 80       	ldd	r7, Y+3	; 0x03
     426:	44 22       	and	r4, r20
     428:	55 22       	and	r5, r21
     42a:	66 22       	and	r6, r22
     42c:	77 22       	and	r7, r23
     42e:	45 28       	or	r4, r5
     430:	46 28       	or	r4, r6
     432:	47 28       	or	r4, r7
     434:	89 f4       	brne	.+34     	; 0x458 <__LOCK_REGION_LENGTH__+0x58>
        /* See if the new bit value should unblock any tasks. */
        while( pxListItem != pxListEnd )
        {
            pxNext = listGET_NEXT( pxListItem );
            uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
            xMatchFound = pdFALSE;
     436:	20 e0       	ldi	r18, 0x00	; 0
     438:	12 c0       	rjmp	.+36     	; 0x45e <__LOCK_REGION_LENGTH__+0x5e>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }
            }
            else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
     43a:	48 80       	ld	r4, Y
     43c:	59 80       	ldd	r5, Y+1	; 0x01
     43e:	6a 80       	ldd	r6, Y+2	; 0x02
     440:	7b 80       	ldd	r7, Y+3	; 0x03
     442:	44 22       	and	r4, r20
     444:	55 22       	and	r5, r21
     446:	66 22       	and	r6, r22
     448:	77 22       	and	r7, r23
     44a:	44 15       	cp	r20, r4
     44c:	55 05       	cpc	r21, r5
     44e:	66 05       	cpc	r22, r6
     450:	77 05       	cpc	r23, r7
     452:	21 f0       	breq	.+8      	; 0x45c <__LOCK_REGION_LENGTH__+0x5c>
        /* See if the new bit value should unblock any tasks. */
        while( pxListItem != pxListEnd )
        {
            pxNext = listGET_NEXT( pxListItem );
            uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
            xMatchFound = pdFALSE;
     454:	20 e0       	ldi	r18, 0x00	; 0
     456:	03 c0       	rjmp	.+6      	; 0x45e <__LOCK_REGION_LENGTH__+0x5e>
            if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
            {
                /* Just looking for single bit being set. */
                if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
                {
                    xMatchFound = pdTRUE;
     458:	21 e0       	ldi	r18, 0x01	; 1
     45a:	01 c0       	rjmp	.+2      	; 0x45e <__LOCK_REGION_LENGTH__+0x5e>
                }
            }
            else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
            {
                /* All bits are set. */
                xMatchFound = pdTRUE;
     45c:	21 e0       	ldi	r18, 0x01	; 1
            else
            {
                /* Need all bits to be set, but not all the bits were set. */
            }

            if( xMatchFound != pdFALSE )
     45e:	22 23       	and	r18, r18
     460:	71 f0       	breq	.+28     	; 0x47e <__LOCK_REGION_LENGTH__+0x7e>
            {
                /* The bits match.  Should the bits be cleared on exit? */
                if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
     462:	b0 ff       	sbrs	r27, 0
     464:	04 c0       	rjmp	.+8      	; 0x46e <__LOCK_REGION_LENGTH__+0x6e>
                {
                    uxBitsToClear |= uxBitsWaitedFor;
     466:	c4 2a       	or	r12, r20
     468:	d5 2a       	or	r13, r21
     46a:	e6 2a       	or	r14, r22
     46c:	f7 2a       	or	r15, r23
                /* Store the actual event flag value in the task's event list
                 * item before removing the task from the event list.  The
                 * eventUNBLOCKED_DUE_TO_BIT_SET bit is set so the task knows
                 * that is was unblocked due to its required bits matching, rather
                 * than because it timed out. */
                vTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
     46e:	48 81       	ld	r20, Y
     470:	59 81       	ldd	r21, Y+1	; 0x01
     472:	6a 81       	ldd	r22, Y+2	; 0x02
     474:	7b 81       	ldd	r23, Y+3	; 0x03
     476:	72 60       	ori	r23, 0x02	; 2
     478:	cf 01       	movw	r24, r30
     47a:	0e 94 10 13 	call	0x2620	; 0x2620 <vTaskRemoveFromUnorderedEventList>
        /* See if the new bit value should unblock any tasks. */
        while( pxListItem != pxListEnd )
        {
            pxNext = listGET_NEXT( pxListItem );
            uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
            xMatchFound = pdFALSE;
     47e:	ea 2d       	mov	r30, r10
     480:	fb 2d       	mov	r31, r11

        /* Set the bits. */
        pxEventBits->uxEventBits |= uxBitsToSet;

        /* See if the new bit value should unblock any tasks. */
        while( pxListItem != pxListEnd )
     482:	e0 17       	cp	r30, r16
     484:	f1 07       	cpc	r31, r17
     486:	09 f0       	breq	.+2      	; 0x48a <__LOCK_REGION_LENGTH__+0x8a>
     488:	bf cf       	rjmp	.-130    	; 0x408 <__LOCK_REGION_LENGTH__+0x8>
            pxListItem = pxNext;
        }

        /* Clear any bits that matched when the eventCLEAR_EVENTS_ON_EXIT_BIT
         * bit was set in the control word. */
        pxEventBits->uxEventBits &= ~uxBitsToClear;
     48a:	c0 94       	com	r12
     48c:	d0 94       	com	r13
     48e:	e0 94       	com	r14
     490:	f0 94       	com	r15
     492:	88 81       	ld	r24, Y
     494:	99 81       	ldd	r25, Y+1	; 0x01
     496:	aa 81       	ldd	r26, Y+2	; 0x02
     498:	bb 81       	ldd	r27, Y+3	; 0x03
     49a:	c8 22       	and	r12, r24
     49c:	d9 22       	and	r13, r25
     49e:	ea 22       	and	r14, r26
     4a0:	fb 22       	and	r15, r27
     4a2:	c8 82       	st	Y, r12
     4a4:	d9 82       	std	Y+1, r13	; 0x01
     4a6:	ea 82       	std	Y+2, r14	; 0x02
     4a8:	fb 82       	std	Y+3, r15	; 0x03
    }
    ( void ) xTaskResumeAll();
     4aa:	0e 94 fd 0f 	call	0x1ffa	; 0x1ffa <xTaskResumeAll>

    return pxEventBits->uxEventBits;
     4ae:	68 81       	ld	r22, Y
     4b0:	79 81       	ldd	r23, Y+1	; 0x01
     4b2:	8a 81       	ldd	r24, Y+2	; 0x02
     4b4:	9b 81       	ldd	r25, Y+3	; 0x03
}
     4b6:	df 91       	pop	r29
     4b8:	cf 91       	pop	r28
     4ba:	1f 91       	pop	r17
     4bc:	0f 91       	pop	r16
     4be:	ff 90       	pop	r15
     4c0:	ef 90       	pop	r14
     4c2:	df 90       	pop	r13
     4c4:	cf 90       	pop	r12
     4c6:	bf 90       	pop	r11
     4c8:	af 90       	pop	r10
     4ca:	7f 90       	pop	r7
     4cc:	6f 90       	pop	r6
     4ce:	5f 90       	pop	r5
     4d0:	4f 90       	pop	r4
     4d2:	08 95       	ret

000004d4 <prvHeapInit>:

    pucAlignedHeap = ( uint8_t * ) uxAddress;

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
     4d4:	e8 ee       	ldi	r30, 0xE8	; 232
     4d6:	f8 e0       	ldi	r31, 0x08	; 8
     4d8:	ac ee       	ldi	r26, 0xEC	; 236
     4da:	b8 e0       	ldi	r27, 0x08	; 8
     4dc:	b1 83       	std	Z+1, r27	; 0x01
     4de:	a0 83       	st	Z, r26
    xStart.xBlockSize = ( size_t ) 0;
     4e0:	13 82       	std	Z+3, r1	; 0x03
     4e2:	12 82       	std	Z+2, r1	; 0x02

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
    uxAddress -= xHeapStructSize;
     4e4:	e4 e9       	ldi	r30, 0x94	; 148
     4e6:	f6 e1       	ldi	r31, 0x16	; 22
    uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
    pxEnd = ( void * ) uxAddress;
     4e8:	f0 93 e7 08 	sts	0x08E7, r31	; 0x8008e7 <pxEnd+0x1>
     4ec:	e0 93 e6 08 	sts	0x08E6, r30	; 0x8008e6 <pxEnd>
    pxEnd->xBlockSize = 0;
     4f0:	13 82       	std	Z+3, r1	; 0x03
     4f2:	12 82       	std	Z+2, r1	; 0x02
    pxEnd->pxNextFreeBlock = NULL;
     4f4:	11 82       	std	Z+1, r1	; 0x01
     4f6:	10 82       	st	Z, r1

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( void * ) pucAlignedHeap;
    pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
     4f8:	88 ea       	ldi	r24, 0xA8	; 168
     4fa:	9d e0       	ldi	r25, 0x0D	; 13
     4fc:	13 96       	adiw	r26, 0x03	; 3
     4fe:	9c 93       	st	X, r25
     500:	8e 93       	st	-X, r24
     502:	12 97       	sbiw	r26, 0x02	; 2
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
     504:	ed 93       	st	X+, r30
     506:	fc 93       	st	X, r31

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
     508:	90 93 e3 08 	sts	0x08E3, r25	; 0x8008e3 <xMinimumEverFreeBytesRemaining+0x1>
     50c:	80 93 e2 08 	sts	0x08E2, r24	; 0x8008e2 <xMinimumEverFreeBytesRemaining>
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
     510:	90 93 e5 08 	sts	0x08E5, r25	; 0x8008e5 <xFreeBytesRemaining+0x1>
     514:	80 93 e4 08 	sts	0x08E4, r24	; 0x8008e4 <xFreeBytesRemaining>

    /* Work out the position of the top bit in a size_t variable. */
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
     518:	80 e0       	ldi	r24, 0x00	; 0
     51a:	90 e8       	ldi	r25, 0x80	; 128
     51c:	90 93 dd 08 	sts	0x08DD, r25	; 0x8008dd <__data_end+0x1>
     520:	80 93 dc 08 	sts	0x08DC, r24	; 0x8008dc <__data_end>
     524:	08 95       	ret

00000526 <prvInsertBlockIntoFreeList>:
}
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
     526:	cf 93       	push	r28
     528:	df 93       	push	r29
     52a:	ec 01       	movw	r28, r24
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
     52c:	a8 ee       	ldi	r26, 0xE8	; 232
     52e:	b8 e0       	ldi	r27, 0x08	; 8
     530:	01 c0       	rjmp	.+2      	; 0x534 <prvInsertBlockIntoFreeList+0xe>
     532:	df 01       	movw	r26, r30
     534:	ed 91       	ld	r30, X+
     536:	fc 91       	ld	r31, X
     538:	11 97       	sbiw	r26, 0x01	; 1
     53a:	ec 17       	cp	r30, r28
     53c:	fd 07       	cpc	r31, r29
     53e:	c8 f3       	brcs	.-14     	; 0x532 <prvInsertBlockIntoFreeList+0xc>

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
     540:	12 96       	adiw	r26, 0x02	; 2
     542:	8d 91       	ld	r24, X+
     544:	9c 91       	ld	r25, X
     546:	13 97       	sbiw	r26, 0x03	; 3
     548:	9d 01       	movw	r18, r26
     54a:	28 0f       	add	r18, r24
     54c:	39 1f       	adc	r19, r25
     54e:	c2 17       	cp	r28, r18
     550:	d3 07       	cpc	r29, r19
     552:	49 f4       	brne	.+18     	; 0x566 <prvInsertBlockIntoFreeList+0x40>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
     554:	2a 81       	ldd	r18, Y+2	; 0x02
     556:	3b 81       	ldd	r19, Y+3	; 0x03
     558:	82 0f       	add	r24, r18
     55a:	93 1f       	adc	r25, r19
     55c:	13 96       	adiw	r26, 0x03	; 3
     55e:	9c 93       	st	X, r25
     560:	8e 93       	st	-X, r24
     562:	12 97       	sbiw	r26, 0x02	; 2
        pxBlockToInsert = pxIterator;
     564:	ed 01       	movw	r28, r26

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
     566:	8a 81       	ldd	r24, Y+2	; 0x02
     568:	9b 81       	ldd	r25, Y+3	; 0x03
     56a:	9e 01       	movw	r18, r28
     56c:	28 0f       	add	r18, r24
     56e:	39 1f       	adc	r19, r25
     570:	e2 17       	cp	r30, r18
     572:	f3 07       	cpc	r31, r19
     574:	c1 f4       	brne	.+48     	; 0x5a6 <prvInsertBlockIntoFreeList+0x80>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
     576:	20 91 e6 08 	lds	r18, 0x08E6	; 0x8008e6 <pxEnd>
     57a:	30 91 e7 08 	lds	r19, 0x08E7	; 0x8008e7 <pxEnd+0x1>
     57e:	e2 17       	cp	r30, r18
     580:	f3 07       	cpc	r31, r19
     582:	71 f0       	breq	.+28     	; 0x5a0 <prvInsertBlockIntoFreeList+0x7a>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
     584:	22 81       	ldd	r18, Z+2	; 0x02
     586:	33 81       	ldd	r19, Z+3	; 0x03
     588:	82 0f       	add	r24, r18
     58a:	93 1f       	adc	r25, r19
     58c:	9b 83       	std	Y+3, r25	; 0x03
     58e:	8a 83       	std	Y+2, r24	; 0x02
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
     590:	ed 91       	ld	r30, X+
     592:	fc 91       	ld	r31, X
     594:	11 97       	sbiw	r26, 0x01	; 1
     596:	80 81       	ld	r24, Z
     598:	91 81       	ldd	r25, Z+1	; 0x01
     59a:	99 83       	std	Y+1, r25	; 0x01
     59c:	88 83       	st	Y, r24
     59e:	05 c0       	rjmp	.+10     	; 0x5aa <prvInsertBlockIntoFreeList+0x84>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
     5a0:	39 83       	std	Y+1, r19	; 0x01
     5a2:	28 83       	st	Y, r18
     5a4:	02 c0       	rjmp	.+4      	; 0x5aa <prvInsertBlockIntoFreeList+0x84>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
     5a6:	f9 83       	std	Y+1, r31	; 0x01
     5a8:	e8 83       	st	Y, r30

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
     5aa:	ca 17       	cp	r28, r26
     5ac:	db 07       	cpc	r29, r27
     5ae:	11 f0       	breq	.+4      	; 0x5b4 <prvInsertBlockIntoFreeList+0x8e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
     5b0:	cd 93       	st	X+, r28
     5b2:	dc 93       	st	X, r29
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
     5b4:	df 91       	pop	r29
     5b6:	cf 91       	pop	r28
     5b8:	08 95       	ret

000005ba <pvPortMalloc>:
PRIVILEGED_DATA static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
     5ba:	ef 92       	push	r14
     5bc:	ff 92       	push	r15
     5be:	0f 93       	push	r16
     5c0:	1f 93       	push	r17
     5c2:	cf 93       	push	r28
     5c4:	df 93       	push	r29
     5c6:	8c 01       	movw	r16, r24
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;

    vTaskSuspendAll();
     5c8:	0e 94 bd 0e 	call	0x1d7a	; 0x1d7a <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
     5cc:	80 91 e6 08 	lds	r24, 0x08E6	; 0x8008e6 <pxEnd>
     5d0:	90 91 e7 08 	lds	r25, 0x08E7	; 0x8008e7 <pxEnd+0x1>
     5d4:	89 2b       	or	r24, r25
     5d6:	09 f4       	brne	.+2      	; 0x5da <pvPortMalloc+0x20>
        {
            prvHeapInit();
     5d8:	7d df       	rcall	.-262    	; 0x4d4 <prvHeapInit>

        /* Check the requested block size is not so large that the top bit is
         * set.  The top bit of the block size member of the BlockLink_t structure
         * is used to determine who owns the block - the application or the
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
     5da:	80 91 dc 08 	lds	r24, 0x08DC	; 0x8008dc <__data_end>
     5de:	90 91 dd 08 	lds	r25, 0x08DD	; 0x8008dd <__data_end+0x1>
     5e2:	80 23       	and	r24, r16
     5e4:	91 23       	and	r25, r17
     5e6:	89 2b       	or	r24, r25
     5e8:	09 f0       	breq	.+2      	; 0x5ec <pvPortMalloc+0x32>
     5ea:	76 c0       	rjmp	.+236    	; 0x6d8 <pvPortMalloc+0x11e>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
     5ec:	01 15       	cp	r16, r1
     5ee:	11 05       	cpc	r17, r1
     5f0:	49 f0       	breq	.+18     	; 0x604 <pvPortMalloc+0x4a>
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
     5f2:	c8 01       	movw	r24, r16
     5f4:	04 96       	adiw	r24, 0x04	; 4
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
     5f6:	08 17       	cp	r16, r24
     5f8:	19 07       	cpc	r17, r25
     5fa:	18 f0       	brcs	.+6      	; 0x602 <pvPortMalloc+0x48>
                    mtCOVERAGE_TEST_MARKER();
                }
            } 
            else 
            {
                xWantedSize = 0;
     5fc:	00 e0       	ldi	r16, 0x00	; 0
     5fe:	10 e0       	ldi	r17, 0x00	; 0
     600:	01 c0       	rjmp	.+2      	; 0x604 <pvPortMalloc+0x4a>
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
            {
                xWantedSize += xHeapStructSize;
     602:	8c 01       	movw	r16, r24
            else 
            {
                xWantedSize = 0;
            }

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
     604:	01 15       	cp	r16, r1
     606:	11 05       	cpc	r17, r1
     608:	09 f4       	brne	.+2      	; 0x60c <pvPortMalloc+0x52>
     60a:	69 c0       	rjmp	.+210    	; 0x6de <pvPortMalloc+0x124>
     60c:	80 91 e4 08 	lds	r24, 0x08E4	; 0x8008e4 <xFreeBytesRemaining>
     610:	90 91 e5 08 	lds	r25, 0x08E5	; 0x8008e5 <xFreeBytesRemaining+0x1>
     614:	80 17       	cp	r24, r16
     616:	91 07       	cpc	r25, r17
     618:	08 f4       	brcc	.+2      	; 0x61c <pvPortMalloc+0x62>
     61a:	64 c0       	rjmp	.+200    	; 0x6e4 <pvPortMalloc+0x12a>
            {
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
                pxBlock = xStart.pxNextFreeBlock;
     61c:	c0 91 e8 08 	lds	r28, 0x08E8	; 0x8008e8 <xStart>
     620:	d0 91 e9 08 	lds	r29, 0x08E9	; 0x8008e9 <xStart+0x1>

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
            {
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
     624:	e8 ee       	ldi	r30, 0xE8	; 232
     626:	f8 e0       	ldi	r31, 0x08	; 8
                pxBlock = xStart.pxNextFreeBlock;

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
     628:	02 c0       	rjmp	.+4      	; 0x62e <pvPortMalloc+0x74>
                {
                    pxPreviousBlock = pxBlock;
     62a:	fe 01       	movw	r30, r28
                    pxBlock = pxBlock->pxNextFreeBlock;
     62c:	ec 01       	movw	r28, r24
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
                pxBlock = xStart.pxNextFreeBlock;

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
     62e:	8a 81       	ldd	r24, Y+2	; 0x02
     630:	9b 81       	ldd	r25, Y+3	; 0x03
     632:	80 17       	cp	r24, r16
     634:	91 07       	cpc	r25, r17
     636:	20 f4       	brcc	.+8      	; 0x640 <pvPortMalloc+0x86>
     638:	88 81       	ld	r24, Y
     63a:	99 81       	ldd	r25, Y+1	; 0x01
     63c:	00 97       	sbiw	r24, 0x00	; 0
     63e:	a9 f7       	brne	.-22     	; 0x62a <pvPortMalloc+0x70>
                    pxBlock = pxBlock->pxNextFreeBlock;
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
     640:	80 91 e6 08 	lds	r24, 0x08E6	; 0x8008e6 <pxEnd>
     644:	90 91 e7 08 	lds	r25, 0x08E7	; 0x8008e7 <pxEnd+0x1>
     648:	c8 17       	cp	r28, r24
     64a:	d9 07       	cpc	r29, r25
     64c:	09 f4       	brne	.+2      	; 0x650 <pvPortMalloc+0x96>
     64e:	4d c0       	rjmp	.+154    	; 0x6ea <pvPortMalloc+0x130>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
     650:	e0 80       	ld	r14, Z
     652:	f1 80       	ldd	r15, Z+1	; 0x01
     654:	84 e0       	ldi	r24, 0x04	; 4
     656:	e8 0e       	add	r14, r24
     658:	f1 1c       	adc	r15, r1

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
     65a:	88 81       	ld	r24, Y
     65c:	99 81       	ldd	r25, Y+1	; 0x01
     65e:	91 83       	std	Z+1, r25	; 0x01
     660:	80 83       	st	Z, r24

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
     662:	2a 81       	ldd	r18, Y+2	; 0x02
     664:	3b 81       	ldd	r19, Y+3	; 0x03
     666:	20 1b       	sub	r18, r16
     668:	31 0b       	sbc	r19, r17
     66a:	29 30       	cpi	r18, 0x09	; 9
     66c:	31 05       	cpc	r19, r1
     66e:	48 f0       	brcs	.+18     	; 0x682 <pvPortMalloc+0xc8>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
     670:	ce 01       	movw	r24, r28
     672:	80 0f       	add	r24, r16
     674:	91 1f       	adc	r25, r17
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
     676:	fc 01       	movw	r30, r24
     678:	33 83       	std	Z+3, r19	; 0x03
     67a:	22 83       	std	Z+2, r18	; 0x02
                        pxBlock->xBlockSize = xWantedSize;
     67c:	1b 83       	std	Y+3, r17	; 0x03

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
     67e:	0a 83       	std	Y+2, r16	; 0x02
     680:	52 df       	rcall	.-348    	; 0x526 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
     682:	2a 81       	ldd	r18, Y+2	; 0x02
     684:	3b 81       	ldd	r19, Y+3	; 0x03
     686:	80 91 e4 08 	lds	r24, 0x08E4	; 0x8008e4 <xFreeBytesRemaining>
     68a:	90 91 e5 08 	lds	r25, 0x08E5	; 0x8008e5 <xFreeBytesRemaining+0x1>
     68e:	82 1b       	sub	r24, r18
     690:	93 0b       	sbc	r25, r19
     692:	90 93 e5 08 	sts	0x08E5, r25	; 0x8008e5 <xFreeBytesRemaining+0x1>
     696:	80 93 e4 08 	sts	0x08E4, r24	; 0x8008e4 <xFreeBytesRemaining>

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
     69a:	40 91 e2 08 	lds	r20, 0x08E2	; 0x8008e2 <xMinimumEverFreeBytesRemaining>
     69e:	50 91 e3 08 	lds	r21, 0x08E3	; 0x8008e3 <xMinimumEverFreeBytesRemaining+0x1>
     6a2:	84 17       	cp	r24, r20
     6a4:	95 07       	cpc	r25, r21
     6a6:	20 f4       	brcc	.+8      	; 0x6b0 <pvPortMalloc+0xf6>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
     6a8:	90 93 e3 08 	sts	0x08E3, r25	; 0x8008e3 <xMinimumEverFreeBytesRemaining+0x1>
     6ac:	80 93 e2 08 	sts	0x08E2, r24	; 0x8008e2 <xMinimumEverFreeBytesRemaining>
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    pxBlock->xBlockSize |= xBlockAllocatedBit;
     6b0:	80 91 dc 08 	lds	r24, 0x08DC	; 0x8008dc <__data_end>
     6b4:	90 91 dd 08 	lds	r25, 0x08DD	; 0x8008dd <__data_end+0x1>
     6b8:	28 2b       	or	r18, r24
     6ba:	39 2b       	or	r19, r25
     6bc:	3b 83       	std	Y+3, r19	; 0x03
     6be:	2a 83       	std	Y+2, r18	; 0x02
                    pxBlock->pxNextFreeBlock = NULL;
     6c0:	19 82       	std	Y+1, r1	; 0x01
     6c2:	18 82       	st	Y, r1
                    xNumberOfSuccessfulAllocations++;
     6c4:	80 91 e0 08 	lds	r24, 0x08E0	; 0x8008e0 <xNumberOfSuccessfulAllocations>
     6c8:	90 91 e1 08 	lds	r25, 0x08E1	; 0x8008e1 <xNumberOfSuccessfulAllocations+0x1>
     6cc:	01 96       	adiw	r24, 0x01	; 1
     6ce:	90 93 e1 08 	sts	0x08E1, r25	; 0x8008e1 <xNumberOfSuccessfulAllocations+0x1>
     6d2:	80 93 e0 08 	sts	0x08E0, r24	; 0x8008e0 <xNumberOfSuccessfulAllocations>
     6d6:	0b c0       	rjmp	.+22     	; 0x6ee <pvPortMalloc+0x134>
/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;
     6d8:	e1 2c       	mov	r14, r1
     6da:	f1 2c       	mov	r15, r1
     6dc:	08 c0       	rjmp	.+16     	; 0x6ee <pvPortMalloc+0x134>
     6de:	e1 2c       	mov	r14, r1
     6e0:	f1 2c       	mov	r15, r1
     6e2:	05 c0       	rjmp	.+10     	; 0x6ee <pvPortMalloc+0x134>
     6e4:	e1 2c       	mov	r14, r1
     6e6:	f1 2c       	mov	r15, r1
     6e8:	02 c0       	rjmp	.+4      	; 0x6ee <pvPortMalloc+0x134>
     6ea:	e1 2c       	mov	r14, r1
     6ec:	f1 2c       	mov	r15, r1
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
     6ee:	0e 94 fd 0f 	call	0x1ffa	; 0x1ffa <xTaskResumeAll>

    #if ( configUSE_MALLOC_FAILED_HOOK == 1 )
        {
            if( pvReturn == NULL )
     6f2:	e1 14       	cp	r14, r1
     6f4:	f1 04       	cpc	r15, r1
     6f6:	11 f4       	brne	.+4      	; 0x6fc <pvPortMalloc+0x142>
            {
                extern void vApplicationMallocFailedHook( void );
                vApplicationMallocFailedHook();
     6f8:	0e 94 ba 1b 	call	0x3774	; 0x3774 <vApplicationMallocFailedHook>
        }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
    return pvReturn;
}
     6fc:	c7 01       	movw	r24, r14
     6fe:	df 91       	pop	r29
     700:	cf 91       	pop	r28
     702:	1f 91       	pop	r17
     704:	0f 91       	pop	r16
     706:	ff 90       	pop	r15
     708:	ef 90       	pop	r14
     70a:	08 95       	ret

0000070c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
     70c:	0f 93       	push	r16
     70e:	1f 93       	push	r17
     710:	cf 93       	push	r28
     712:	df 93       	push	r29
    uint8_t * puc = ( uint8_t * ) pv;
    BlockLink_t * pxLink;

    if( pv != NULL )
     714:	00 97       	sbiw	r24, 0x00	; 0
     716:	91 f1       	breq	.+100    	; 0x77c <vPortFree+0x70>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
     718:	ec 01       	movw	r28, r24
     71a:	24 97       	sbiw	r28, 0x04	; 4

        /* Check the block is actually allocated. */
        configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
        configASSERT( pxLink->pxNextFreeBlock == NULL );

        if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
     71c:	4a 81       	ldd	r20, Y+2	; 0x02
     71e:	5b 81       	ldd	r21, Y+3	; 0x03
     720:	20 91 dc 08 	lds	r18, 0x08DC	; 0x8008dc <__data_end>
     724:	30 91 dd 08 	lds	r19, 0x08DD	; 0x8008dd <__data_end+0x1>
     728:	ba 01       	movw	r22, r20
     72a:	62 23       	and	r22, r18
     72c:	73 23       	and	r23, r19
     72e:	67 2b       	or	r22, r23
     730:	29 f1       	breq	.+74     	; 0x77c <vPortFree+0x70>
        {
            if( pxLink->pxNextFreeBlock == NULL )
     732:	68 81       	ld	r22, Y
     734:	79 81       	ldd	r23, Y+1	; 0x01
     736:	67 2b       	or	r22, r23
     738:	09 f5       	brne	.+66     	; 0x77c <vPortFree+0x70>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                pxLink->xBlockSize &= ~xBlockAllocatedBit;
     73a:	20 95       	com	r18
     73c:	30 95       	com	r19
     73e:	24 23       	and	r18, r20
     740:	35 23       	and	r19, r21
     742:	3b 83       	std	Y+3, r19	; 0x03
     744:	2a 83       	std	Y+2, r18	; 0x02

                vTaskSuspendAll();
     746:	0e 94 bd 0e 	call	0x1d7a	; 0x1d7a <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
     74a:	8a 81       	ldd	r24, Y+2	; 0x02
     74c:	9b 81       	ldd	r25, Y+3	; 0x03
     74e:	20 91 e4 08 	lds	r18, 0x08E4	; 0x8008e4 <xFreeBytesRemaining>
     752:	30 91 e5 08 	lds	r19, 0x08E5	; 0x8008e5 <xFreeBytesRemaining+0x1>
     756:	82 0f       	add	r24, r18
     758:	93 1f       	adc	r25, r19
     75a:	90 93 e5 08 	sts	0x08E5, r25	; 0x8008e5 <xFreeBytesRemaining+0x1>
     75e:	80 93 e4 08 	sts	0x08E4, r24	; 0x8008e4 <xFreeBytesRemaining>
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
     762:	ce 01       	movw	r24, r28
     764:	e0 de       	rcall	.-576    	; 0x526 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
     766:	80 91 de 08 	lds	r24, 0x08DE	; 0x8008de <xNumberOfSuccessfulFrees>
     76a:	90 91 df 08 	lds	r25, 0x08DF	; 0x8008df <xNumberOfSuccessfulFrees+0x1>
     76e:	01 96       	adiw	r24, 0x01	; 1
     770:	90 93 df 08 	sts	0x08DF, r25	; 0x8008df <xNumberOfSuccessfulFrees+0x1>
     774:	80 93 de 08 	sts	0x08DE, r24	; 0x8008de <xNumberOfSuccessfulFrees>
                }
                ( void ) xTaskResumeAll();
     778:	0e 94 fd 0f 	call	0x1ffa	; 0x1ffa <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
     77c:	df 91       	pop	r29
     77e:	cf 91       	pop	r28
     780:	1f 91       	pop	r17
     782:	0f 91       	pop	r16
     784:	08 95       	ret

00000786 <vListInitialise>:

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;

    ( pxList->uxNumberOfItems )++;
}
     786:	fc 01       	movw	r30, r24
     788:	03 96       	adiw	r24, 0x03	; 3
     78a:	92 83       	std	Z+2, r25	; 0x02
     78c:	81 83       	std	Z+1, r24	; 0x01
     78e:	4f ef       	ldi	r20, 0xFF	; 255
     790:	5f ef       	ldi	r21, 0xFF	; 255
     792:	ba 01       	movw	r22, r20
     794:	43 83       	std	Z+3, r20	; 0x03
     796:	54 83       	std	Z+4, r21	; 0x04
     798:	65 83       	std	Z+5, r22	; 0x05
     79a:	76 83       	std	Z+6, r23	; 0x06
     79c:	90 87       	std	Z+8, r25	; 0x08
     79e:	87 83       	std	Z+7, r24	; 0x07
     7a0:	92 87       	std	Z+10, r25	; 0x0a
     7a2:	81 87       	std	Z+9, r24	; 0x09
     7a4:	10 82       	st	Z, r1
     7a6:	08 95       	ret

000007a8 <vListInitialiseItem>:
     7a8:	fc 01       	movw	r30, r24
     7aa:	13 86       	std	Z+11, r1	; 0x0b
     7ac:	12 86       	std	Z+10, r1	; 0x0a
     7ae:	08 95       	ret

000007b0 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
     7b0:	0f 93       	push	r16
     7b2:	1f 93       	push	r17
     7b4:	cf 93       	push	r28
     7b6:	df 93       	push	r29
     7b8:	eb 01       	movw	r28, r22
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
     7ba:	08 81       	ld	r16, Y
     7bc:	19 81       	ldd	r17, Y+1	; 0x01
     7be:	2a 81       	ldd	r18, Y+2	; 0x02
     7c0:	3b 81       	ldd	r19, Y+3	; 0x03
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
     7c2:	0f 3f       	cpi	r16, 0xFF	; 255
     7c4:	4f ef       	ldi	r20, 0xFF	; 255
     7c6:	14 07       	cpc	r17, r20
     7c8:	24 07       	cpc	r18, r20
     7ca:	34 07       	cpc	r19, r20
     7cc:	21 f4       	brne	.+8      	; 0x7d6 <vListInsert+0x26>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
     7ce:	fc 01       	movw	r30, r24
     7d0:	a1 85       	ldd	r26, Z+9	; 0x09
     7d2:	b2 85       	ldd	r27, Z+10	; 0x0a
     7d4:	11 c0       	rjmp	.+34     	; 0x7f8 <vListInsert+0x48>
        *   4) Using a queue or semaphore before it has been initialised or
        *      before the scheduler has been started (are interrupts firing
        *      before vTaskStartScheduler() has been called?).
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
     7d6:	dc 01       	movw	r26, r24
     7d8:	13 96       	adiw	r26, 0x03	; 3
     7da:	01 c0       	rjmp	.+2      	; 0x7de <vListInsert+0x2e>
     7dc:	df 01       	movw	r26, r30
     7de:	14 96       	adiw	r26, 0x04	; 4
     7e0:	ed 91       	ld	r30, X+
     7e2:	fc 91       	ld	r31, X
     7e4:	15 97       	sbiw	r26, 0x05	; 5
     7e6:	40 81       	ld	r20, Z
     7e8:	51 81       	ldd	r21, Z+1	; 0x01
     7ea:	62 81       	ldd	r22, Z+2	; 0x02
     7ec:	73 81       	ldd	r23, Z+3	; 0x03
     7ee:	04 17       	cp	r16, r20
     7f0:	15 07       	cpc	r17, r21
     7f2:	26 07       	cpc	r18, r22
     7f4:	37 07       	cpc	r19, r23
     7f6:	90 f7       	brcc	.-28     	; 0x7dc <vListInsert+0x2c>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
     7f8:	14 96       	adiw	r26, 0x04	; 4
     7fa:	ed 91       	ld	r30, X+
     7fc:	fc 91       	ld	r31, X
     7fe:	15 97       	sbiw	r26, 0x05	; 5
     800:	fd 83       	std	Y+5, r31	; 0x05
     802:	ec 83       	std	Y+4, r30	; 0x04
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
     804:	d7 83       	std	Z+7, r29	; 0x07
     806:	c6 83       	std	Z+6, r28	; 0x06
    pxNewListItem->pxPrevious = pxIterator;
     808:	bf 83       	std	Y+7, r27	; 0x07
     80a:	ae 83       	std	Y+6, r26	; 0x06
    pxIterator->pxNext = pxNewListItem;
     80c:	15 96       	adiw	r26, 0x05	; 5
     80e:	dc 93       	st	X, r29
     810:	ce 93       	st	-X, r28
     812:	14 97       	sbiw	r26, 0x04	; 4

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
     814:	9b 87       	std	Y+11, r25	; 0x0b
     816:	8a 87       	std	Y+10, r24	; 0x0a

    ( pxList->uxNumberOfItems )++;
     818:	fc 01       	movw	r30, r24
     81a:	20 81       	ld	r18, Z
     81c:	2f 5f       	subi	r18, 0xFF	; 255
     81e:	20 83       	st	Z, r18
}
     820:	df 91       	pop	r29
     822:	cf 91       	pop	r28
     824:	1f 91       	pop	r17
     826:	0f 91       	pop	r16
     828:	08 95       	ret

0000082a <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
     82a:	cf 93       	push	r28
     82c:	df 93       	push	r29
     82e:	fc 01       	movw	r30, r24
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
     830:	a2 85       	ldd	r26, Z+10	; 0x0a
     832:	b3 85       	ldd	r27, Z+11	; 0x0b

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
     834:	c4 81       	ldd	r28, Z+4	; 0x04
     836:	d5 81       	ldd	r29, Z+5	; 0x05
     838:	86 81       	ldd	r24, Z+6	; 0x06
     83a:	97 81       	ldd	r25, Z+7	; 0x07
     83c:	9f 83       	std	Y+7, r25	; 0x07
     83e:	8e 83       	std	Y+6, r24	; 0x06
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
     840:	c6 81       	ldd	r28, Z+6	; 0x06
     842:	d7 81       	ldd	r29, Z+7	; 0x07
     844:	84 81       	ldd	r24, Z+4	; 0x04
     846:	95 81       	ldd	r25, Z+5	; 0x05
     848:	9d 83       	std	Y+5, r25	; 0x05
     84a:	8c 83       	std	Y+4, r24	; 0x04

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
     84c:	11 96       	adiw	r26, 0x01	; 1
     84e:	8d 91       	ld	r24, X+
     850:	9c 91       	ld	r25, X
     852:	12 97       	sbiw	r26, 0x02	; 2
     854:	e8 17       	cp	r30, r24
     856:	f9 07       	cpc	r31, r25
     858:	31 f4       	brne	.+12     	; 0x866 <uxListRemove+0x3c>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
     85a:	86 81       	ldd	r24, Z+6	; 0x06
     85c:	97 81       	ldd	r25, Z+7	; 0x07
     85e:	12 96       	adiw	r26, 0x02	; 2
     860:	9c 93       	st	X, r25
     862:	8e 93       	st	-X, r24
     864:	11 97       	sbiw	r26, 0x01	; 1
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
     866:	13 86       	std	Z+11, r1	; 0x0b
     868:	12 86       	std	Z+10, r1	; 0x0a
    ( pxList->uxNumberOfItems )--;
     86a:	8c 91       	ld	r24, X
     86c:	81 50       	subi	r24, 0x01	; 1
     86e:	8c 93       	st	X, r24

    return pxList->uxNumberOfItems;
     870:	8c 91       	ld	r24, X
}
     872:	df 91       	pop	r29
     874:	cf 91       	pop	r28
     876:	08 95       	ret

00000878 <prvSetupTimerInterrupt>:
{
    portSAVE_CONTEXT();
    vTaskSwitchContext();
    portRESTORE_CONTEXT();

    __asm__ __volatile__ ( "reti" );
     878:	a8 95       	wdr
     87a:	90 ec       	ldi	r25, 0xC0	; 192
     87c:	88 e1       	ldi	r24, 0x18	; 24
     87e:	0f b6       	in	r0, 0x3f	; 63
     880:	f8 94       	cli
     882:	a8 95       	wdr
     884:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7c0060>
     888:	0f be       	out	0x3f, r0	; 63
     88a:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__TEXT_REGION_LENGTH__+0x7c0060>
     88e:	08 95       	ret

00000890 <pxPortInitialiseStack>:
     890:	fc 01       	movw	r30, r24
     892:	60 83       	st	Z, r22
     894:	31 97       	sbiw	r30, 0x01	; 1
     896:	70 83       	st	Z, r23
     898:	31 97       	sbiw	r30, 0x01	; 1
     89a:	10 82       	st	Z, r1
     89c:	31 97       	sbiw	r30, 0x01	; 1
     89e:	10 82       	st	Z, r1
     8a0:	31 97       	sbiw	r30, 0x01	; 1
     8a2:	20 e8       	ldi	r18, 0x80	; 128
     8a4:	20 83       	st	Z, r18
     8a6:	31 97       	sbiw	r30, 0x01	; 1
     8a8:	10 82       	st	Z, r1
     8aa:	31 97       	sbiw	r30, 0x01	; 1
     8ac:	10 82       	st	Z, r1
     8ae:	31 97       	sbiw	r30, 0x01	; 1
     8b0:	10 82       	st	Z, r1
     8b2:	77 97       	sbiw	r30, 0x17	; 23
     8b4:	40 83       	st	Z, r20
     8b6:	31 97       	sbiw	r30, 0x01	; 1
     8b8:	50 83       	st	Z, r21
     8ba:	86 97       	sbiw	r24, 0x26	; 38
     8bc:	08 95       	ret

000008be <xPortStartScheduler>:
     8be:	dc df       	rcall	.-72     	; 0x878 <prvSetupTimerInterrupt>
     8c0:	a0 91 57 17 	lds	r26, 0x1757	; 0x801757 <pxCurrentTCB>
     8c4:	b0 91 58 17 	lds	r27, 0x1758	; 0x801758 <pxCurrentTCB+0x1>
     8c8:	cd 91       	ld	r28, X+
     8ca:	cd bf       	out	0x3d, r28	; 61
     8cc:	dd 91       	ld	r29, X+
     8ce:	de bf       	out	0x3e, r29	; 62
     8d0:	ff 91       	pop	r31
     8d2:	ef 91       	pop	r30
     8d4:	df 91       	pop	r29
     8d6:	cf 91       	pop	r28
     8d8:	bf 91       	pop	r27
     8da:	af 91       	pop	r26
     8dc:	9f 91       	pop	r25
     8de:	8f 91       	pop	r24
     8e0:	7f 91       	pop	r23
     8e2:	6f 91       	pop	r22
     8e4:	5f 91       	pop	r21
     8e6:	4f 91       	pop	r20
     8e8:	3f 91       	pop	r19
     8ea:	2f 91       	pop	r18
     8ec:	1f 91       	pop	r17
     8ee:	0f 91       	pop	r16
     8f0:	ff 90       	pop	r15
     8f2:	ef 90       	pop	r14
     8f4:	df 90       	pop	r13
     8f6:	cf 90       	pop	r12
     8f8:	bf 90       	pop	r11
     8fa:	af 90       	pop	r10
     8fc:	9f 90       	pop	r9
     8fe:	8f 90       	pop	r8
     900:	7f 90       	pop	r7
     902:	6f 90       	pop	r6
     904:	5f 90       	pop	r5
     906:	4f 90       	pop	r4
     908:	3f 90       	pop	r3
     90a:	2f 90       	pop	r2
     90c:	1f 90       	pop	r1
     90e:	0f 90       	pop	r0
     910:	0c be       	out	0x3c, r0	; 60
     912:	0f 90       	pop	r0
     914:	0b be       	out	0x3b, r0	; 59
     916:	0f 90       	pop	r0
     918:	0f be       	out	0x3f, r0	; 63
     91a:	0f 90       	pop	r0
     91c:	08 95       	ret
     91e:	81 e0       	ldi	r24, 0x01	; 1
     920:	08 95       	ret

00000922 <vPortYield>:
     922:	0f 92       	push	r0
     924:	0f b6       	in	r0, 0x3f	; 63
     926:	f8 94       	cli
     928:	0f 92       	push	r0
     92a:	0b b6       	in	r0, 0x3b	; 59
     92c:	0f 92       	push	r0
     92e:	0c b6       	in	r0, 0x3c	; 60
     930:	0f 92       	push	r0
     932:	1f 92       	push	r1
     934:	11 24       	eor	r1, r1
     936:	2f 92       	push	r2
     938:	3f 92       	push	r3
     93a:	4f 92       	push	r4
     93c:	5f 92       	push	r5
     93e:	6f 92       	push	r6
     940:	7f 92       	push	r7
     942:	8f 92       	push	r8
     944:	9f 92       	push	r9
     946:	af 92       	push	r10
     948:	bf 92       	push	r11
     94a:	cf 92       	push	r12
     94c:	df 92       	push	r13
     94e:	ef 92       	push	r14
     950:	ff 92       	push	r15
     952:	0f 93       	push	r16
     954:	1f 93       	push	r17
     956:	2f 93       	push	r18
     958:	3f 93       	push	r19
     95a:	4f 93       	push	r20
     95c:	5f 93       	push	r21
     95e:	6f 93       	push	r22
     960:	7f 93       	push	r23
     962:	8f 93       	push	r24
     964:	9f 93       	push	r25
     966:	af 93       	push	r26
     968:	bf 93       	push	r27
     96a:	cf 93       	push	r28
     96c:	df 93       	push	r29
     96e:	ef 93       	push	r30
     970:	ff 93       	push	r31
     972:	a0 91 57 17 	lds	r26, 0x1757	; 0x801757 <pxCurrentTCB>
     976:	b0 91 58 17 	lds	r27, 0x1758	; 0x801758 <pxCurrentTCB+0x1>
     97a:	0d b6       	in	r0, 0x3d	; 61
     97c:	0d 92       	st	X+, r0
     97e:	0e b6       	in	r0, 0x3e	; 62
     980:	0d 92       	st	X+, r0
     982:	0e 94 59 11 	call	0x22b2	; 0x22b2 <vTaskSwitchContext>
     986:	a0 91 57 17 	lds	r26, 0x1757	; 0x801757 <pxCurrentTCB>
     98a:	b0 91 58 17 	lds	r27, 0x1758	; 0x801758 <pxCurrentTCB+0x1>
     98e:	cd 91       	ld	r28, X+
     990:	cd bf       	out	0x3d, r28	; 61
     992:	dd 91       	ld	r29, X+
     994:	de bf       	out	0x3e, r29	; 62
     996:	ff 91       	pop	r31
     998:	ef 91       	pop	r30
     99a:	df 91       	pop	r29
     99c:	cf 91       	pop	r28
     99e:	bf 91       	pop	r27
     9a0:	af 91       	pop	r26
     9a2:	9f 91       	pop	r25
     9a4:	8f 91       	pop	r24
     9a6:	7f 91       	pop	r23
     9a8:	6f 91       	pop	r22
     9aa:	5f 91       	pop	r21
     9ac:	4f 91       	pop	r20
     9ae:	3f 91       	pop	r19
     9b0:	2f 91       	pop	r18
     9b2:	1f 91       	pop	r17
     9b4:	0f 91       	pop	r16
     9b6:	ff 90       	pop	r15
     9b8:	ef 90       	pop	r14
     9ba:	df 90       	pop	r13
     9bc:	cf 90       	pop	r12
     9be:	bf 90       	pop	r11
     9c0:	af 90       	pop	r10
     9c2:	9f 90       	pop	r9
     9c4:	8f 90       	pop	r8
     9c6:	7f 90       	pop	r7
     9c8:	6f 90       	pop	r6
     9ca:	5f 90       	pop	r5
     9cc:	4f 90       	pop	r4
     9ce:	3f 90       	pop	r3
     9d0:	2f 90       	pop	r2
     9d2:	1f 90       	pop	r1
     9d4:	0f 90       	pop	r0
     9d6:	0c be       	out	0x3c, r0	; 60
     9d8:	0f 90       	pop	r0
     9da:	0b be       	out	0x3b, r0	; 59
     9dc:	0f 90       	pop	r0
     9de:	0f be       	out	0x3f, r0	; 63
     9e0:	0f 90       	pop	r0
     9e2:	08 95       	ret

000009e4 <vPortYieldFromTick>:
 * call comes from the tick ISR.
 */
void vPortYieldFromTick( void ) __attribute__ ( ( hot, flatten, naked ) );
void vPortYieldFromTick( void )
{
    portSAVE_CONTEXT();
     9e4:	0f 92       	push	r0
     9e6:	0f b6       	in	r0, 0x3f	; 63
     9e8:	f8 94       	cli
     9ea:	0f 92       	push	r0
     9ec:	0b b6       	in	r0, 0x3b	; 59
     9ee:	0f 92       	push	r0
     9f0:	0c b6       	in	r0, 0x3c	; 60
     9f2:	0f 92       	push	r0
     9f4:	1f 92       	push	r1
     9f6:	11 24       	eor	r1, r1
     9f8:	2f 92       	push	r2
     9fa:	3f 92       	push	r3
     9fc:	4f 92       	push	r4
     9fe:	5f 92       	push	r5
     a00:	6f 92       	push	r6
     a02:	7f 92       	push	r7
     a04:	8f 92       	push	r8
     a06:	9f 92       	push	r9
     a08:	af 92       	push	r10
     a0a:	bf 92       	push	r11
     a0c:	cf 92       	push	r12
     a0e:	df 92       	push	r13
     a10:	ef 92       	push	r14
     a12:	ff 92       	push	r15
     a14:	0f 93       	push	r16
     a16:	1f 93       	push	r17
     a18:	2f 93       	push	r18
     a1a:	3f 93       	push	r19
     a1c:	4f 93       	push	r20
     a1e:	5f 93       	push	r21
     a20:	6f 93       	push	r22
     a22:	7f 93       	push	r23
     a24:	8f 93       	push	r24
     a26:	9f 93       	push	r25
     a28:	af 93       	push	r26
     a2a:	bf 93       	push	r27
     a2c:	cf 93       	push	r28
     a2e:	df 93       	push	r29
     a30:	ef 93       	push	r30
     a32:	ff 93       	push	r31
     a34:	a0 91 57 17 	lds	r26, 0x1757	; 0x801757 <pxCurrentTCB>
     a38:	b0 91 58 17 	lds	r27, 0x1758	; 0x801758 <pxCurrentTCB+0x1>
     a3c:	0d b6       	in	r0, 0x3d	; 61
     a3e:	0d 92       	st	X+, r0
     a40:	0e b6       	in	r0, 0x3e	; 62
     a42:	0d 92       	st	X+, r0
    sleep_reset();        /* reset the sleep_mode() faster than sleep_disable(); */
     a44:	13 be       	out	0x33, r1	; 51
    if( xTaskIncrementTick() != pdFALSE )
     a46:	0e 94 d1 0e 	call	0x1da2	; 0x1da2 <xTaskIncrementTick>
     a4a:	81 11       	cpse	r24, r1
    {
        vTaskSwitchContext();
     a4c:	0e 94 59 11 	call	0x22b2	; 0x22b2 <vTaskSwitchContext>
    }
    portRESTORE_CONTEXT();
     a50:	a0 91 57 17 	lds	r26, 0x1757	; 0x801757 <pxCurrentTCB>
     a54:	b0 91 58 17 	lds	r27, 0x1758	; 0x801758 <pxCurrentTCB+0x1>
     a58:	cd 91       	ld	r28, X+
     a5a:	cd bf       	out	0x3d, r28	; 61
     a5c:	dd 91       	ld	r29, X+
     a5e:	de bf       	out	0x3e, r29	; 62
     a60:	ff 91       	pop	r31
     a62:	ef 91       	pop	r30
     a64:	df 91       	pop	r29
     a66:	cf 91       	pop	r28
     a68:	bf 91       	pop	r27
     a6a:	af 91       	pop	r26
     a6c:	9f 91       	pop	r25
     a6e:	8f 91       	pop	r24
     a70:	7f 91       	pop	r23
     a72:	6f 91       	pop	r22
     a74:	5f 91       	pop	r21
     a76:	4f 91       	pop	r20
     a78:	3f 91       	pop	r19
     a7a:	2f 91       	pop	r18
     a7c:	1f 91       	pop	r17
     a7e:	0f 91       	pop	r16
     a80:	ff 90       	pop	r15
     a82:	ef 90       	pop	r14
     a84:	df 90       	pop	r13
     a86:	cf 90       	pop	r12
     a88:	bf 90       	pop	r11
     a8a:	af 90       	pop	r10
     a8c:	9f 90       	pop	r9
     a8e:	8f 90       	pop	r8
     a90:	7f 90       	pop	r7
     a92:	6f 90       	pop	r6
     a94:	5f 90       	pop	r5
     a96:	4f 90       	pop	r4
     a98:	3f 90       	pop	r3
     a9a:	2f 90       	pop	r2
     a9c:	1f 90       	pop	r1
     a9e:	0f 90       	pop	r0
     aa0:	0c be       	out	0x3c, r0	; 60
     aa2:	0f 90       	pop	r0
     aa4:	0b be       	out	0x3b, r0	; 59
     aa6:	0f 90       	pop	r0
     aa8:	0f be       	out	0x3f, r0	; 63
     aaa:	0f 90       	pop	r0

    __asm__ __volatile__ ( "ret" );
     aac:	08 95       	ret

00000aae <__vector_12>:
    ISR(portSCHEDULER_ISR, ISR_NAKED) __attribute__ ((hot, flatten));
/*  ISR(portSCHEDULER_ISR, ISR_NAKED ISR_NOBLOCK) __attribute__ ((hot, flatten));
 */
    ISR(portSCHEDULER_ISR)
    {
        vPortYieldFromTick();
     aae:	9a df       	rcall	.-204    	; 0x9e4 <vPortYieldFromTick>
        __asm__ __volatile__ ( "reti" );
     ab0:	18 95       	reti

00000ab2 <prvGetDisinheritPriorityAfterTimeout>:
    {
        xReturn = pdFALSE;
    }

    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
     ab2:	dc 01       	movw	r26, r24
     ab4:	53 96       	adiw	r26, 0x13	; 19
     ab6:	2c 91       	ld	r18, X
     ab8:	53 97       	sbiw	r26, 0x13	; 19
     aba:	22 23       	and	r18, r18
     abc:	41 f0       	breq	.+16     	; 0xace <prvGetDisinheritPriorityAfterTimeout+0x1c>
     abe:	5a 96       	adiw	r26, 0x1a	; 26
     ac0:	ed 91       	ld	r30, X+
     ac2:	fc 91       	ld	r31, X
     ac4:	5b 97       	sbiw	r26, 0x1b	; 27
     ac6:	90 81       	ld	r25, Z
     ac8:	8a e0       	ldi	r24, 0x0A	; 10
     aca:	89 1b       	sub	r24, r25
     acc:	08 95       	ret
     ace:	80 e0       	ldi	r24, 0x00	; 0
     ad0:	08 95       	ret

00000ad2 <prvIsQueueEmpty>:
     ad2:	0f b6       	in	r0, 0x3f	; 63
     ad4:	f8 94       	cli
     ad6:	0f 92       	push	r0
     ad8:	fc 01       	movw	r30, r24
     ada:	86 8d       	ldd	r24, Z+30	; 0x1e
     adc:	81 11       	cpse	r24, r1
     ade:	02 c0       	rjmp	.+4      	; 0xae4 <prvIsQueueEmpty+0x12>
     ae0:	81 e0       	ldi	r24, 0x01	; 1
     ae2:	01 c0       	rjmp	.+2      	; 0xae6 <prvIsQueueEmpty+0x14>
     ae4:	80 e0       	ldi	r24, 0x00	; 0
     ae6:	0f 90       	pop	r0
     ae8:	0f be       	out	0x3f, r0	; 63
     aea:	08 95       	ret

00000aec <prvIsQueueFull>:
     aec:	0f b6       	in	r0, 0x3f	; 63
     aee:	f8 94       	cli
     af0:	0f 92       	push	r0
     af2:	fc 01       	movw	r30, r24
     af4:	26 8d       	ldd	r18, Z+30	; 0x1e
     af6:	87 8d       	ldd	r24, Z+31	; 0x1f
     af8:	28 13       	cpse	r18, r24
     afa:	02 c0       	rjmp	.+4      	; 0xb00 <prvIsQueueFull+0x14>
     afc:	81 e0       	ldi	r24, 0x01	; 1
     afe:	01 c0       	rjmp	.+2      	; 0xb02 <prvIsQueueFull+0x16>
     b00:	80 e0       	ldi	r24, 0x00	; 0
     b02:	0f 90       	pop	r0
     b04:	0f be       	out	0x3f, r0	; 63
     b06:	08 95       	ret

00000b08 <prvCopyDataToQueue>:
     b08:	0f 93       	push	r16
     b0a:	1f 93       	push	r17
     b0c:	cf 93       	push	r28
     b0e:	df 93       	push	r29
     b10:	ec 01       	movw	r28, r24
     b12:	04 2f       	mov	r16, r20
     b14:	1e 8d       	ldd	r17, Y+30	; 0x1e
     b16:	48 a1       	ldd	r20, Y+32	; 0x20
     b18:	41 11       	cpse	r20, r1
     b1a:	0c c0       	rjmp	.+24     	; 0xb34 <prvCopyDataToQueue+0x2c>
     b1c:	88 81       	ld	r24, Y
     b1e:	99 81       	ldd	r25, Y+1	; 0x01
     b20:	89 2b       	or	r24, r25
     b22:	09 f0       	breq	.+2      	; 0xb26 <prvCopyDataToQueue+0x1e>
     b24:	42 c0       	rjmp	.+132    	; 0xbaa <prvCopyDataToQueue+0xa2>
     b26:	8c 81       	ldd	r24, Y+4	; 0x04
     b28:	9d 81       	ldd	r25, Y+5	; 0x05
     b2a:	0e 94 d5 14 	call	0x29aa	; 0x29aa <xTaskPriorityDisinherit>
     b2e:	1d 82       	std	Y+5, r1	; 0x05
     b30:	1c 82       	std	Y+4, r1	; 0x04
     b32:	42 c0       	rjmp	.+132    	; 0xbb8 <prvCopyDataToQueue+0xb0>
     b34:	01 11       	cpse	r16, r1
     b36:	17 c0       	rjmp	.+46     	; 0xb66 <prvCopyDataToQueue+0x5e>
     b38:	50 e0       	ldi	r21, 0x00	; 0
     b3a:	8a 81       	ldd	r24, Y+2	; 0x02
     b3c:	9b 81       	ldd	r25, Y+3	; 0x03
     b3e:	0e 94 1d 30 	call	0x603a	; 0x603a <memcpy>
     b42:	28 a1       	ldd	r18, Y+32	; 0x20
     b44:	8a 81       	ldd	r24, Y+2	; 0x02
     b46:	9b 81       	ldd	r25, Y+3	; 0x03
     b48:	82 0f       	add	r24, r18
     b4a:	91 1d       	adc	r25, r1
     b4c:	9b 83       	std	Y+3, r25	; 0x03
     b4e:	8a 83       	std	Y+2, r24	; 0x02
     b50:	2c 81       	ldd	r18, Y+4	; 0x04
     b52:	3d 81       	ldd	r19, Y+5	; 0x05
     b54:	82 17       	cp	r24, r18
     b56:	93 07       	cpc	r25, r19
     b58:	50 f1       	brcs	.+84     	; 0xbae <prvCopyDataToQueue+0xa6>
     b5a:	88 81       	ld	r24, Y
     b5c:	99 81       	ldd	r25, Y+1	; 0x01
     b5e:	9b 83       	std	Y+3, r25	; 0x03
     b60:	8a 83       	std	Y+2, r24	; 0x02
     b62:	80 e0       	ldi	r24, 0x00	; 0
     b64:	29 c0       	rjmp	.+82     	; 0xbb8 <prvCopyDataToQueue+0xb0>
     b66:	50 e0       	ldi	r21, 0x00	; 0
     b68:	8e 81       	ldd	r24, Y+6	; 0x06
     b6a:	9f 81       	ldd	r25, Y+7	; 0x07
     b6c:	0e 94 1d 30 	call	0x603a	; 0x603a <memcpy>
     b70:	88 a1       	ldd	r24, Y+32	; 0x20
     b72:	90 e0       	ldi	r25, 0x00	; 0
     b74:	91 95       	neg	r25
     b76:	81 95       	neg	r24
     b78:	91 09       	sbc	r25, r1
     b7a:	2e 81       	ldd	r18, Y+6	; 0x06
     b7c:	3f 81       	ldd	r19, Y+7	; 0x07
     b7e:	28 0f       	add	r18, r24
     b80:	39 1f       	adc	r19, r25
     b82:	3f 83       	std	Y+7, r19	; 0x07
     b84:	2e 83       	std	Y+6, r18	; 0x06
     b86:	48 81       	ld	r20, Y
     b88:	59 81       	ldd	r21, Y+1	; 0x01
     b8a:	24 17       	cp	r18, r20
     b8c:	35 07       	cpc	r19, r21
     b8e:	30 f4       	brcc	.+12     	; 0xb9c <prvCopyDataToQueue+0x94>
     b90:	2c 81       	ldd	r18, Y+4	; 0x04
     b92:	3d 81       	ldd	r19, Y+5	; 0x05
     b94:	82 0f       	add	r24, r18
     b96:	93 1f       	adc	r25, r19
     b98:	9f 83       	std	Y+7, r25	; 0x07
     b9a:	8e 83       	std	Y+6, r24	; 0x06
     b9c:	02 30       	cpi	r16, 0x02	; 2
     b9e:	49 f4       	brne	.+18     	; 0xbb2 <prvCopyDataToQueue+0xaa>
     ba0:	11 23       	and	r17, r17
     ba2:	49 f0       	breq	.+18     	; 0xbb6 <prvCopyDataToQueue+0xae>
     ba4:	11 50       	subi	r17, 0x01	; 1
     ba6:	80 e0       	ldi	r24, 0x00	; 0
     ba8:	07 c0       	rjmp	.+14     	; 0xbb8 <prvCopyDataToQueue+0xb0>
     baa:	80 e0       	ldi	r24, 0x00	; 0
     bac:	05 c0       	rjmp	.+10     	; 0xbb8 <prvCopyDataToQueue+0xb0>
     bae:	80 e0       	ldi	r24, 0x00	; 0
     bb0:	03 c0       	rjmp	.+6      	; 0xbb8 <prvCopyDataToQueue+0xb0>
     bb2:	80 e0       	ldi	r24, 0x00	; 0
     bb4:	01 c0       	rjmp	.+2      	; 0xbb8 <prvCopyDataToQueue+0xb0>
     bb6:	80 e0       	ldi	r24, 0x00	; 0
     bb8:	1f 5f       	subi	r17, 0xFF	; 255
     bba:	1e 8f       	std	Y+30, r17	; 0x1e
     bbc:	df 91       	pop	r29
     bbe:	cf 91       	pop	r28
     bc0:	1f 91       	pop	r17
     bc2:	0f 91       	pop	r16
     bc4:	08 95       	ret

00000bc6 <prvCopyDataFromQueue>:
     bc6:	fc 01       	movw	r30, r24
     bc8:	40 a1       	ldd	r20, Z+32	; 0x20
     bca:	44 23       	and	r20, r20
     bcc:	a9 f0       	breq	.+42     	; 0xbf8 <prvCopyDataFromQueue+0x32>
     bce:	50 e0       	ldi	r21, 0x00	; 0
     bd0:	26 81       	ldd	r18, Z+6	; 0x06
     bd2:	37 81       	ldd	r19, Z+7	; 0x07
     bd4:	24 0f       	add	r18, r20
     bd6:	35 1f       	adc	r19, r21
     bd8:	37 83       	std	Z+7, r19	; 0x07
     bda:	26 83       	std	Z+6, r18	; 0x06
     bdc:	84 81       	ldd	r24, Z+4	; 0x04
     bde:	95 81       	ldd	r25, Z+5	; 0x05
     be0:	28 17       	cp	r18, r24
     be2:	39 07       	cpc	r19, r25
     be4:	20 f0       	brcs	.+8      	; 0xbee <prvCopyDataFromQueue+0x28>
     be6:	80 81       	ld	r24, Z
     be8:	91 81       	ldd	r25, Z+1	; 0x01
     bea:	97 83       	std	Z+7, r25	; 0x07
     bec:	86 83       	std	Z+6, r24	; 0x06
     bee:	cb 01       	movw	r24, r22
     bf0:	66 81       	ldd	r22, Z+6	; 0x06
     bf2:	77 81       	ldd	r23, Z+7	; 0x07
     bf4:	0c 94 1d 30 	jmp	0x603a	; 0x603a <memcpy>
     bf8:	08 95       	ret

00000bfa <prvUnlockQueue>:
     bfa:	1f 93       	push	r17
     bfc:	cf 93       	push	r28
     bfe:	df 93       	push	r29
     c00:	ec 01       	movw	r28, r24
     c02:	0f b6       	in	r0, 0x3f	; 63
     c04:	f8 94       	cli
     c06:	0f 92       	push	r0
     c08:	1a a1       	ldd	r17, Y+34	; 0x22
     c0a:	0b c0       	rjmp	.+22     	; 0xc22 <prvUnlockQueue+0x28>
     c0c:	8b 89       	ldd	r24, Y+19	; 0x13
     c0e:	88 23       	and	r24, r24
     c10:	51 f0       	breq	.+20     	; 0xc26 <prvUnlockQueue+0x2c>
     c12:	ce 01       	movw	r24, r28
     c14:	43 96       	adiw	r24, 0x13	; 19
     c16:	0e 94 61 12 	call	0x24c2	; 0x24c2 <xTaskRemoveFromEventList>
     c1a:	81 11       	cpse	r24, r1
     c1c:	0e 94 37 14 	call	0x286e	; 0x286e <vTaskMissedYield>
     c20:	11 50       	subi	r17, 0x01	; 1
     c22:	11 16       	cp	r1, r17
     c24:	9c f3       	brlt	.-26     	; 0xc0c <prvUnlockQueue+0x12>
     c26:	8f ef       	ldi	r24, 0xFF	; 255
     c28:	8a a3       	std	Y+34, r24	; 0x22
     c2a:	0f 90       	pop	r0
     c2c:	0f be       	out	0x3f, r0	; 63
     c2e:	0f b6       	in	r0, 0x3f	; 63
     c30:	f8 94       	cli
     c32:	0f 92       	push	r0
     c34:	19 a1       	ldd	r17, Y+33	; 0x21
     c36:	0b c0       	rjmp	.+22     	; 0xc4e <prvUnlockQueue+0x54>
     c38:	88 85       	ldd	r24, Y+8	; 0x08
     c3a:	88 23       	and	r24, r24
     c3c:	51 f0       	breq	.+20     	; 0xc52 <prvUnlockQueue+0x58>
     c3e:	ce 01       	movw	r24, r28
     c40:	08 96       	adiw	r24, 0x08	; 8
     c42:	0e 94 61 12 	call	0x24c2	; 0x24c2 <xTaskRemoveFromEventList>
     c46:	81 11       	cpse	r24, r1
     c48:	0e 94 37 14 	call	0x286e	; 0x286e <vTaskMissedYield>
     c4c:	11 50       	subi	r17, 0x01	; 1
     c4e:	11 16       	cp	r1, r17
     c50:	9c f3       	brlt	.-26     	; 0xc38 <prvUnlockQueue+0x3e>
     c52:	8f ef       	ldi	r24, 0xFF	; 255
     c54:	89 a3       	std	Y+33, r24	; 0x21
     c56:	0f 90       	pop	r0
     c58:	0f be       	out	0x3f, r0	; 63
     c5a:	df 91       	pop	r29
     c5c:	cf 91       	pop	r28
     c5e:	1f 91       	pop	r17
     c60:	08 95       	ret

00000c62 <xQueueGenericReset>:
     c62:	cf 93       	push	r28
     c64:	df 93       	push	r29
     c66:	ec 01       	movw	r28, r24
     c68:	0f b6       	in	r0, 0x3f	; 63
     c6a:	f8 94       	cli
     c6c:	0f 92       	push	r0
     c6e:	e8 81       	ld	r30, Y
     c70:	f9 81       	ldd	r31, Y+1	; 0x01
     c72:	8f 8d       	ldd	r24, Y+31	; 0x1f
     c74:	28 a1       	ldd	r18, Y+32	; 0x20
     c76:	90 e0       	ldi	r25, 0x00	; 0
     c78:	30 e0       	ldi	r19, 0x00	; 0
     c7a:	82 9f       	mul	r24, r18
     c7c:	a0 01       	movw	r20, r0
     c7e:	83 9f       	mul	r24, r19
     c80:	50 0d       	add	r21, r0
     c82:	92 9f       	mul	r25, r18
     c84:	50 0d       	add	r21, r0
     c86:	11 24       	eor	r1, r1
     c88:	4e 0f       	add	r20, r30
     c8a:	5f 1f       	adc	r21, r31
     c8c:	5d 83       	std	Y+5, r21	; 0x05
     c8e:	4c 83       	std	Y+4, r20	; 0x04
     c90:	1e 8e       	std	Y+30, r1	; 0x1e
     c92:	fb 83       	std	Y+3, r31	; 0x03
     c94:	ea 83       	std	Y+2, r30	; 0x02
     c96:	01 97       	sbiw	r24, 0x01	; 1
     c98:	28 9f       	mul	r18, r24
     c9a:	a0 01       	movw	r20, r0
     c9c:	29 9f       	mul	r18, r25
     c9e:	50 0d       	add	r21, r0
     ca0:	38 9f       	mul	r19, r24
     ca2:	50 0d       	add	r21, r0
     ca4:	11 24       	eor	r1, r1
     ca6:	cf 01       	movw	r24, r30
     ca8:	84 0f       	add	r24, r20
     caa:	95 1f       	adc	r25, r21
     cac:	9f 83       	std	Y+7, r25	; 0x07
     cae:	8e 83       	std	Y+6, r24	; 0x06
     cb0:	8f ef       	ldi	r24, 0xFF	; 255
     cb2:	89 a3       	std	Y+33, r24	; 0x21
     cb4:	8a a3       	std	Y+34, r24	; 0x22
     cb6:	61 11       	cpse	r22, r1
     cb8:	0b c0       	rjmp	.+22     	; 0xcd0 <xQueueGenericReset+0x6e>
     cba:	88 85       	ldd	r24, Y+8	; 0x08
     cbc:	88 23       	and	r24, r24
     cbe:	71 f0       	breq	.+28     	; 0xcdc <xQueueGenericReset+0x7a>
     cc0:	ce 01       	movw	r24, r28
     cc2:	08 96       	adiw	r24, 0x08	; 8
     cc4:	0e 94 61 12 	call	0x24c2	; 0x24c2 <xTaskRemoveFromEventList>
     cc8:	88 23       	and	r24, r24
     cca:	41 f0       	breq	.+16     	; 0xcdc <xQueueGenericReset+0x7a>
     ccc:	2a de       	rcall	.-940    	; 0x922 <vPortYield>
     cce:	06 c0       	rjmp	.+12     	; 0xcdc <xQueueGenericReset+0x7a>
     cd0:	ce 01       	movw	r24, r28
     cd2:	08 96       	adiw	r24, 0x08	; 8
     cd4:	58 dd       	rcall	.-1360   	; 0x786 <vListInitialise>
     cd6:	ce 01       	movw	r24, r28
     cd8:	43 96       	adiw	r24, 0x13	; 19
     cda:	55 dd       	rcall	.-1366   	; 0x786 <vListInitialise>
     cdc:	0f 90       	pop	r0
     cde:	0f be       	out	0x3f, r0	; 63
     ce0:	81 e0       	ldi	r24, 0x01	; 1
     ce2:	df 91       	pop	r29
     ce4:	cf 91       	pop	r28
     ce6:	08 95       	ret

00000ce8 <prvInitialiseNewQueue>:
     ce8:	0f 93       	push	r16
     cea:	1f 93       	push	r17
     cec:	f8 01       	movw	r30, r16
     cee:	61 11       	cpse	r22, r1
     cf0:	03 c0       	rjmp	.+6      	; 0xcf8 <prvInitialiseNewQueue+0x10>
     cf2:	11 83       	std	Z+1, r17	; 0x01
     cf4:	00 83       	st	Z, r16
     cf6:	02 c0       	rjmp	.+4      	; 0xcfc <prvInitialiseNewQueue+0x14>
     cf8:	51 83       	std	Z+1, r21	; 0x01
     cfa:	40 83       	st	Z, r20
     cfc:	87 8f       	std	Z+31, r24	; 0x1f
     cfe:	60 a3       	std	Z+32, r22	; 0x20
     d00:	61 e0       	ldi	r22, 0x01	; 1
     d02:	cf 01       	movw	r24, r30
     d04:	ae df       	rcall	.-164    	; 0xc62 <xQueueGenericReset>
     d06:	1f 91       	pop	r17
     d08:	0f 91       	pop	r16
     d0a:	08 95       	ret

00000d0c <xQueueGenericCreate>:
     d0c:	df 92       	push	r13
     d0e:	ef 92       	push	r14
     d10:	ff 92       	push	r15
     d12:	0f 93       	push	r16
     d14:	1f 93       	push	r17
     d16:	cf 93       	push	r28
     d18:	df 93       	push	r29
     d1a:	f8 2e       	mov	r15, r24
     d1c:	e6 2e       	mov	r14, r22
     d1e:	d4 2e       	mov	r13, r20
     d20:	86 9f       	mul	r24, r22
     d22:	c0 01       	movw	r24, r0
     d24:	11 24       	eor	r1, r1
     d26:	83 96       	adiw	r24, 0x23	; 35
     d28:	48 dc       	rcall	.-1904   	; 0x5ba <pvPortMalloc>
     d2a:	ec 01       	movw	r28, r24
     d2c:	00 97       	sbiw	r24, 0x00	; 0
     d2e:	41 f0       	breq	.+16     	; 0xd40 <xQueueGenericCreate+0x34>
     d30:	8c 01       	movw	r16, r24
     d32:	2d 2d       	mov	r18, r13
     d34:	ac 01       	movw	r20, r24
     d36:	4d 5d       	subi	r20, 0xDD	; 221
     d38:	5f 4f       	sbci	r21, 0xFF	; 255
     d3a:	6e 2d       	mov	r22, r14
     d3c:	8f 2d       	mov	r24, r15
     d3e:	d4 df       	rcall	.-88     	; 0xce8 <prvInitialiseNewQueue>
     d40:	ce 01       	movw	r24, r28
     d42:	df 91       	pop	r29
     d44:	cf 91       	pop	r28
     d46:	1f 91       	pop	r17
     d48:	0f 91       	pop	r16
     d4a:	ff 90       	pop	r15
     d4c:	ef 90       	pop	r14
     d4e:	df 90       	pop	r13
     d50:	08 95       	ret

00000d52 <xQueueGenericSend>:
     d52:	cf 92       	push	r12
     d54:	df 92       	push	r13
     d56:	ef 92       	push	r14
     d58:	ff 92       	push	r15
     d5a:	0f 93       	push	r16
     d5c:	1f 93       	push	r17
     d5e:	cf 93       	push	r28
     d60:	df 93       	push	r29
     d62:	cd b7       	in	r28, 0x3d	; 61
     d64:	de b7       	in	r29, 0x3e	; 62
     d66:	29 97       	sbiw	r28, 0x09	; 9
     d68:	0f b6       	in	r0, 0x3f	; 63
     d6a:	f8 94       	cli
     d6c:	de bf       	out	0x3e, r29	; 62
     d6e:	0f be       	out	0x3f, r0	; 63
     d70:	cd bf       	out	0x3d, r28	; 61
     d72:	7c 01       	movw	r14, r24
     d74:	6b 01       	movw	r12, r22
     d76:	2e 83       	std	Y+6, r18	; 0x06
     d78:	3f 83       	std	Y+7, r19	; 0x07
     d7a:	48 87       	std	Y+8, r20	; 0x08
     d7c:	59 87       	std	Y+9, r21	; 0x09
     d7e:	10 e0       	ldi	r17, 0x00	; 0
     d80:	0f b6       	in	r0, 0x3f	; 63
     d82:	f8 94       	cli
     d84:	0f 92       	push	r0
     d86:	f7 01       	movw	r30, r14
     d88:	96 8d       	ldd	r25, Z+30	; 0x1e
     d8a:	87 8d       	ldd	r24, Z+31	; 0x1f
     d8c:	98 17       	cp	r25, r24
     d8e:	10 f0       	brcs	.+4      	; 0xd94 <xQueueGenericSend+0x42>
     d90:	02 30       	cpi	r16, 0x02	; 2
     d92:	b1 f4       	brne	.+44     	; 0xdc0 <xQueueGenericSend+0x6e>
     d94:	40 2f       	mov	r20, r16
     d96:	b6 01       	movw	r22, r12
     d98:	c7 01       	movw	r24, r14
     d9a:	b6 de       	rcall	.-660    	; 0xb08 <prvCopyDataToQueue>
     d9c:	f7 01       	movw	r30, r14
     d9e:	93 89       	ldd	r25, Z+19	; 0x13
     da0:	99 23       	and	r25, r25
     da2:	41 f0       	breq	.+16     	; 0xdb4 <xQueueGenericSend+0x62>
     da4:	c7 01       	movw	r24, r14
     da6:	43 96       	adiw	r24, 0x13	; 19
     da8:	0e 94 61 12 	call	0x24c2	; 0x24c2 <xTaskRemoveFromEventList>
     dac:	88 23       	and	r24, r24
     dae:	21 f0       	breq	.+8      	; 0xdb8 <xQueueGenericSend+0x66>
     db0:	b8 dd       	rcall	.-1168   	; 0x922 <vPortYield>
     db2:	02 c0       	rjmp	.+4      	; 0xdb8 <xQueueGenericSend+0x66>
     db4:	81 11       	cpse	r24, r1
     db6:	b5 dd       	rcall	.-1174   	; 0x922 <vPortYield>
     db8:	0f 90       	pop	r0
     dba:	0f be       	out	0x3f, r0	; 63
     dbc:	81 e0       	ldi	r24, 0x01	; 1
     dbe:	4c c0       	rjmp	.+152    	; 0xe58 <xQueueGenericSend+0x106>
     dc0:	8e 81       	ldd	r24, Y+6	; 0x06
     dc2:	9f 81       	ldd	r25, Y+7	; 0x07
     dc4:	a8 85       	ldd	r26, Y+8	; 0x08
     dc6:	b9 85       	ldd	r27, Y+9	; 0x09
     dc8:	89 2b       	or	r24, r25
     dca:	8a 2b       	or	r24, r26
     dcc:	8b 2b       	or	r24, r27
     dce:	21 f4       	brne	.+8      	; 0xdd8 <xQueueGenericSend+0x86>
     dd0:	0f 90       	pop	r0
     dd2:	0f be       	out	0x3f, r0	; 63
     dd4:	80 e0       	ldi	r24, 0x00	; 0
     dd6:	40 c0       	rjmp	.+128    	; 0xe58 <xQueueGenericSend+0x106>
     dd8:	11 11       	cpse	r17, r1
     dda:	05 c0       	rjmp	.+10     	; 0xde6 <xQueueGenericSend+0x94>
     ddc:	ce 01       	movw	r24, r28
     dde:	01 96       	adiw	r24, 0x01	; 1
     de0:	0e 94 c0 13 	call	0x2780	; 0x2780 <vTaskInternalSetTimeOutState>
     de4:	11 e0       	ldi	r17, 0x01	; 1
     de6:	0f 90       	pop	r0
     de8:	0f be       	out	0x3f, r0	; 63
     dea:	c7 d7       	rcall	.+3982   	; 0x1d7a <vTaskSuspendAll>
     dec:	0f b6       	in	r0, 0x3f	; 63
     dee:	f8 94       	cli
     df0:	0f 92       	push	r0
     df2:	f7 01       	movw	r30, r14
     df4:	81 a1       	ldd	r24, Z+33	; 0x21
     df6:	8f 3f       	cpi	r24, 0xFF	; 255
     df8:	09 f4       	brne	.+2      	; 0xdfc <xQueueGenericSend+0xaa>
     dfa:	11 a2       	std	Z+33, r1	; 0x21
     dfc:	f7 01       	movw	r30, r14
     dfe:	82 a1       	ldd	r24, Z+34	; 0x22
     e00:	8f 3f       	cpi	r24, 0xFF	; 255
     e02:	09 f4       	brne	.+2      	; 0xe06 <xQueueGenericSend+0xb4>
     e04:	12 a2       	std	Z+34, r1	; 0x22
     e06:	0f 90       	pop	r0
     e08:	0f be       	out	0x3f, r0	; 63
     e0a:	be 01       	movw	r22, r28
     e0c:	6a 5f       	subi	r22, 0xFA	; 250
     e0e:	7f 4f       	sbci	r23, 0xFF	; 255
     e10:	ce 01       	movw	r24, r28
     e12:	01 96       	adiw	r24, 0x01	; 1
     e14:	0e 94 d1 13 	call	0x27a2	; 0x27a2 <xTaskCheckForTimeOut>
     e18:	81 11       	cpse	r24, r1
     e1a:	19 c0       	rjmp	.+50     	; 0xe4e <xQueueGenericSend+0xfc>
     e1c:	c7 01       	movw	r24, r14
     e1e:	66 de       	rcall	.-820    	; 0xaec <prvIsQueueFull>
     e20:	88 23       	and	r24, r24
     e22:	81 f0       	breq	.+32     	; 0xe44 <xQueueGenericSend+0xf2>
     e24:	4e 81       	ldd	r20, Y+6	; 0x06
     e26:	5f 81       	ldd	r21, Y+7	; 0x07
     e28:	68 85       	ldd	r22, Y+8	; 0x08
     e2a:	79 85       	ldd	r23, Y+9	; 0x09
     e2c:	c7 01       	movw	r24, r14
     e2e:	08 96       	adiw	r24, 0x08	; 8
     e30:	0e 94 be 11 	call	0x237c	; 0x237c <vTaskPlaceOnEventList>
     e34:	c7 01       	movw	r24, r14
     e36:	e1 de       	rcall	.-574    	; 0xbfa <prvUnlockQueue>
     e38:	0e 94 fd 0f 	call	0x1ffa	; 0x1ffa <xTaskResumeAll>
     e3c:	81 11       	cpse	r24, r1
     e3e:	a0 cf       	rjmp	.-192    	; 0xd80 <xQueueGenericSend+0x2e>
     e40:	70 dd       	rcall	.-1312   	; 0x922 <vPortYield>
     e42:	9e cf       	rjmp	.-196    	; 0xd80 <xQueueGenericSend+0x2e>
     e44:	c7 01       	movw	r24, r14
     e46:	d9 de       	rcall	.-590    	; 0xbfa <prvUnlockQueue>
     e48:	0e 94 fd 0f 	call	0x1ffa	; 0x1ffa <xTaskResumeAll>
     e4c:	99 cf       	rjmp	.-206    	; 0xd80 <xQueueGenericSend+0x2e>
     e4e:	c7 01       	movw	r24, r14
     e50:	d4 de       	rcall	.-600    	; 0xbfa <prvUnlockQueue>
     e52:	0e 94 fd 0f 	call	0x1ffa	; 0x1ffa <xTaskResumeAll>
     e56:	80 e0       	ldi	r24, 0x00	; 0
     e58:	29 96       	adiw	r28, 0x09	; 9
     e5a:	0f b6       	in	r0, 0x3f	; 63
     e5c:	f8 94       	cli
     e5e:	de bf       	out	0x3e, r29	; 62
     e60:	0f be       	out	0x3f, r0	; 63
     e62:	cd bf       	out	0x3d, r28	; 61
     e64:	df 91       	pop	r29
     e66:	cf 91       	pop	r28
     e68:	1f 91       	pop	r17
     e6a:	0f 91       	pop	r16
     e6c:	ff 90       	pop	r15
     e6e:	ef 90       	pop	r14
     e70:	df 90       	pop	r13
     e72:	cf 90       	pop	r12
     e74:	08 95       	ret

00000e76 <prvInitialiseMutex>:
     e76:	0f 93       	push	r16
     e78:	00 97       	sbiw	r24, 0x00	; 0
     e7a:	69 f0       	breq	.+26     	; 0xe96 <prvInitialiseMutex+0x20>
     e7c:	fc 01       	movw	r30, r24
     e7e:	15 82       	std	Z+5, r1	; 0x05
     e80:	14 82       	std	Z+4, r1	; 0x04
     e82:	11 82       	std	Z+1, r1	; 0x01
     e84:	10 82       	st	Z, r1
     e86:	16 82       	std	Z+6, r1	; 0x06
     e88:	00 e0       	ldi	r16, 0x00	; 0
     e8a:	20 e0       	ldi	r18, 0x00	; 0
     e8c:	30 e0       	ldi	r19, 0x00	; 0
     e8e:	a9 01       	movw	r20, r18
     e90:	60 e0       	ldi	r22, 0x00	; 0
     e92:	70 e0       	ldi	r23, 0x00	; 0
     e94:	5e df       	rcall	.-324    	; 0xd52 <xQueueGenericSend>
     e96:	0f 91       	pop	r16
     e98:	08 95       	ret

00000e9a <xQueueCreateMutex>:
     e9a:	cf 93       	push	r28
     e9c:	df 93       	push	r29
     e9e:	48 2f       	mov	r20, r24
     ea0:	60 e0       	ldi	r22, 0x00	; 0
     ea2:	81 e0       	ldi	r24, 0x01	; 1
     ea4:	33 df       	rcall	.-410    	; 0xd0c <xQueueGenericCreate>
     ea6:	ec 01       	movw	r28, r24
     ea8:	e6 df       	rcall	.-52     	; 0xe76 <prvInitialiseMutex>
     eaa:	ce 01       	movw	r24, r28
     eac:	df 91       	pop	r29
     eae:	cf 91       	pop	r28
     eb0:	08 95       	ret

00000eb2 <xQueueGenericSendFromISR>:
     eb2:	ef 92       	push	r14
     eb4:	ff 92       	push	r15
     eb6:	0f 93       	push	r16
     eb8:	1f 93       	push	r17
     eba:	cf 93       	push	r28
     ebc:	df 93       	push	r29
     ebe:	8a 01       	movw	r16, r20
     ec0:	fc 01       	movw	r30, r24
     ec2:	56 8d       	ldd	r21, Z+30	; 0x1e
     ec4:	37 8d       	ldd	r19, Z+31	; 0x1f
     ec6:	53 17       	cp	r21, r19
     ec8:	10 f0       	brcs	.+4      	; 0xece <xQueueGenericSendFromISR+0x1c>
     eca:	22 30       	cpi	r18, 0x02	; 2
     ecc:	f9 f4       	brne	.+62     	; 0xf0c <xQueueGenericSendFromISR+0x5a>
     ece:	42 2f       	mov	r20, r18
     ed0:	78 01       	movw	r14, r16
     ed2:	ec 01       	movw	r28, r24
     ed4:	1a a1       	ldd	r17, Y+34	; 0x22
     ed6:	8e 8d       	ldd	r24, Y+30	; 0x1e
     ed8:	ce 01       	movw	r24, r28
     eda:	16 de       	rcall	.-980    	; 0xb08 <prvCopyDataToQueue>
     edc:	1f 3f       	cpi	r17, 0xFF	; 255
     ede:	81 f4       	brne	.+32     	; 0xf00 <xQueueGenericSendFromISR+0x4e>
     ee0:	8b 89       	ldd	r24, Y+19	; 0x13
     ee2:	88 23       	and	r24, r24
     ee4:	a9 f0       	breq	.+42     	; 0xf10 <xQueueGenericSendFromISR+0x5e>
     ee6:	ce 01       	movw	r24, r28
     ee8:	43 96       	adiw	r24, 0x13	; 19
     eea:	0e 94 61 12 	call	0x24c2	; 0x24c2 <xTaskRemoveFromEventList>
     eee:	88 23       	and	r24, r24
     ef0:	89 f0       	breq	.+34     	; 0xf14 <xQueueGenericSendFromISR+0x62>
     ef2:	e1 14       	cp	r14, r1
     ef4:	f1 04       	cpc	r15, r1
     ef6:	81 f0       	breq	.+32     	; 0xf18 <xQueueGenericSendFromISR+0x66>
     ef8:	81 e0       	ldi	r24, 0x01	; 1
     efa:	f7 01       	movw	r30, r14
     efc:	80 83       	st	Z, r24
     efe:	0d c0       	rjmp	.+26     	; 0xf1a <xQueueGenericSendFromISR+0x68>
     f00:	ff 24       	eor	r15, r15
     f02:	f3 94       	inc	r15
     f04:	f1 0e       	add	r15, r17
     f06:	fa a2       	std	Y+34, r15	; 0x22
     f08:	81 e0       	ldi	r24, 0x01	; 1
     f0a:	07 c0       	rjmp	.+14     	; 0xf1a <xQueueGenericSendFromISR+0x68>
     f0c:	80 e0       	ldi	r24, 0x00	; 0
     f0e:	05 c0       	rjmp	.+10     	; 0xf1a <xQueueGenericSendFromISR+0x68>
     f10:	81 e0       	ldi	r24, 0x01	; 1
     f12:	03 c0       	rjmp	.+6      	; 0xf1a <xQueueGenericSendFromISR+0x68>
     f14:	81 e0       	ldi	r24, 0x01	; 1
     f16:	01 c0       	rjmp	.+2      	; 0xf1a <xQueueGenericSendFromISR+0x68>
     f18:	81 e0       	ldi	r24, 0x01	; 1
     f1a:	df 91       	pop	r29
     f1c:	cf 91       	pop	r28
     f1e:	1f 91       	pop	r17
     f20:	0f 91       	pop	r16
     f22:	ff 90       	pop	r15
     f24:	ef 90       	pop	r14
     f26:	08 95       	ret

00000f28 <xQueueReceive>:
     f28:	cf 92       	push	r12
     f2a:	df 92       	push	r13
     f2c:	ef 92       	push	r14
     f2e:	ff 92       	push	r15
     f30:	0f 93       	push	r16
     f32:	1f 93       	push	r17
     f34:	cf 93       	push	r28
     f36:	df 93       	push	r29
     f38:	cd b7       	in	r28, 0x3d	; 61
     f3a:	de b7       	in	r29, 0x3e	; 62
     f3c:	29 97       	sbiw	r28, 0x09	; 9
     f3e:	0f b6       	in	r0, 0x3f	; 63
     f40:	f8 94       	cli
     f42:	de bf       	out	0x3e, r29	; 62
     f44:	0f be       	out	0x3f, r0	; 63
     f46:	cd bf       	out	0x3d, r28	; 61
     f48:	8c 01       	movw	r16, r24
     f4a:	6b 01       	movw	r12, r22
     f4c:	2e 83       	std	Y+6, r18	; 0x06
     f4e:	3f 83       	std	Y+7, r19	; 0x07
     f50:	48 87       	std	Y+8, r20	; 0x08
     f52:	59 87       	std	Y+9, r21	; 0x09
     f54:	e1 2c       	mov	r14, r1
     f56:	0f b6       	in	r0, 0x3f	; 63
     f58:	f8 94       	cli
     f5a:	0f 92       	push	r0
     f5c:	f8 01       	movw	r30, r16
     f5e:	f6 8c       	ldd	r15, Z+30	; 0x1e
     f60:	ff 20       	and	r15, r15
     f62:	99 f0       	breq	.+38     	; 0xf8a <xQueueReceive+0x62>
     f64:	b6 01       	movw	r22, r12
     f66:	c8 01       	movw	r24, r16
     f68:	2e de       	rcall	.-932    	; 0xbc6 <prvCopyDataFromQueue>
     f6a:	fa 94       	dec	r15
     f6c:	f8 01       	movw	r30, r16
     f6e:	f6 8e       	std	Z+30, r15	; 0x1e
     f70:	80 85       	ldd	r24, Z+8	; 0x08
     f72:	88 23       	and	r24, r24
     f74:	31 f0       	breq	.+12     	; 0xf82 <xQueueReceive+0x5a>
     f76:	c8 01       	movw	r24, r16
     f78:	08 96       	adiw	r24, 0x08	; 8
     f7a:	0e 94 61 12 	call	0x24c2	; 0x24c2 <xTaskRemoveFromEventList>
     f7e:	81 11       	cpse	r24, r1
     f80:	d0 dc       	rcall	.-1632   	; 0x922 <vPortYield>
     f82:	0f 90       	pop	r0
     f84:	0f be       	out	0x3f, r0	; 63
     f86:	81 e0       	ldi	r24, 0x01	; 1
     f88:	4f c0       	rjmp	.+158    	; 0x1028 <__EEPROM_REGION_LENGTH__+0x28>
     f8a:	8e 81       	ldd	r24, Y+6	; 0x06
     f8c:	9f 81       	ldd	r25, Y+7	; 0x07
     f8e:	a8 85       	ldd	r26, Y+8	; 0x08
     f90:	b9 85       	ldd	r27, Y+9	; 0x09
     f92:	89 2b       	or	r24, r25
     f94:	8a 2b       	or	r24, r26
     f96:	8b 2b       	or	r24, r27
     f98:	21 f4       	brne	.+8      	; 0xfa2 <xQueueReceive+0x7a>
     f9a:	0f 90       	pop	r0
     f9c:	0f be       	out	0x3f, r0	; 63
     f9e:	80 e0       	ldi	r24, 0x00	; 0
     fa0:	43 c0       	rjmp	.+134    	; 0x1028 <__EEPROM_REGION_LENGTH__+0x28>
     fa2:	e1 10       	cpse	r14, r1
     fa4:	06 c0       	rjmp	.+12     	; 0xfb2 <xQueueReceive+0x8a>
     fa6:	ce 01       	movw	r24, r28
     fa8:	01 96       	adiw	r24, 0x01	; 1
     faa:	0e 94 c0 13 	call	0x2780	; 0x2780 <vTaskInternalSetTimeOutState>
     fae:	ee 24       	eor	r14, r14
     fb0:	e3 94       	inc	r14
     fb2:	0f 90       	pop	r0
     fb4:	0f be       	out	0x3f, r0	; 63
     fb6:	e1 d6       	rcall	.+3522   	; 0x1d7a <vTaskSuspendAll>
     fb8:	0f b6       	in	r0, 0x3f	; 63
     fba:	f8 94       	cli
     fbc:	0f 92       	push	r0
     fbe:	f8 01       	movw	r30, r16
     fc0:	81 a1       	ldd	r24, Z+33	; 0x21
     fc2:	8f 3f       	cpi	r24, 0xFF	; 255
     fc4:	09 f4       	brne	.+2      	; 0xfc8 <xQueueReceive+0xa0>
     fc6:	11 a2       	std	Z+33, r1	; 0x21
     fc8:	f8 01       	movw	r30, r16
     fca:	82 a1       	ldd	r24, Z+34	; 0x22
     fcc:	8f 3f       	cpi	r24, 0xFF	; 255
     fce:	09 f4       	brne	.+2      	; 0xfd2 <xQueueReceive+0xaa>
     fd0:	12 a2       	std	Z+34, r1	; 0x22
     fd2:	0f 90       	pop	r0
     fd4:	0f be       	out	0x3f, r0	; 63
     fd6:	be 01       	movw	r22, r28
     fd8:	6a 5f       	subi	r22, 0xFA	; 250
     fda:	7f 4f       	sbci	r23, 0xFF	; 255
     fdc:	ce 01       	movw	r24, r28
     fde:	01 96       	adiw	r24, 0x01	; 1
     fe0:	0e 94 d1 13 	call	0x27a2	; 0x27a2 <xTaskCheckForTimeOut>
     fe4:	81 11       	cpse	r24, r1
     fe6:	17 c0       	rjmp	.+46     	; 0x1016 <__EEPROM_REGION_LENGTH__+0x16>
     fe8:	c8 01       	movw	r24, r16
     fea:	73 dd       	rcall	.-1306   	; 0xad2 <prvIsQueueEmpty>
     fec:	88 23       	and	r24, r24
     fee:	79 f0       	breq	.+30     	; 0x100e <__EEPROM_REGION_LENGTH__+0xe>
     ff0:	4e 81       	ldd	r20, Y+6	; 0x06
     ff2:	5f 81       	ldd	r21, Y+7	; 0x07
     ff4:	68 85       	ldd	r22, Y+8	; 0x08
     ff6:	79 85       	ldd	r23, Y+9	; 0x09
     ff8:	c8 01       	movw	r24, r16
     ffa:	43 96       	adiw	r24, 0x13	; 19
     ffc:	0e 94 be 11 	call	0x237c	; 0x237c <vTaskPlaceOnEventList>
    1000:	c8 01       	movw	r24, r16
    1002:	fb dd       	rcall	.-1034   	; 0xbfa <prvUnlockQueue>
    1004:	fa d7       	rcall	.+4084   	; 0x1ffa <xTaskResumeAll>
    1006:	81 11       	cpse	r24, r1
    1008:	a6 cf       	rjmp	.-180    	; 0xf56 <xQueueReceive+0x2e>
    100a:	8b dc       	rcall	.-1770   	; 0x922 <vPortYield>
    100c:	a4 cf       	rjmp	.-184    	; 0xf56 <xQueueReceive+0x2e>
    100e:	c8 01       	movw	r24, r16
    1010:	f4 dd       	rcall	.-1048   	; 0xbfa <prvUnlockQueue>
    1012:	f3 d7       	rcall	.+4070   	; 0x1ffa <xTaskResumeAll>
    1014:	a0 cf       	rjmp	.-192    	; 0xf56 <xQueueReceive+0x2e>
    1016:	c8 01       	movw	r24, r16
    1018:	f0 dd       	rcall	.-1056   	; 0xbfa <prvUnlockQueue>
    101a:	ef d7       	rcall	.+4062   	; 0x1ffa <xTaskResumeAll>
    101c:	c8 01       	movw	r24, r16
    101e:	59 dd       	rcall	.-1358   	; 0xad2 <prvIsQueueEmpty>
    1020:	88 23       	and	r24, r24
    1022:	09 f4       	brne	.+2      	; 0x1026 <__EEPROM_REGION_LENGTH__+0x26>
    1024:	98 cf       	rjmp	.-208    	; 0xf56 <xQueueReceive+0x2e>
    1026:	80 e0       	ldi	r24, 0x00	; 0
    1028:	29 96       	adiw	r28, 0x09	; 9
    102a:	0f b6       	in	r0, 0x3f	; 63
    102c:	f8 94       	cli
    102e:	de bf       	out	0x3e, r29	; 62
    1030:	0f be       	out	0x3f, r0	; 63
    1032:	cd bf       	out	0x3d, r28	; 61
    1034:	df 91       	pop	r29
    1036:	cf 91       	pop	r28
    1038:	1f 91       	pop	r17
    103a:	0f 91       	pop	r16
    103c:	ff 90       	pop	r15
    103e:	ef 90       	pop	r14
    1040:	df 90       	pop	r13
    1042:	cf 90       	pop	r12
    1044:	08 95       	ret

00001046 <xQueueSemaphoreTake>:
    1046:	ef 92       	push	r14
    1048:	ff 92       	push	r15
    104a:	0f 93       	push	r16
    104c:	1f 93       	push	r17
    104e:	cf 93       	push	r28
    1050:	df 93       	push	r29
    1052:	cd b7       	in	r28, 0x3d	; 61
    1054:	de b7       	in	r29, 0x3e	; 62
    1056:	29 97       	sbiw	r28, 0x09	; 9
    1058:	0f b6       	in	r0, 0x3f	; 63
    105a:	f8 94       	cli
    105c:	de bf       	out	0x3e, r29	; 62
    105e:	0f be       	out	0x3f, r0	; 63
    1060:	cd bf       	out	0x3d, r28	; 61
    1062:	8c 01       	movw	r16, r24
    1064:	4e 83       	std	Y+6, r20	; 0x06
    1066:	5f 83       	std	Y+7, r21	; 0x07
    1068:	68 87       	std	Y+8, r22	; 0x08
    106a:	79 87       	std	Y+9, r23	; 0x09
    106c:	e1 2c       	mov	r14, r1
    106e:	f1 2c       	mov	r15, r1
    1070:	0f b6       	in	r0, 0x3f	; 63
    1072:	f8 94       	cli
    1074:	0f 92       	push	r0
    1076:	f8 01       	movw	r30, r16
    1078:	86 8d       	ldd	r24, Z+30	; 0x1e
    107a:	88 23       	and	r24, r24
    107c:	c9 f0       	breq	.+50     	; 0x10b0 <xQueueSemaphoreTake+0x6a>
    107e:	81 50       	subi	r24, 0x01	; 1
    1080:	86 8f       	std	Z+30, r24	; 0x1e
    1082:	80 81       	ld	r24, Z
    1084:	91 81       	ldd	r25, Z+1	; 0x01
    1086:	89 2b       	or	r24, r25
    1088:	29 f4       	brne	.+10     	; 0x1094 <xQueueSemaphoreTake+0x4e>
    108a:	0e 94 c1 15 	call	0x2b82	; 0x2b82 <pvTaskIncrementMutexHeldCount>
    108e:	f8 01       	movw	r30, r16
    1090:	95 83       	std	Z+5, r25	; 0x05
    1092:	84 83       	std	Z+4, r24	; 0x04
    1094:	f8 01       	movw	r30, r16
    1096:	80 85       	ldd	r24, Z+8	; 0x08
    1098:	88 23       	and	r24, r24
    109a:	31 f0       	breq	.+12     	; 0x10a8 <xQueueSemaphoreTake+0x62>
    109c:	c8 01       	movw	r24, r16
    109e:	08 96       	adiw	r24, 0x08	; 8
    10a0:	0e 94 61 12 	call	0x24c2	; 0x24c2 <xTaskRemoveFromEventList>
    10a4:	81 11       	cpse	r24, r1
    10a6:	3d dc       	rcall	.-1926   	; 0x922 <vPortYield>
    10a8:	0f 90       	pop	r0
    10aa:	0f be       	out	0x3f, r0	; 63
    10ac:	81 e0       	ldi	r24, 0x01	; 1
    10ae:	6f c0       	rjmp	.+222    	; 0x118e <xQueueSemaphoreTake+0x148>
    10b0:	8e 81       	ldd	r24, Y+6	; 0x06
    10b2:	9f 81       	ldd	r25, Y+7	; 0x07
    10b4:	a8 85       	ldd	r26, Y+8	; 0x08
    10b6:	b9 85       	ldd	r27, Y+9	; 0x09
    10b8:	89 2b       	or	r24, r25
    10ba:	8a 2b       	or	r24, r26
    10bc:	8b 2b       	or	r24, r27
    10be:	21 f4       	brne	.+8      	; 0x10c8 <xQueueSemaphoreTake+0x82>
    10c0:	0f 90       	pop	r0
    10c2:	0f be       	out	0x3f, r0	; 63
    10c4:	80 e0       	ldi	r24, 0x00	; 0
    10c6:	63 c0       	rjmp	.+198    	; 0x118e <xQueueSemaphoreTake+0x148>
    10c8:	f1 10       	cpse	r15, r1
    10ca:	06 c0       	rjmp	.+12     	; 0x10d8 <xQueueSemaphoreTake+0x92>
    10cc:	ce 01       	movw	r24, r28
    10ce:	01 96       	adiw	r24, 0x01	; 1
    10d0:	0e 94 c0 13 	call	0x2780	; 0x2780 <vTaskInternalSetTimeOutState>
    10d4:	ff 24       	eor	r15, r15
    10d6:	f3 94       	inc	r15
    10d8:	0f 90       	pop	r0
    10da:	0f be       	out	0x3f, r0	; 63
    10dc:	4e d6       	rcall	.+3228   	; 0x1d7a <vTaskSuspendAll>
    10de:	0f b6       	in	r0, 0x3f	; 63
    10e0:	f8 94       	cli
    10e2:	0f 92       	push	r0
    10e4:	f8 01       	movw	r30, r16
    10e6:	81 a1       	ldd	r24, Z+33	; 0x21
    10e8:	8f 3f       	cpi	r24, 0xFF	; 255
    10ea:	09 f4       	brne	.+2      	; 0x10ee <xQueueSemaphoreTake+0xa8>
    10ec:	11 a2       	std	Z+33, r1	; 0x21
    10ee:	f8 01       	movw	r30, r16
    10f0:	82 a1       	ldd	r24, Z+34	; 0x22
    10f2:	8f 3f       	cpi	r24, 0xFF	; 255
    10f4:	09 f4       	brne	.+2      	; 0x10f8 <xQueueSemaphoreTake+0xb2>
    10f6:	12 a2       	std	Z+34, r1	; 0x22
    10f8:	0f 90       	pop	r0
    10fa:	0f be       	out	0x3f, r0	; 63
    10fc:	be 01       	movw	r22, r28
    10fe:	6a 5f       	subi	r22, 0xFA	; 250
    1100:	7f 4f       	sbci	r23, 0xFF	; 255
    1102:	ce 01       	movw	r24, r28
    1104:	01 96       	adiw	r24, 0x01	; 1
    1106:	0e 94 d1 13 	call	0x27a2	; 0x27a2 <xTaskCheckForTimeOut>
    110a:	81 11       	cpse	r24, r1
    110c:	26 c0       	rjmp	.+76     	; 0x115a <xQueueSemaphoreTake+0x114>
    110e:	c8 01       	movw	r24, r16
    1110:	e0 dc       	rcall	.-1600   	; 0xad2 <prvIsQueueEmpty>
    1112:	88 23       	and	r24, r24
    1114:	f1 f0       	breq	.+60     	; 0x1152 <xQueueSemaphoreTake+0x10c>
    1116:	f8 01       	movw	r30, r16
    1118:	80 81       	ld	r24, Z
    111a:	91 81       	ldd	r25, Z+1	; 0x01
    111c:	89 2b       	or	r24, r25
    111e:	51 f4       	brne	.+20     	; 0x1134 <xQueueSemaphoreTake+0xee>
    1120:	0f b6       	in	r0, 0x3f	; 63
    1122:	f8 94       	cli
    1124:	0f 92       	push	r0
    1126:	84 81       	ldd	r24, Z+4	; 0x04
    1128:	95 81       	ldd	r25, Z+5	; 0x05
    112a:	0e 94 4e 14 	call	0x289c	; 0x289c <xTaskPriorityInherit>
    112e:	e8 2e       	mov	r14, r24
    1130:	0f 90       	pop	r0
    1132:	0f be       	out	0x3f, r0	; 63
    1134:	4e 81       	ldd	r20, Y+6	; 0x06
    1136:	5f 81       	ldd	r21, Y+7	; 0x07
    1138:	68 85       	ldd	r22, Y+8	; 0x08
    113a:	79 85       	ldd	r23, Y+9	; 0x09
    113c:	c8 01       	movw	r24, r16
    113e:	43 96       	adiw	r24, 0x13	; 19
    1140:	0e 94 be 11 	call	0x237c	; 0x237c <vTaskPlaceOnEventList>
    1144:	c8 01       	movw	r24, r16
    1146:	59 dd       	rcall	.-1358   	; 0xbfa <prvUnlockQueue>
    1148:	58 d7       	rcall	.+3760   	; 0x1ffa <xTaskResumeAll>
    114a:	81 11       	cpse	r24, r1
    114c:	91 cf       	rjmp	.-222    	; 0x1070 <xQueueSemaphoreTake+0x2a>
    114e:	e9 db       	rcall	.-2094   	; 0x922 <vPortYield>
    1150:	8f cf       	rjmp	.-226    	; 0x1070 <xQueueSemaphoreTake+0x2a>
    1152:	c8 01       	movw	r24, r16
    1154:	52 dd       	rcall	.-1372   	; 0xbfa <prvUnlockQueue>
    1156:	51 d7       	rcall	.+3746   	; 0x1ffa <xTaskResumeAll>
    1158:	8b cf       	rjmp	.-234    	; 0x1070 <xQueueSemaphoreTake+0x2a>
    115a:	c8 01       	movw	r24, r16
    115c:	4e dd       	rcall	.-1380   	; 0xbfa <prvUnlockQueue>
    115e:	4d d7       	rcall	.+3738   	; 0x1ffa <xTaskResumeAll>
    1160:	c8 01       	movw	r24, r16
    1162:	b7 dc       	rcall	.-1682   	; 0xad2 <prvIsQueueEmpty>
    1164:	88 23       	and	r24, r24
    1166:	09 f4       	brne	.+2      	; 0x116a <xQueueSemaphoreTake+0x124>
    1168:	83 cf       	rjmp	.-250    	; 0x1070 <xQueueSemaphoreTake+0x2a>
    116a:	ee 20       	and	r14, r14
    116c:	79 f0       	breq	.+30     	; 0x118c <xQueueSemaphoreTake+0x146>
    116e:	0f b6       	in	r0, 0x3f	; 63
    1170:	f8 94       	cli
    1172:	0f 92       	push	r0
    1174:	c8 01       	movw	r24, r16
    1176:	9d dc       	rcall	.-1734   	; 0xab2 <prvGetDisinheritPriorityAfterTimeout>
    1178:	68 2f       	mov	r22, r24
    117a:	f8 01       	movw	r30, r16
    117c:	84 81       	ldd	r24, Z+4	; 0x04
    117e:	95 81       	ldd	r25, Z+5	; 0x05
    1180:	0e 94 30 15 	call	0x2a60	; 0x2a60 <vTaskPriorityDisinheritAfterTimeout>
    1184:	0f 90       	pop	r0
    1186:	0f be       	out	0x3f, r0	; 63
    1188:	80 e0       	ldi	r24, 0x00	; 0
    118a:	01 c0       	rjmp	.+2      	; 0x118e <xQueueSemaphoreTake+0x148>
    118c:	80 e0       	ldi	r24, 0x00	; 0
    118e:	29 96       	adiw	r28, 0x09	; 9
    1190:	0f b6       	in	r0, 0x3f	; 63
    1192:	f8 94       	cli
    1194:	de bf       	out	0x3e, r29	; 62
    1196:	0f be       	out	0x3f, r0	; 63
    1198:	cd bf       	out	0x3d, r28	; 61
    119a:	df 91       	pop	r29
    119c:	cf 91       	pop	r28
    119e:	1f 91       	pop	r17
    11a0:	0f 91       	pop	r16
    11a2:	ff 90       	pop	r15
    11a4:	ef 90       	pop	r14
    11a6:	08 95       	ret

000011a8 <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
    11a8:	cf 93       	push	r28
    11aa:	df 93       	push	r29
    11ac:	ec 01       	movw	r28, r24
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
    11ae:	0f b6       	in	r0, 0x3f	; 63
    11b0:	f8 94       	cli
    11b2:	0f 92       	push	r0
    11b4:	89 a1       	ldd	r24, Y+33	; 0x21
    11b6:	8f 3f       	cpi	r24, 0xFF	; 255
    11b8:	09 f4       	brne	.+2      	; 0x11bc <vQueueWaitForMessageRestricted+0x14>
    11ba:	19 a2       	std	Y+33, r1	; 0x21
    11bc:	8a a1       	ldd	r24, Y+34	; 0x22
    11be:	8f 3f       	cpi	r24, 0xFF	; 255
    11c0:	09 f4       	brne	.+2      	; 0x11c4 <vQueueWaitForMessageRestricted+0x1c>
    11c2:	1a a2       	std	Y+34, r1	; 0x22
    11c4:	0f 90       	pop	r0
    11c6:	0f be       	out	0x3f, r0	; 63

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
    11c8:	8e 8d       	ldd	r24, Y+30	; 0x1e
    11ca:	81 11       	cpse	r24, r1
    11cc:	04 c0       	rjmp	.+8      	; 0x11d6 <vQueueWaitForMessageRestricted+0x2e>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
    11ce:	ce 01       	movw	r24, r28
    11d0:	43 96       	adiw	r24, 0x13	; 19
    11d2:	0e 94 1f 12 	call	0x243e	; 0x243e <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
    11d6:	ce 01       	movw	r24, r28
    11d8:	10 dd       	rcall	.-1504   	; 0xbfa <prvUnlockQueue>
    }
    11da:	df 91       	pop	r29
    11dc:	cf 91       	pop	r28
    11de:	08 95       	ret

000011e0 <prvBytesInBuffer>:

    configASSERT( pxStreamBuffer );

    xReturn = prvBytesInBuffer( pxStreamBuffer );
    return xReturn;
}
    11e0:	fc 01       	movw	r30, r24
    11e2:	44 81       	ldd	r20, Z+4	; 0x04
    11e4:	55 81       	ldd	r21, Z+5	; 0x05
    11e6:	22 81       	ldd	r18, Z+2	; 0x02
    11e8:	33 81       	ldd	r19, Z+3	; 0x03
    11ea:	24 0f       	add	r18, r20
    11ec:	35 1f       	adc	r19, r21
    11ee:	80 81       	ld	r24, Z
    11f0:	91 81       	ldd	r25, Z+1	; 0x01
    11f2:	b9 01       	movw	r22, r18
    11f4:	68 1b       	sub	r22, r24
    11f6:	79 0b       	sbc	r23, r25
    11f8:	cb 01       	movw	r24, r22
    11fa:	64 17       	cp	r22, r20
    11fc:	75 07       	cpc	r23, r21
    11fe:	10 f0       	brcs	.+4      	; 0x1204 <prvBytesInBuffer+0x24>
    1200:	84 1b       	sub	r24, r20
    1202:	95 0b       	sbc	r25, r21
    1204:	08 95       	ret

00001206 <prvInitialiseNewStreamBuffer>:
    1206:	0f 93       	push	r16
    1208:	fc 01       	movw	r30, r24
    120a:	8f e0       	ldi	r24, 0x0F	; 15
    120c:	df 01       	movw	r26, r30
    120e:	1d 92       	st	X+, r1
    1210:	8a 95       	dec	r24
    1212:	e9 f7       	brne	.-6      	; 0x120e <prvInitialiseNewStreamBuffer+0x8>
    1214:	75 87       	std	Z+13, r23	; 0x0d
    1216:	64 87       	std	Z+12, r22	; 0x0c
    1218:	55 83       	std	Z+5, r21	; 0x05
    121a:	44 83       	std	Z+4, r20	; 0x04
    121c:	37 83       	std	Z+7, r19	; 0x07
    121e:	26 83       	std	Z+6, r18	; 0x06
    1220:	06 87       	std	Z+14, r16	; 0x0e
    1222:	0f 91       	pop	r16
    1224:	08 95       	ret

00001226 <prvWriteBytesToBuffer>:
    1226:	af 92       	push	r10
    1228:	bf 92       	push	r11
    122a:	cf 92       	push	r12
    122c:	df 92       	push	r13
    122e:	ef 92       	push	r14
    1230:	ff 92       	push	r15
    1232:	0f 93       	push	r16
    1234:	1f 93       	push	r17
    1236:	cf 93       	push	r28
    1238:	df 93       	push	r29
    123a:	6c 01       	movw	r12, r24
    123c:	5b 01       	movw	r10, r22
    123e:	7a 01       	movw	r14, r20
    1240:	fc 01       	movw	r30, r24
    1242:	c2 81       	ldd	r28, Z+2	; 0x02
    1244:	d3 81       	ldd	r29, Z+3	; 0x03
    1246:	04 81       	ldd	r16, Z+4	; 0x04
    1248:	15 81       	ldd	r17, Z+5	; 0x05
    124a:	0c 1b       	sub	r16, r28
    124c:	1d 0b       	sbc	r17, r29
    124e:	40 17       	cp	r20, r16
    1250:	51 07       	cpc	r21, r17
    1252:	08 f4       	brcc	.+2      	; 0x1256 <prvWriteBytesToBuffer+0x30>
    1254:	8a 01       	movw	r16, r20
    1256:	f6 01       	movw	r30, r12
    1258:	84 85       	ldd	r24, Z+12	; 0x0c
    125a:	95 85       	ldd	r25, Z+13	; 0x0d
    125c:	a8 01       	movw	r20, r16
    125e:	b5 01       	movw	r22, r10
    1260:	8c 0f       	add	r24, r28
    1262:	9d 1f       	adc	r25, r29
    1264:	0e 94 1d 30 	call	0x603a	; 0x603a <memcpy>
    1268:	0e 15       	cp	r16, r14
    126a:	1f 05       	cpc	r17, r15
    126c:	58 f4       	brcc	.+22     	; 0x1284 <prvWriteBytesToBuffer+0x5e>
    126e:	a7 01       	movw	r20, r14
    1270:	40 1b       	sub	r20, r16
    1272:	51 0b       	sbc	r21, r17
    1274:	b5 01       	movw	r22, r10
    1276:	60 0f       	add	r22, r16
    1278:	71 1f       	adc	r23, r17
    127a:	f6 01       	movw	r30, r12
    127c:	84 85       	ldd	r24, Z+12	; 0x0c
    127e:	95 85       	ldd	r25, Z+13	; 0x0d
    1280:	0e 94 1d 30 	call	0x603a	; 0x603a <memcpy>
    1284:	ce 01       	movw	r24, r28
    1286:	8e 0d       	add	r24, r14
    1288:	9f 1d       	adc	r25, r15
    128a:	f6 01       	movw	r30, r12
    128c:	24 81       	ldd	r18, Z+4	; 0x04
    128e:	35 81       	ldd	r19, Z+5	; 0x05
    1290:	82 17       	cp	r24, r18
    1292:	93 07       	cpc	r25, r19
    1294:	10 f0       	brcs	.+4      	; 0x129a <prvWriteBytesToBuffer+0x74>
    1296:	82 1b       	sub	r24, r18
    1298:	93 0b       	sbc	r25, r19
    129a:	f6 01       	movw	r30, r12
    129c:	93 83       	std	Z+3, r25	; 0x03
    129e:	82 83       	std	Z+2, r24	; 0x02
    12a0:	c7 01       	movw	r24, r14
    12a2:	df 91       	pop	r29
    12a4:	cf 91       	pop	r28
    12a6:	1f 91       	pop	r17
    12a8:	0f 91       	pop	r16
    12aa:	ff 90       	pop	r15
    12ac:	ef 90       	pop	r14
    12ae:	df 90       	pop	r13
    12b0:	cf 90       	pop	r12
    12b2:	bf 90       	pop	r11
    12b4:	af 90       	pop	r10
    12b6:	08 95       	ret

000012b8 <prvWriteMessageToBuffer>:
    12b8:	cf 92       	push	r12
    12ba:	df 92       	push	r13
    12bc:	ef 92       	push	r14
    12be:	ff 92       	push	r15
    12c0:	0f 93       	push	r16
    12c2:	1f 93       	push	r17
    12c4:	cf 93       	push	r28
    12c6:	df 93       	push	r29
    12c8:	1f 92       	push	r1
    12ca:	1f 92       	push	r1
    12cc:	cd b7       	in	r28, 0x3d	; 61
    12ce:	de b7       	in	r29, 0x3e	; 62
    12d0:	7c 01       	movw	r14, r24
    12d2:	6b 01       	movw	r12, r22
    12d4:	5a 83       	std	Y+2, r21	; 0x02
    12d6:	49 83       	std	Y+1, r20	; 0x01
    12d8:	21 15       	cp	r18, r1
    12da:	31 05       	cpc	r19, r1
    12dc:	c1 f0       	breq	.+48     	; 0x130e <prvWriteMessageToBuffer+0x56>
    12de:	fc 01       	movw	r30, r24
    12e0:	86 85       	ldd	r24, Z+14	; 0x0e
    12e2:	80 fd       	sbrc	r24, 0
    12e4:	08 c0       	rjmp	.+16     	; 0x12f6 <prvWriteMessageToBuffer+0x3e>
    12e6:	42 17       	cp	r20, r18
    12e8:	53 07       	cpc	r21, r19
    12ea:	08 f4       	brcc	.+2      	; 0x12ee <prvWriteMessageToBuffer+0x36>
    12ec:	9a 01       	movw	r18, r20
    12ee:	3a 83       	std	Y+2, r19	; 0x02
    12f0:	29 83       	std	Y+1, r18	; 0x01
    12f2:	81 e0       	ldi	r24, 0x01	; 1
    12f4:	0f c0       	rjmp	.+30     	; 0x1314 <prvWriteMessageToBuffer+0x5c>
    12f6:	20 17       	cp	r18, r16
    12f8:	31 07       	cpc	r19, r17
    12fa:	58 f0       	brcs	.+22     	; 0x1312 <prvWriteMessageToBuffer+0x5a>
    12fc:	42 e0       	ldi	r20, 0x02	; 2
    12fe:	50 e0       	ldi	r21, 0x00	; 0
    1300:	be 01       	movw	r22, r28
    1302:	6f 5f       	subi	r22, 0xFF	; 255
    1304:	7f 4f       	sbci	r23, 0xFF	; 255
    1306:	c7 01       	movw	r24, r14
    1308:	8e df       	rcall	.-228    	; 0x1226 <prvWriteBytesToBuffer>
    130a:	81 e0       	ldi	r24, 0x01	; 1
    130c:	03 c0       	rjmp	.+6      	; 0x1314 <prvWriteMessageToBuffer+0x5c>
    130e:	80 e0       	ldi	r24, 0x00	; 0
    1310:	01 c0       	rjmp	.+2      	; 0x1314 <prvWriteMessageToBuffer+0x5c>
    1312:	80 e0       	ldi	r24, 0x00	; 0
    1314:	88 23       	and	r24, r24
    1316:	31 f0       	breq	.+12     	; 0x1324 <prvWriteMessageToBuffer+0x6c>
    1318:	49 81       	ldd	r20, Y+1	; 0x01
    131a:	5a 81       	ldd	r21, Y+2	; 0x02
    131c:	b6 01       	movw	r22, r12
    131e:	c7 01       	movw	r24, r14
    1320:	82 df       	rcall	.-252    	; 0x1226 <prvWriteBytesToBuffer>
    1322:	02 c0       	rjmp	.+4      	; 0x1328 <prvWriteMessageToBuffer+0x70>
    1324:	80 e0       	ldi	r24, 0x00	; 0
    1326:	90 e0       	ldi	r25, 0x00	; 0
    1328:	0f 90       	pop	r0
    132a:	0f 90       	pop	r0
    132c:	df 91       	pop	r29
    132e:	cf 91       	pop	r28
    1330:	1f 91       	pop	r17
    1332:	0f 91       	pop	r16
    1334:	ff 90       	pop	r15
    1336:	ef 90       	pop	r14
    1338:	df 90       	pop	r13
    133a:	cf 90       	pop	r12
    133c:	08 95       	ret

0000133e <prvReadBytesFromBuffer>:
    133e:	af 92       	push	r10
    1340:	bf 92       	push	r11
    1342:	cf 92       	push	r12
    1344:	df 92       	push	r13
    1346:	ef 92       	push	r14
    1348:	ff 92       	push	r15
    134a:	0f 93       	push	r16
    134c:	1f 93       	push	r17
    134e:	cf 93       	push	r28
    1350:	df 93       	push	r29
    1352:	7c 01       	movw	r14, r24
    1354:	5b 01       	movw	r10, r22
    1356:	e9 01       	movw	r28, r18
    1358:	42 17       	cp	r20, r18
    135a:	53 07       	cpc	r21, r19
    135c:	08 f4       	brcc	.+2      	; 0x1360 <prvReadBytesFromBuffer+0x22>
    135e:	ea 01       	movw	r28, r20
    1360:	20 97       	sbiw	r28, 0x00	; 0
    1362:	81 f1       	breq	.+96     	; 0x13c4 <prvReadBytesFromBuffer+0x86>
    1364:	f7 01       	movw	r30, r14
    1366:	00 81       	ld	r16, Z
    1368:	11 81       	ldd	r17, Z+1	; 0x01
    136a:	84 81       	ldd	r24, Z+4	; 0x04
    136c:	95 81       	ldd	r25, Z+5	; 0x05
    136e:	80 1b       	sub	r24, r16
    1370:	91 0b       	sbc	r25, r17
    1372:	6e 01       	movw	r12, r28
    1374:	8c 17       	cp	r24, r28
    1376:	9d 07       	cpc	r25, r29
    1378:	08 f4       	brcc	.+2      	; 0x137c <prvReadBytesFromBuffer+0x3e>
    137a:	6c 01       	movw	r12, r24
    137c:	f7 01       	movw	r30, r14
    137e:	64 85       	ldd	r22, Z+12	; 0x0c
    1380:	75 85       	ldd	r23, Z+13	; 0x0d
    1382:	60 0f       	add	r22, r16
    1384:	71 1f       	adc	r23, r17
    1386:	a6 01       	movw	r20, r12
    1388:	c5 01       	movw	r24, r10
    138a:	0e 94 1d 30 	call	0x603a	; 0x603a <memcpy>
    138e:	cc 16       	cp	r12, r28
    1390:	dd 06       	cpc	r13, r29
    1392:	58 f4       	brcc	.+22     	; 0x13aa <prvReadBytesFromBuffer+0x6c>
    1394:	ae 01       	movw	r20, r28
    1396:	4c 19       	sub	r20, r12
    1398:	5d 09       	sbc	r21, r13
    139a:	f7 01       	movw	r30, r14
    139c:	64 85       	ldd	r22, Z+12	; 0x0c
    139e:	75 85       	ldd	r23, Z+13	; 0x0d
    13a0:	c5 01       	movw	r24, r10
    13a2:	8c 0d       	add	r24, r12
    13a4:	9d 1d       	adc	r25, r13
    13a6:	0e 94 1d 30 	call	0x603a	; 0x603a <memcpy>
    13aa:	0c 0f       	add	r16, r28
    13ac:	1d 1f       	adc	r17, r29
    13ae:	f7 01       	movw	r30, r14
    13b0:	84 81       	ldd	r24, Z+4	; 0x04
    13b2:	95 81       	ldd	r25, Z+5	; 0x05
    13b4:	08 17       	cp	r16, r24
    13b6:	19 07       	cpc	r17, r25
    13b8:	10 f0       	brcs	.+4      	; 0x13be <prvReadBytesFromBuffer+0x80>
    13ba:	08 1b       	sub	r16, r24
    13bc:	19 0b       	sbc	r17, r25
    13be:	f7 01       	movw	r30, r14
    13c0:	11 83       	std	Z+1, r17	; 0x01
    13c2:	00 83       	st	Z, r16
    13c4:	ce 01       	movw	r24, r28
    13c6:	df 91       	pop	r29
    13c8:	cf 91       	pop	r28
    13ca:	1f 91       	pop	r17
    13cc:	0f 91       	pop	r16
    13ce:	ff 90       	pop	r15
    13d0:	ef 90       	pop	r14
    13d2:	df 90       	pop	r13
    13d4:	cf 90       	pop	r12
    13d6:	bf 90       	pop	r11
    13d8:	af 90       	pop	r10
    13da:	08 95       	ret

000013dc <prvReadMessageFromBuffer>:
    13dc:	6f 92       	push	r6
    13de:	7f 92       	push	r7
    13e0:	8f 92       	push	r8
    13e2:	9f 92       	push	r9
    13e4:	af 92       	push	r10
    13e6:	bf 92       	push	r11
    13e8:	cf 92       	push	r12
    13ea:	df 92       	push	r13
    13ec:	ef 92       	push	r14
    13ee:	ff 92       	push	r15
    13f0:	0f 93       	push	r16
    13f2:	1f 93       	push	r17
    13f4:	cf 93       	push	r28
    13f6:	df 93       	push	r29
    13f8:	1f 92       	push	r1
    13fa:	1f 92       	push	r1
    13fc:	cd b7       	in	r28, 0x3d	; 61
    13fe:	de b7       	in	r29, 0x3e	; 62
    1400:	6c 01       	movw	r12, r24
    1402:	4b 01       	movw	r8, r22
    1404:	5a 01       	movw	r10, r20
    1406:	79 01       	movw	r14, r18
    1408:	01 15       	cp	r16, r1
    140a:	11 05       	cpc	r17, r1
    140c:	b1 f0       	breq	.+44     	; 0x143a <prvReadMessageFromBuffer+0x5e>
    140e:	fc 01       	movw	r30, r24
    1410:	60 80       	ld	r6, Z
    1412:	71 80       	ldd	r7, Z+1	; 0x01
    1414:	a8 01       	movw	r20, r16
    1416:	be 01       	movw	r22, r28
    1418:	6f 5f       	subi	r22, 0xFF	; 255
    141a:	7f 4f       	sbci	r23, 0xFF	; 255
    141c:	90 df       	rcall	.-224    	; 0x133e <prvReadBytesFromBuffer>
    141e:	89 81       	ldd	r24, Y+1	; 0x01
    1420:	9a 81       	ldd	r25, Y+2	; 0x02
    1422:	e0 1a       	sub	r14, r16
    1424:	f1 0a       	sbc	r15, r17
    1426:	a8 16       	cp	r10, r24
    1428:	b9 06       	cpc	r11, r25
    142a:	30 f4       	brcc	.+12     	; 0x1438 <prvReadMessageFromBuffer+0x5c>
    142c:	f6 01       	movw	r30, r12
    142e:	71 82       	std	Z+1, r7	; 0x01
    1430:	60 82       	st	Z, r6
    1432:	a1 2c       	mov	r10, r1
    1434:	b1 2c       	mov	r11, r1
    1436:	01 c0       	rjmp	.+2      	; 0x143a <prvReadMessageFromBuffer+0x5e>
    1438:	5c 01       	movw	r10, r24
    143a:	97 01       	movw	r18, r14
    143c:	a5 01       	movw	r20, r10
    143e:	b4 01       	movw	r22, r8
    1440:	c6 01       	movw	r24, r12
    1442:	7d df       	rcall	.-262    	; 0x133e <prvReadBytesFromBuffer>
    1444:	0f 90       	pop	r0
    1446:	0f 90       	pop	r0
    1448:	df 91       	pop	r29
    144a:	cf 91       	pop	r28
    144c:	1f 91       	pop	r17
    144e:	0f 91       	pop	r16
    1450:	ff 90       	pop	r15
    1452:	ef 90       	pop	r14
    1454:	df 90       	pop	r13
    1456:	cf 90       	pop	r12
    1458:	bf 90       	pop	r11
    145a:	af 90       	pop	r10
    145c:	9f 90       	pop	r9
    145e:	8f 90       	pop	r8
    1460:	7f 90       	pop	r7
    1462:	6f 90       	pop	r6
    1464:	08 95       	ret

00001466 <xStreamBufferGenericCreate>:
    1466:	cf 92       	push	r12
    1468:	df 92       	push	r13
    146a:	ef 92       	push	r14
    146c:	ff 92       	push	r15
    146e:	0f 93       	push	r16
    1470:	cf 93       	push	r28
    1472:	df 93       	push	r29
    1474:	ec 01       	movw	r28, r24
    1476:	6b 01       	movw	r12, r22
    1478:	41 30       	cpi	r20, 0x01	; 1
    147a:	11 f4       	brne	.+4      	; 0x1480 <xStreamBufferGenericCreate+0x1a>
    147c:	01 e0       	ldi	r16, 0x01	; 1
    147e:	01 c0       	rjmp	.+2      	; 0x1482 <xStreamBufferGenericCreate+0x1c>
    1480:	00 e0       	ldi	r16, 0x00	; 0
    1482:	c1 14       	cp	r12, r1
    1484:	d1 04       	cpc	r13, r1
    1486:	19 f4       	brne	.+6      	; 0x148e <xStreamBufferGenericCreate+0x28>
    1488:	cc 24       	eor	r12, r12
    148a:	c3 94       	inc	r12
    148c:	d1 2c       	mov	r13, r1
    148e:	ce 01       	movw	r24, r28
    1490:	40 96       	adiw	r24, 0x10	; 16
    1492:	c8 17       	cp	r28, r24
    1494:	d9 07       	cpc	r29, r25
    1496:	20 f4       	brcc	.+8      	; 0x14a0 <xStreamBufferGenericCreate+0x3a>
    1498:	21 96       	adiw	r28, 0x01	; 1
    149a:	8f d8       	rcall	.-3810   	; 0x5ba <pvPortMalloc>
    149c:	7c 01       	movw	r14, r24
    149e:	02 c0       	rjmp	.+4      	; 0x14a4 <xStreamBufferGenericCreate+0x3e>
    14a0:	e1 2c       	mov	r14, r1
    14a2:	f1 2c       	mov	r15, r1
    14a4:	e1 14       	cp	r14, r1
    14a6:	f1 04       	cpc	r15, r1
    14a8:	39 f0       	breq	.+14     	; 0x14b8 <xStreamBufferGenericCreate+0x52>
    14aa:	96 01       	movw	r18, r12
    14ac:	ae 01       	movw	r20, r28
    14ae:	b7 01       	movw	r22, r14
    14b0:	61 5f       	subi	r22, 0xF1	; 241
    14b2:	7f 4f       	sbci	r23, 0xFF	; 255
    14b4:	c7 01       	movw	r24, r14
    14b6:	a7 de       	rcall	.-690    	; 0x1206 <prvInitialiseNewStreamBuffer>
    14b8:	c7 01       	movw	r24, r14
    14ba:	df 91       	pop	r29
    14bc:	cf 91       	pop	r28
    14be:	0f 91       	pop	r16
    14c0:	ff 90       	pop	r15
    14c2:	ef 90       	pop	r14
    14c4:	df 90       	pop	r13
    14c6:	cf 90       	pop	r12
    14c8:	08 95       	ret

000014ca <xStreamBufferReset>:
    14ca:	0f 93       	push	r16
    14cc:	0f b6       	in	r0, 0x3f	; 63
    14ce:	f8 94       	cli
    14d0:	0f 92       	push	r0
    14d2:	fc 01       	movw	r30, r24
    14d4:	20 85       	ldd	r18, Z+8	; 0x08
    14d6:	31 85       	ldd	r19, Z+9	; 0x09
    14d8:	23 2b       	or	r18, r19
    14da:	71 f4       	brne	.+28     	; 0x14f8 <xStreamBufferReset+0x2e>
    14dc:	22 85       	ldd	r18, Z+10	; 0x0a
    14de:	33 85       	ldd	r19, Z+11	; 0x0b
    14e0:	23 2b       	or	r18, r19
    14e2:	61 f4       	brne	.+24     	; 0x14fc <xStreamBufferReset+0x32>
    14e4:	26 81       	ldd	r18, Z+6	; 0x06
    14e6:	37 81       	ldd	r19, Z+7	; 0x07
    14e8:	44 81       	ldd	r20, Z+4	; 0x04
    14ea:	55 81       	ldd	r21, Z+5	; 0x05
    14ec:	64 85       	ldd	r22, Z+12	; 0x0c
    14ee:	75 85       	ldd	r23, Z+13	; 0x0d
    14f0:	06 85       	ldd	r16, Z+14	; 0x0e
    14f2:	89 de       	rcall	.-750    	; 0x1206 <prvInitialiseNewStreamBuffer>
    14f4:	81 e0       	ldi	r24, 0x01	; 1
    14f6:	03 c0       	rjmp	.+6      	; 0x14fe <xStreamBufferReset+0x34>
    14f8:	80 e0       	ldi	r24, 0x00	; 0
    14fa:	01 c0       	rjmp	.+2      	; 0x14fe <xStreamBufferReset+0x34>
    14fc:	80 e0       	ldi	r24, 0x00	; 0
    14fe:	0f 90       	pop	r0
    1500:	0f be       	out	0x3f, r0	; 63
    1502:	0f 91       	pop	r16
    1504:	08 95       	ret

00001506 <xStreamBufferSpacesAvailable>:
    1506:	fc 01       	movw	r30, r24
    1508:	24 81       	ldd	r18, Z+4	; 0x04
    150a:	35 81       	ldd	r19, Z+5	; 0x05
    150c:	80 81       	ld	r24, Z
    150e:	91 81       	ldd	r25, Z+1	; 0x01
    1510:	82 0f       	add	r24, r18
    1512:	93 1f       	adc	r25, r19
    1514:	42 81       	ldd	r20, Z+2	; 0x02
    1516:	53 81       	ldd	r21, Z+3	; 0x03
    1518:	84 1b       	sub	r24, r20
    151a:	95 0b       	sbc	r25, r21
    151c:	01 97       	sbiw	r24, 0x01	; 1
    151e:	82 17       	cp	r24, r18
    1520:	93 07       	cpc	r25, r19
    1522:	10 f0       	brcs	.+4      	; 0x1528 <xStreamBufferSpacesAvailable+0x22>
    1524:	82 1b       	sub	r24, r18
    1526:	93 0b       	sbc	r25, r19
    1528:	08 95       	ret

0000152a <xStreamBufferSend>:

size_t xStreamBufferSend( StreamBufferHandle_t xStreamBuffer,
                          const void * pvTxData,
                          size_t xDataLengthBytes,
                          TickType_t xTicksToWait )
{
    152a:	2f 92       	push	r2
    152c:	3f 92       	push	r3
    152e:	4f 92       	push	r4
    1530:	5f 92       	push	r5
    1532:	6f 92       	push	r6
    1534:	7f 92       	push	r7
    1536:	8f 92       	push	r8
    1538:	9f 92       	push	r9
    153a:	af 92       	push	r10
    153c:	bf 92       	push	r11
    153e:	cf 92       	push	r12
    1540:	df 92       	push	r13
    1542:	ef 92       	push	r14
    1544:	ff 92       	push	r15
    1546:	0f 93       	push	r16
    1548:	1f 93       	push	r17
    154a:	cf 93       	push	r28
    154c:	df 93       	push	r29
    154e:	cd b7       	in	r28, 0x3d	; 61
    1550:	de b7       	in	r29, 0x3e	; 62
    1552:	2b 97       	sbiw	r28, 0x0b	; 11
    1554:	0f b6       	in	r0, 0x3f	; 63
    1556:	f8 94       	cli
    1558:	de bf       	out	0x3e, r29	; 62
    155a:	0f be       	out	0x3f, r0	; 63
    155c:	cd bf       	out	0x3d, r28	; 61
    155e:	4c 01       	movw	r8, r24
    1560:	7b 87       	std	Y+11, r23	; 0x0b
    1562:	6a 87       	std	Y+10, r22	; 0x0a
    1564:	1a 01       	movw	r2, r20
    1566:	0e 83       	std	Y+6, r16	; 0x06
    1568:	1f 83       	std	Y+7, r17	; 0x07
    156a:	28 87       	std	Y+8, r18	; 0x08
    156c:	39 87       	std	Y+9, r19	; 0x09
    size_t xRequiredSpace = xDataLengthBytes;
    TimeOut_t xTimeOut;

    /* The maximum amount of space a stream buffer will ever report is its length
     * minus 1. */
    const size_t xMaxReportedSpace = pxStreamBuffer->xLength - ( size_t ) 1;
    156e:	fc 01       	movw	r30, r24
    1570:	84 81       	ldd	r24, Z+4	; 0x04
    1572:	95 81       	ldd	r25, Z+5	; 0x05
    1574:	01 97       	sbiw	r24, 0x01	; 1

    /* This send function is used to write to both message buffers and stream
     * buffers.  If this is a message buffer then the space needed must be
     * increased by the amount of bytes needed to store the length of the
     * message. */
    if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
    1576:	26 85       	ldd	r18, Z+14	; 0x0e
    1578:	20 ff       	sbrs	r18, 0
    157a:	0c c0       	rjmp	.+24     	; 0x1594 <xStreamBufferSend+0x6a>
    {
        xRequiredSpace += sbBYTES_TO_STORE_MESSAGE_LENGTH;
    157c:	2a 01       	movw	r4, r20
    157e:	f2 e0       	ldi	r31, 0x02	; 2
    1580:	4f 0e       	add	r4, r31
    1582:	51 1c       	adc	r5, r1
        /* Overflow? */
        configASSERT( xRequiredSpace > xDataLengthBytes );

        /* If this is a message buffer then it must be possible to write the
         * whole message. */
        if( xRequiredSpace > xMaxReportedSpace )
    1584:	84 15       	cp	r24, r4
    1586:	95 05       	cpc	r25, r5
    1588:	58 f4       	brcc	.+22     	; 0x15a0 <xStreamBufferSend+0x76>
        {
            /* The message would not fit even if the entire buffer was empty,
             * so don't wait for space. */
            xTicksToWait = ( TickType_t ) 0;
    158a:	1e 82       	std	Y+6, r1	; 0x06
    158c:	1f 82       	std	Y+7, r1	; 0x07
    158e:	18 86       	std	Y+8, r1	; 0x08
    1590:	19 86       	std	Y+9, r1	; 0x09
    1592:	06 c0       	rjmp	.+12     	; 0x15a0 <xStreamBufferSend+0x76>
    else
    {
        /* If this is a stream buffer then it is acceptable to write only part
         * of the message to the buffer.  Cap the length to the total length of
         * the buffer. */
        if( xRequiredSpace > xMaxReportedSpace )
    1594:	84 17       	cp	r24, r20
    1596:	95 07       	cpc	r25, r21
    1598:	10 f0       	brcs	.+4      	; 0x159e <xStreamBufferSend+0x74>
                          size_t xDataLengthBytes,
                          TickType_t xTicksToWait )
{
    StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
    size_t xReturn, xSpace = 0;
    size_t xRequiredSpace = xDataLengthBytes;
    159a:	2a 01       	movw	r4, r20
    159c:	01 c0       	rjmp	.+2      	; 0x15a0 <xStreamBufferSend+0x76>
        /* If this is a stream buffer then it is acceptable to write only part
         * of the message to the buffer.  Cap the length to the total length of
         * the buffer. */
        if( xRequiredSpace > xMaxReportedSpace )
        {
            xRequiredSpace = xMaxReportedSpace;
    159e:	2c 01       	movw	r4, r24
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    if( xTicksToWait != ( TickType_t ) 0 )
    15a0:	8e 81       	ldd	r24, Y+6	; 0x06
    15a2:	9f 81       	ldd	r25, Y+7	; 0x07
    15a4:	a8 85       	ldd	r26, Y+8	; 0x08
    15a6:	b9 85       	ldd	r27, Y+9	; 0x09
    15a8:	89 2b       	or	r24, r25
    15aa:	8a 2b       	or	r24, r26
    15ac:	8b 2b       	or	r24, r27
    15ae:	09 f4       	brne	.+2      	; 0x15b2 <xStreamBufferSend+0x88>
    15b0:	38 c0       	rjmp	.+112    	; 0x1622 <xStreamBufferSend+0xf8>
    {
        vTaskSetTimeOutState( &xTimeOut );
    15b2:	ce 01       	movw	r24, r28
    15b4:	01 96       	adiw	r24, 0x01	; 1
    15b6:	0e 94 aa 13 	call	0x2754	; 0x2754 <vTaskSetTimeOutState>

        do
        {
            /* Wait until the required number of bytes are free in the message
             * buffer. */
            taskENTER_CRITICAL();
    15ba:	0f b6       	in	r0, 0x3f	; 63
    15bc:	f8 94       	cli
    15be:	0f 92       	push	r0
            {
                xSpace = xStreamBufferSpacesAvailable( pxStreamBuffer );
    15c0:	c4 01       	movw	r24, r8
    15c2:	a1 df       	rcall	.-190    	; 0x1506 <xStreamBufferSpacesAvailable>
    15c4:	3c 01       	movw	r6, r24

                if( xSpace < xRequiredSpace )
    15c6:	84 15       	cp	r24, r4
    15c8:	95 05       	cpc	r25, r5
    15ca:	40 f5       	brcc	.+80     	; 0x161c <xStreamBufferSend+0xf2>
                {
                    /* Clear notification state as going to wait for space. */
                    ( void ) xTaskNotifyStateClear( NULL );
    15cc:	60 e0       	ldi	r22, 0x00	; 0
    15ce:	80 e0       	ldi	r24, 0x00	; 0
    15d0:	90 e0       	ldi	r25, 0x00	; 0
    15d2:	0e 94 94 18 	call	0x3128	; 0x3128 <xTaskGenericNotifyStateClear>

                    /* Should only be one writer. */
                    configASSERT( pxStreamBuffer->xTaskWaitingToSend == NULL );
                    pxStreamBuffer->xTaskWaitingToSend = xTaskGetCurrentTaskHandle();
    15d6:	0e 94 3b 14 	call	0x2876	; 0x2876 <xTaskGetCurrentTaskHandle>
    15da:	f4 01       	movw	r30, r8
    15dc:	93 87       	std	Z+11, r25	; 0x0b
    15de:	82 87       	std	Z+10, r24	; 0x0a
                {
                    taskEXIT_CRITICAL();
                    break;
                }
            }
            taskEXIT_CRITICAL();
    15e0:	0f 90       	pop	r0
    15e2:	0f be       	out	0x3f, r0	; 63

            traceBLOCKING_ON_STREAM_BUFFER_SEND( xStreamBuffer );
            ( void ) xTaskNotifyWait( ( uint32_t ) 0, ( uint32_t ) 0, NULL, xTicksToWait );
    15e4:	ae 80       	ldd	r10, Y+6	; 0x06
    15e6:	bf 80       	ldd	r11, Y+7	; 0x07
    15e8:	c8 84       	ldd	r12, Y+8	; 0x08
    15ea:	d9 84       	ldd	r13, Y+9	; 0x09
    15ec:	e1 2c       	mov	r14, r1
    15ee:	f1 2c       	mov	r15, r1
    15f0:	00 e0       	ldi	r16, 0x00	; 0
    15f2:	10 e0       	ldi	r17, 0x00	; 0
    15f4:	98 01       	movw	r18, r16
    15f6:	40 e0       	ldi	r20, 0x00	; 0
    15f8:	50 e0       	ldi	r21, 0x00	; 0
    15fa:	ba 01       	movw	r22, r20
    15fc:	80 e0       	ldi	r24, 0x00	; 0
    15fe:	0e 94 d3 15 	call	0x2ba6	; 0x2ba6 <xTaskGenericNotifyWait>
            pxStreamBuffer->xTaskWaitingToSend = NULL;
    1602:	f4 01       	movw	r30, r8
    1604:	13 86       	std	Z+11, r1	; 0x0b
    1606:	12 86       	std	Z+10, r1	; 0x0a
        } while( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE );
    1608:	be 01       	movw	r22, r28
    160a:	6a 5f       	subi	r22, 0xFA	; 250
    160c:	7f 4f       	sbci	r23, 0xFF	; 255
    160e:	ce 01       	movw	r24, r28
    1610:	01 96       	adiw	r24, 0x01	; 1
    1612:	0e 94 d1 13 	call	0x27a2	; 0x27a2 <xTaskCheckForTimeOut>
    1616:	88 23       	and	r24, r24
    1618:	81 f2       	breq	.-96     	; 0x15ba <xStreamBufferSend+0x90>
    161a:	05 c0       	rjmp	.+10     	; 0x1626 <xStreamBufferSend+0xfc>
                    configASSERT( pxStreamBuffer->xTaskWaitingToSend == NULL );
                    pxStreamBuffer->xTaskWaitingToSend = xTaskGetCurrentTaskHandle();
                }
                else
                {
                    taskEXIT_CRITICAL();
    161c:	0f 90       	pop	r0
    161e:	0f be       	out	0x3f, r0	; 63
                    break;
    1620:	02 c0       	rjmp	.+4      	; 0x1626 <xStreamBufferSend+0xfc>
                          const void * pvTxData,
                          size_t xDataLengthBytes,
                          TickType_t xTicksToWait )
{
    StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
    size_t xReturn, xSpace = 0;
    1622:	61 2c       	mov	r6, r1
    1624:	71 2c       	mov	r7, r1
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    if( xSpace == ( size_t ) 0 )
    1626:	61 14       	cp	r6, r1
    1628:	71 04       	cpc	r7, r1
    162a:	19 f4       	brne	.+6      	; 0x1632 <xStreamBufferSend+0x108>
    {
        xSpace = xStreamBufferSpacesAvailable( pxStreamBuffer );
    162c:	c4 01       	movw	r24, r8
    162e:	6b df       	rcall	.-298    	; 0x1506 <xStreamBufferSpacesAvailable>
    1630:	3c 01       	movw	r6, r24
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    xReturn = prvWriteMessageToBuffer( pxStreamBuffer, pvTxData, xDataLengthBytes, xSpace, xRequiredSpace );
    1632:	82 01       	movw	r16, r4
    1634:	93 01       	movw	r18, r6
    1636:	a1 01       	movw	r20, r2
    1638:	6a 85       	ldd	r22, Y+10	; 0x0a
    163a:	7b 85       	ldd	r23, Y+11	; 0x0b
    163c:	c4 01       	movw	r24, r8
    163e:	3c de       	rcall	.-904    	; 0x12b8 <prvWriteMessageToBuffer>
    1640:	6c 01       	movw	r12, r24

    if( xReturn > ( size_t ) 0 )
    1642:	89 2b       	or	r24, r25
    {
        traceSTREAM_BUFFER_SEND( xStreamBuffer, xReturn );

        /* Was a task waiting for the data? */
        if( prvBytesInBuffer( pxStreamBuffer ) >= pxStreamBuffer->xTriggerLevelBytes )
    1644:	e9 f0       	breq	.+58     	; 0x1680 <xStreamBufferSend+0x156>
    1646:	c4 01       	movw	r24, r8
    1648:	cb dd       	rcall	.-1130   	; 0x11e0 <prvBytesInBuffer>
    164a:	f4 01       	movw	r30, r8
    164c:	26 81       	ldd	r18, Z+6	; 0x06
    164e:	37 81       	ldd	r19, Z+7	; 0x07
    1650:	82 17       	cp	r24, r18
    1652:	93 07       	cpc	r25, r19
        {
            sbSEND_COMPLETED( pxStreamBuffer );
    1654:	a8 f0       	brcs	.+42     	; 0x1680 <xStreamBufferSend+0x156>
    1656:	91 d3       	rcall	.+1826   	; 0x1d7a <vTaskSuspendAll>
    1658:	f4 01       	movw	r30, r8
    165a:	80 85       	ldd	r24, Z+8	; 0x08
    165c:	91 85       	ldd	r25, Z+9	; 0x09
    165e:	89 2b       	or	r24, r25
    1660:	71 f0       	breq	.+28     	; 0x167e <xStreamBufferSend+0x154>
    1662:	80 85       	ldd	r24, Z+8	; 0x08
    1664:	91 85       	ldd	r25, Z+9	; 0x09
    1666:	e1 2c       	mov	r14, r1
    1668:	f1 2c       	mov	r15, r1
    166a:	00 e0       	ldi	r16, 0x00	; 0
    166c:	20 e0       	ldi	r18, 0x00	; 0
    166e:	30 e0       	ldi	r19, 0x00	; 0
    1670:	a9 01       	movw	r20, r18
    1672:	60 e0       	ldi	r22, 0x00	; 0
    1674:	0e 94 7b 16 	call	0x2cf6	; 0x2cf6 <xTaskGenericNotify>
    1678:	f4 01       	movw	r30, r8
    167a:	11 86       	std	Z+9, r1	; 0x09
    167c:	10 86       	std	Z+8, r1	; 0x08
    167e:	bd d4       	rcall	.+2426   	; 0x1ffa <xTaskResumeAll>
        mtCOVERAGE_TEST_MARKER();
        traceSTREAM_BUFFER_SEND_FAILED( xStreamBuffer );
    }

    return xReturn;
}
    1680:	c6 01       	movw	r24, r12
    1682:	2b 96       	adiw	r28, 0x0b	; 11
    1684:	0f b6       	in	r0, 0x3f	; 63
    1686:	f8 94       	cli
    1688:	de bf       	out	0x3e, r29	; 62
    168a:	0f be       	out	0x3f, r0	; 63
    168c:	cd bf       	out	0x3d, r28	; 61
    168e:	df 91       	pop	r29
    1690:	cf 91       	pop	r28
    1692:	1f 91       	pop	r17
    1694:	0f 91       	pop	r16
    1696:	ff 90       	pop	r15
    1698:	ef 90       	pop	r14
    169a:	df 90       	pop	r13
    169c:	cf 90       	pop	r12
    169e:	bf 90       	pop	r11
    16a0:	af 90       	pop	r10
    16a2:	9f 90       	pop	r9
    16a4:	8f 90       	pop	r8
    16a6:	7f 90       	pop	r7
    16a8:	6f 90       	pop	r6
    16aa:	5f 90       	pop	r5
    16ac:	4f 90       	pop	r4
    16ae:	3f 90       	pop	r3
    16b0:	2f 90       	pop	r2
    16b2:	08 95       	ret

000016b4 <xStreamBufferSendFromISR>:

size_t xStreamBufferSendFromISR( StreamBufferHandle_t xStreamBuffer,
                                 const void * pvTxData,
                                 size_t xDataLengthBytes,
                                 BaseType_t * const pxHigherPriorityTaskWoken )
{
    16b4:	af 92       	push	r10
    16b6:	bf 92       	push	r11
    16b8:	cf 92       	push	r12
    16ba:	df 92       	push	r13
    16bc:	ef 92       	push	r14
    16be:	ff 92       	push	r15
    16c0:	0f 93       	push	r16
    16c2:	1f 93       	push	r17
    16c4:	cf 93       	push	r28
    16c6:	df 93       	push	r29
    16c8:	ec 01       	movw	r28, r24
    16ca:	7b 01       	movw	r14, r22
    16cc:	5a 01       	movw	r10, r20
    16ce:	69 01       	movw	r12, r18

    /* This send function is used to write to both message buffers and stream
     * buffers.  If this is a message buffer then the space needed must be
     * increased by the amount of bytes needed to store the length of the
     * message. */
    if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
    16d0:	8e 85       	ldd	r24, Y+14	; 0x0e
    16d2:	80 ff       	sbrs	r24, 0
    16d4:	04 c0       	rjmp	.+8      	; 0x16de <xStreamBufferSendFromISR+0x2a>
    {
        xRequiredSpace += sbBYTES_TO_STORE_MESSAGE_LENGTH;
    16d6:	8a 01       	movw	r16, r20
    16d8:	0e 5f       	subi	r16, 0xFE	; 254
    16da:	1f 4f       	sbci	r17, 0xFF	; 255
    16dc:	01 c0       	rjmp	.+2      	; 0x16e0 <xStreamBufferSendFromISR+0x2c>
                                 size_t xDataLengthBytes,
                                 BaseType_t * const pxHigherPriorityTaskWoken )
{
    StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
    size_t xReturn, xSpace;
    size_t xRequiredSpace = xDataLengthBytes;
    16de:	8a 01       	movw	r16, r20
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    xSpace = xStreamBufferSpacesAvailable( pxStreamBuffer );
    16e0:	ce 01       	movw	r24, r28
    16e2:	11 df       	rcall	.-478    	; 0x1506 <xStreamBufferSpacesAvailable>
    xReturn = prvWriteMessageToBuffer( pxStreamBuffer, pvTxData, xDataLengthBytes, xSpace, xRequiredSpace );
    16e4:	9c 01       	movw	r18, r24
    16e6:	a5 01       	movw	r20, r10
    16e8:	b7 01       	movw	r22, r14
    16ea:	ce 01       	movw	r24, r28
    16ec:	e5 dd       	rcall	.-1078   	; 0x12b8 <prvWriteMessageToBuffer>
    16ee:	5c 01       	movw	r10, r24

    if( xReturn > ( size_t ) 0 )
    16f0:	89 2b       	or	r24, r25
    {
        /* Was a task waiting for the data? */
        if( prvBytesInBuffer( pxStreamBuffer ) >= pxStreamBuffer->xTriggerLevelBytes )
    16f2:	c1 f0       	breq	.+48     	; 0x1724 <xStreamBufferSendFromISR+0x70>
    16f4:	ce 01       	movw	r24, r28
    16f6:	74 dd       	rcall	.-1304   	; 0x11e0 <prvBytesInBuffer>
    16f8:	2e 81       	ldd	r18, Y+6	; 0x06
    16fa:	3f 81       	ldd	r19, Y+7	; 0x07
    16fc:	82 17       	cp	r24, r18
    16fe:	93 07       	cpc	r25, r19
    1700:	88 f0       	brcs	.+34     	; 0x1724 <xStreamBufferSendFromISR+0x70>
        {
            sbSEND_COMPLETE_FROM_ISR( pxStreamBuffer, pxHigherPriorityTaskWoken );
    1702:	88 85       	ldd	r24, Y+8	; 0x08
    1704:	99 85       	ldd	r25, Y+9	; 0x09
    1706:	89 2b       	or	r24, r25
    1708:	69 f0       	breq	.+26     	; 0x1724 <xStreamBufferSendFromISR+0x70>
    170a:	88 85       	ldd	r24, Y+8	; 0x08
    170c:	99 85       	ldd	r25, Y+9	; 0x09
    170e:	e1 2c       	mov	r14, r1
    1710:	f1 2c       	mov	r15, r1
    1712:	00 e0       	ldi	r16, 0x00	; 0
    1714:	20 e0       	ldi	r18, 0x00	; 0
    1716:	30 e0       	ldi	r19, 0x00	; 0
    1718:	a9 01       	movw	r20, r18
    171a:	60 e0       	ldi	r22, 0x00	; 0
    171c:	0e 94 72 17 	call	0x2ee4	; 0x2ee4 <xTaskGenericNotifyFromISR>
    1720:	19 86       	std	Y+9, r1	; 0x09
    1722:	18 86       	std	Y+8, r1	; 0x08
    }

    traceSTREAM_BUFFER_SEND_FROM_ISR( xStreamBuffer, xReturn );

    return xReturn;
}
    1724:	c5 01       	movw	r24, r10
    1726:	df 91       	pop	r29
    1728:	cf 91       	pop	r28
    172a:	1f 91       	pop	r17
    172c:	0f 91       	pop	r16
    172e:	ff 90       	pop	r15
    1730:	ef 90       	pop	r14
    1732:	df 90       	pop	r13
    1734:	cf 90       	pop	r12
    1736:	bf 90       	pop	r11
    1738:	af 90       	pop	r10
    173a:	08 95       	ret

0000173c <xStreamBufferReceive>:

size_t xStreamBufferReceive( StreamBufferHandle_t xStreamBuffer,
                             void * pvRxData,
                             size_t xBufferLengthBytes,
                             TickType_t xTicksToWait )
{
    173c:	4f 92       	push	r4
    173e:	5f 92       	push	r5
    1740:	6f 92       	push	r6
    1742:	7f 92       	push	r7
    1744:	8f 92       	push	r8
    1746:	9f 92       	push	r9
    1748:	af 92       	push	r10
    174a:	bf 92       	push	r11
    174c:	cf 92       	push	r12
    174e:	df 92       	push	r13
    1750:	ef 92       	push	r14
    1752:	ff 92       	push	r15
    1754:	0f 93       	push	r16
    1756:	1f 93       	push	r17
    1758:	cf 93       	push	r28
    175a:	df 93       	push	r29
    175c:	ec 01       	movw	r28, r24
    175e:	2b 01       	movw	r4, r22
    1760:	3a 01       	movw	r6, r20
    1762:	58 01       	movw	r10, r16
    1764:	69 01       	movw	r12, r18
    /* This receive function is used by both message buffers, which store
     * discrete messages, and stream buffers, which store a continuous stream of
     * bytes.  Discrete messages include an additional
     * sbBYTES_TO_STORE_MESSAGE_LENGTH bytes that hold the length of the
     * message. */
    if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
    1766:	8e 85       	ldd	r24, Y+14	; 0x0e
    1768:	80 ff       	sbrs	r24, 0
    176a:	05 c0       	rjmp	.+10     	; 0x1776 <xStreamBufferReceive+0x3a>
    {
        xBytesToStoreMessageLength = sbBYTES_TO_STORE_MESSAGE_LENGTH;
    176c:	68 94       	set
    176e:	88 24       	eor	r8, r8
    1770:	81 f8       	bld	r8, 1
    1772:	91 2c       	mov	r9, r1
    1774:	02 c0       	rjmp	.+4      	; 0x177a <xStreamBufferReceive+0x3e>
    }
    else
    {
        xBytesToStoreMessageLength = 0;
    1776:	81 2c       	mov	r8, r1
    1778:	91 2c       	mov	r9, r1
    }

    if( xTicksToWait != ( TickType_t ) 0 )
    177a:	a1 14       	cp	r10, r1
    177c:	b1 04       	cpc	r11, r1
    177e:	c1 04       	cpc	r12, r1
    1780:	d1 04       	cpc	r13, r1
    1782:	41 f1       	breq	.+80     	; 0x17d4 <xStreamBufferReceive+0x98>
    {
        /* Checking if there is data and clearing the notification state must be
         * performed atomically. */
        taskENTER_CRITICAL();
    1784:	0f b6       	in	r0, 0x3f	; 63
    1786:	f8 94       	cli
    1788:	0f 92       	push	r0
        {
            xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
    178a:	ce 01       	movw	r24, r28
    178c:	29 dd       	rcall	.-1454   	; 0x11e0 <prvBytesInBuffer>
    178e:	7c 01       	movw	r14, r24
            /* If this function was invoked by a message buffer read then
             * xBytesToStoreMessageLength holds the number of bytes used to hold
             * the length of the next discrete message.  If this function was
             * invoked by a stream buffer read then xBytesToStoreMessageLength will
             * be 0. */
            if( xBytesAvailable <= xBytesToStoreMessageLength )
    1790:	88 16       	cp	r8, r24
    1792:	99 06       	cpc	r9, r25
    1794:	48 f0       	brcs	.+18     	; 0x17a8 <xStreamBufferReceive+0x6c>
            {
                /* Clear notification state as going to wait for data. */
                ( void ) xTaskNotifyStateClear( NULL );
    1796:	60 e0       	ldi	r22, 0x00	; 0
    1798:	80 e0       	ldi	r24, 0x00	; 0
    179a:	90 e0       	ldi	r25, 0x00	; 0
    179c:	0e 94 94 18 	call	0x3128	; 0x3128 <xTaskGenericNotifyStateClear>

                /* Should only be one reader. */
                configASSERT( pxStreamBuffer->xTaskWaitingToReceive == NULL );
                pxStreamBuffer->xTaskWaitingToReceive = xTaskGetCurrentTaskHandle();
    17a0:	0e 94 3b 14 	call	0x2876	; 0x2876 <xTaskGetCurrentTaskHandle>
    17a4:	99 87       	std	Y+9, r25	; 0x09
    17a6:	88 87       	std	Y+8, r24	; 0x08
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
    17a8:	0f 90       	pop	r0
    17aa:	0f be       	out	0x3f, r0	; 63

        if( xBytesAvailable <= xBytesToStoreMessageLength )
    17ac:	8e 14       	cp	r8, r14
    17ae:	9f 04       	cpc	r9, r15
    17b0:	a0 f0       	brcs	.+40     	; 0x17da <xStreamBufferReceive+0x9e>
        {
            /* Wait for data to be available. */
            traceBLOCKING_ON_STREAM_BUFFER_RECEIVE( xStreamBuffer );
            ( void ) xTaskNotifyWait( ( uint32_t ) 0, ( uint32_t ) 0, NULL, xTicksToWait );
    17b2:	e1 2c       	mov	r14, r1
    17b4:	f1 2c       	mov	r15, r1
    17b6:	00 e0       	ldi	r16, 0x00	; 0
    17b8:	10 e0       	ldi	r17, 0x00	; 0
    17ba:	98 01       	movw	r18, r16
    17bc:	40 e0       	ldi	r20, 0x00	; 0
    17be:	50 e0       	ldi	r21, 0x00	; 0
    17c0:	ba 01       	movw	r22, r20
    17c2:	80 e0       	ldi	r24, 0x00	; 0
    17c4:	0e 94 d3 15 	call	0x2ba6	; 0x2ba6 <xTaskGenericNotifyWait>
            pxStreamBuffer->xTaskWaitingToReceive = NULL;
    17c8:	19 86       	std	Y+9, r1	; 0x09
    17ca:	18 86       	std	Y+8, r1	; 0x08

            /* Recheck the data available after blocking. */
            xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
    17cc:	ce 01       	movw	r24, r28
    17ce:	08 dd       	rcall	.-1520   	; 0x11e0 <prvBytesInBuffer>
    17d0:	7c 01       	movw	r14, r24
    17d2:	03 c0       	rjmp	.+6      	; 0x17da <xStreamBufferReceive+0x9e>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
    17d4:	ce 01       	movw	r24, r28
    17d6:	04 dd       	rcall	.-1528   	; 0x11e0 <prvBytesInBuffer>
    17d8:	7c 01       	movw	r14, r24
    17da:	8e 14       	cp	r8, r14
    /* Whether receiving a discrete message (where xBytesToStoreMessageLength
     * holds the number of bytes used to store the message length) or a stream of
     * bytes (where xBytesToStoreMessageLength is zero), the number of bytes
     * available must be greater than xBytesToStoreMessageLength to be able to
     * read bytes from the buffer. */
    if( xBytesAvailable > xBytesToStoreMessageLength )
    17dc:	9f 04       	cpc	r9, r15
    17de:	e8 f4       	brcc	.+58     	; 0x181a <xStreamBufferReceive+0xde>
    17e0:	84 01       	movw	r16, r8
    {
        xReceivedLength = prvReadMessageFromBuffer( pxStreamBuffer, pvRxData, xBufferLengthBytes, xBytesAvailable, xBytesToStoreMessageLength );
    17e2:	97 01       	movw	r18, r14
    17e4:	a3 01       	movw	r20, r6
    17e6:	b2 01       	movw	r22, r4
    17e8:	ce 01       	movw	r24, r28
    17ea:	f8 dd       	rcall	.-1040   	; 0x13dc <prvReadMessageFromBuffer>
    17ec:	6c 01       	movw	r12, r24

        /* Was a task waiting for space in the buffer? */
        if( xReceivedLength != ( size_t ) 0 )
    17ee:	89 2b       	or	r24, r25
    17f0:	b1 f0       	breq	.+44     	; 0x181e <xStreamBufferReceive+0xe2>
        {
            traceSTREAM_BUFFER_RECEIVE( xStreamBuffer, xReceivedLength );
            sbRECEIVE_COMPLETED( pxStreamBuffer );
    17f2:	c3 d2       	rcall	.+1414   	; 0x1d7a <vTaskSuspendAll>
    17f4:	8a 85       	ldd	r24, Y+10	; 0x0a
    17f6:	9b 85       	ldd	r25, Y+11	; 0x0b
    17f8:	89 2b       	or	r24, r25
    17fa:	69 f0       	breq	.+26     	; 0x1816 <xStreamBufferReceive+0xda>
    17fc:	8a 85       	ldd	r24, Y+10	; 0x0a
    17fe:	9b 85       	ldd	r25, Y+11	; 0x0b
    1800:	e1 2c       	mov	r14, r1
    1802:	f1 2c       	mov	r15, r1
    1804:	00 e0       	ldi	r16, 0x00	; 0
    1806:	20 e0       	ldi	r18, 0x00	; 0
    1808:	30 e0       	ldi	r19, 0x00	; 0
    180a:	a9 01       	movw	r20, r18
    180c:	60 e0       	ldi	r22, 0x00	; 0
    180e:	0e 94 7b 16 	call	0x2cf6	; 0x2cf6 <xTaskGenericNotify>
    1812:	1b 86       	std	Y+11, r1	; 0x0b
    1814:	1a 86       	std	Y+10, r1	; 0x0a
    1816:	f1 d3       	rcall	.+2018   	; 0x1ffa <xTaskResumeAll>
    1818:	02 c0       	rjmp	.+4      	; 0x181e <xStreamBufferReceive+0xe2>
    181a:	c1 2c       	mov	r12, r1
                             void * pvRxData,
                             size_t xBufferLengthBytes,
                             TickType_t xTicksToWait )
{
    StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
    size_t xReceivedLength = 0, xBytesAvailable, xBytesToStoreMessageLength;
    181c:	d1 2c       	mov	r13, r1
    181e:	c6 01       	movw	r24, r12
        traceSTREAM_BUFFER_RECEIVE_FAILED( xStreamBuffer );
        mtCOVERAGE_TEST_MARKER();
    }

    return xReceivedLength;
}
    1820:	df 91       	pop	r29
    1822:	cf 91       	pop	r28
    1824:	1f 91       	pop	r17
    1826:	0f 91       	pop	r16
    1828:	ff 90       	pop	r15
    182a:	ef 90       	pop	r14
    182c:	df 90       	pop	r13
    182e:	cf 90       	pop	r12
    1830:	bf 90       	pop	r11
    1832:	af 90       	pop	r10
    1834:	9f 90       	pop	r9
    1836:	8f 90       	pop	r8
    1838:	7f 90       	pop	r7
    183a:	6f 90       	pop	r6
    183c:	5f 90       	pop	r5
    183e:	4f 90       	pop	r4
    1840:	08 95       	ret

00001842 <prvResetNextTaskUnblockTime>:
    1842:	e0 91 d1 16 	lds	r30, 0x16D1	; 0x8016d1 <pxDelayedTaskList>
    1846:	f0 91 d2 16 	lds	r31, 0x16D2	; 0x8016d2 <pxDelayedTaskList+0x1>
    184a:	80 81       	ld	r24, Z
    184c:	81 11       	cpse	r24, r1
    184e:	0c c0       	rjmp	.+24     	; 0x1868 <prvResetNextTaskUnblockTime+0x26>
    1850:	8f ef       	ldi	r24, 0xFF	; 255
    1852:	9f ef       	ldi	r25, 0xFF	; 255
    1854:	dc 01       	movw	r26, r24
    1856:	80 93 9b 16 	sts	0x169B, r24	; 0x80169b <xNextTaskUnblockTime>
    185a:	90 93 9c 16 	sts	0x169C, r25	; 0x80169c <xNextTaskUnblockTime+0x1>
    185e:	a0 93 9d 16 	sts	0x169D, r26	; 0x80169d <xNextTaskUnblockTime+0x2>
    1862:	b0 93 9e 16 	sts	0x169E, r27	; 0x80169e <xNextTaskUnblockTime+0x3>
    1866:	08 95       	ret
    1868:	e0 91 d1 16 	lds	r30, 0x16D1	; 0x8016d1 <pxDelayedTaskList>
    186c:	f0 91 d2 16 	lds	r31, 0x16D2	; 0x8016d2 <pxDelayedTaskList+0x1>
    1870:	07 80       	ldd	r0, Z+7	; 0x07
    1872:	f0 85       	ldd	r31, Z+8	; 0x08
    1874:	e0 2d       	mov	r30, r0
    1876:	80 81       	ld	r24, Z
    1878:	91 81       	ldd	r25, Z+1	; 0x01
    187a:	a2 81       	ldd	r26, Z+2	; 0x02
    187c:	b3 81       	ldd	r27, Z+3	; 0x03
    187e:	80 93 9b 16 	sts	0x169B, r24	; 0x80169b <xNextTaskUnblockTime>
    1882:	90 93 9c 16 	sts	0x169C, r25	; 0x80169c <xNextTaskUnblockTime+0x1>
    1886:	a0 93 9d 16 	sts	0x169D, r26	; 0x80169d <xNextTaskUnblockTime+0x2>
    188a:	b0 93 9e 16 	sts	0x169E, r27	; 0x80169e <xNextTaskUnblockTime+0x3>
    188e:	08 95       	ret

00001890 <prvDeleteTCB>:
    1890:	cf 93       	push	r28
    1892:	df 93       	push	r29
    1894:	ec 01       	movw	r28, r24
    1896:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1898:	9c 8d       	ldd	r25, Y+28	; 0x1c
    189a:	0e 94 86 03 	call	0x70c	; 0x70c <vPortFree>
    189e:	ce 01       	movw	r24, r28
    18a0:	0e 94 86 03 	call	0x70c	; 0x70c <vPortFree>
    18a4:	df 91       	pop	r29
    18a6:	cf 91       	pop	r28
    18a8:	08 95       	ret

000018aa <prvInitialiseNewTask>:
    18aa:	4f 92       	push	r4
    18ac:	5f 92       	push	r5
    18ae:	6f 92       	push	r6
    18b0:	7f 92       	push	r7
    18b2:	8f 92       	push	r8
    18b4:	9f 92       	push	r9
    18b6:	af 92       	push	r10
    18b8:	bf 92       	push	r11
    18ba:	cf 92       	push	r12
    18bc:	df 92       	push	r13
    18be:	ef 92       	push	r14
    18c0:	ff 92       	push	r15
    18c2:	0f 93       	push	r16
    18c4:	cf 93       	push	r28
    18c6:	df 93       	push	r29
    18c8:	2c 01       	movw	r4, r24
    18ca:	5b 01       	movw	r10, r22
    18cc:	4a 01       	movw	r8, r20
    18ce:	39 01       	movw	r6, r18
    18d0:	e6 01       	movw	r28, r12
    18d2:	65 ea       	ldi	r22, 0xA5	; 165
    18d4:	70 e0       	ldi	r23, 0x00	; 0
    18d6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    18d8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    18da:	0e 94 26 30 	call	0x604c	; 0x604c <memset>
    18de:	8b 8d       	ldd	r24, Y+27	; 0x1b
    18e0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    18e2:	21 e0       	ldi	r18, 0x01	; 1
    18e4:	82 1a       	sub	r8, r18
    18e6:	91 08       	sbc	r9, r1
    18e8:	88 0e       	add	r8, r24
    18ea:	99 1e       	adc	r9, r25
    18ec:	a1 14       	cp	r10, r1
    18ee:	b1 04       	cpc	r11, r1
    18f0:	89 f4       	brne	.+34     	; 0x1914 <prvInitialiseNewTask+0x6a>
    18f2:	15 c0       	rjmp	.+42     	; 0x191e <prvInitialiseNewTask+0x74>
    18f4:	82 2f       	mov	r24, r18
    18f6:	90 e0       	ldi	r25, 0x00	; 0
    18f8:	f5 01       	movw	r30, r10
    18fa:	e8 0f       	add	r30, r24
    18fc:	f9 1f       	adc	r31, r25
    18fe:	30 81       	ld	r19, Z
    1900:	de 01       	movw	r26, r28
    1902:	a8 0f       	add	r26, r24
    1904:	b9 1f       	adc	r27, r25
    1906:	5d 96       	adiw	r26, 0x1d	; 29
    1908:	3c 93       	st	X, r19
    190a:	80 81       	ld	r24, Z
    190c:	88 23       	and	r24, r24
    190e:	29 f0       	breq	.+10     	; 0x191a <prvInitialiseNewTask+0x70>
    1910:	2f 5f       	subi	r18, 0xFF	; 255
    1912:	01 c0       	rjmp	.+2      	; 0x1916 <prvInitialiseNewTask+0x6c>
    1914:	20 e0       	ldi	r18, 0x00	; 0
    1916:	20 31       	cpi	r18, 0x10	; 16
    1918:	68 f3       	brcs	.-38     	; 0x18f4 <prvInitialiseNewTask+0x4a>
    191a:	1c a6       	std	Y+44, r1	; 0x2c
    191c:	01 c0       	rjmp	.+2      	; 0x1920 <prvInitialiseNewTask+0x76>
    191e:	1d 8e       	std	Y+29, r1	; 0x1d
    1920:	0a 30       	cpi	r16, 0x0A	; 10
    1922:	08 f0       	brcs	.+2      	; 0x1926 <prvInitialiseNewTask+0x7c>
    1924:	09 e0       	ldi	r16, 0x09	; 9
    1926:	0a 8f       	std	Y+26, r16	; 0x1a
    1928:	0d a7       	std	Y+45, r16	; 0x2d
    192a:	1e a6       	std	Y+46, r1	; 0x2e
    192c:	ce 01       	movw	r24, r28
    192e:	02 96       	adiw	r24, 0x02	; 2
    1930:	0e 94 d4 03 	call	0x7a8	; 0x7a8 <vListInitialiseItem>
    1934:	ce 01       	movw	r24, r28
    1936:	0e 96       	adiw	r24, 0x0e	; 14
    1938:	0e 94 d4 03 	call	0x7a8	; 0x7a8 <vListInitialiseItem>
    193c:	db 87       	std	Y+11, r29	; 0x0b
    193e:	ca 87       	std	Y+10, r28	; 0x0a
    1940:	8a e0       	ldi	r24, 0x0A	; 10
    1942:	90 e0       	ldi	r25, 0x00	; 0
    1944:	a0 e0       	ldi	r26, 0x00	; 0
    1946:	b0 e0       	ldi	r27, 0x00	; 0
    1948:	80 1b       	sub	r24, r16
    194a:	91 09       	sbc	r25, r1
    194c:	a1 09       	sbc	r26, r1
    194e:	b1 09       	sbc	r27, r1
    1950:	8e 87       	std	Y+14, r24	; 0x0e
    1952:	9f 87       	std	Y+15, r25	; 0x0f
    1954:	a8 8b       	std	Y+16, r26	; 0x10
    1956:	b9 8b       	std	Y+17, r27	; 0x11
    1958:	df 8b       	std	Y+23, r29	; 0x17
    195a:	ce 8b       	std	Y+22, r28	; 0x16
    195c:	84 e0       	ldi	r24, 0x04	; 4
    195e:	fe 01       	movw	r30, r28
    1960:	bf 96       	adiw	r30, 0x2f	; 47
    1962:	df 01       	movw	r26, r30
    1964:	1d 92       	st	X+, r1
    1966:	8a 95       	dec	r24
    1968:	e9 f7       	brne	.-6      	; 0x1964 <prvInitialiseNewTask+0xba>
    196a:	1b aa       	std	Y+51, r1	; 0x33
    196c:	a3 01       	movw	r20, r6
    196e:	b2 01       	movw	r22, r4
    1970:	c4 01       	movw	r24, r8
    1972:	0e 94 48 04 	call	0x890	; 0x890 <pxPortInitialiseStack>
    1976:	99 83       	std	Y+1, r25	; 0x01
    1978:	88 83       	st	Y, r24
    197a:	e1 14       	cp	r14, r1
    197c:	f1 04       	cpc	r15, r1
    197e:	19 f0       	breq	.+6      	; 0x1986 <prvInitialiseNewTask+0xdc>
    1980:	f7 01       	movw	r30, r14
    1982:	d1 83       	std	Z+1, r29	; 0x01
    1984:	c0 83       	st	Z, r28
    1986:	df 91       	pop	r29
    1988:	cf 91       	pop	r28
    198a:	0f 91       	pop	r16
    198c:	ff 90       	pop	r15
    198e:	ef 90       	pop	r14
    1990:	df 90       	pop	r13
    1992:	cf 90       	pop	r12
    1994:	bf 90       	pop	r11
    1996:	af 90       	pop	r10
    1998:	9f 90       	pop	r9
    199a:	8f 90       	pop	r8
    199c:	7f 90       	pop	r7
    199e:	6f 90       	pop	r6
    19a0:	5f 90       	pop	r5
    19a2:	4f 90       	pop	r4
    19a4:	08 95       	ret

000019a6 <prvInitialiseTaskLists>:
    19a6:	cf 93       	push	r28
    19a8:	c0 e0       	ldi	r28, 0x00	; 0
    19aa:	09 c0       	rjmp	.+18     	; 0x19be <prvInitialiseTaskLists+0x18>
    19ac:	2b e0       	ldi	r18, 0x0B	; 11
    19ae:	c2 9f       	mul	r28, r18
    19b0:	c0 01       	movw	r24, r0
    19b2:	11 24       	eor	r1, r1
    19b4:	87 51       	subi	r24, 0x17	; 23
    19b6:	99 4e       	sbci	r25, 0xE9	; 233
    19b8:	0e 94 c3 03 	call	0x786	; 0x786 <vListInitialise>
    19bc:	cf 5f       	subi	r28, 0xFF	; 255
    19be:	ca 30       	cpi	r28, 0x0A	; 10
    19c0:	a8 f3       	brcs	.-22     	; 0x19ac <prvInitialiseTaskLists+0x6>
    19c2:	8e ed       	ldi	r24, 0xDE	; 222
    19c4:	96 e1       	ldi	r25, 0x16	; 22
    19c6:	0e 94 c3 03 	call	0x786	; 0x786 <vListInitialise>
    19ca:	83 ed       	ldi	r24, 0xD3	; 211
    19cc:	96 e1       	ldi	r25, 0x16	; 22
    19ce:	0e 94 c3 03 	call	0x786	; 0x786 <vListInitialise>
    19d2:	84 ec       	ldi	r24, 0xC4	; 196
    19d4:	96 e1       	ldi	r25, 0x16	; 22
    19d6:	0e 94 c3 03 	call	0x786	; 0x786 <vListInitialise>
    19da:	89 eb       	ldi	r24, 0xB9	; 185
    19dc:	96 e1       	ldi	r25, 0x16	; 22
    19de:	0e 94 c3 03 	call	0x786	; 0x786 <vListInitialise>
    19e2:	8d ea       	ldi	r24, 0xAD	; 173
    19e4:	96 e1       	ldi	r25, 0x16	; 22
    19e6:	0e 94 c3 03 	call	0x786	; 0x786 <vListInitialise>
    19ea:	8e ed       	ldi	r24, 0xDE	; 222
    19ec:	96 e1       	ldi	r25, 0x16	; 22
    19ee:	90 93 d2 16 	sts	0x16D2, r25	; 0x8016d2 <pxDelayedTaskList+0x1>
    19f2:	80 93 d1 16 	sts	0x16D1, r24	; 0x8016d1 <pxDelayedTaskList>
    19f6:	83 ed       	ldi	r24, 0xD3	; 211
    19f8:	96 e1       	ldi	r25, 0x16	; 22
    19fa:	90 93 d0 16 	sts	0x16D0, r25	; 0x8016d0 <pxOverflowDelayedTaskList+0x1>
    19fe:	80 93 cf 16 	sts	0x16CF, r24	; 0x8016cf <pxOverflowDelayedTaskList>
    1a02:	cf 91       	pop	r28
    1a04:	08 95       	ret

00001a06 <prvAddNewTaskToReadyList>:
    1a06:	cf 93       	push	r28
    1a08:	df 93       	push	r29
    1a0a:	ec 01       	movw	r28, r24
    1a0c:	0f b6       	in	r0, 0x3f	; 63
    1a0e:	f8 94       	cli
    1a10:	0f 92       	push	r0
    1a12:	80 91 ac 16 	lds	r24, 0x16AC	; 0x8016ac <uxCurrentNumberOfTasks>
    1a16:	8f 5f       	subi	r24, 0xFF	; 255
    1a18:	80 93 ac 16 	sts	0x16AC, r24	; 0x8016ac <uxCurrentNumberOfTasks>
    1a1c:	80 91 57 17 	lds	r24, 0x1757	; 0x801757 <pxCurrentTCB>
    1a20:	90 91 58 17 	lds	r25, 0x1758	; 0x801758 <pxCurrentTCB+0x1>
    1a24:	89 2b       	or	r24, r25
    1a26:	51 f4       	brne	.+20     	; 0x1a3c <prvAddNewTaskToReadyList+0x36>
    1a28:	d0 93 58 17 	sts	0x1758, r29	; 0x801758 <pxCurrentTCB+0x1>
    1a2c:	c0 93 57 17 	sts	0x1757, r28	; 0x801757 <pxCurrentTCB>
    1a30:	80 91 ac 16 	lds	r24, 0x16AC	; 0x8016ac <uxCurrentNumberOfTasks>
    1a34:	81 30       	cpi	r24, 0x01	; 1
    1a36:	91 f4       	brne	.+36     	; 0x1a5c <prvAddNewTaskToReadyList+0x56>
    1a38:	b6 df       	rcall	.-148    	; 0x19a6 <prvInitialiseTaskLists>
    1a3a:	10 c0       	rjmp	.+32     	; 0x1a5c <prvAddNewTaskToReadyList+0x56>
    1a3c:	80 91 a6 16 	lds	r24, 0x16A6	; 0x8016a6 <xSchedulerRunning>
    1a40:	81 11       	cpse	r24, r1
    1a42:	0c c0       	rjmp	.+24     	; 0x1a5c <prvAddNewTaskToReadyList+0x56>
    1a44:	e0 91 57 17 	lds	r30, 0x1757	; 0x801757 <pxCurrentTCB>
    1a48:	f0 91 58 17 	lds	r31, 0x1758	; 0x801758 <pxCurrentTCB+0x1>
    1a4c:	92 8d       	ldd	r25, Z+26	; 0x1a
    1a4e:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1a50:	89 17       	cp	r24, r25
    1a52:	20 f0       	brcs	.+8      	; 0x1a5c <prvAddNewTaskToReadyList+0x56>
    1a54:	d0 93 58 17 	sts	0x1758, r29	; 0x801758 <pxCurrentTCB+0x1>
    1a58:	c0 93 57 17 	sts	0x1757, r28	; 0x801757 <pxCurrentTCB>
    1a5c:	80 91 9f 16 	lds	r24, 0x169F	; 0x80169f <uxTaskNumber>
    1a60:	8f 5f       	subi	r24, 0xFF	; 255
    1a62:	80 93 9f 16 	sts	0x169F, r24	; 0x80169f <uxTaskNumber>
    1a66:	ea 8d       	ldd	r30, Y+26	; 0x1a
    1a68:	80 91 a7 16 	lds	r24, 0x16A7	; 0x8016a7 <uxTopReadyPriority>
    1a6c:	8e 17       	cp	r24, r30
    1a6e:	10 f4       	brcc	.+4      	; 0x1a74 <prvAddNewTaskToReadyList+0x6e>
    1a70:	e0 93 a7 16 	sts	0x16A7, r30	; 0x8016a7 <uxTopReadyPriority>
    1a74:	8b e0       	ldi	r24, 0x0B	; 11
    1a76:	8e 9f       	mul	r24, r30
    1a78:	f0 01       	movw	r30, r0
    1a7a:	11 24       	eor	r1, r1
    1a7c:	e7 51       	subi	r30, 0x17	; 23
    1a7e:	f9 4e       	sbci	r31, 0xE9	; 233
    1a80:	01 80       	ldd	r0, Z+1	; 0x01
    1a82:	f2 81       	ldd	r31, Z+2	; 0x02
    1a84:	e0 2d       	mov	r30, r0
    1a86:	ff 83       	std	Y+7, r31	; 0x07
    1a88:	ee 83       	std	Y+6, r30	; 0x06
    1a8a:	26 81       	ldd	r18, Z+6	; 0x06
    1a8c:	37 81       	ldd	r19, Z+7	; 0x07
    1a8e:	39 87       	std	Y+9, r19	; 0x09
    1a90:	28 87       	std	Y+8, r18	; 0x08
    1a92:	a6 81       	ldd	r26, Z+6	; 0x06
    1a94:	b7 81       	ldd	r27, Z+7	; 0x07
    1a96:	9e 01       	movw	r18, r28
    1a98:	2e 5f       	subi	r18, 0xFE	; 254
    1a9a:	3f 4f       	sbci	r19, 0xFF	; 255
    1a9c:	15 96       	adiw	r26, 0x05	; 5
    1a9e:	3c 93       	st	X, r19
    1aa0:	2e 93       	st	-X, r18
    1aa2:	14 97       	sbiw	r26, 0x04	; 4
    1aa4:	37 83       	std	Z+7, r19	; 0x07
    1aa6:	26 83       	std	Z+6, r18	; 0x06
    1aa8:	ea 8d       	ldd	r30, Y+26	; 0x1a
    1aaa:	8e 9f       	mul	r24, r30
    1aac:	f0 01       	movw	r30, r0
    1aae:	11 24       	eor	r1, r1
    1ab0:	e7 51       	subi	r30, 0x17	; 23
    1ab2:	f9 4e       	sbci	r31, 0xE9	; 233
    1ab4:	fd 87       	std	Y+13, r31	; 0x0d
    1ab6:	ec 87       	std	Y+12, r30	; 0x0c
    1ab8:	80 81       	ld	r24, Z
    1aba:	8f 5f       	subi	r24, 0xFF	; 255
    1abc:	80 83       	st	Z, r24
    1abe:	0f 90       	pop	r0
    1ac0:	0f be       	out	0x3f, r0	; 63
    1ac2:	80 91 a6 16 	lds	r24, 0x16A6	; 0x8016a6 <xSchedulerRunning>
    1ac6:	88 23       	and	r24, r24
    1ac8:	51 f0       	breq	.+20     	; 0x1ade <prvAddNewTaskToReadyList+0xd8>
    1aca:	e0 91 57 17 	lds	r30, 0x1757	; 0x801757 <pxCurrentTCB>
    1ace:	f0 91 58 17 	lds	r31, 0x1758	; 0x801758 <pxCurrentTCB+0x1>
    1ad2:	92 8d       	ldd	r25, Z+26	; 0x1a
    1ad4:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1ad6:	98 17       	cp	r25, r24
    1ad8:	10 f4       	brcc	.+4      	; 0x1ade <prvAddNewTaskToReadyList+0xd8>
    1ada:	0e 94 91 04 	call	0x922	; 0x922 <vPortYield>
    1ade:	df 91       	pop	r29
    1ae0:	cf 91       	pop	r28
    1ae2:	08 95       	ret

00001ae4 <prvCheckTasksWaitingTermination>:
    1ae4:	cf 93       	push	r28
    1ae6:	df 93       	push	r29
    1ae8:	1b c0       	rjmp	.+54     	; 0x1b20 <prvCheckTasksWaitingTermination+0x3c>
    1aea:	0f b6       	in	r0, 0x3f	; 63
    1aec:	f8 94       	cli
    1aee:	0f 92       	push	r0
    1af0:	e0 91 c0 16 	lds	r30, 0x16C0	; 0x8016c0 <xTasksWaitingTermination+0x7>
    1af4:	f0 91 c1 16 	lds	r31, 0x16C1	; 0x8016c1 <xTasksWaitingTermination+0x8>
    1af8:	c0 85       	ldd	r28, Z+8	; 0x08
    1afa:	d1 85       	ldd	r29, Z+9	; 0x09
    1afc:	ce 01       	movw	r24, r28
    1afe:	02 96       	adiw	r24, 0x02	; 2
    1b00:	0e 94 15 04 	call	0x82a	; 0x82a <uxListRemove>
    1b04:	80 91 ac 16 	lds	r24, 0x16AC	; 0x8016ac <uxCurrentNumberOfTasks>
    1b08:	81 50       	subi	r24, 0x01	; 1
    1b0a:	80 93 ac 16 	sts	0x16AC, r24	; 0x8016ac <uxCurrentNumberOfTasks>
    1b0e:	80 91 b8 16 	lds	r24, 0x16B8	; 0x8016b8 <uxDeletedTasksWaitingCleanUp>
    1b12:	81 50       	subi	r24, 0x01	; 1
    1b14:	80 93 b8 16 	sts	0x16B8, r24	; 0x8016b8 <uxDeletedTasksWaitingCleanUp>
    1b18:	0f 90       	pop	r0
    1b1a:	0f be       	out	0x3f, r0	; 63
    1b1c:	ce 01       	movw	r24, r28
    1b1e:	b8 de       	rcall	.-656    	; 0x1890 <prvDeleteTCB>
    1b20:	80 91 b8 16 	lds	r24, 0x16B8	; 0x8016b8 <uxDeletedTasksWaitingCleanUp>
    1b24:	81 11       	cpse	r24, r1
    1b26:	e1 cf       	rjmp	.-62     	; 0x1aea <prvCheckTasksWaitingTermination+0x6>
    1b28:	df 91       	pop	r29
    1b2a:	cf 91       	pop	r28
    1b2c:	08 95       	ret

00001b2e <prvAddCurrentTaskToDelayedList>:
    1b2e:	8f 92       	push	r8
    1b30:	9f 92       	push	r9
    1b32:	af 92       	push	r10
    1b34:	bf 92       	push	r11
    1b36:	cf 92       	push	r12
    1b38:	df 92       	push	r13
    1b3a:	ef 92       	push	r14
    1b3c:	ff 92       	push	r15
    1b3e:	cf 93       	push	r28
    1b40:	df 93       	push	r29
    1b42:	6b 01       	movw	r12, r22
    1b44:	7c 01       	movw	r14, r24
    1b46:	c4 2f       	mov	r28, r20
    1b48:	80 90 a8 16 	lds	r8, 0x16A8	; 0x8016a8 <xTickCount>
    1b4c:	90 90 a9 16 	lds	r9, 0x16A9	; 0x8016a9 <xTickCount+0x1>
    1b50:	a0 90 aa 16 	lds	r10, 0x16AA	; 0x8016aa <xTickCount+0x2>
    1b54:	b0 90 ab 16 	lds	r11, 0x16AB	; 0x8016ab <xTickCount+0x3>
    1b58:	80 91 57 17 	lds	r24, 0x1757	; 0x801757 <pxCurrentTCB>
    1b5c:	90 91 58 17 	lds	r25, 0x1758	; 0x801758 <pxCurrentTCB+0x1>
    1b60:	02 96       	adiw	r24, 0x02	; 2
    1b62:	0e 94 15 04 	call	0x82a	; 0x82a <uxListRemove>
    1b66:	8f ef       	ldi	r24, 0xFF	; 255
    1b68:	c8 16       	cp	r12, r24
    1b6a:	d8 06       	cpc	r13, r24
    1b6c:	e8 06       	cpc	r14, r24
    1b6e:	f8 06       	cpc	r15, r24
    1b70:	b1 f5       	brne	.+108    	; 0x1bde <prvAddCurrentTaskToDelayedList+0xb0>
    1b72:	cc 23       	and	r28, r28
    1b74:	a1 f1       	breq	.+104    	; 0x1bde <prvAddCurrentTaskToDelayedList+0xb0>
    1b76:	ed ea       	ldi	r30, 0xAD	; 173
    1b78:	f6 e1       	ldi	r31, 0x16	; 22
    1b7a:	a1 81       	ldd	r26, Z+1	; 0x01
    1b7c:	b2 81       	ldd	r27, Z+2	; 0x02
    1b7e:	c0 91 57 17 	lds	r28, 0x1757	; 0x801757 <pxCurrentTCB>
    1b82:	d0 91 58 17 	lds	r29, 0x1758	; 0x801758 <pxCurrentTCB+0x1>
    1b86:	bf 83       	std	Y+7, r27	; 0x07
    1b88:	ae 83       	std	Y+6, r26	; 0x06
    1b8a:	c0 91 57 17 	lds	r28, 0x1757	; 0x801757 <pxCurrentTCB>
    1b8e:	d0 91 58 17 	lds	r29, 0x1758	; 0x801758 <pxCurrentTCB+0x1>
    1b92:	16 96       	adiw	r26, 0x06	; 6
    1b94:	8d 91       	ld	r24, X+
    1b96:	9c 91       	ld	r25, X
    1b98:	17 97       	sbiw	r26, 0x07	; 7
    1b9a:	99 87       	std	Y+9, r25	; 0x09
    1b9c:	88 87       	std	Y+8, r24	; 0x08
    1b9e:	16 96       	adiw	r26, 0x06	; 6
    1ba0:	cd 91       	ld	r28, X+
    1ba2:	dc 91       	ld	r29, X
    1ba4:	17 97       	sbiw	r26, 0x07	; 7
    1ba6:	80 91 57 17 	lds	r24, 0x1757	; 0x801757 <pxCurrentTCB>
    1baa:	90 91 58 17 	lds	r25, 0x1758	; 0x801758 <pxCurrentTCB+0x1>
    1bae:	02 96       	adiw	r24, 0x02	; 2
    1bb0:	9d 83       	std	Y+5, r25	; 0x05
    1bb2:	8c 83       	std	Y+4, r24	; 0x04
    1bb4:	80 91 57 17 	lds	r24, 0x1757	; 0x801757 <pxCurrentTCB>
    1bb8:	90 91 58 17 	lds	r25, 0x1758	; 0x801758 <pxCurrentTCB+0x1>
    1bbc:	02 96       	adiw	r24, 0x02	; 2
    1bbe:	17 96       	adiw	r26, 0x07	; 7
    1bc0:	9c 93       	st	X, r25
    1bc2:	8e 93       	st	-X, r24
    1bc4:	16 97       	sbiw	r26, 0x06	; 6
    1bc6:	a0 91 57 17 	lds	r26, 0x1757	; 0x801757 <pxCurrentTCB>
    1bca:	b0 91 58 17 	lds	r27, 0x1758	; 0x801758 <pxCurrentTCB+0x1>
    1bce:	1d 96       	adiw	r26, 0x0d	; 13
    1bd0:	fc 93       	st	X, r31
    1bd2:	ee 93       	st	-X, r30
    1bd4:	1c 97       	sbiw	r26, 0x0c	; 12
    1bd6:	80 81       	ld	r24, Z
    1bd8:	8f 5f       	subi	r24, 0xFF	; 255
    1bda:	80 83       	st	Z, r24
    1bdc:	3f c0       	rjmp	.+126    	; 0x1c5c <prvAddCurrentTaskToDelayedList+0x12e>
    1bde:	c8 0c       	add	r12, r8
    1be0:	d9 1c       	adc	r13, r9
    1be2:	ea 1c       	adc	r14, r10
    1be4:	fb 1c       	adc	r15, r11
    1be6:	e0 91 57 17 	lds	r30, 0x1757	; 0x801757 <pxCurrentTCB>
    1bea:	f0 91 58 17 	lds	r31, 0x1758	; 0x801758 <pxCurrentTCB+0x1>
    1bee:	c2 82       	std	Z+2, r12	; 0x02
    1bf0:	d3 82       	std	Z+3, r13	; 0x03
    1bf2:	e4 82       	std	Z+4, r14	; 0x04
    1bf4:	f5 82       	std	Z+5, r15	; 0x05
    1bf6:	c8 14       	cp	r12, r8
    1bf8:	d9 04       	cpc	r13, r9
    1bfa:	ea 04       	cpc	r14, r10
    1bfc:	fb 04       	cpc	r15, r11
    1bfe:	68 f4       	brcc	.+26     	; 0x1c1a <prvAddCurrentTaskToDelayedList+0xec>
    1c00:	60 91 57 17 	lds	r22, 0x1757	; 0x801757 <pxCurrentTCB>
    1c04:	70 91 58 17 	lds	r23, 0x1758	; 0x801758 <pxCurrentTCB+0x1>
    1c08:	80 91 cf 16 	lds	r24, 0x16CF	; 0x8016cf <pxOverflowDelayedTaskList>
    1c0c:	90 91 d0 16 	lds	r25, 0x16D0	; 0x8016d0 <pxOverflowDelayedTaskList+0x1>
    1c10:	6e 5f       	subi	r22, 0xFE	; 254
    1c12:	7f 4f       	sbci	r23, 0xFF	; 255
    1c14:	0e 94 d8 03 	call	0x7b0	; 0x7b0 <vListInsert>
    1c18:	21 c0       	rjmp	.+66     	; 0x1c5c <prvAddCurrentTaskToDelayedList+0x12e>
    1c1a:	60 91 57 17 	lds	r22, 0x1757	; 0x801757 <pxCurrentTCB>
    1c1e:	70 91 58 17 	lds	r23, 0x1758	; 0x801758 <pxCurrentTCB+0x1>
    1c22:	80 91 d1 16 	lds	r24, 0x16D1	; 0x8016d1 <pxDelayedTaskList>
    1c26:	90 91 d2 16 	lds	r25, 0x16D2	; 0x8016d2 <pxDelayedTaskList+0x1>
    1c2a:	6e 5f       	subi	r22, 0xFE	; 254
    1c2c:	7f 4f       	sbci	r23, 0xFF	; 255
    1c2e:	0e 94 d8 03 	call	0x7b0	; 0x7b0 <vListInsert>
    1c32:	80 91 9b 16 	lds	r24, 0x169B	; 0x80169b <xNextTaskUnblockTime>
    1c36:	90 91 9c 16 	lds	r25, 0x169C	; 0x80169c <xNextTaskUnblockTime+0x1>
    1c3a:	a0 91 9d 16 	lds	r26, 0x169D	; 0x80169d <xNextTaskUnblockTime+0x2>
    1c3e:	b0 91 9e 16 	lds	r27, 0x169E	; 0x80169e <xNextTaskUnblockTime+0x3>
    1c42:	c8 16       	cp	r12, r24
    1c44:	d9 06       	cpc	r13, r25
    1c46:	ea 06       	cpc	r14, r26
    1c48:	fb 06       	cpc	r15, r27
    1c4a:	40 f4       	brcc	.+16     	; 0x1c5c <prvAddCurrentTaskToDelayedList+0x12e>
    1c4c:	c0 92 9b 16 	sts	0x169B, r12	; 0x80169b <xNextTaskUnblockTime>
    1c50:	d0 92 9c 16 	sts	0x169C, r13	; 0x80169c <xNextTaskUnblockTime+0x1>
    1c54:	e0 92 9d 16 	sts	0x169D, r14	; 0x80169d <xNextTaskUnblockTime+0x2>
    1c58:	f0 92 9e 16 	sts	0x169E, r15	; 0x80169e <xNextTaskUnblockTime+0x3>
    1c5c:	df 91       	pop	r29
    1c5e:	cf 91       	pop	r28
    1c60:	ff 90       	pop	r15
    1c62:	ef 90       	pop	r14
    1c64:	df 90       	pop	r13
    1c66:	cf 90       	pop	r12
    1c68:	bf 90       	pop	r11
    1c6a:	af 90       	pop	r10
    1c6c:	9f 90       	pop	r9
    1c6e:	8f 90       	pop	r8
    1c70:	08 95       	ret

00001c72 <xTaskCreate>:
    1c72:	2f 92       	push	r2
    1c74:	3f 92       	push	r3
    1c76:	4f 92       	push	r4
    1c78:	5f 92       	push	r5
    1c7a:	6f 92       	push	r6
    1c7c:	7f 92       	push	r7
    1c7e:	8f 92       	push	r8
    1c80:	9f 92       	push	r9
    1c82:	af 92       	push	r10
    1c84:	bf 92       	push	r11
    1c86:	cf 92       	push	r12
    1c88:	df 92       	push	r13
    1c8a:	ef 92       	push	r14
    1c8c:	ff 92       	push	r15
    1c8e:	0f 93       	push	r16
    1c90:	cf 93       	push	r28
    1c92:	df 93       	push	r29
    1c94:	3c 01       	movw	r6, r24
    1c96:	1b 01       	movw	r2, r22
    1c98:	4a 01       	movw	r8, r20
    1c9a:	29 01       	movw	r4, r18
    1c9c:	ca 01       	movw	r24, r20
    1c9e:	0e 94 dd 02 	call	0x5ba	; 0x5ba <pvPortMalloc>
    1ca2:	6c 01       	movw	r12, r24
    1ca4:	89 2b       	or	r24, r25
    1ca6:	71 f0       	breq	.+28     	; 0x1cc4 <xTaskCreate+0x52>
    1ca8:	84 e3       	ldi	r24, 0x34	; 52
    1caa:	90 e0       	ldi	r25, 0x00	; 0
    1cac:	0e 94 dd 02 	call	0x5ba	; 0x5ba <pvPortMalloc>
    1cb0:	ec 01       	movw	r28, r24
    1cb2:	89 2b       	or	r24, r25
    1cb4:	19 f0       	breq	.+6      	; 0x1cbc <xTaskCreate+0x4a>
    1cb6:	dc 8e       	std	Y+28, r13	; 0x1c
    1cb8:	cb 8e       	std	Y+27, r12	; 0x1b
    1cba:	06 c0       	rjmp	.+12     	; 0x1cc8 <xTaskCreate+0x56>
    1cbc:	c6 01       	movw	r24, r12
    1cbe:	0e 94 86 03 	call	0x70c	; 0x70c <vPortFree>
    1cc2:	02 c0       	rjmp	.+4      	; 0x1cc8 <xTaskCreate+0x56>
    1cc4:	c0 e0       	ldi	r28, 0x00	; 0
    1cc6:	d0 e0       	ldi	r29, 0x00	; 0
    1cc8:	20 97       	sbiw	r28, 0x00	; 0
    1cca:	61 f0       	breq	.+24     	; 0x1ce4 <xTaskCreate+0x72>
    1ccc:	a1 2c       	mov	r10, r1
    1cce:	b1 2c       	mov	r11, r1
    1cd0:	6e 01       	movw	r12, r28
    1cd2:	92 01       	movw	r18, r4
    1cd4:	a4 01       	movw	r20, r8
    1cd6:	b1 01       	movw	r22, r2
    1cd8:	c3 01       	movw	r24, r6
    1cda:	e7 dd       	rcall	.-1074   	; 0x18aa <prvInitialiseNewTask>
    1cdc:	ce 01       	movw	r24, r28
    1cde:	93 de       	rcall	.-730    	; 0x1a06 <prvAddNewTaskToReadyList>
    1ce0:	81 e0       	ldi	r24, 0x01	; 1
    1ce2:	01 c0       	rjmp	.+2      	; 0x1ce6 <xTaskCreate+0x74>
    1ce4:	8f ef       	ldi	r24, 0xFF	; 255
    1ce6:	df 91       	pop	r29
    1ce8:	cf 91       	pop	r28
    1cea:	0f 91       	pop	r16
    1cec:	ff 90       	pop	r15
    1cee:	ef 90       	pop	r14
    1cf0:	df 90       	pop	r13
    1cf2:	cf 90       	pop	r12
    1cf4:	bf 90       	pop	r11
    1cf6:	af 90       	pop	r10
    1cf8:	9f 90       	pop	r9
    1cfa:	8f 90       	pop	r8
    1cfc:	7f 90       	pop	r7
    1cfe:	6f 90       	pop	r6
    1d00:	5f 90       	pop	r5
    1d02:	4f 90       	pop	r4
    1d04:	3f 90       	pop	r3
    1d06:	2f 90       	pop	r2
    1d08:	08 95       	ret

00001d0a <vTaskStartScheduler>:
    1d0a:	ef 92       	push	r14
    1d0c:	ff 92       	push	r15
    1d0e:	0f 93       	push	r16
    1d10:	0f 2e       	mov	r0, r31
    1d12:	f9 e9       	ldi	r31, 0x99	; 153
    1d14:	ef 2e       	mov	r14, r31
    1d16:	f6 e1       	ldi	r31, 0x16	; 22
    1d18:	ff 2e       	mov	r15, r31
    1d1a:	f0 2d       	mov	r31, r0
    1d1c:	00 e0       	ldi	r16, 0x00	; 0
    1d1e:	20 e0       	ldi	r18, 0x00	; 0
    1d20:	30 e0       	ldi	r19, 0x00	; 0
    1d22:	40 ec       	ldi	r20, 0xC0	; 192
    1d24:	50 e0       	ldi	r21, 0x00	; 0
    1d26:	6f e6       	ldi	r22, 0x6F	; 111
    1d28:	72 e0       	ldi	r23, 0x02	; 2
    1d2a:	8d ec       	ldi	r24, 0xCD	; 205
    1d2c:	90 e0       	ldi	r25, 0x00	; 0
    1d2e:	a1 df       	rcall	.-190    	; 0x1c72 <xTaskCreate>
    1d30:	81 30       	cpi	r24, 0x01	; 1
    1d32:	11 f4       	brne	.+4      	; 0x1d38 <vTaskStartScheduler+0x2e>
    1d34:	0e 94 38 19 	call	0x3270	; 0x3270 <xTimerCreateTimerTask>
    1d38:	81 30       	cpi	r24, 0x01	; 1
    1d3a:	c9 f4       	brne	.+50     	; 0x1d6e <vTaskStartScheduler+0x64>
    1d3c:	f8 94       	cli
    1d3e:	8f ef       	ldi	r24, 0xFF	; 255
    1d40:	9f ef       	ldi	r25, 0xFF	; 255
    1d42:	dc 01       	movw	r26, r24
    1d44:	80 93 9b 16 	sts	0x169B, r24	; 0x80169b <xNextTaskUnblockTime>
    1d48:	90 93 9c 16 	sts	0x169C, r25	; 0x80169c <xNextTaskUnblockTime+0x1>
    1d4c:	a0 93 9d 16 	sts	0x169D, r26	; 0x80169d <xNextTaskUnblockTime+0x2>
    1d50:	b0 93 9e 16 	sts	0x169E, r27	; 0x80169e <xNextTaskUnblockTime+0x3>
    1d54:	81 e0       	ldi	r24, 0x01	; 1
    1d56:	80 93 a6 16 	sts	0x16A6, r24	; 0x8016a6 <xSchedulerRunning>
    1d5a:	10 92 a8 16 	sts	0x16A8, r1	; 0x8016a8 <xTickCount>
    1d5e:	10 92 a9 16 	sts	0x16A9, r1	; 0x8016a9 <xTickCount+0x1>
    1d62:	10 92 aa 16 	sts	0x16AA, r1	; 0x8016aa <xTickCount+0x2>
    1d66:	10 92 ab 16 	sts	0x16AB, r1	; 0x8016ab <xTickCount+0x3>
    1d6a:	0e 94 5f 04 	call	0x8be	; 0x8be <xPortStartScheduler>
    1d6e:	80 91 06 02 	lds	r24, 0x0206	; 0x800206 <uxTopUsedPriority>
    1d72:	0f 91       	pop	r16
    1d74:	ff 90       	pop	r15
    1d76:	ef 90       	pop	r14
    1d78:	08 95       	ret

00001d7a <vTaskSuspendAll>:
    1d7a:	80 91 98 16 	lds	r24, 0x1698	; 0x801698 <uxSchedulerSuspended>
    1d7e:	8f 5f       	subi	r24, 0xFF	; 255
    1d80:	80 93 98 16 	sts	0x1698, r24	; 0x801698 <uxSchedulerSuspended>
    1d84:	08 95       	ret

00001d86 <xTaskGetTickCount>:
    1d86:	0f b6       	in	r0, 0x3f	; 63
    1d88:	f8 94       	cli
    1d8a:	0f 92       	push	r0
    1d8c:	60 91 a8 16 	lds	r22, 0x16A8	; 0x8016a8 <xTickCount>
    1d90:	70 91 a9 16 	lds	r23, 0x16A9	; 0x8016a9 <xTickCount+0x1>
    1d94:	80 91 aa 16 	lds	r24, 0x16AA	; 0x8016aa <xTickCount+0x2>
    1d98:	90 91 ab 16 	lds	r25, 0x16AB	; 0x8016ab <xTickCount+0x3>
    1d9c:	0f 90       	pop	r0
    1d9e:	0f be       	out	0x3f, r0	; 63
    1da0:	08 95       	ret

00001da2 <xTaskIncrementTick>:
    1da2:	cf 92       	push	r12
    1da4:	df 92       	push	r13
    1da6:	ef 92       	push	r14
    1da8:	ff 92       	push	r15
    1daa:	cf 93       	push	r28
    1dac:	df 93       	push	r29
    1dae:	80 91 98 16 	lds	r24, 0x1698	; 0x801698 <uxSchedulerSuspended>
    1db2:	81 11       	cpse	r24, r1
    1db4:	05 c1       	rjmp	.+522    	; 0x1fc0 <xTaskIncrementTick+0x21e>
    1db6:	c0 90 a8 16 	lds	r12, 0x16A8	; 0x8016a8 <xTickCount>
    1dba:	d0 90 a9 16 	lds	r13, 0x16A9	; 0x8016a9 <xTickCount+0x1>
    1dbe:	e0 90 aa 16 	lds	r14, 0x16AA	; 0x8016aa <xTickCount+0x2>
    1dc2:	f0 90 ab 16 	lds	r15, 0x16AB	; 0x8016ab <xTickCount+0x3>
    1dc6:	8f ef       	ldi	r24, 0xFF	; 255
    1dc8:	c8 1a       	sub	r12, r24
    1dca:	d8 0a       	sbc	r13, r24
    1dcc:	e8 0a       	sbc	r14, r24
    1dce:	f8 0a       	sbc	r15, r24
    1dd0:	c0 92 a8 16 	sts	0x16A8, r12	; 0x8016a8 <xTickCount>
    1dd4:	d0 92 a9 16 	sts	0x16A9, r13	; 0x8016a9 <xTickCount+0x1>
    1dd8:	e0 92 aa 16 	sts	0x16AA, r14	; 0x8016aa <xTickCount+0x2>
    1ddc:	f0 92 ab 16 	sts	0x16AB, r15	; 0x8016ab <xTickCount+0x3>
    1de0:	c1 14       	cp	r12, r1
    1de2:	d1 04       	cpc	r13, r1
    1de4:	e1 04       	cpc	r14, r1
    1de6:	f1 04       	cpc	r15, r1
    1de8:	b1 f4       	brne	.+44     	; 0x1e16 <xTaskIncrementTick+0x74>
    1dea:	80 91 d1 16 	lds	r24, 0x16D1	; 0x8016d1 <pxDelayedTaskList>
    1dee:	90 91 d2 16 	lds	r25, 0x16D2	; 0x8016d2 <pxDelayedTaskList+0x1>
    1df2:	20 91 cf 16 	lds	r18, 0x16CF	; 0x8016cf <pxOverflowDelayedTaskList>
    1df6:	30 91 d0 16 	lds	r19, 0x16D0	; 0x8016d0 <pxOverflowDelayedTaskList+0x1>
    1dfa:	30 93 d2 16 	sts	0x16D2, r19	; 0x8016d2 <pxDelayedTaskList+0x1>
    1dfe:	20 93 d1 16 	sts	0x16D1, r18	; 0x8016d1 <pxDelayedTaskList>
    1e02:	90 93 d0 16 	sts	0x16D0, r25	; 0x8016d0 <pxOverflowDelayedTaskList+0x1>
    1e06:	80 93 cf 16 	sts	0x16CF, r24	; 0x8016cf <pxOverflowDelayedTaskList>
    1e0a:	80 91 a0 16 	lds	r24, 0x16A0	; 0x8016a0 <xNumOfOverflows>
    1e0e:	8f 5f       	subi	r24, 0xFF	; 255
    1e10:	80 93 a0 16 	sts	0x16A0, r24	; 0x8016a0 <xNumOfOverflows>
    1e14:	16 dd       	rcall	.-1492   	; 0x1842 <prvResetNextTaskUnblockTime>
    1e16:	80 91 9b 16 	lds	r24, 0x169B	; 0x80169b <xNextTaskUnblockTime>
    1e1a:	90 91 9c 16 	lds	r25, 0x169C	; 0x80169c <xNextTaskUnblockTime+0x1>
    1e1e:	a0 91 9d 16 	lds	r26, 0x169D	; 0x80169d <xNextTaskUnblockTime+0x2>
    1e22:	b0 91 9e 16 	lds	r27, 0x169E	; 0x80169e <xNextTaskUnblockTime+0x3>
    1e26:	c8 16       	cp	r12, r24
    1e28:	d9 06       	cpc	r13, r25
    1e2a:	ea 06       	cpc	r14, r26
    1e2c:	fb 06       	cpc	r15, r27
    1e2e:	20 f4       	brcc	.+8      	; 0x1e38 <xTaskIncrementTick+0x96>
    1e30:	80 e0       	ldi	r24, 0x00	; 0
    1e32:	b2 c0       	rjmp	.+356    	; 0x1f98 <xTaskIncrementTick+0x1f6>
    1e34:	81 e0       	ldi	r24, 0x01	; 1
    1e36:	01 c0       	rjmp	.+2      	; 0x1e3a <xTaskIncrementTick+0x98>
    1e38:	80 e0       	ldi	r24, 0x00	; 0
    1e3a:	e0 91 d1 16 	lds	r30, 0x16D1	; 0x8016d1 <pxDelayedTaskList>
    1e3e:	f0 91 d2 16 	lds	r31, 0x16D2	; 0x8016d2 <pxDelayedTaskList+0x1>
    1e42:	90 81       	ld	r25, Z
    1e44:	91 11       	cpse	r25, r1
    1e46:	0c c0       	rjmp	.+24     	; 0x1e60 <xTaskIncrementTick+0xbe>
    1e48:	4f ef       	ldi	r20, 0xFF	; 255
    1e4a:	5f ef       	ldi	r21, 0xFF	; 255
    1e4c:	ba 01       	movw	r22, r20
    1e4e:	40 93 9b 16 	sts	0x169B, r20	; 0x80169b <xNextTaskUnblockTime>
    1e52:	50 93 9c 16 	sts	0x169C, r21	; 0x80169c <xNextTaskUnblockTime+0x1>
    1e56:	60 93 9d 16 	sts	0x169D, r22	; 0x80169d <xNextTaskUnblockTime+0x2>
    1e5a:	70 93 9e 16 	sts	0x169E, r23	; 0x80169e <xNextTaskUnblockTime+0x3>
    1e5e:	9c c0       	rjmp	.+312    	; 0x1f98 <xTaskIncrementTick+0x1f6>
    1e60:	e0 91 d1 16 	lds	r30, 0x16D1	; 0x8016d1 <pxDelayedTaskList>
    1e64:	f0 91 d2 16 	lds	r31, 0x16D2	; 0x8016d2 <pxDelayedTaskList+0x1>
    1e68:	07 80       	ldd	r0, Z+7	; 0x07
    1e6a:	f0 85       	ldd	r31, Z+8	; 0x08
    1e6c:	e0 2d       	mov	r30, r0
    1e6e:	00 84       	ldd	r0, Z+8	; 0x08
    1e70:	f1 85       	ldd	r31, Z+9	; 0x09
    1e72:	e0 2d       	mov	r30, r0
    1e74:	42 81       	ldd	r20, Z+2	; 0x02
    1e76:	53 81       	ldd	r21, Z+3	; 0x03
    1e78:	64 81       	ldd	r22, Z+4	; 0x04
    1e7a:	75 81       	ldd	r23, Z+5	; 0x05
    1e7c:	c4 16       	cp	r12, r20
    1e7e:	d5 06       	cpc	r13, r21
    1e80:	e6 06       	cpc	r14, r22
    1e82:	f7 06       	cpc	r15, r23
    1e84:	48 f4       	brcc	.+18     	; 0x1e98 <xTaskIncrementTick+0xf6>
    1e86:	40 93 9b 16 	sts	0x169B, r20	; 0x80169b <xNextTaskUnblockTime>
    1e8a:	50 93 9c 16 	sts	0x169C, r21	; 0x80169c <xNextTaskUnblockTime+0x1>
    1e8e:	60 93 9d 16 	sts	0x169D, r22	; 0x80169d <xNextTaskUnblockTime+0x2>
    1e92:	70 93 9e 16 	sts	0x169E, r23	; 0x80169e <xNextTaskUnblockTime+0x3>
    1e96:	80 c0       	rjmp	.+256    	; 0x1f98 <xTaskIncrementTick+0x1f6>
    1e98:	a4 85       	ldd	r26, Z+12	; 0x0c
    1e9a:	b5 85       	ldd	r27, Z+13	; 0x0d
    1e9c:	c6 81       	ldd	r28, Z+6	; 0x06
    1e9e:	d7 81       	ldd	r29, Z+7	; 0x07
    1ea0:	20 85       	ldd	r18, Z+8	; 0x08
    1ea2:	31 85       	ldd	r19, Z+9	; 0x09
    1ea4:	3f 83       	std	Y+7, r19	; 0x07
    1ea6:	2e 83       	std	Y+6, r18	; 0x06
    1ea8:	c0 85       	ldd	r28, Z+8	; 0x08
    1eaa:	d1 85       	ldd	r29, Z+9	; 0x09
    1eac:	26 81       	ldd	r18, Z+6	; 0x06
    1eae:	37 81       	ldd	r19, Z+7	; 0x07
    1eb0:	3d 83       	std	Y+5, r19	; 0x05
    1eb2:	2c 83       	std	Y+4, r18	; 0x04
    1eb4:	11 96       	adiw	r26, 0x01	; 1
    1eb6:	4d 91       	ld	r20, X+
    1eb8:	5c 91       	ld	r21, X
    1eba:	12 97       	sbiw	r26, 0x02	; 2
    1ebc:	9f 01       	movw	r18, r30
    1ebe:	2e 5f       	subi	r18, 0xFE	; 254
    1ec0:	3f 4f       	sbci	r19, 0xFF	; 255
    1ec2:	42 17       	cp	r20, r18
    1ec4:	53 07       	cpc	r21, r19
    1ec6:	31 f4       	brne	.+12     	; 0x1ed4 <xTaskIncrementTick+0x132>
    1ec8:	40 85       	ldd	r20, Z+8	; 0x08
    1eca:	51 85       	ldd	r21, Z+9	; 0x09
    1ecc:	12 96       	adiw	r26, 0x02	; 2
    1ece:	5c 93       	st	X, r21
    1ed0:	4e 93       	st	-X, r20
    1ed2:	11 97       	sbiw	r26, 0x01	; 1
    1ed4:	15 86       	std	Z+13, r1	; 0x0d
    1ed6:	14 86       	std	Z+12, r1	; 0x0c
    1ed8:	9c 91       	ld	r25, X
    1eda:	91 50       	subi	r25, 0x01	; 1
    1edc:	9c 93       	st	X, r25
    1ede:	a0 8d       	ldd	r26, Z+24	; 0x18
    1ee0:	b1 8d       	ldd	r27, Z+25	; 0x19
    1ee2:	10 97       	sbiw	r26, 0x00	; 0
    1ee4:	09 f1       	breq	.+66     	; 0x1f28 <xTaskIncrementTick+0x186>
    1ee6:	c2 89       	ldd	r28, Z+18	; 0x12
    1ee8:	d3 89       	ldd	r29, Z+19	; 0x13
    1eea:	44 89       	ldd	r20, Z+20	; 0x14
    1eec:	55 89       	ldd	r21, Z+21	; 0x15
    1eee:	5f 83       	std	Y+7, r21	; 0x07
    1ef0:	4e 83       	std	Y+6, r20	; 0x06
    1ef2:	c4 89       	ldd	r28, Z+20	; 0x14
    1ef4:	d5 89       	ldd	r29, Z+21	; 0x15
    1ef6:	42 89       	ldd	r20, Z+18	; 0x12
    1ef8:	53 89       	ldd	r21, Z+19	; 0x13
    1efa:	5d 83       	std	Y+5, r21	; 0x05
    1efc:	4c 83       	std	Y+4, r20	; 0x04
    1efe:	11 96       	adiw	r26, 0x01	; 1
    1f00:	6d 91       	ld	r22, X+
    1f02:	7c 91       	ld	r23, X
    1f04:	12 97       	sbiw	r26, 0x02	; 2
    1f06:	af 01       	movw	r20, r30
    1f08:	42 5f       	subi	r20, 0xF2	; 242
    1f0a:	5f 4f       	sbci	r21, 0xFF	; 255
    1f0c:	64 17       	cp	r22, r20
    1f0e:	75 07       	cpc	r23, r21
    1f10:	31 f4       	brne	.+12     	; 0x1f1e <xTaskIncrementTick+0x17c>
    1f12:	44 89       	ldd	r20, Z+20	; 0x14
    1f14:	55 89       	ldd	r21, Z+21	; 0x15
    1f16:	12 96       	adiw	r26, 0x02	; 2
    1f18:	5c 93       	st	X, r21
    1f1a:	4e 93       	st	-X, r20
    1f1c:	11 97       	sbiw	r26, 0x01	; 1
    1f1e:	11 8e       	std	Z+25, r1	; 0x19
    1f20:	10 8e       	std	Z+24, r1	; 0x18
    1f22:	9c 91       	ld	r25, X
    1f24:	91 50       	subi	r25, 0x01	; 1
    1f26:	9c 93       	st	X, r25
    1f28:	a2 8d       	ldd	r26, Z+26	; 0x1a
    1f2a:	90 91 a7 16 	lds	r25, 0x16A7	; 0x8016a7 <uxTopReadyPriority>
    1f2e:	9a 17       	cp	r25, r26
    1f30:	10 f4       	brcc	.+4      	; 0x1f36 <xTaskIncrementTick+0x194>
    1f32:	a0 93 a7 16 	sts	0x16A7, r26	; 0x8016a7 <uxTopReadyPriority>
    1f36:	9b e0       	ldi	r25, 0x0B	; 11
    1f38:	9a 9f       	mul	r25, r26
    1f3a:	d0 01       	movw	r26, r0
    1f3c:	11 24       	eor	r1, r1
    1f3e:	a7 51       	subi	r26, 0x17	; 23
    1f40:	b9 4e       	sbci	r27, 0xE9	; 233
    1f42:	11 96       	adiw	r26, 0x01	; 1
    1f44:	0d 90       	ld	r0, X+
    1f46:	bc 91       	ld	r27, X
    1f48:	a0 2d       	mov	r26, r0
    1f4a:	b7 83       	std	Z+7, r27	; 0x07
    1f4c:	a6 83       	std	Z+6, r26	; 0x06
    1f4e:	16 96       	adiw	r26, 0x06	; 6
    1f50:	4d 91       	ld	r20, X+
    1f52:	5c 91       	ld	r21, X
    1f54:	17 97       	sbiw	r26, 0x07	; 7
    1f56:	51 87       	std	Z+9, r21	; 0x09
    1f58:	40 87       	std	Z+8, r20	; 0x08
    1f5a:	16 96       	adiw	r26, 0x06	; 6
    1f5c:	cd 91       	ld	r28, X+
    1f5e:	dc 91       	ld	r29, X
    1f60:	17 97       	sbiw	r26, 0x07	; 7
    1f62:	3d 83       	std	Y+5, r19	; 0x05
    1f64:	2c 83       	std	Y+4, r18	; 0x04
    1f66:	17 96       	adiw	r26, 0x07	; 7
    1f68:	3c 93       	st	X, r19
    1f6a:	2e 93       	st	-X, r18
    1f6c:	16 97       	sbiw	r26, 0x06	; 6
    1f6e:	a2 8d       	ldd	r26, Z+26	; 0x1a
    1f70:	9a 9f       	mul	r25, r26
    1f72:	d0 01       	movw	r26, r0
    1f74:	11 24       	eor	r1, r1
    1f76:	a7 51       	subi	r26, 0x17	; 23
    1f78:	b9 4e       	sbci	r27, 0xE9	; 233
    1f7a:	b5 87       	std	Z+13, r27	; 0x0d
    1f7c:	a4 87       	std	Z+12, r26	; 0x0c
    1f7e:	9c 91       	ld	r25, X
    1f80:	9f 5f       	subi	r25, 0xFF	; 255
    1f82:	9c 93       	st	X, r25
    1f84:	22 8d       	ldd	r18, Z+26	; 0x1a
    1f86:	e0 91 57 17 	lds	r30, 0x1757	; 0x801757 <pxCurrentTCB>
    1f8a:	f0 91 58 17 	lds	r31, 0x1758	; 0x801758 <pxCurrentTCB+0x1>
    1f8e:	92 8d       	ldd	r25, Z+26	; 0x1a
    1f90:	29 17       	cp	r18, r25
    1f92:	08 f0       	brcs	.+2      	; 0x1f96 <xTaskIncrementTick+0x1f4>
    1f94:	4f cf       	rjmp	.-354    	; 0x1e34 <xTaskIncrementTick+0x92>
    1f96:	51 cf       	rjmp	.-350    	; 0x1e3a <xTaskIncrementTick+0x98>
    1f98:	e0 91 57 17 	lds	r30, 0x1757	; 0x801757 <pxCurrentTCB>
    1f9c:	f0 91 58 17 	lds	r31, 0x1758	; 0x801758 <pxCurrentTCB+0x1>
    1fa0:	e2 8d       	ldd	r30, Z+26	; 0x1a
    1fa2:	9b e0       	ldi	r25, 0x0B	; 11
    1fa4:	e9 9f       	mul	r30, r25
    1fa6:	f0 01       	movw	r30, r0
    1fa8:	11 24       	eor	r1, r1
    1faa:	e7 51       	subi	r30, 0x17	; 23
    1fac:	f9 4e       	sbci	r31, 0xE9	; 233
    1fae:	90 81       	ld	r25, Z
    1fb0:	92 30       	cpi	r25, 0x02	; 2
    1fb2:	08 f0       	brcs	.+2      	; 0x1fb6 <xTaskIncrementTick+0x214>
    1fb4:	81 e0       	ldi	r24, 0x01	; 1
    1fb6:	90 91 a1 16 	lds	r25, 0x16A1	; 0x8016a1 <xYieldPending>
    1fba:	91 11       	cpse	r25, r1
    1fbc:	16 c0       	rjmp	.+44     	; 0x1fea <xTaskIncrementTick+0x248>
    1fbe:	16 c0       	rjmp	.+44     	; 0x1fec <xTaskIncrementTick+0x24a>
    1fc0:	80 91 a2 16 	lds	r24, 0x16A2	; 0x8016a2 <xPendedTicks>
    1fc4:	90 91 a3 16 	lds	r25, 0x16A3	; 0x8016a3 <xPendedTicks+0x1>
    1fc8:	a0 91 a4 16 	lds	r26, 0x16A4	; 0x8016a4 <xPendedTicks+0x2>
    1fcc:	b0 91 a5 16 	lds	r27, 0x16A5	; 0x8016a5 <xPendedTicks+0x3>
    1fd0:	01 96       	adiw	r24, 0x01	; 1
    1fd2:	a1 1d       	adc	r26, r1
    1fd4:	b1 1d       	adc	r27, r1
    1fd6:	80 93 a2 16 	sts	0x16A2, r24	; 0x8016a2 <xPendedTicks>
    1fda:	90 93 a3 16 	sts	0x16A3, r25	; 0x8016a3 <xPendedTicks+0x1>
    1fde:	a0 93 a4 16 	sts	0x16A4, r26	; 0x8016a4 <xPendedTicks+0x2>
    1fe2:	b0 93 a5 16 	sts	0x16A5, r27	; 0x8016a5 <xPendedTicks+0x3>
    1fe6:	80 e0       	ldi	r24, 0x00	; 0
    1fe8:	01 c0       	rjmp	.+2      	; 0x1fec <xTaskIncrementTick+0x24a>
    1fea:	81 e0       	ldi	r24, 0x01	; 1
    1fec:	df 91       	pop	r29
    1fee:	cf 91       	pop	r28
    1ff0:	ff 90       	pop	r15
    1ff2:	ef 90       	pop	r14
    1ff4:	df 90       	pop	r13
    1ff6:	cf 90       	pop	r12
    1ff8:	08 95       	ret

00001ffa <xTaskResumeAll>:
    1ffa:	cf 92       	push	r12
    1ffc:	df 92       	push	r13
    1ffe:	ef 92       	push	r14
    2000:	ff 92       	push	r15
    2002:	cf 93       	push	r28
    2004:	df 93       	push	r29
    2006:	0f b6       	in	r0, 0x3f	; 63
    2008:	f8 94       	cli
    200a:	0f 92       	push	r0
    200c:	80 91 98 16 	lds	r24, 0x1698	; 0x801698 <uxSchedulerSuspended>
    2010:	81 50       	subi	r24, 0x01	; 1
    2012:	80 93 98 16 	sts	0x1698, r24	; 0x801698 <uxSchedulerSuspended>
    2016:	80 91 98 16 	lds	r24, 0x1698	; 0x801698 <uxSchedulerSuspended>
    201a:	81 11       	cpse	r24, r1
    201c:	be c0       	rjmp	.+380    	; 0x219a <__DATA_REGION_LENGTH__+0x19a>
    201e:	80 91 ac 16 	lds	r24, 0x16AC	; 0x8016ac <uxCurrentNumberOfTasks>
    2022:	81 11       	cpse	r24, r1
    2024:	88 c0       	rjmp	.+272    	; 0x2136 <__DATA_REGION_LENGTH__+0x136>
    2026:	bc c0       	rjmp	.+376    	; 0x21a0 <__DATA_REGION_LENGTH__+0x1a0>
    2028:	e0 91 cb 16 	lds	r30, 0x16CB	; 0x8016cb <xPendingReadyList+0x7>
    202c:	f0 91 cc 16 	lds	r31, 0x16CC	; 0x8016cc <xPendingReadyList+0x8>
    2030:	00 84       	ldd	r0, Z+8	; 0x08
    2032:	f1 85       	ldd	r31, Z+9	; 0x09
    2034:	e0 2d       	mov	r30, r0
    2036:	a0 8d       	ldd	r26, Z+24	; 0x18
    2038:	b1 8d       	ldd	r27, Z+25	; 0x19
    203a:	c2 89       	ldd	r28, Z+18	; 0x12
    203c:	d3 89       	ldd	r29, Z+19	; 0x13
    203e:	84 89       	ldd	r24, Z+20	; 0x14
    2040:	95 89       	ldd	r25, Z+21	; 0x15
    2042:	9f 83       	std	Y+7, r25	; 0x07
    2044:	8e 83       	std	Y+6, r24	; 0x06
    2046:	c4 89       	ldd	r28, Z+20	; 0x14
    2048:	d5 89       	ldd	r29, Z+21	; 0x15
    204a:	82 89       	ldd	r24, Z+18	; 0x12
    204c:	93 89       	ldd	r25, Z+19	; 0x13
    204e:	9d 83       	std	Y+5, r25	; 0x05
    2050:	8c 83       	std	Y+4, r24	; 0x04
    2052:	11 96       	adiw	r26, 0x01	; 1
    2054:	2d 91       	ld	r18, X+
    2056:	3c 91       	ld	r19, X
    2058:	12 97       	sbiw	r26, 0x02	; 2
    205a:	cf 01       	movw	r24, r30
    205c:	0e 96       	adiw	r24, 0x0e	; 14
    205e:	28 17       	cp	r18, r24
    2060:	39 07       	cpc	r19, r25
    2062:	31 f4       	brne	.+12     	; 0x2070 <__DATA_REGION_LENGTH__+0x70>
    2064:	84 89       	ldd	r24, Z+20	; 0x14
    2066:	95 89       	ldd	r25, Z+21	; 0x15
    2068:	12 96       	adiw	r26, 0x02	; 2
    206a:	9c 93       	st	X, r25
    206c:	8e 93       	st	-X, r24
    206e:	11 97       	sbiw	r26, 0x01	; 1
    2070:	11 8e       	std	Z+25, r1	; 0x19
    2072:	10 8e       	std	Z+24, r1	; 0x18
    2074:	8c 91       	ld	r24, X
    2076:	81 50       	subi	r24, 0x01	; 1
    2078:	8c 93       	st	X, r24
    207a:	a4 85       	ldd	r26, Z+12	; 0x0c
    207c:	b5 85       	ldd	r27, Z+13	; 0x0d
    207e:	c6 81       	ldd	r28, Z+6	; 0x06
    2080:	d7 81       	ldd	r29, Z+7	; 0x07
    2082:	80 85       	ldd	r24, Z+8	; 0x08
    2084:	91 85       	ldd	r25, Z+9	; 0x09
    2086:	9f 83       	std	Y+7, r25	; 0x07
    2088:	8e 83       	std	Y+6, r24	; 0x06
    208a:	c0 85       	ldd	r28, Z+8	; 0x08
    208c:	d1 85       	ldd	r29, Z+9	; 0x09
    208e:	86 81       	ldd	r24, Z+6	; 0x06
    2090:	97 81       	ldd	r25, Z+7	; 0x07
    2092:	9d 83       	std	Y+5, r25	; 0x05
    2094:	8c 83       	std	Y+4, r24	; 0x04
    2096:	11 96       	adiw	r26, 0x01	; 1
    2098:	8d 91       	ld	r24, X+
    209a:	9c 91       	ld	r25, X
    209c:	12 97       	sbiw	r26, 0x02	; 2
    209e:	9f 01       	movw	r18, r30
    20a0:	2e 5f       	subi	r18, 0xFE	; 254
    20a2:	3f 4f       	sbci	r19, 0xFF	; 255
    20a4:	82 17       	cp	r24, r18
    20a6:	93 07       	cpc	r25, r19
    20a8:	31 f4       	brne	.+12     	; 0x20b6 <__DATA_REGION_LENGTH__+0xb6>
    20aa:	80 85       	ldd	r24, Z+8	; 0x08
    20ac:	91 85       	ldd	r25, Z+9	; 0x09
    20ae:	12 96       	adiw	r26, 0x02	; 2
    20b0:	9c 93       	st	X, r25
    20b2:	8e 93       	st	-X, r24
    20b4:	11 97       	sbiw	r26, 0x01	; 1
    20b6:	15 86       	std	Z+13, r1	; 0x0d
    20b8:	14 86       	std	Z+12, r1	; 0x0c
    20ba:	8c 91       	ld	r24, X
    20bc:	81 50       	subi	r24, 0x01	; 1
    20be:	8c 93       	st	X, r24
    20c0:	a2 8d       	ldd	r26, Z+26	; 0x1a
    20c2:	80 91 a7 16 	lds	r24, 0x16A7	; 0x8016a7 <uxTopReadyPriority>
    20c6:	8a 17       	cp	r24, r26
    20c8:	10 f4       	brcc	.+4      	; 0x20ce <__DATA_REGION_LENGTH__+0xce>
    20ca:	a0 93 a7 16 	sts	0x16A7, r26	; 0x8016a7 <uxTopReadyPriority>
    20ce:	8b e0       	ldi	r24, 0x0B	; 11
    20d0:	8a 9f       	mul	r24, r26
    20d2:	d0 01       	movw	r26, r0
    20d4:	11 24       	eor	r1, r1
    20d6:	a7 51       	subi	r26, 0x17	; 23
    20d8:	b9 4e       	sbci	r27, 0xE9	; 233
    20da:	11 96       	adiw	r26, 0x01	; 1
    20dc:	0d 90       	ld	r0, X+
    20de:	bc 91       	ld	r27, X
    20e0:	a0 2d       	mov	r26, r0
    20e2:	b7 83       	std	Z+7, r27	; 0x07
    20e4:	a6 83       	std	Z+6, r26	; 0x06
    20e6:	16 96       	adiw	r26, 0x06	; 6
    20e8:	4d 91       	ld	r20, X+
    20ea:	5c 91       	ld	r21, X
    20ec:	17 97       	sbiw	r26, 0x07	; 7
    20ee:	51 87       	std	Z+9, r21	; 0x09
    20f0:	40 87       	std	Z+8, r20	; 0x08
    20f2:	16 96       	adiw	r26, 0x06	; 6
    20f4:	cd 91       	ld	r28, X+
    20f6:	dc 91       	ld	r29, X
    20f8:	17 97       	sbiw	r26, 0x07	; 7
    20fa:	3d 83       	std	Y+5, r19	; 0x05
    20fc:	2c 83       	std	Y+4, r18	; 0x04
    20fe:	17 96       	adiw	r26, 0x07	; 7
    2100:	3c 93       	st	X, r19
    2102:	2e 93       	st	-X, r18
    2104:	16 97       	sbiw	r26, 0x06	; 6
    2106:	a2 8d       	ldd	r26, Z+26	; 0x1a
    2108:	8a 9f       	mul	r24, r26
    210a:	d0 01       	movw	r26, r0
    210c:	11 24       	eor	r1, r1
    210e:	a7 51       	subi	r26, 0x17	; 23
    2110:	b9 4e       	sbci	r27, 0xE9	; 233
    2112:	b5 87       	std	Z+13, r27	; 0x0d
    2114:	a4 87       	std	Z+12, r26	; 0x0c
    2116:	8c 91       	ld	r24, X
    2118:	8f 5f       	subi	r24, 0xFF	; 255
    211a:	8c 93       	st	X, r24
    211c:	92 8d       	ldd	r25, Z+26	; 0x1a
    211e:	a0 91 57 17 	lds	r26, 0x1757	; 0x801757 <pxCurrentTCB>
    2122:	b0 91 58 17 	lds	r27, 0x1758	; 0x801758 <pxCurrentTCB+0x1>
    2126:	5a 96       	adiw	r26, 0x1a	; 26
    2128:	8c 91       	ld	r24, X
    212a:	98 17       	cp	r25, r24
    212c:	30 f0       	brcs	.+12     	; 0x213a <__DATA_REGION_LENGTH__+0x13a>
    212e:	81 e0       	ldi	r24, 0x01	; 1
    2130:	80 93 a1 16 	sts	0x16A1, r24	; 0x8016a1 <xYieldPending>
    2134:	02 c0       	rjmp	.+4      	; 0x213a <__DATA_REGION_LENGTH__+0x13a>
    2136:	e0 e0       	ldi	r30, 0x00	; 0
    2138:	f0 e0       	ldi	r31, 0x00	; 0
    213a:	80 91 c4 16 	lds	r24, 0x16C4	; 0x8016c4 <xPendingReadyList>
    213e:	81 11       	cpse	r24, r1
    2140:	73 cf       	rjmp	.-282    	; 0x2028 <__DATA_REGION_LENGTH__+0x28>
    2142:	ef 2b       	or	r30, r31
    2144:	09 f0       	breq	.+2      	; 0x2148 <__DATA_REGION_LENGTH__+0x148>
    2146:	7d db       	rcall	.-2310   	; 0x1842 <prvResetNextTaskUnblockTime>
    2148:	c0 90 a2 16 	lds	r12, 0x16A2	; 0x8016a2 <xPendedTicks>
    214c:	d0 90 a3 16 	lds	r13, 0x16A3	; 0x8016a3 <xPendedTicks+0x1>
    2150:	e0 90 a4 16 	lds	r14, 0x16A4	; 0x8016a4 <xPendedTicks+0x2>
    2154:	f0 90 a5 16 	lds	r15, 0x16A5	; 0x8016a5 <xPendedTicks+0x3>
    2158:	c1 14       	cp	r12, r1
    215a:	d1 04       	cpc	r13, r1
    215c:	e1 04       	cpc	r14, r1
    215e:	f1 04       	cpc	r15, r1
    2160:	a1 f0       	breq	.+40     	; 0x218a <__DATA_REGION_LENGTH__+0x18a>
    2162:	1f de       	rcall	.-962    	; 0x1da2 <xTaskIncrementTick>
    2164:	88 23       	and	r24, r24
    2166:	19 f0       	breq	.+6      	; 0x216e <__DATA_REGION_LENGTH__+0x16e>
    2168:	81 e0       	ldi	r24, 0x01	; 1
    216a:	80 93 a1 16 	sts	0x16A1, r24	; 0x8016a1 <xYieldPending>
    216e:	81 e0       	ldi	r24, 0x01	; 1
    2170:	c8 1a       	sub	r12, r24
    2172:	d1 08       	sbc	r13, r1
    2174:	e1 08       	sbc	r14, r1
    2176:	f1 08       	sbc	r15, r1
    2178:	a1 f7       	brne	.-24     	; 0x2162 <__DATA_REGION_LENGTH__+0x162>
    217a:	10 92 a2 16 	sts	0x16A2, r1	; 0x8016a2 <xPendedTicks>
    217e:	10 92 a3 16 	sts	0x16A3, r1	; 0x8016a3 <xPendedTicks+0x1>
    2182:	10 92 a4 16 	sts	0x16A4, r1	; 0x8016a4 <xPendedTicks+0x2>
    2186:	10 92 a5 16 	sts	0x16A5, r1	; 0x8016a5 <xPendedTicks+0x3>
    218a:	80 91 a1 16 	lds	r24, 0x16A1	; 0x8016a1 <xYieldPending>
    218e:	88 23       	and	r24, r24
    2190:	31 f0       	breq	.+12     	; 0x219e <__DATA_REGION_LENGTH__+0x19e>
    2192:	0e 94 91 04 	call	0x922	; 0x922 <vPortYield>
    2196:	81 e0       	ldi	r24, 0x01	; 1
    2198:	03 c0       	rjmp	.+6      	; 0x21a0 <__DATA_REGION_LENGTH__+0x1a0>
    219a:	80 e0       	ldi	r24, 0x00	; 0
    219c:	01 c0       	rjmp	.+2      	; 0x21a0 <__DATA_REGION_LENGTH__+0x1a0>
    219e:	80 e0       	ldi	r24, 0x00	; 0
    21a0:	0f 90       	pop	r0
    21a2:	0f be       	out	0x3f, r0	; 63
    21a4:	df 91       	pop	r29
    21a6:	cf 91       	pop	r28
    21a8:	ff 90       	pop	r15
    21aa:	ef 90       	pop	r14
    21ac:	df 90       	pop	r13
    21ae:	cf 90       	pop	r12
    21b0:	08 95       	ret

000021b2 <xTaskDelayUntil>:
    21b2:	8f 92       	push	r8
    21b4:	9f 92       	push	r9
    21b6:	af 92       	push	r10
    21b8:	bf 92       	push	r11
    21ba:	cf 92       	push	r12
    21bc:	df 92       	push	r13
    21be:	ef 92       	push	r14
    21c0:	ff 92       	push	r15
    21c2:	1f 93       	push	r17
    21c4:	cf 93       	push	r28
    21c6:	df 93       	push	r29
    21c8:	ec 01       	movw	r28, r24
    21ca:	6a 01       	movw	r12, r20
    21cc:	7b 01       	movw	r14, r22
    21ce:	d5 dd       	rcall	.-1110   	; 0x1d7a <vTaskSuspendAll>
    21d0:	80 90 a8 16 	lds	r8, 0x16A8	; 0x8016a8 <xTickCount>
    21d4:	90 90 a9 16 	lds	r9, 0x16A9	; 0x8016a9 <xTickCount+0x1>
    21d8:	a0 90 aa 16 	lds	r10, 0x16AA	; 0x8016aa <xTickCount+0x2>
    21dc:	b0 90 ab 16 	lds	r11, 0x16AB	; 0x8016ab <xTickCount+0x3>
    21e0:	88 81       	ld	r24, Y
    21e2:	99 81       	ldd	r25, Y+1	; 0x01
    21e4:	aa 81       	ldd	r26, Y+2	; 0x02
    21e6:	bb 81       	ldd	r27, Y+3	; 0x03
    21e8:	ac 01       	movw	r20, r24
    21ea:	bd 01       	movw	r22, r26
    21ec:	4c 0d       	add	r20, r12
    21ee:	5d 1d       	adc	r21, r13
    21f0:	6e 1d       	adc	r22, r14
    21f2:	7f 1d       	adc	r23, r15
    21f4:	88 16       	cp	r8, r24
    21f6:	99 06       	cpc	r9, r25
    21f8:	aa 06       	cpc	r10, r26
    21fa:	bb 06       	cpc	r11, r27
    21fc:	60 f4       	brcc	.+24     	; 0x2216 <__stack+0x17>
    21fe:	48 17       	cp	r20, r24
    2200:	59 07       	cpc	r21, r25
    2202:	6a 07       	cpc	r22, r26
    2204:	7b 07       	cpc	r23, r27
    2206:	98 f4       	brcc	.+38     	; 0x222e <__stack+0x2f>
    2208:	84 16       	cp	r8, r20
    220a:	95 06       	cpc	r9, r21
    220c:	a6 06       	cpc	r10, r22
    220e:	b7 06       	cpc	r11, r23
    2210:	80 f0       	brcs	.+32     	; 0x2232 <__stack+0x33>
    2212:	10 e0       	ldi	r17, 0x00	; 0
    2214:	13 c0       	rjmp	.+38     	; 0x223c <__stack+0x3d>
    2216:	48 17       	cp	r20, r24
    2218:	59 07       	cpc	r21, r25
    221a:	6a 07       	cpc	r22, r26
    221c:	7b 07       	cpc	r23, r27
    221e:	58 f0       	brcs	.+22     	; 0x2236 <__stack+0x37>
    2220:	84 16       	cp	r8, r20
    2222:	95 06       	cpc	r9, r21
    2224:	a6 06       	cpc	r10, r22
    2226:	b7 06       	cpc	r11, r23
    2228:	40 f0       	brcs	.+16     	; 0x223a <__stack+0x3b>
    222a:	10 e0       	ldi	r17, 0x00	; 0
    222c:	07 c0       	rjmp	.+14     	; 0x223c <__stack+0x3d>
    222e:	10 e0       	ldi	r17, 0x00	; 0
    2230:	05 c0       	rjmp	.+10     	; 0x223c <__stack+0x3d>
    2232:	11 e0       	ldi	r17, 0x01	; 1
    2234:	03 c0       	rjmp	.+6      	; 0x223c <__stack+0x3d>
    2236:	11 e0       	ldi	r17, 0x01	; 1
    2238:	01 c0       	rjmp	.+2      	; 0x223c <__stack+0x3d>
    223a:	11 e0       	ldi	r17, 0x01	; 1
    223c:	48 83       	st	Y, r20
    223e:	59 83       	std	Y+1, r21	; 0x01
    2240:	6a 83       	std	Y+2, r22	; 0x02
    2242:	7b 83       	std	Y+3, r23	; 0x03
    2244:	11 23       	and	r17, r17
    2246:	41 f0       	breq	.+16     	; 0x2258 <__stack+0x59>
    2248:	cb 01       	movw	r24, r22
    224a:	ba 01       	movw	r22, r20
    224c:	68 19       	sub	r22, r8
    224e:	79 09       	sbc	r23, r9
    2250:	8a 09       	sbc	r24, r10
    2252:	9b 09       	sbc	r25, r11
    2254:	40 e0       	ldi	r20, 0x00	; 0
    2256:	6b dc       	rcall	.-1834   	; 0x1b2e <prvAddCurrentTaskToDelayedList>
    2258:	d0 de       	rcall	.-608    	; 0x1ffa <xTaskResumeAll>
    225a:	81 11       	cpse	r24, r1
    225c:	02 c0       	rjmp	.+4      	; 0x2262 <__stack+0x63>
    225e:	0e 94 91 04 	call	0x922	; 0x922 <vPortYield>
    2262:	81 2f       	mov	r24, r17
    2264:	df 91       	pop	r29
    2266:	cf 91       	pop	r28
    2268:	1f 91       	pop	r17
    226a:	ff 90       	pop	r15
    226c:	ef 90       	pop	r14
    226e:	df 90       	pop	r13
    2270:	cf 90       	pop	r12
    2272:	bf 90       	pop	r11
    2274:	af 90       	pop	r10
    2276:	9f 90       	pop	r9
    2278:	8f 90       	pop	r8
    227a:	08 95       	ret

0000227c <vTaskDelay>:
    227c:	cf 92       	push	r12
    227e:	df 92       	push	r13
    2280:	ef 92       	push	r14
    2282:	ff 92       	push	r15
    2284:	6b 01       	movw	r12, r22
    2286:	7c 01       	movw	r14, r24
    2288:	67 2b       	or	r22, r23
    228a:	68 2b       	or	r22, r24
    228c:	69 2b       	or	r22, r25
    228e:	39 f0       	breq	.+14     	; 0x229e <vTaskDelay+0x22>
    2290:	74 dd       	rcall	.-1304   	; 0x1d7a <vTaskSuspendAll>
    2292:	40 e0       	ldi	r20, 0x00	; 0
    2294:	c7 01       	movw	r24, r14
    2296:	b6 01       	movw	r22, r12
    2298:	4a dc       	rcall	.-1900   	; 0x1b2e <prvAddCurrentTaskToDelayedList>
    229a:	af de       	rcall	.-674    	; 0x1ffa <xTaskResumeAll>
    229c:	01 c0       	rjmp	.+2      	; 0x22a0 <vTaskDelay+0x24>
    229e:	80 e0       	ldi	r24, 0x00	; 0
    22a0:	81 11       	cpse	r24, r1
    22a2:	02 c0       	rjmp	.+4      	; 0x22a8 <vTaskDelay+0x2c>
    22a4:	0e 94 91 04 	call	0x922	; 0x922 <vPortYield>
    22a8:	ff 90       	pop	r15
    22aa:	ef 90       	pop	r14
    22ac:	df 90       	pop	r13
    22ae:	cf 90       	pop	r12
    22b0:	08 95       	ret

000022b2 <vTaskSwitchContext>:
    22b2:	80 91 98 16 	lds	r24, 0x1698	; 0x801698 <uxSchedulerSuspended>
    22b6:	88 23       	and	r24, r24
    22b8:	21 f0       	breq	.+8      	; 0x22c2 <vTaskSwitchContext+0x10>
    22ba:	81 e0       	ldi	r24, 0x01	; 1
    22bc:	80 93 a1 16 	sts	0x16A1, r24	; 0x8016a1 <xYieldPending>
    22c0:	08 95       	ret
    22c2:	10 92 a1 16 	sts	0x16A1, r1	; 0x8016a1 <xYieldPending>
    22c6:	e0 91 57 17 	lds	r30, 0x1757	; 0x801757 <pxCurrentTCB>
    22ca:	f0 91 58 17 	lds	r31, 0x1758	; 0x801758 <pxCurrentTCB+0x1>
    22ce:	20 81       	ld	r18, Z
    22d0:	31 81       	ldd	r19, Z+1	; 0x01
    22d2:	e0 91 57 17 	lds	r30, 0x1757	; 0x801757 <pxCurrentTCB>
    22d6:	f0 91 58 17 	lds	r31, 0x1758	; 0x801758 <pxCurrentTCB+0x1>
    22da:	83 8d       	ldd	r24, Z+27	; 0x1b
    22dc:	94 8d       	ldd	r25, Z+28	; 0x1c
    22de:	82 17       	cp	r24, r18
    22e0:	93 07       	cpc	r25, r19
    22e2:	60 f0       	brcs	.+24     	; 0x22fc <vTaskSwitchContext+0x4a>
    22e4:	60 91 57 17 	lds	r22, 0x1757	; 0x801757 <pxCurrentTCB>
    22e8:	70 91 58 17 	lds	r23, 0x1758	; 0x801758 <pxCurrentTCB+0x1>
    22ec:	63 5e       	subi	r22, 0xE3	; 227
    22ee:	7f 4f       	sbci	r23, 0xFF	; 255
    22f0:	80 91 57 17 	lds	r24, 0x1757	; 0x801757 <pxCurrentTCB>
    22f4:	90 91 58 17 	lds	r25, 0x1758	; 0x801758 <pxCurrentTCB+0x1>
    22f8:	0e 94 c6 1b 	call	0x378c	; 0x378c <vApplicationStackOverflowHook>
    22fc:	80 91 a7 16 	lds	r24, 0x16A7	; 0x8016a7 <uxTopReadyPriority>
    2300:	01 c0       	rjmp	.+2      	; 0x2304 <vTaskSwitchContext+0x52>
    2302:	81 50       	subi	r24, 0x01	; 1
    2304:	28 2f       	mov	r18, r24
    2306:	30 e0       	ldi	r19, 0x00	; 0
    2308:	9b e0       	ldi	r25, 0x0B	; 11
    230a:	92 9f       	mul	r25, r18
    230c:	f0 01       	movw	r30, r0
    230e:	93 9f       	mul	r25, r19
    2310:	f0 0d       	add	r31, r0
    2312:	11 24       	eor	r1, r1
    2314:	e7 51       	subi	r30, 0x17	; 23
    2316:	f9 4e       	sbci	r31, 0xE9	; 233
    2318:	90 81       	ld	r25, Z
    231a:	99 23       	and	r25, r25
    231c:	91 f3       	breq	.-28     	; 0x2302 <vTaskSwitchContext+0x50>
    231e:	9b e0       	ldi	r25, 0x0B	; 11
    2320:	92 9f       	mul	r25, r18
    2322:	a0 01       	movw	r20, r0
    2324:	93 9f       	mul	r25, r19
    2326:	50 0d       	add	r21, r0
    2328:	11 24       	eor	r1, r1
    232a:	df 01       	movw	r26, r30
    232c:	01 80       	ldd	r0, Z+1	; 0x01
    232e:	f2 81       	ldd	r31, Z+2	; 0x02
    2330:	e0 2d       	mov	r30, r0
    2332:	04 80       	ldd	r0, Z+4	; 0x04
    2334:	f5 81       	ldd	r31, Z+5	; 0x05
    2336:	e0 2d       	mov	r30, r0
    2338:	12 96       	adiw	r26, 0x02	; 2
    233a:	fc 93       	st	X, r31
    233c:	ee 93       	st	-X, r30
    233e:	11 97       	sbiw	r26, 0x01	; 1
    2340:	44 51       	subi	r20, 0x14	; 20
    2342:	59 4e       	sbci	r21, 0xE9	; 233
    2344:	e4 17       	cp	r30, r20
    2346:	f5 07       	cpc	r31, r21
    2348:	29 f4       	brne	.+10     	; 0x2354 <vTaskSwitchContext+0xa2>
    234a:	44 81       	ldd	r20, Z+4	; 0x04
    234c:	55 81       	ldd	r21, Z+5	; 0x05
    234e:	fd 01       	movw	r30, r26
    2350:	52 83       	std	Z+2, r21	; 0x02
    2352:	41 83       	std	Z+1, r20	; 0x01
    2354:	9b e0       	ldi	r25, 0x0B	; 11
    2356:	92 9f       	mul	r25, r18
    2358:	f0 01       	movw	r30, r0
    235a:	93 9f       	mul	r25, r19
    235c:	f0 0d       	add	r31, r0
    235e:	11 24       	eor	r1, r1
    2360:	e7 51       	subi	r30, 0x17	; 23
    2362:	f9 4e       	sbci	r31, 0xE9	; 233
    2364:	01 80       	ldd	r0, Z+1	; 0x01
    2366:	f2 81       	ldd	r31, Z+2	; 0x02
    2368:	e0 2d       	mov	r30, r0
    236a:	20 85       	ldd	r18, Z+8	; 0x08
    236c:	31 85       	ldd	r19, Z+9	; 0x09
    236e:	30 93 58 17 	sts	0x1758, r19	; 0x801758 <pxCurrentTCB+0x1>
    2372:	20 93 57 17 	sts	0x1757, r18	; 0x801757 <pxCurrentTCB>
    2376:	80 93 a7 16 	sts	0x16A7, r24	; 0x8016a7 <uxTopReadyPriority>
    237a:	08 95       	ret

0000237c <vTaskPlaceOnEventList>:
    237c:	cf 92       	push	r12
    237e:	df 92       	push	r13
    2380:	ef 92       	push	r14
    2382:	ff 92       	push	r15
    2384:	6a 01       	movw	r12, r20
    2386:	7b 01       	movw	r14, r22
    2388:	60 91 57 17 	lds	r22, 0x1757	; 0x801757 <pxCurrentTCB>
    238c:	70 91 58 17 	lds	r23, 0x1758	; 0x801758 <pxCurrentTCB+0x1>
    2390:	62 5f       	subi	r22, 0xF2	; 242
    2392:	7f 4f       	sbci	r23, 0xFF	; 255
    2394:	0e 94 d8 03 	call	0x7b0	; 0x7b0 <vListInsert>
    2398:	41 e0       	ldi	r20, 0x01	; 1
    239a:	c7 01       	movw	r24, r14
    239c:	b6 01       	movw	r22, r12
    239e:	c7 db       	rcall	.-2162   	; 0x1b2e <prvAddCurrentTaskToDelayedList>
    23a0:	ff 90       	pop	r15
    23a2:	ef 90       	pop	r14
    23a4:	df 90       	pop	r13
    23a6:	cf 90       	pop	r12
    23a8:	08 95       	ret

000023aa <vTaskPlaceOnUnorderedEventList>:
    23aa:	0f 93       	push	r16
    23ac:	1f 93       	push	r17
    23ae:	cf 93       	push	r28
    23b0:	df 93       	push	r29
    23b2:	fc 01       	movw	r30, r24
    23b4:	a0 91 57 17 	lds	r26, 0x1757	; 0x801757 <pxCurrentTCB>
    23b8:	b0 91 58 17 	lds	r27, 0x1758	; 0x801758 <pxCurrentTCB+0x1>
    23bc:	70 68       	ori	r23, 0x80	; 128
    23be:	1e 96       	adiw	r26, 0x0e	; 14
    23c0:	4d 93       	st	X+, r20
    23c2:	5d 93       	st	X+, r21
    23c4:	6d 93       	st	X+, r22
    23c6:	7c 93       	st	X, r23
    23c8:	51 97       	sbiw	r26, 0x11	; 17
    23ca:	a1 81       	ldd	r26, Z+1	; 0x01
    23cc:	b2 81       	ldd	r27, Z+2	; 0x02
    23ce:	c0 91 57 17 	lds	r28, 0x1757	; 0x801757 <pxCurrentTCB>
    23d2:	d0 91 58 17 	lds	r29, 0x1758	; 0x801758 <pxCurrentTCB+0x1>
    23d6:	bb 8b       	std	Y+19, r27	; 0x13
    23d8:	aa 8b       	std	Y+18, r26	; 0x12
    23da:	c0 91 57 17 	lds	r28, 0x1757	; 0x801757 <pxCurrentTCB>
    23de:	d0 91 58 17 	lds	r29, 0x1758	; 0x801758 <pxCurrentTCB+0x1>
    23e2:	16 96       	adiw	r26, 0x06	; 6
    23e4:	8d 91       	ld	r24, X+
    23e6:	9c 91       	ld	r25, X
    23e8:	17 97       	sbiw	r26, 0x07	; 7
    23ea:	9d 8b       	std	Y+21, r25	; 0x15
    23ec:	8c 8b       	std	Y+20, r24	; 0x14
    23ee:	16 96       	adiw	r26, 0x06	; 6
    23f0:	cd 91       	ld	r28, X+
    23f2:	dc 91       	ld	r29, X
    23f4:	17 97       	sbiw	r26, 0x07	; 7
    23f6:	80 91 57 17 	lds	r24, 0x1757	; 0x801757 <pxCurrentTCB>
    23fa:	90 91 58 17 	lds	r25, 0x1758	; 0x801758 <pxCurrentTCB+0x1>
    23fe:	0e 96       	adiw	r24, 0x0e	; 14
    2400:	9d 83       	std	Y+5, r25	; 0x05
    2402:	8c 83       	std	Y+4, r24	; 0x04
    2404:	80 91 57 17 	lds	r24, 0x1757	; 0x801757 <pxCurrentTCB>
    2408:	90 91 58 17 	lds	r25, 0x1758	; 0x801758 <pxCurrentTCB+0x1>
    240c:	0e 96       	adiw	r24, 0x0e	; 14
    240e:	17 96       	adiw	r26, 0x07	; 7
    2410:	9c 93       	st	X, r25
    2412:	8e 93       	st	-X, r24
    2414:	16 97       	sbiw	r26, 0x06	; 6
    2416:	a0 91 57 17 	lds	r26, 0x1757	; 0x801757 <pxCurrentTCB>
    241a:	b0 91 58 17 	lds	r27, 0x1758	; 0x801758 <pxCurrentTCB+0x1>
    241e:	59 96       	adiw	r26, 0x19	; 25
    2420:	fc 93       	st	X, r31
    2422:	ee 93       	st	-X, r30
    2424:	58 97       	sbiw	r26, 0x18	; 24
    2426:	80 81       	ld	r24, Z
    2428:	8f 5f       	subi	r24, 0xFF	; 255
    242a:	80 83       	st	Z, r24
    242c:	41 e0       	ldi	r20, 0x01	; 1
    242e:	c9 01       	movw	r24, r18
    2430:	b8 01       	movw	r22, r16
    2432:	7d db       	rcall	.-2310   	; 0x1b2e <prvAddCurrentTaskToDelayedList>
    2434:	df 91       	pop	r29
    2436:	cf 91       	pop	r28
    2438:	1f 91       	pop	r17
    243a:	0f 91       	pop	r16
    243c:	08 95       	ret

0000243e <vTaskPlaceOnEventListRestricted>:
    243e:	cf 93       	push	r28
    2440:	df 93       	push	r29
    2442:	fc 01       	movw	r30, r24
    2444:	cb 01       	movw	r24, r22
    2446:	ba 01       	movw	r22, r20
    2448:	a1 81       	ldd	r26, Z+1	; 0x01
    244a:	b2 81       	ldd	r27, Z+2	; 0x02
    244c:	c0 91 57 17 	lds	r28, 0x1757	; 0x801757 <pxCurrentTCB>
    2450:	d0 91 58 17 	lds	r29, 0x1758	; 0x801758 <pxCurrentTCB+0x1>
    2454:	bb 8b       	std	Y+19, r27	; 0x13
    2456:	aa 8b       	std	Y+18, r26	; 0x12
    2458:	c0 91 57 17 	lds	r28, 0x1757	; 0x801757 <pxCurrentTCB>
    245c:	d0 91 58 17 	lds	r29, 0x1758	; 0x801758 <pxCurrentTCB+0x1>
    2460:	16 96       	adiw	r26, 0x06	; 6
    2462:	4d 91       	ld	r20, X+
    2464:	5c 91       	ld	r21, X
    2466:	17 97       	sbiw	r26, 0x07	; 7
    2468:	5d 8b       	std	Y+21, r21	; 0x15
    246a:	4c 8b       	std	Y+20, r20	; 0x14
    246c:	16 96       	adiw	r26, 0x06	; 6
    246e:	cd 91       	ld	r28, X+
    2470:	dc 91       	ld	r29, X
    2472:	17 97       	sbiw	r26, 0x07	; 7
    2474:	40 91 57 17 	lds	r20, 0x1757	; 0x801757 <pxCurrentTCB>
    2478:	50 91 58 17 	lds	r21, 0x1758	; 0x801758 <pxCurrentTCB+0x1>
    247c:	42 5f       	subi	r20, 0xF2	; 242
    247e:	5f 4f       	sbci	r21, 0xFF	; 255
    2480:	5d 83       	std	Y+5, r21	; 0x05
    2482:	4c 83       	std	Y+4, r20	; 0x04
    2484:	40 91 57 17 	lds	r20, 0x1757	; 0x801757 <pxCurrentTCB>
    2488:	50 91 58 17 	lds	r21, 0x1758	; 0x801758 <pxCurrentTCB+0x1>
    248c:	42 5f       	subi	r20, 0xF2	; 242
    248e:	5f 4f       	sbci	r21, 0xFF	; 255
    2490:	17 96       	adiw	r26, 0x07	; 7
    2492:	5c 93       	st	X, r21
    2494:	4e 93       	st	-X, r20
    2496:	16 97       	sbiw	r26, 0x06	; 6
    2498:	a0 91 57 17 	lds	r26, 0x1757	; 0x801757 <pxCurrentTCB>
    249c:	b0 91 58 17 	lds	r27, 0x1758	; 0x801758 <pxCurrentTCB+0x1>
    24a0:	59 96       	adiw	r26, 0x19	; 25
    24a2:	fc 93       	st	X, r31
    24a4:	ee 93       	st	-X, r30
    24a6:	58 97       	sbiw	r26, 0x18	; 24
    24a8:	30 81       	ld	r19, Z
    24aa:	3f 5f       	subi	r19, 0xFF	; 255
    24ac:	30 83       	st	Z, r19
    24ae:	22 23       	and	r18, r18
    24b0:	19 f0       	breq	.+6      	; 0x24b8 <vTaskPlaceOnEventListRestricted+0x7a>
    24b2:	6f ef       	ldi	r22, 0xFF	; 255
    24b4:	7f ef       	ldi	r23, 0xFF	; 255
    24b6:	cb 01       	movw	r24, r22
    24b8:	42 2f       	mov	r20, r18
    24ba:	39 db       	rcall	.-2446   	; 0x1b2e <prvAddCurrentTaskToDelayedList>
    24bc:	df 91       	pop	r29
    24be:	cf 91       	pop	r28
    24c0:	08 95       	ret

000024c2 <xTaskRemoveFromEventList>:
    24c2:	cf 93       	push	r28
    24c4:	df 93       	push	r29
    24c6:	dc 01       	movw	r26, r24
    24c8:	17 96       	adiw	r26, 0x07	; 7
    24ca:	ed 91       	ld	r30, X+
    24cc:	fc 91       	ld	r31, X
    24ce:	18 97       	sbiw	r26, 0x08	; 8
    24d0:	00 84       	ldd	r0, Z+8	; 0x08
    24d2:	f1 85       	ldd	r31, Z+9	; 0x09
    24d4:	e0 2d       	mov	r30, r0
    24d6:	a0 8d       	ldd	r26, Z+24	; 0x18
    24d8:	b1 8d       	ldd	r27, Z+25	; 0x19
    24da:	c2 89       	ldd	r28, Z+18	; 0x12
    24dc:	d3 89       	ldd	r29, Z+19	; 0x13
    24de:	84 89       	ldd	r24, Z+20	; 0x14
    24e0:	95 89       	ldd	r25, Z+21	; 0x15
    24e2:	9f 83       	std	Y+7, r25	; 0x07
    24e4:	8e 83       	std	Y+6, r24	; 0x06
    24e6:	c4 89       	ldd	r28, Z+20	; 0x14
    24e8:	d5 89       	ldd	r29, Z+21	; 0x15
    24ea:	82 89       	ldd	r24, Z+18	; 0x12
    24ec:	93 89       	ldd	r25, Z+19	; 0x13
    24ee:	9d 83       	std	Y+5, r25	; 0x05
    24f0:	8c 83       	std	Y+4, r24	; 0x04
    24f2:	11 96       	adiw	r26, 0x01	; 1
    24f4:	8d 91       	ld	r24, X+
    24f6:	9c 91       	ld	r25, X
    24f8:	12 97       	sbiw	r26, 0x02	; 2
    24fa:	9f 01       	movw	r18, r30
    24fc:	22 5f       	subi	r18, 0xF2	; 242
    24fe:	3f 4f       	sbci	r19, 0xFF	; 255
    2500:	82 17       	cp	r24, r18
    2502:	93 07       	cpc	r25, r19
    2504:	31 f4       	brne	.+12     	; 0x2512 <xTaskRemoveFromEventList+0x50>
    2506:	84 89       	ldd	r24, Z+20	; 0x14
    2508:	95 89       	ldd	r25, Z+21	; 0x15
    250a:	12 96       	adiw	r26, 0x02	; 2
    250c:	9c 93       	st	X, r25
    250e:	8e 93       	st	-X, r24
    2510:	11 97       	sbiw	r26, 0x01	; 1
    2512:	11 8e       	std	Z+25, r1	; 0x19
    2514:	10 8e       	std	Z+24, r1	; 0x18
    2516:	8c 91       	ld	r24, X
    2518:	81 50       	subi	r24, 0x01	; 1
    251a:	8c 93       	st	X, r24
    251c:	80 91 98 16 	lds	r24, 0x1698	; 0x801698 <uxSchedulerSuspended>
    2520:	81 11       	cpse	r24, r1
    2522:	52 c0       	rjmp	.+164    	; 0x25c8 <xTaskRemoveFromEventList+0x106>
    2524:	a4 85       	ldd	r26, Z+12	; 0x0c
    2526:	b5 85       	ldd	r27, Z+13	; 0x0d
    2528:	c6 81       	ldd	r28, Z+6	; 0x06
    252a:	d7 81       	ldd	r29, Z+7	; 0x07
    252c:	80 85       	ldd	r24, Z+8	; 0x08
    252e:	91 85       	ldd	r25, Z+9	; 0x09
    2530:	9f 83       	std	Y+7, r25	; 0x07
    2532:	8e 83       	std	Y+6, r24	; 0x06
    2534:	c0 85       	ldd	r28, Z+8	; 0x08
    2536:	d1 85       	ldd	r29, Z+9	; 0x09
    2538:	86 81       	ldd	r24, Z+6	; 0x06
    253a:	97 81       	ldd	r25, Z+7	; 0x07
    253c:	9d 83       	std	Y+5, r25	; 0x05
    253e:	8c 83       	std	Y+4, r24	; 0x04
    2540:	11 96       	adiw	r26, 0x01	; 1
    2542:	8d 91       	ld	r24, X+
    2544:	9c 91       	ld	r25, X
    2546:	12 97       	sbiw	r26, 0x02	; 2
    2548:	9f 01       	movw	r18, r30
    254a:	2e 5f       	subi	r18, 0xFE	; 254
    254c:	3f 4f       	sbci	r19, 0xFF	; 255
    254e:	82 17       	cp	r24, r18
    2550:	93 07       	cpc	r25, r19
    2552:	31 f4       	brne	.+12     	; 0x2560 <xTaskRemoveFromEventList+0x9e>
    2554:	80 85       	ldd	r24, Z+8	; 0x08
    2556:	91 85       	ldd	r25, Z+9	; 0x09
    2558:	12 96       	adiw	r26, 0x02	; 2
    255a:	9c 93       	st	X, r25
    255c:	8e 93       	st	-X, r24
    255e:	11 97       	sbiw	r26, 0x01	; 1
    2560:	15 86       	std	Z+13, r1	; 0x0d
    2562:	14 86       	std	Z+12, r1	; 0x0c
    2564:	8c 91       	ld	r24, X
    2566:	81 50       	subi	r24, 0x01	; 1
    2568:	8c 93       	st	X, r24
    256a:	a2 8d       	ldd	r26, Z+26	; 0x1a
    256c:	80 91 a7 16 	lds	r24, 0x16A7	; 0x8016a7 <uxTopReadyPriority>
    2570:	8a 17       	cp	r24, r26
    2572:	10 f4       	brcc	.+4      	; 0x2578 <xTaskRemoveFromEventList+0xb6>
    2574:	a0 93 a7 16 	sts	0x16A7, r26	; 0x8016a7 <uxTopReadyPriority>
    2578:	8b e0       	ldi	r24, 0x0B	; 11
    257a:	8a 9f       	mul	r24, r26
    257c:	d0 01       	movw	r26, r0
    257e:	11 24       	eor	r1, r1
    2580:	a7 51       	subi	r26, 0x17	; 23
    2582:	b9 4e       	sbci	r27, 0xE9	; 233
    2584:	11 96       	adiw	r26, 0x01	; 1
    2586:	0d 90       	ld	r0, X+
    2588:	bc 91       	ld	r27, X
    258a:	a0 2d       	mov	r26, r0
    258c:	b7 83       	std	Z+7, r27	; 0x07
    258e:	a6 83       	std	Z+6, r26	; 0x06
    2590:	16 96       	adiw	r26, 0x06	; 6
    2592:	4d 91       	ld	r20, X+
    2594:	5c 91       	ld	r21, X
    2596:	17 97       	sbiw	r26, 0x07	; 7
    2598:	51 87       	std	Z+9, r21	; 0x09
    259a:	40 87       	std	Z+8, r20	; 0x08
    259c:	16 96       	adiw	r26, 0x06	; 6
    259e:	cd 91       	ld	r28, X+
    25a0:	dc 91       	ld	r29, X
    25a2:	17 97       	sbiw	r26, 0x07	; 7
    25a4:	3d 83       	std	Y+5, r19	; 0x05
    25a6:	2c 83       	std	Y+4, r18	; 0x04
    25a8:	17 96       	adiw	r26, 0x07	; 7
    25aa:	3c 93       	st	X, r19
    25ac:	2e 93       	st	-X, r18
    25ae:	16 97       	sbiw	r26, 0x06	; 6
    25b0:	a2 8d       	ldd	r26, Z+26	; 0x1a
    25b2:	8a 9f       	mul	r24, r26
    25b4:	d0 01       	movw	r26, r0
    25b6:	11 24       	eor	r1, r1
    25b8:	a7 51       	subi	r26, 0x17	; 23
    25ba:	b9 4e       	sbci	r27, 0xE9	; 233
    25bc:	b5 87       	std	Z+13, r27	; 0x0d
    25be:	a4 87       	std	Z+12, r26	; 0x0c
    25c0:	8c 91       	ld	r24, X
    25c2:	8f 5f       	subi	r24, 0xFF	; 255
    25c4:	8c 93       	st	X, r24
    25c6:	1c c0       	rjmp	.+56     	; 0x2600 <xTaskRemoveFromEventList+0x13e>
    25c8:	44 ec       	ldi	r20, 0xC4	; 196
    25ca:	56 e1       	ldi	r21, 0x16	; 22
    25cc:	da 01       	movw	r26, r20
    25ce:	11 96       	adiw	r26, 0x01	; 1
    25d0:	cd 91       	ld	r28, X+
    25d2:	dc 91       	ld	r29, X
    25d4:	12 97       	sbiw	r26, 0x02	; 2
    25d6:	d3 8b       	std	Z+19, r29	; 0x13
    25d8:	c2 8b       	std	Z+18, r28	; 0x12
    25da:	8e 81       	ldd	r24, Y+6	; 0x06
    25dc:	9f 81       	ldd	r25, Y+7	; 0x07
    25de:	95 8b       	std	Z+21, r25	; 0x15
    25e0:	84 8b       	std	Z+20, r24	; 0x14
    25e2:	8e 81       	ldd	r24, Y+6	; 0x06
    25e4:	9f 81       	ldd	r25, Y+7	; 0x07
    25e6:	dc 01       	movw	r26, r24
    25e8:	15 96       	adiw	r26, 0x05	; 5
    25ea:	3c 93       	st	X, r19
    25ec:	2e 93       	st	-X, r18
    25ee:	14 97       	sbiw	r26, 0x04	; 4
    25f0:	3f 83       	std	Y+7, r19	; 0x07
    25f2:	2e 83       	std	Y+6, r18	; 0x06
    25f4:	51 8f       	std	Z+25, r21	; 0x19
    25f6:	40 8f       	std	Z+24, r20	; 0x18
    25f8:	da 01       	movw	r26, r20
    25fa:	8c 91       	ld	r24, X
    25fc:	8f 5f       	subi	r24, 0xFF	; 255
    25fe:	8c 93       	st	X, r24
    2600:	92 8d       	ldd	r25, Z+26	; 0x1a
    2602:	e0 91 57 17 	lds	r30, 0x1757	; 0x801757 <pxCurrentTCB>
    2606:	f0 91 58 17 	lds	r31, 0x1758	; 0x801758 <pxCurrentTCB+0x1>
    260a:	82 8d       	ldd	r24, Z+26	; 0x1a
    260c:	89 17       	cp	r24, r25
    260e:	20 f4       	brcc	.+8      	; 0x2618 <xTaskRemoveFromEventList+0x156>
    2610:	81 e0       	ldi	r24, 0x01	; 1
    2612:	80 93 a1 16 	sts	0x16A1, r24	; 0x8016a1 <xYieldPending>
    2616:	01 c0       	rjmp	.+2      	; 0x261a <xTaskRemoveFromEventList+0x158>
    2618:	80 e0       	ldi	r24, 0x00	; 0
    261a:	df 91       	pop	r29
    261c:	cf 91       	pop	r28
    261e:	08 95       	ret

00002620 <vTaskRemoveFromUnorderedEventList>:
    2620:	cf 93       	push	r28
    2622:	df 93       	push	r29
    2624:	dc 01       	movw	r26, r24
    2626:	70 68       	ori	r23, 0x80	; 128
    2628:	4d 93       	st	X+, r20
    262a:	5d 93       	st	X+, r21
    262c:	6d 93       	st	X+, r22
    262e:	7c 93       	st	X, r23
    2630:	13 97       	sbiw	r26, 0x03	; 3
    2632:	18 96       	adiw	r26, 0x08	; 8
    2634:	ed 91       	ld	r30, X+
    2636:	fc 91       	ld	r31, X
    2638:	19 97       	sbiw	r26, 0x09	; 9
    263a:	1a 96       	adiw	r26, 0x0a	; 10
    263c:	4d 91       	ld	r20, X+
    263e:	5c 91       	ld	r21, X
    2640:	1b 97       	sbiw	r26, 0x0b	; 11
    2642:	14 96       	adiw	r26, 0x04	; 4
    2644:	8d 91       	ld	r24, X+
    2646:	9c 91       	ld	r25, X
    2648:	15 97       	sbiw	r26, 0x05	; 5
    264a:	16 96       	adiw	r26, 0x06	; 6
    264c:	2d 91       	ld	r18, X+
    264e:	3c 91       	ld	r19, X
    2650:	17 97       	sbiw	r26, 0x07	; 7
    2652:	ec 01       	movw	r28, r24
    2654:	3f 83       	std	Y+7, r19	; 0x07
    2656:	2e 83       	std	Y+6, r18	; 0x06
    2658:	16 96       	adiw	r26, 0x06	; 6
    265a:	8d 91       	ld	r24, X+
    265c:	9c 91       	ld	r25, X
    265e:	17 97       	sbiw	r26, 0x07	; 7
    2660:	14 96       	adiw	r26, 0x04	; 4
    2662:	2d 91       	ld	r18, X+
    2664:	3c 91       	ld	r19, X
    2666:	15 97       	sbiw	r26, 0x05	; 5
    2668:	ec 01       	movw	r28, r24
    266a:	3d 83       	std	Y+5, r19	; 0x05
    266c:	2c 83       	std	Y+4, r18	; 0x04
    266e:	ea 01       	movw	r28, r20
    2670:	89 81       	ldd	r24, Y+1	; 0x01
    2672:	9a 81       	ldd	r25, Y+2	; 0x02
    2674:	a8 17       	cp	r26, r24
    2676:	b9 07       	cpc	r27, r25
    2678:	31 f4       	brne	.+12     	; 0x2686 <vTaskRemoveFromUnorderedEventList+0x66>
    267a:	16 96       	adiw	r26, 0x06	; 6
    267c:	8d 91       	ld	r24, X+
    267e:	9c 91       	ld	r25, X
    2680:	17 97       	sbiw	r26, 0x07	; 7
    2682:	9a 83       	std	Y+2, r25	; 0x02
    2684:	89 83       	std	Y+1, r24	; 0x01
    2686:	1b 96       	adiw	r26, 0x0b	; 11
    2688:	1c 92       	st	X, r1
    268a:	1e 92       	st	-X, r1
    268c:	1a 97       	sbiw	r26, 0x0a	; 10
    268e:	da 01       	movw	r26, r20
    2690:	8c 91       	ld	r24, X
    2692:	81 50       	subi	r24, 0x01	; 1
    2694:	8c 93       	st	X, r24
    2696:	a4 85       	ldd	r26, Z+12	; 0x0c
    2698:	b5 85       	ldd	r27, Z+13	; 0x0d
    269a:	c6 81       	ldd	r28, Z+6	; 0x06
    269c:	d7 81       	ldd	r29, Z+7	; 0x07
    269e:	80 85       	ldd	r24, Z+8	; 0x08
    26a0:	91 85       	ldd	r25, Z+9	; 0x09
    26a2:	9f 83       	std	Y+7, r25	; 0x07
    26a4:	8e 83       	std	Y+6, r24	; 0x06
    26a6:	c0 85       	ldd	r28, Z+8	; 0x08
    26a8:	d1 85       	ldd	r29, Z+9	; 0x09
    26aa:	86 81       	ldd	r24, Z+6	; 0x06
    26ac:	97 81       	ldd	r25, Z+7	; 0x07
    26ae:	9d 83       	std	Y+5, r25	; 0x05
    26b0:	8c 83       	std	Y+4, r24	; 0x04
    26b2:	11 96       	adiw	r26, 0x01	; 1
    26b4:	8d 91       	ld	r24, X+
    26b6:	9c 91       	ld	r25, X
    26b8:	12 97       	sbiw	r26, 0x02	; 2
    26ba:	9f 01       	movw	r18, r30
    26bc:	2e 5f       	subi	r18, 0xFE	; 254
    26be:	3f 4f       	sbci	r19, 0xFF	; 255
    26c0:	82 17       	cp	r24, r18
    26c2:	93 07       	cpc	r25, r19
    26c4:	31 f4       	brne	.+12     	; 0x26d2 <vTaskRemoveFromUnorderedEventList+0xb2>
    26c6:	80 85       	ldd	r24, Z+8	; 0x08
    26c8:	91 85       	ldd	r25, Z+9	; 0x09
    26ca:	12 96       	adiw	r26, 0x02	; 2
    26cc:	9c 93       	st	X, r25
    26ce:	8e 93       	st	-X, r24
    26d0:	11 97       	sbiw	r26, 0x01	; 1
    26d2:	15 86       	std	Z+13, r1	; 0x0d
    26d4:	14 86       	std	Z+12, r1	; 0x0c
    26d6:	8c 91       	ld	r24, X
    26d8:	81 50       	subi	r24, 0x01	; 1
    26da:	8c 93       	st	X, r24
    26dc:	a2 8d       	ldd	r26, Z+26	; 0x1a
    26de:	80 91 a7 16 	lds	r24, 0x16A7	; 0x8016a7 <uxTopReadyPriority>
    26e2:	8a 17       	cp	r24, r26
    26e4:	10 f4       	brcc	.+4      	; 0x26ea <vTaskRemoveFromUnorderedEventList+0xca>
    26e6:	a0 93 a7 16 	sts	0x16A7, r26	; 0x8016a7 <uxTopReadyPriority>
    26ea:	8b e0       	ldi	r24, 0x0B	; 11
    26ec:	8a 9f       	mul	r24, r26
    26ee:	d0 01       	movw	r26, r0
    26f0:	11 24       	eor	r1, r1
    26f2:	a7 51       	subi	r26, 0x17	; 23
    26f4:	b9 4e       	sbci	r27, 0xE9	; 233
    26f6:	11 96       	adiw	r26, 0x01	; 1
    26f8:	0d 90       	ld	r0, X+
    26fa:	bc 91       	ld	r27, X
    26fc:	a0 2d       	mov	r26, r0
    26fe:	b7 83       	std	Z+7, r27	; 0x07
    2700:	a6 83       	std	Z+6, r26	; 0x06
    2702:	16 96       	adiw	r26, 0x06	; 6
    2704:	4d 91       	ld	r20, X+
    2706:	5c 91       	ld	r21, X
    2708:	17 97       	sbiw	r26, 0x07	; 7
    270a:	51 87       	std	Z+9, r21	; 0x09
    270c:	40 87       	std	Z+8, r20	; 0x08
    270e:	16 96       	adiw	r26, 0x06	; 6
    2710:	cd 91       	ld	r28, X+
    2712:	dc 91       	ld	r29, X
    2714:	17 97       	sbiw	r26, 0x07	; 7
    2716:	3d 83       	std	Y+5, r19	; 0x05
    2718:	2c 83       	std	Y+4, r18	; 0x04
    271a:	17 96       	adiw	r26, 0x07	; 7
    271c:	3c 93       	st	X, r19
    271e:	2e 93       	st	-X, r18
    2720:	16 97       	sbiw	r26, 0x06	; 6
    2722:	a2 8d       	ldd	r26, Z+26	; 0x1a
    2724:	8a 9f       	mul	r24, r26
    2726:	d0 01       	movw	r26, r0
    2728:	11 24       	eor	r1, r1
    272a:	a7 51       	subi	r26, 0x17	; 23
    272c:	b9 4e       	sbci	r27, 0xE9	; 233
    272e:	b5 87       	std	Z+13, r27	; 0x0d
    2730:	a4 87       	std	Z+12, r26	; 0x0c
    2732:	8c 91       	ld	r24, X
    2734:	8f 5f       	subi	r24, 0xFF	; 255
    2736:	8c 93       	st	X, r24
    2738:	92 8d       	ldd	r25, Z+26	; 0x1a
    273a:	e0 91 57 17 	lds	r30, 0x1757	; 0x801757 <pxCurrentTCB>
    273e:	f0 91 58 17 	lds	r31, 0x1758	; 0x801758 <pxCurrentTCB+0x1>
    2742:	82 8d       	ldd	r24, Z+26	; 0x1a
    2744:	89 17       	cp	r24, r25
    2746:	18 f4       	brcc	.+6      	; 0x274e <vTaskRemoveFromUnorderedEventList+0x12e>
    2748:	81 e0       	ldi	r24, 0x01	; 1
    274a:	80 93 a1 16 	sts	0x16A1, r24	; 0x8016a1 <xYieldPending>
    274e:	df 91       	pop	r29
    2750:	cf 91       	pop	r28
    2752:	08 95       	ret

00002754 <vTaskSetTimeOutState>:
    2754:	0f b6       	in	r0, 0x3f	; 63
    2756:	f8 94       	cli
    2758:	0f 92       	push	r0
    275a:	20 91 a0 16 	lds	r18, 0x16A0	; 0x8016a0 <xNumOfOverflows>
    275e:	fc 01       	movw	r30, r24
    2760:	20 83       	st	Z, r18
    2762:	40 91 a8 16 	lds	r20, 0x16A8	; 0x8016a8 <xTickCount>
    2766:	50 91 a9 16 	lds	r21, 0x16A9	; 0x8016a9 <xTickCount+0x1>
    276a:	60 91 aa 16 	lds	r22, 0x16AA	; 0x8016aa <xTickCount+0x2>
    276e:	70 91 ab 16 	lds	r23, 0x16AB	; 0x8016ab <xTickCount+0x3>
    2772:	41 83       	std	Z+1, r20	; 0x01
    2774:	52 83       	std	Z+2, r21	; 0x02
    2776:	63 83       	std	Z+3, r22	; 0x03
    2778:	74 83       	std	Z+4, r23	; 0x04
    277a:	0f 90       	pop	r0
    277c:	0f be       	out	0x3f, r0	; 63
    277e:	08 95       	ret

00002780 <vTaskInternalSetTimeOutState>:
    2780:	20 91 a0 16 	lds	r18, 0x16A0	; 0x8016a0 <xNumOfOverflows>
    2784:	fc 01       	movw	r30, r24
    2786:	20 83       	st	Z, r18
    2788:	40 91 a8 16 	lds	r20, 0x16A8	; 0x8016a8 <xTickCount>
    278c:	50 91 a9 16 	lds	r21, 0x16A9	; 0x8016a9 <xTickCount+0x1>
    2790:	60 91 aa 16 	lds	r22, 0x16AA	; 0x8016aa <xTickCount+0x2>
    2794:	70 91 ab 16 	lds	r23, 0x16AB	; 0x8016ab <xTickCount+0x3>
    2798:	41 83       	std	Z+1, r20	; 0x01
    279a:	52 83       	std	Z+2, r21	; 0x02
    279c:	63 83       	std	Z+3, r22	; 0x03
    279e:	74 83       	std	Z+4, r23	; 0x04
    27a0:	08 95       	ret

000027a2 <xTaskCheckForTimeOut>:
    27a2:	8f 92       	push	r8
    27a4:	9f 92       	push	r9
    27a6:	af 92       	push	r10
    27a8:	bf 92       	push	r11
    27aa:	cf 92       	push	r12
    27ac:	df 92       	push	r13
    27ae:	ef 92       	push	r14
    27b0:	ff 92       	push	r15
    27b2:	0f 93       	push	r16
    27b4:	1f 93       	push	r17
    27b6:	cf 93       	push	r28
    27b8:	df 93       	push	r29
    27ba:	fb 01       	movw	r30, r22
    27bc:	0f b6       	in	r0, 0x3f	; 63
    27be:	f8 94       	cli
    27c0:	0f 92       	push	r0
    27c2:	c0 90 a8 16 	lds	r12, 0x16A8	; 0x8016a8 <xTickCount>
    27c6:	d0 90 a9 16 	lds	r13, 0x16A9	; 0x8016a9 <xTickCount+0x1>
    27ca:	e0 90 aa 16 	lds	r14, 0x16AA	; 0x8016aa <xTickCount+0x2>
    27ce:	f0 90 ab 16 	lds	r15, 0x16AB	; 0x8016ab <xTickCount+0x3>
    27d2:	dc 01       	movw	r26, r24
    27d4:	11 96       	adiw	r26, 0x01	; 1
    27d6:	0d 91       	ld	r16, X+
    27d8:	1d 91       	ld	r17, X+
    27da:	2d 91       	ld	r18, X+
    27dc:	3c 91       	ld	r19, X
    27de:	14 97       	sbiw	r26, 0x04	; 4
    27e0:	46 01       	movw	r8, r12
    27e2:	57 01       	movw	r10, r14
    27e4:	80 1a       	sub	r8, r16
    27e6:	91 0a       	sbc	r9, r17
    27e8:	a2 0a       	sbc	r10, r18
    27ea:	b3 0a       	sbc	r11, r19
    27ec:	40 81       	ld	r20, Z
    27ee:	51 81       	ldd	r21, Z+1	; 0x01
    27f0:	62 81       	ldd	r22, Z+2	; 0x02
    27f2:	73 81       	ldd	r23, Z+3	; 0x03
    27f4:	4f 3f       	cpi	r20, 0xFF	; 255
    27f6:	bf ef       	ldi	r27, 0xFF	; 255
    27f8:	5b 07       	cpc	r21, r27
    27fa:	6b 07       	cpc	r22, r27
    27fc:	7b 07       	cpc	r23, r27
    27fe:	39 f1       	breq	.+78     	; 0x284e <xTaskCheckForTimeOut+0xac>
    2800:	ec 01       	movw	r28, r24
    2802:	b8 81       	ld	r27, Y
    2804:	a0 91 a0 16 	lds	r26, 0x16A0	; 0x8016a0 <xNumOfOverflows>
    2808:	ba 17       	cp	r27, r26
    280a:	59 f0       	breq	.+22     	; 0x2822 <xTaskCheckForTimeOut+0x80>
    280c:	c0 16       	cp	r12, r16
    280e:	d1 06       	cpc	r13, r17
    2810:	e2 06       	cpc	r14, r18
    2812:	f3 06       	cpc	r15, r19
    2814:	30 f0       	brcs	.+12     	; 0x2822 <xTaskCheckForTimeOut+0x80>
    2816:	10 82       	st	Z, r1
    2818:	11 82       	std	Z+1, r1	; 0x01
    281a:	12 82       	std	Z+2, r1	; 0x02
    281c:	13 82       	std	Z+3, r1	; 0x03
    281e:	81 e0       	ldi	r24, 0x01	; 1
    2820:	17 c0       	rjmp	.+46     	; 0x2850 <xTaskCheckForTimeOut+0xae>
    2822:	84 16       	cp	r8, r20
    2824:	95 06       	cpc	r9, r21
    2826:	a6 06       	cpc	r10, r22
    2828:	b7 06       	cpc	r11, r23
    282a:	58 f4       	brcc	.+22     	; 0x2842 <xTaskCheckForTimeOut+0xa0>
    282c:	48 19       	sub	r20, r8
    282e:	59 09       	sbc	r21, r9
    2830:	6a 09       	sbc	r22, r10
    2832:	7b 09       	sbc	r23, r11
    2834:	40 83       	st	Z, r20
    2836:	51 83       	std	Z+1, r21	; 0x01
    2838:	62 83       	std	Z+2, r22	; 0x02
    283a:	73 83       	std	Z+3, r23	; 0x03
    283c:	a1 df       	rcall	.-190    	; 0x2780 <vTaskInternalSetTimeOutState>
    283e:	80 e0       	ldi	r24, 0x00	; 0
    2840:	07 c0       	rjmp	.+14     	; 0x2850 <xTaskCheckForTimeOut+0xae>
    2842:	10 82       	st	Z, r1
    2844:	11 82       	std	Z+1, r1	; 0x01
    2846:	12 82       	std	Z+2, r1	; 0x02
    2848:	13 82       	std	Z+3, r1	; 0x03
    284a:	81 e0       	ldi	r24, 0x01	; 1
    284c:	01 c0       	rjmp	.+2      	; 0x2850 <xTaskCheckForTimeOut+0xae>
    284e:	80 e0       	ldi	r24, 0x00	; 0
    2850:	0f 90       	pop	r0
    2852:	0f be       	out	0x3f, r0	; 63
    2854:	df 91       	pop	r29
    2856:	cf 91       	pop	r28
    2858:	1f 91       	pop	r17
    285a:	0f 91       	pop	r16
    285c:	ff 90       	pop	r15
    285e:	ef 90       	pop	r14
    2860:	df 90       	pop	r13
    2862:	cf 90       	pop	r12
    2864:	bf 90       	pop	r11
    2866:	af 90       	pop	r10
    2868:	9f 90       	pop	r9
    286a:	8f 90       	pop	r8
    286c:	08 95       	ret

0000286e <vTaskMissedYield>:
    286e:	81 e0       	ldi	r24, 0x01	; 1
    2870:	80 93 a1 16 	sts	0x16A1, r24	; 0x8016a1 <xYieldPending>
    2874:	08 95       	ret

00002876 <xTaskGetCurrentTaskHandle>:
    2876:	80 91 57 17 	lds	r24, 0x1757	; 0x801757 <pxCurrentTCB>
    287a:	90 91 58 17 	lds	r25, 0x1758	; 0x801758 <pxCurrentTCB+0x1>
    287e:	08 95       	ret

00002880 <xTaskGetSchedulerState>:
    2880:	80 91 a6 16 	lds	r24, 0x16A6	; 0x8016a6 <xSchedulerRunning>
    2884:	88 23       	and	r24, r24
    2886:	31 f0       	breq	.+12     	; 0x2894 <xTaskGetSchedulerState+0x14>
    2888:	80 91 98 16 	lds	r24, 0x1698	; 0x801698 <uxSchedulerSuspended>
    288c:	81 11       	cpse	r24, r1
    288e:	04 c0       	rjmp	.+8      	; 0x2898 <xTaskGetSchedulerState+0x18>
    2890:	82 e0       	ldi	r24, 0x02	; 2
    2892:	08 95       	ret
    2894:	81 e0       	ldi	r24, 0x01	; 1
    2896:	08 95       	ret
    2898:	80 e0       	ldi	r24, 0x00	; 0
    289a:	08 95       	ret

0000289c <xTaskPriorityInherit>:
    289c:	0f 93       	push	r16
    289e:	1f 93       	push	r17
    28a0:	cf 93       	push	r28
    28a2:	df 93       	push	r29
    28a4:	fc 01       	movw	r30, r24
    28a6:	89 2b       	or	r24, r25
    28a8:	09 f4       	brne	.+2      	; 0x28ac <xTaskPriorityInherit+0x10>
    28aa:	77 c0       	rjmp	.+238    	; 0x299a <xTaskPriorityInherit+0xfe>
    28ac:	82 8d       	ldd	r24, Z+26	; 0x1a
    28ae:	a0 91 57 17 	lds	r26, 0x1757	; 0x801757 <pxCurrentTCB>
    28b2:	b0 91 58 17 	lds	r27, 0x1758	; 0x801758 <pxCurrentTCB+0x1>
    28b6:	5a 96       	adiw	r26, 0x1a	; 26
    28b8:	9c 91       	ld	r25, X
    28ba:	89 17       	cp	r24, r25
    28bc:	08 f0       	brcs	.+2      	; 0x28c0 <xTaskPriorityInherit+0x24>
    28be:	63 c0       	rjmp	.+198    	; 0x2986 <xTaskPriorityInherit+0xea>
    28c0:	46 85       	ldd	r20, Z+14	; 0x0e
    28c2:	57 85       	ldd	r21, Z+15	; 0x0f
    28c4:	60 89       	ldd	r22, Z+16	; 0x10
    28c6:	71 89       	ldd	r23, Z+17	; 0x11
    28c8:	77 23       	and	r23, r23
    28ca:	94 f0       	brlt	.+36     	; 0x28f0 <xTaskPriorityInherit+0x54>
    28cc:	a0 91 57 17 	lds	r26, 0x1757	; 0x801757 <pxCurrentTCB>
    28d0:	b0 91 58 17 	lds	r27, 0x1758	; 0x801758 <pxCurrentTCB+0x1>
    28d4:	5a 96       	adiw	r26, 0x1a	; 26
    28d6:	9c 91       	ld	r25, X
    28d8:	4a e0       	ldi	r20, 0x0A	; 10
    28da:	50 e0       	ldi	r21, 0x00	; 0
    28dc:	60 e0       	ldi	r22, 0x00	; 0
    28de:	70 e0       	ldi	r23, 0x00	; 0
    28e0:	49 1b       	sub	r20, r25
    28e2:	51 09       	sbc	r21, r1
    28e4:	61 09       	sbc	r22, r1
    28e6:	71 09       	sbc	r23, r1
    28e8:	46 87       	std	Z+14, r20	; 0x0e
    28ea:	57 87       	std	Z+15, r21	; 0x0f
    28ec:	60 8b       	std	Z+16, r22	; 0x10
    28ee:	71 8b       	std	Z+17, r23	; 0x11
    28f0:	24 85       	ldd	r18, Z+12	; 0x0c
    28f2:	35 85       	ldd	r19, Z+13	; 0x0d
    28f4:	4b e0       	ldi	r20, 0x0B	; 11
    28f6:	84 9f       	mul	r24, r20
    28f8:	c0 01       	movw	r24, r0
    28fa:	11 24       	eor	r1, r1
    28fc:	87 51       	subi	r24, 0x17	; 23
    28fe:	99 4e       	sbci	r25, 0xE9	; 233
    2900:	28 17       	cp	r18, r24
    2902:	39 07       	cpc	r19, r25
    2904:	b9 f5       	brne	.+110    	; 0x2974 <xTaskPriorityInherit+0xd8>
    2906:	ef 01       	movw	r28, r30
    2908:	8f 01       	movw	r16, r30
    290a:	0e 5f       	subi	r16, 0xFE	; 254
    290c:	1f 4f       	sbci	r17, 0xFF	; 255
    290e:	c8 01       	movw	r24, r16
    2910:	0e 94 15 04 	call	0x82a	; 0x82a <uxListRemove>
    2914:	e0 91 57 17 	lds	r30, 0x1757	; 0x801757 <pxCurrentTCB>
    2918:	f0 91 58 17 	lds	r31, 0x1758	; 0x801758 <pxCurrentTCB+0x1>
    291c:	e2 8d       	ldd	r30, Z+26	; 0x1a
    291e:	ea 8f       	std	Y+26, r30	; 0x1a
    2920:	80 91 a7 16 	lds	r24, 0x16A7	; 0x8016a7 <uxTopReadyPriority>
    2924:	8e 17       	cp	r24, r30
    2926:	10 f4       	brcc	.+4      	; 0x292c <xTaskPriorityInherit+0x90>
    2928:	e0 93 a7 16 	sts	0x16A7, r30	; 0x8016a7 <uxTopReadyPriority>
    292c:	8b e0       	ldi	r24, 0x0B	; 11
    292e:	8e 9f       	mul	r24, r30
    2930:	f0 01       	movw	r30, r0
    2932:	11 24       	eor	r1, r1
    2934:	e7 51       	subi	r30, 0x17	; 23
    2936:	f9 4e       	sbci	r31, 0xE9	; 233
    2938:	01 80       	ldd	r0, Z+1	; 0x01
    293a:	f2 81       	ldd	r31, Z+2	; 0x02
    293c:	e0 2d       	mov	r30, r0
    293e:	ff 83       	std	Y+7, r31	; 0x07
    2940:	ee 83       	std	Y+6, r30	; 0x06
    2942:	26 81       	ldd	r18, Z+6	; 0x06
    2944:	37 81       	ldd	r19, Z+7	; 0x07
    2946:	39 87       	std	Y+9, r19	; 0x09
    2948:	28 87       	std	Y+8, r18	; 0x08
    294a:	a6 81       	ldd	r26, Z+6	; 0x06
    294c:	b7 81       	ldd	r27, Z+7	; 0x07
    294e:	15 96       	adiw	r26, 0x05	; 5
    2950:	1c 93       	st	X, r17
    2952:	0e 93       	st	-X, r16
    2954:	14 97       	sbiw	r26, 0x04	; 4
    2956:	17 83       	std	Z+7, r17	; 0x07
    2958:	06 83       	std	Z+6, r16	; 0x06
    295a:	ea 8d       	ldd	r30, Y+26	; 0x1a
    295c:	8e 9f       	mul	r24, r30
    295e:	f0 01       	movw	r30, r0
    2960:	11 24       	eor	r1, r1
    2962:	e7 51       	subi	r30, 0x17	; 23
    2964:	f9 4e       	sbci	r31, 0xE9	; 233
    2966:	fd 87       	std	Y+13, r31	; 0x0d
    2968:	ec 87       	std	Y+12, r30	; 0x0c
    296a:	80 81       	ld	r24, Z
    296c:	8f 5f       	subi	r24, 0xFF	; 255
    296e:	80 83       	st	Z, r24
    2970:	81 e0       	ldi	r24, 0x01	; 1
    2972:	16 c0       	rjmp	.+44     	; 0x29a0 <xTaskPriorityInherit+0x104>
    2974:	a0 91 57 17 	lds	r26, 0x1757	; 0x801757 <pxCurrentTCB>
    2978:	b0 91 58 17 	lds	r27, 0x1758	; 0x801758 <pxCurrentTCB+0x1>
    297c:	5a 96       	adiw	r26, 0x1a	; 26
    297e:	8c 91       	ld	r24, X
    2980:	82 8f       	std	Z+26, r24	; 0x1a
    2982:	81 e0       	ldi	r24, 0x01	; 1
    2984:	0d c0       	rjmp	.+26     	; 0x29a0 <xTaskPriorityInherit+0x104>
    2986:	95 a5       	ldd	r25, Z+45	; 0x2d
    2988:	e0 91 57 17 	lds	r30, 0x1757	; 0x801757 <pxCurrentTCB>
    298c:	f0 91 58 17 	lds	r31, 0x1758	; 0x801758 <pxCurrentTCB+0x1>
    2990:	82 8d       	ldd	r24, Z+26	; 0x1a
    2992:	98 17       	cp	r25, r24
    2994:	20 f0       	brcs	.+8      	; 0x299e <xTaskPriorityInherit+0x102>
    2996:	80 e0       	ldi	r24, 0x00	; 0
    2998:	03 c0       	rjmp	.+6      	; 0x29a0 <xTaskPriorityInherit+0x104>
    299a:	80 e0       	ldi	r24, 0x00	; 0
    299c:	01 c0       	rjmp	.+2      	; 0x29a0 <xTaskPriorityInherit+0x104>
    299e:	81 e0       	ldi	r24, 0x01	; 1
    29a0:	df 91       	pop	r29
    29a2:	cf 91       	pop	r28
    29a4:	1f 91       	pop	r17
    29a6:	0f 91       	pop	r16
    29a8:	08 95       	ret

000029aa <xTaskPriorityDisinherit>:
    29aa:	0f 93       	push	r16
    29ac:	1f 93       	push	r17
    29ae:	cf 93       	push	r28
    29b0:	df 93       	push	r29
    29b2:	fc 01       	movw	r30, r24
    29b4:	89 2b       	or	r24, r25
    29b6:	09 f4       	brne	.+2      	; 0x29ba <xTaskPriorityDisinherit+0x10>
    29b8:	49 c0       	rjmp	.+146    	; 0x2a4c <xTaskPriorityDisinherit+0xa2>
    29ba:	86 a5       	ldd	r24, Z+46	; 0x2e
    29bc:	81 50       	subi	r24, 0x01	; 1
    29be:	86 a7       	std	Z+46, r24	; 0x2e
    29c0:	22 8d       	ldd	r18, Z+26	; 0x1a
    29c2:	95 a5       	ldd	r25, Z+45	; 0x2d
    29c4:	29 17       	cp	r18, r25
    29c6:	09 f4       	brne	.+2      	; 0x29ca <xTaskPriorityDisinherit+0x20>
    29c8:	43 c0       	rjmp	.+134    	; 0x2a50 <xTaskPriorityDisinherit+0xa6>
    29ca:	81 11       	cpse	r24, r1
    29cc:	43 c0       	rjmp	.+134    	; 0x2a54 <xTaskPriorityDisinherit+0xaa>
    29ce:	ef 01       	movw	r28, r30
    29d0:	8f 01       	movw	r16, r30
    29d2:	0e 5f       	subi	r16, 0xFE	; 254
    29d4:	1f 4f       	sbci	r17, 0xFF	; 255
    29d6:	c8 01       	movw	r24, r16
    29d8:	0e 94 15 04 	call	0x82a	; 0x82a <uxListRemove>
    29dc:	ed a5       	ldd	r30, Y+45	; 0x2d
    29de:	ea 8f       	std	Y+26, r30	; 0x1a
    29e0:	8a e0       	ldi	r24, 0x0A	; 10
    29e2:	90 e0       	ldi	r25, 0x00	; 0
    29e4:	a0 e0       	ldi	r26, 0x00	; 0
    29e6:	b0 e0       	ldi	r27, 0x00	; 0
    29e8:	8e 1b       	sub	r24, r30
    29ea:	91 09       	sbc	r25, r1
    29ec:	a1 09       	sbc	r26, r1
    29ee:	b1 09       	sbc	r27, r1
    29f0:	8e 87       	std	Y+14, r24	; 0x0e
    29f2:	9f 87       	std	Y+15, r25	; 0x0f
    29f4:	a8 8b       	std	Y+16, r26	; 0x10
    29f6:	b9 8b       	std	Y+17, r27	; 0x11
    29f8:	80 91 a7 16 	lds	r24, 0x16A7	; 0x8016a7 <uxTopReadyPriority>
    29fc:	8e 17       	cp	r24, r30
    29fe:	10 f4       	brcc	.+4      	; 0x2a04 <xTaskPriorityDisinherit+0x5a>
    2a00:	e0 93 a7 16 	sts	0x16A7, r30	; 0x8016a7 <uxTopReadyPriority>
    2a04:	8b e0       	ldi	r24, 0x0B	; 11
    2a06:	8e 9f       	mul	r24, r30
    2a08:	f0 01       	movw	r30, r0
    2a0a:	11 24       	eor	r1, r1
    2a0c:	e7 51       	subi	r30, 0x17	; 23
    2a0e:	f9 4e       	sbci	r31, 0xE9	; 233
    2a10:	01 80       	ldd	r0, Z+1	; 0x01
    2a12:	f2 81       	ldd	r31, Z+2	; 0x02
    2a14:	e0 2d       	mov	r30, r0
    2a16:	ff 83       	std	Y+7, r31	; 0x07
    2a18:	ee 83       	std	Y+6, r30	; 0x06
    2a1a:	26 81       	ldd	r18, Z+6	; 0x06
    2a1c:	37 81       	ldd	r19, Z+7	; 0x07
    2a1e:	39 87       	std	Y+9, r19	; 0x09
    2a20:	28 87       	std	Y+8, r18	; 0x08
    2a22:	a6 81       	ldd	r26, Z+6	; 0x06
    2a24:	b7 81       	ldd	r27, Z+7	; 0x07
    2a26:	15 96       	adiw	r26, 0x05	; 5
    2a28:	1c 93       	st	X, r17
    2a2a:	0e 93       	st	-X, r16
    2a2c:	14 97       	sbiw	r26, 0x04	; 4
    2a2e:	17 83       	std	Z+7, r17	; 0x07
    2a30:	06 83       	std	Z+6, r16	; 0x06
    2a32:	ea 8d       	ldd	r30, Y+26	; 0x1a
    2a34:	8e 9f       	mul	r24, r30
    2a36:	f0 01       	movw	r30, r0
    2a38:	11 24       	eor	r1, r1
    2a3a:	e7 51       	subi	r30, 0x17	; 23
    2a3c:	f9 4e       	sbci	r31, 0xE9	; 233
    2a3e:	fd 87       	std	Y+13, r31	; 0x0d
    2a40:	ec 87       	std	Y+12, r30	; 0x0c
    2a42:	80 81       	ld	r24, Z
    2a44:	8f 5f       	subi	r24, 0xFF	; 255
    2a46:	80 83       	st	Z, r24
    2a48:	81 e0       	ldi	r24, 0x01	; 1
    2a4a:	05 c0       	rjmp	.+10     	; 0x2a56 <xTaskPriorityDisinherit+0xac>
    2a4c:	80 e0       	ldi	r24, 0x00	; 0
    2a4e:	03 c0       	rjmp	.+6      	; 0x2a56 <xTaskPriorityDisinherit+0xac>
    2a50:	80 e0       	ldi	r24, 0x00	; 0
    2a52:	01 c0       	rjmp	.+2      	; 0x2a56 <xTaskPriorityDisinherit+0xac>
    2a54:	80 e0       	ldi	r24, 0x00	; 0
    2a56:	df 91       	pop	r29
    2a58:	cf 91       	pop	r28
    2a5a:	1f 91       	pop	r17
    2a5c:	0f 91       	pop	r16
    2a5e:	08 95       	ret

00002a60 <vTaskPriorityDisinheritAfterTimeout>:
    2a60:	0f 93       	push	r16
    2a62:	1f 93       	push	r17
    2a64:	cf 93       	push	r28
    2a66:	df 93       	push	r29
    2a68:	fc 01       	movw	r30, r24
    2a6a:	89 2b       	or	r24, r25
    2a6c:	09 f4       	brne	.+2      	; 0x2a70 <vTaskPriorityDisinheritAfterTimeout+0x10>
    2a6e:	5a c0       	rjmp	.+180    	; 0x2b24 <vTaskPriorityDisinheritAfterTimeout+0xc4>
    2a70:	85 a5       	ldd	r24, Z+45	; 0x2d
    2a72:	86 17       	cp	r24, r22
    2a74:	08 f4       	brcc	.+2      	; 0x2a78 <vTaskPriorityDisinheritAfterTimeout+0x18>
    2a76:	86 2f       	mov	r24, r22
    2a78:	92 8d       	ldd	r25, Z+26	; 0x1a
    2a7a:	89 17       	cp	r24, r25
    2a7c:	09 f4       	brne	.+2      	; 0x2a80 <vTaskPriorityDisinheritAfterTimeout+0x20>
    2a7e:	52 c0       	rjmp	.+164    	; 0x2b24 <vTaskPriorityDisinheritAfterTimeout+0xc4>
    2a80:	26 a5       	ldd	r18, Z+46	; 0x2e
    2a82:	21 30       	cpi	r18, 0x01	; 1
    2a84:	09 f0       	breq	.+2      	; 0x2a88 <vTaskPriorityDisinheritAfterTimeout+0x28>
    2a86:	4e c0       	rjmp	.+156    	; 0x2b24 <vTaskPriorityDisinheritAfterTimeout+0xc4>
    2a88:	82 8f       	std	Z+26, r24	; 0x1a
    2a8a:	46 85       	ldd	r20, Z+14	; 0x0e
    2a8c:	57 85       	ldd	r21, Z+15	; 0x0f
    2a8e:	60 89       	ldd	r22, Z+16	; 0x10
    2a90:	71 89       	ldd	r23, Z+17	; 0x11
    2a92:	77 23       	and	r23, r23
    2a94:	64 f0       	brlt	.+24     	; 0x2aae <vTaskPriorityDisinheritAfterTimeout+0x4e>
    2a96:	4a e0       	ldi	r20, 0x0A	; 10
    2a98:	50 e0       	ldi	r21, 0x00	; 0
    2a9a:	60 e0       	ldi	r22, 0x00	; 0
    2a9c:	70 e0       	ldi	r23, 0x00	; 0
    2a9e:	48 1b       	sub	r20, r24
    2aa0:	51 09       	sbc	r21, r1
    2aa2:	61 09       	sbc	r22, r1
    2aa4:	71 09       	sbc	r23, r1
    2aa6:	46 87       	std	Z+14, r20	; 0x0e
    2aa8:	57 87       	std	Z+15, r21	; 0x0f
    2aaa:	60 8b       	std	Z+16, r22	; 0x10
    2aac:	71 8b       	std	Z+17, r23	; 0x11
    2aae:	24 85       	ldd	r18, Z+12	; 0x0c
    2ab0:	35 85       	ldd	r19, Z+13	; 0x0d
    2ab2:	4b e0       	ldi	r20, 0x0B	; 11
    2ab4:	94 9f       	mul	r25, r20
    2ab6:	c0 01       	movw	r24, r0
    2ab8:	11 24       	eor	r1, r1
    2aba:	87 51       	subi	r24, 0x17	; 23
    2abc:	99 4e       	sbci	r25, 0xE9	; 233
    2abe:	28 17       	cp	r18, r24
    2ac0:	39 07       	cpc	r19, r25
    2ac2:	81 f5       	brne	.+96     	; 0x2b24 <vTaskPriorityDisinheritAfterTimeout+0xc4>
    2ac4:	ef 01       	movw	r28, r30
    2ac6:	8f 01       	movw	r16, r30
    2ac8:	0e 5f       	subi	r16, 0xFE	; 254
    2aca:	1f 4f       	sbci	r17, 0xFF	; 255
    2acc:	c8 01       	movw	r24, r16
    2ace:	0e 94 15 04 	call	0x82a	; 0x82a <uxListRemove>
    2ad2:	ea 8d       	ldd	r30, Y+26	; 0x1a
    2ad4:	80 91 a7 16 	lds	r24, 0x16A7	; 0x8016a7 <uxTopReadyPriority>
    2ad8:	8e 17       	cp	r24, r30
    2ada:	10 f4       	brcc	.+4      	; 0x2ae0 <vTaskPriorityDisinheritAfterTimeout+0x80>
    2adc:	e0 93 a7 16 	sts	0x16A7, r30	; 0x8016a7 <uxTopReadyPriority>
    2ae0:	8b e0       	ldi	r24, 0x0B	; 11
    2ae2:	8e 9f       	mul	r24, r30
    2ae4:	f0 01       	movw	r30, r0
    2ae6:	11 24       	eor	r1, r1
    2ae8:	e7 51       	subi	r30, 0x17	; 23
    2aea:	f9 4e       	sbci	r31, 0xE9	; 233
    2aec:	01 80       	ldd	r0, Z+1	; 0x01
    2aee:	f2 81       	ldd	r31, Z+2	; 0x02
    2af0:	e0 2d       	mov	r30, r0
    2af2:	ff 83       	std	Y+7, r31	; 0x07
    2af4:	ee 83       	std	Y+6, r30	; 0x06
    2af6:	26 81       	ldd	r18, Z+6	; 0x06
    2af8:	37 81       	ldd	r19, Z+7	; 0x07
    2afa:	39 87       	std	Y+9, r19	; 0x09
    2afc:	28 87       	std	Y+8, r18	; 0x08
    2afe:	a6 81       	ldd	r26, Z+6	; 0x06
    2b00:	b7 81       	ldd	r27, Z+7	; 0x07
    2b02:	15 96       	adiw	r26, 0x05	; 5
    2b04:	1c 93       	st	X, r17
    2b06:	0e 93       	st	-X, r16
    2b08:	14 97       	sbiw	r26, 0x04	; 4
    2b0a:	17 83       	std	Z+7, r17	; 0x07
    2b0c:	06 83       	std	Z+6, r16	; 0x06
    2b0e:	ea 8d       	ldd	r30, Y+26	; 0x1a
    2b10:	8e 9f       	mul	r24, r30
    2b12:	f0 01       	movw	r30, r0
    2b14:	11 24       	eor	r1, r1
    2b16:	e7 51       	subi	r30, 0x17	; 23
    2b18:	f9 4e       	sbci	r31, 0xE9	; 233
    2b1a:	fd 87       	std	Y+13, r31	; 0x0d
    2b1c:	ec 87       	std	Y+12, r30	; 0x0c
    2b1e:	80 81       	ld	r24, Z
    2b20:	8f 5f       	subi	r24, 0xFF	; 255
    2b22:	80 83       	st	Z, r24
    2b24:	df 91       	pop	r29
    2b26:	cf 91       	pop	r28
    2b28:	1f 91       	pop	r17
    2b2a:	0f 91       	pop	r16
    2b2c:	08 95       	ret

00002b2e <uxTaskResetEventItemValue>:
    2b2e:	cf 92       	push	r12
    2b30:	df 92       	push	r13
    2b32:	ef 92       	push	r14
    2b34:	ff 92       	push	r15
    2b36:	e0 91 57 17 	lds	r30, 0x1757	; 0x801757 <pxCurrentTCB>
    2b3a:	f0 91 58 17 	lds	r31, 0x1758	; 0x801758 <pxCurrentTCB+0x1>
    2b3e:	66 85       	ldd	r22, Z+14	; 0x0e
    2b40:	77 85       	ldd	r23, Z+15	; 0x0f
    2b42:	80 89       	ldd	r24, Z+16	; 0x10
    2b44:	91 89       	ldd	r25, Z+17	; 0x11
    2b46:	e0 91 57 17 	lds	r30, 0x1757	; 0x801757 <pxCurrentTCB>
    2b4a:	f0 91 58 17 	lds	r31, 0x1758	; 0x801758 <pxCurrentTCB+0x1>
    2b4e:	a0 91 57 17 	lds	r26, 0x1757	; 0x801757 <pxCurrentTCB>
    2b52:	b0 91 58 17 	lds	r27, 0x1758	; 0x801758 <pxCurrentTCB+0x1>
    2b56:	5a 96       	adiw	r26, 0x1a	; 26
    2b58:	2c 91       	ld	r18, X
    2b5a:	0f 2e       	mov	r0, r31
    2b5c:	fa e0       	ldi	r31, 0x0A	; 10
    2b5e:	cf 2e       	mov	r12, r31
    2b60:	d1 2c       	mov	r13, r1
    2b62:	e1 2c       	mov	r14, r1
    2b64:	f1 2c       	mov	r15, r1
    2b66:	f0 2d       	mov	r31, r0
    2b68:	c2 1a       	sub	r12, r18
    2b6a:	d1 08       	sbc	r13, r1
    2b6c:	e1 08       	sbc	r14, r1
    2b6e:	f1 08       	sbc	r15, r1
    2b70:	c6 86       	std	Z+14, r12	; 0x0e
    2b72:	d7 86       	std	Z+15, r13	; 0x0f
    2b74:	e0 8a       	std	Z+16, r14	; 0x10
    2b76:	f1 8a       	std	Z+17, r15	; 0x11
    2b78:	ff 90       	pop	r15
    2b7a:	ef 90       	pop	r14
    2b7c:	df 90       	pop	r13
    2b7e:	cf 90       	pop	r12
    2b80:	08 95       	ret

00002b82 <pvTaskIncrementMutexHeldCount>:
    2b82:	80 91 57 17 	lds	r24, 0x1757	; 0x801757 <pxCurrentTCB>
    2b86:	90 91 58 17 	lds	r25, 0x1758	; 0x801758 <pxCurrentTCB+0x1>
    2b8a:	89 2b       	or	r24, r25
    2b8c:	39 f0       	breq	.+14     	; 0x2b9c <pvTaskIncrementMutexHeldCount+0x1a>
    2b8e:	e0 91 57 17 	lds	r30, 0x1757	; 0x801757 <pxCurrentTCB>
    2b92:	f0 91 58 17 	lds	r31, 0x1758	; 0x801758 <pxCurrentTCB+0x1>
    2b96:	86 a5       	ldd	r24, Z+46	; 0x2e
    2b98:	8f 5f       	subi	r24, 0xFF	; 255
    2b9a:	86 a7       	std	Z+46, r24	; 0x2e
    2b9c:	80 91 57 17 	lds	r24, 0x1757	; 0x801757 <pxCurrentTCB>
    2ba0:	90 91 58 17 	lds	r25, 0x1758	; 0x801758 <pxCurrentTCB+0x1>
    2ba4:	08 95       	ret

00002ba6 <xTaskGenericNotifyWait>:
    2ba6:	4f 92       	push	r4
    2ba8:	5f 92       	push	r5
    2baa:	6f 92       	push	r6
    2bac:	7f 92       	push	r7
    2bae:	af 92       	push	r10
    2bb0:	bf 92       	push	r11
    2bb2:	cf 92       	push	r12
    2bb4:	df 92       	push	r13
    2bb6:	ef 92       	push	r14
    2bb8:	ff 92       	push	r15
    2bba:	0f 93       	push	r16
    2bbc:	1f 93       	push	r17
    2bbe:	cf 93       	push	r28
    2bc0:	df 93       	push	r29
    2bc2:	28 01       	movw	r4, r16
    2bc4:	39 01       	movw	r6, r18
    2bc6:	0f b6       	in	r0, 0x3f	; 63
    2bc8:	f8 94       	cli
    2bca:	0f 92       	push	r0
    2bcc:	e0 91 57 17 	lds	r30, 0x1757	; 0x801757 <pxCurrentTCB>
    2bd0:	f0 91 58 17 	lds	r31, 0x1758	; 0x801758 <pxCurrentTCB+0x1>
    2bd4:	c8 2f       	mov	r28, r24
    2bd6:	d0 e0       	ldi	r29, 0x00	; 0
    2bd8:	ec 0f       	add	r30, r28
    2bda:	fd 1f       	adc	r31, r29
    2bdc:	83 a9       	ldd	r24, Z+51	; 0x33
    2bde:	82 30       	cpi	r24, 0x02	; 2
    2be0:	79 f1       	breq	.+94     	; 0x2c40 <xTaskGenericNotifyWait+0x9a>
    2be2:	e0 91 57 17 	lds	r30, 0x1757	; 0x801757 <pxCurrentTCB>
    2be6:	f0 91 58 17 	lds	r31, 0x1758	; 0x801758 <pxCurrentTCB+0x1>
    2bea:	ce 01       	movw	r24, r28
    2bec:	88 0f       	add	r24, r24
    2bee:	99 1f       	adc	r25, r25
    2bf0:	88 0f       	add	r24, r24
    2bf2:	99 1f       	adc	r25, r25
    2bf4:	e8 0f       	add	r30, r24
    2bf6:	f9 1f       	adc	r31, r25
    2bf8:	87 a5       	ldd	r24, Z+47	; 0x2f
    2bfa:	90 a9       	ldd	r25, Z+48	; 0x30
    2bfc:	a1 a9       	ldd	r26, Z+49	; 0x31
    2bfe:	b2 a9       	ldd	r27, Z+50	; 0x32
    2c00:	40 95       	com	r20
    2c02:	50 95       	com	r21
    2c04:	60 95       	com	r22
    2c06:	70 95       	com	r23
    2c08:	48 23       	and	r20, r24
    2c0a:	59 23       	and	r21, r25
    2c0c:	6a 23       	and	r22, r26
    2c0e:	7b 23       	and	r23, r27
    2c10:	47 a7       	std	Z+47, r20	; 0x2f
    2c12:	50 ab       	std	Z+48, r21	; 0x30
    2c14:	61 ab       	std	Z+49, r22	; 0x31
    2c16:	72 ab       	std	Z+50, r23	; 0x32
    2c18:	e0 91 57 17 	lds	r30, 0x1757	; 0x801757 <pxCurrentTCB>
    2c1c:	f0 91 58 17 	lds	r31, 0x1758	; 0x801758 <pxCurrentTCB+0x1>
    2c20:	ec 0f       	add	r30, r28
    2c22:	fd 1f       	adc	r31, r29
    2c24:	81 e0       	ldi	r24, 0x01	; 1
    2c26:	83 ab       	std	Z+51, r24	; 0x33
    2c28:	a1 14       	cp	r10, r1
    2c2a:	b1 04       	cpc	r11, r1
    2c2c:	c1 04       	cpc	r12, r1
    2c2e:	d1 04       	cpc	r13, r1
    2c30:	39 f0       	breq	.+14     	; 0x2c40 <xTaskGenericNotifyWait+0x9a>
    2c32:	41 e0       	ldi	r20, 0x01	; 1
    2c34:	c6 01       	movw	r24, r12
    2c36:	b5 01       	movw	r22, r10
    2c38:	0e 94 97 0d 	call	0x1b2e	; 0x1b2e <prvAddCurrentTaskToDelayedList>
    2c3c:	0e 94 91 04 	call	0x922	; 0x922 <vPortYield>
    2c40:	0f 90       	pop	r0
    2c42:	0f be       	out	0x3f, r0	; 63
    2c44:	0f b6       	in	r0, 0x3f	; 63
    2c46:	f8 94       	cli
    2c48:	0f 92       	push	r0
    2c4a:	e1 14       	cp	r14, r1
    2c4c:	f1 04       	cpc	r15, r1
    2c4e:	a1 f0       	breq	.+40     	; 0x2c78 <xTaskGenericNotifyWait+0xd2>
    2c50:	e0 91 57 17 	lds	r30, 0x1757	; 0x801757 <pxCurrentTCB>
    2c54:	f0 91 58 17 	lds	r31, 0x1758	; 0x801758 <pxCurrentTCB+0x1>
    2c58:	ce 01       	movw	r24, r28
    2c5a:	88 0f       	add	r24, r24
    2c5c:	99 1f       	adc	r25, r25
    2c5e:	88 0f       	add	r24, r24
    2c60:	99 1f       	adc	r25, r25
    2c62:	e8 0f       	add	r30, r24
    2c64:	f9 1f       	adc	r31, r25
    2c66:	87 a5       	ldd	r24, Z+47	; 0x2f
    2c68:	90 a9       	ldd	r25, Z+48	; 0x30
    2c6a:	a1 a9       	ldd	r26, Z+49	; 0x31
    2c6c:	b2 a9       	ldd	r27, Z+50	; 0x32
    2c6e:	f7 01       	movw	r30, r14
    2c70:	80 83       	st	Z, r24
    2c72:	91 83       	std	Z+1, r25	; 0x01
    2c74:	a2 83       	std	Z+2, r26	; 0x02
    2c76:	b3 83       	std	Z+3, r27	; 0x03
    2c78:	e0 91 57 17 	lds	r30, 0x1757	; 0x801757 <pxCurrentTCB>
    2c7c:	f0 91 58 17 	lds	r31, 0x1758	; 0x801758 <pxCurrentTCB+0x1>
    2c80:	ec 0f       	add	r30, r28
    2c82:	fd 1f       	adc	r31, r29
    2c84:	83 a9       	ldd	r24, Z+51	; 0x33
    2c86:	82 30       	cpi	r24, 0x02	; 2
    2c88:	e9 f4       	brne	.+58     	; 0x2cc4 <xTaskGenericNotifyWait+0x11e>
    2c8a:	e0 91 57 17 	lds	r30, 0x1757	; 0x801757 <pxCurrentTCB>
    2c8e:	f0 91 58 17 	lds	r31, 0x1758	; 0x801758 <pxCurrentTCB+0x1>
    2c92:	ce 01       	movw	r24, r28
    2c94:	88 0f       	add	r24, r24
    2c96:	99 1f       	adc	r25, r25
    2c98:	88 0f       	add	r24, r24
    2c9a:	99 1f       	adc	r25, r25
    2c9c:	e8 0f       	add	r30, r24
    2c9e:	f9 1f       	adc	r31, r25
    2ca0:	87 a5       	ldd	r24, Z+47	; 0x2f
    2ca2:	90 a9       	ldd	r25, Z+48	; 0x30
    2ca4:	a1 a9       	ldd	r26, Z+49	; 0x31
    2ca6:	b2 a9       	ldd	r27, Z+50	; 0x32
    2ca8:	40 94       	com	r4
    2caa:	50 94       	com	r5
    2cac:	60 94       	com	r6
    2cae:	70 94       	com	r7
    2cb0:	48 22       	and	r4, r24
    2cb2:	59 22       	and	r5, r25
    2cb4:	6a 22       	and	r6, r26
    2cb6:	7b 22       	and	r7, r27
    2cb8:	47 a6       	std	Z+47, r4	; 0x2f
    2cba:	50 aa       	std	Z+48, r5	; 0x30
    2cbc:	61 aa       	std	Z+49, r6	; 0x31
    2cbe:	72 aa       	std	Z+50, r7	; 0x32
    2cc0:	81 e0       	ldi	r24, 0x01	; 1
    2cc2:	01 c0       	rjmp	.+2      	; 0x2cc6 <xTaskGenericNotifyWait+0x120>
    2cc4:	80 e0       	ldi	r24, 0x00	; 0
    2cc6:	20 91 57 17 	lds	r18, 0x1757	; 0x801757 <pxCurrentTCB>
    2cca:	30 91 58 17 	lds	r19, 0x1758	; 0x801758 <pxCurrentTCB+0x1>
    2cce:	c2 0f       	add	r28, r18
    2cd0:	d3 1f       	adc	r29, r19
    2cd2:	1b aa       	std	Y+51, r1	; 0x33
    2cd4:	0f 90       	pop	r0
    2cd6:	0f be       	out	0x3f, r0	; 63
    2cd8:	df 91       	pop	r29
    2cda:	cf 91       	pop	r28
    2cdc:	1f 91       	pop	r17
    2cde:	0f 91       	pop	r16
    2ce0:	ff 90       	pop	r15
    2ce2:	ef 90       	pop	r14
    2ce4:	df 90       	pop	r13
    2ce6:	cf 90       	pop	r12
    2ce8:	bf 90       	pop	r11
    2cea:	af 90       	pop	r10
    2cec:	7f 90       	pop	r7
    2cee:	6f 90       	pop	r6
    2cf0:	5f 90       	pop	r5
    2cf2:	4f 90       	pop	r4
    2cf4:	08 95       	ret

00002cf6 <xTaskGenericNotify>:
    2cf6:	8f 92       	push	r8
    2cf8:	9f 92       	push	r9
    2cfa:	af 92       	push	r10
    2cfc:	bf 92       	push	r11
    2cfe:	ef 92       	push	r14
    2d00:	ff 92       	push	r15
    2d02:	0f 93       	push	r16
    2d04:	cf 93       	push	r28
    2d06:	df 93       	push	r29
    2d08:	dc 01       	movw	r26, r24
    2d0a:	0f b6       	in	r0, 0x3f	; 63
    2d0c:	f8 94       	cli
    2d0e:	0f 92       	push	r0
    2d10:	e1 14       	cp	r14, r1
    2d12:	f1 04       	cpc	r15, r1
    2d14:	89 f0       	breq	.+34     	; 0x2d38 <xTaskGenericNotify+0x42>
    2d16:	e6 2f       	mov	r30, r22
    2d18:	f0 e0       	ldi	r31, 0x00	; 0
    2d1a:	ee 0f       	add	r30, r30
    2d1c:	ff 1f       	adc	r31, r31
    2d1e:	ee 0f       	add	r30, r30
    2d20:	ff 1f       	adc	r31, r31
    2d22:	e8 0f       	add	r30, r24
    2d24:	f9 1f       	adc	r31, r25
    2d26:	87 a4       	ldd	r8, Z+47	; 0x2f
    2d28:	90 a8       	ldd	r9, Z+48	; 0x30
    2d2a:	a1 a8       	ldd	r10, Z+49	; 0x31
    2d2c:	b2 a8       	ldd	r11, Z+50	; 0x32
    2d2e:	f7 01       	movw	r30, r14
    2d30:	80 82       	st	Z, r8
    2d32:	91 82       	std	Z+1, r9	; 0x01
    2d34:	a2 82       	std	Z+2, r10	; 0x02
    2d36:	b3 82       	std	Z+3, r11	; 0x03
    2d38:	70 e0       	ldi	r23, 0x00	; 0
    2d3a:	fd 01       	movw	r30, r26
    2d3c:	e6 0f       	add	r30, r22
    2d3e:	f7 1f       	adc	r31, r23
    2d40:	83 a9       	ldd	r24, Z+51	; 0x33
    2d42:	92 e0       	ldi	r25, 0x02	; 2
    2d44:	93 ab       	std	Z+51, r25	; 0x33
    2d46:	02 30       	cpi	r16, 0x02	; 2
    2d48:	01 f1       	breq	.+64     	; 0x2d8a <xTaskGenericNotify+0x94>
    2d4a:	18 f4       	brcc	.+6      	; 0x2d52 <xTaskGenericNotify+0x5c>
    2d4c:	01 30       	cpi	r16, 0x01	; 1
    2d4e:	31 f0       	breq	.+12     	; 0x2d5c <xTaskGenericNotify+0x66>
    2d50:	4d c0       	rjmp	.+154    	; 0x2dec <xTaskGenericNotify+0xf6>
    2d52:	03 30       	cpi	r16, 0x03	; 3
    2d54:	79 f1       	breq	.+94     	; 0x2db4 <xTaskGenericNotify+0xbe>
    2d56:	04 30       	cpi	r16, 0x04	; 4
    2d58:	d1 f1       	breq	.+116    	; 0x2dce <xTaskGenericNotify+0xd8>
    2d5a:	48 c0       	rjmp	.+144    	; 0x2dec <xTaskGenericNotify+0xf6>
    2d5c:	66 0f       	add	r22, r22
    2d5e:	77 1f       	adc	r23, r23
    2d60:	66 0f       	add	r22, r22
    2d62:	77 1f       	adc	r23, r23
    2d64:	fd 01       	movw	r30, r26
    2d66:	e6 0f       	add	r30, r22
    2d68:	f7 1f       	adc	r31, r23
    2d6a:	87 a4       	ldd	r8, Z+47	; 0x2f
    2d6c:	90 a8       	ldd	r9, Z+48	; 0x30
    2d6e:	a1 a8       	ldd	r10, Z+49	; 0x31
    2d70:	b2 a8       	ldd	r11, Z+50	; 0x32
    2d72:	ba 01       	movw	r22, r20
    2d74:	a9 01       	movw	r20, r18
    2d76:	48 29       	or	r20, r8
    2d78:	59 29       	or	r21, r9
    2d7a:	6a 29       	or	r22, r10
    2d7c:	7b 29       	or	r23, r11
    2d7e:	47 a7       	std	Z+47, r20	; 0x2f
    2d80:	50 ab       	std	Z+48, r21	; 0x30
    2d82:	61 ab       	std	Z+49, r22	; 0x31
    2d84:	72 ab       	std	Z+50, r23	; 0x32
    2d86:	01 e0       	ldi	r16, 0x01	; 1
    2d88:	34 c0       	rjmp	.+104    	; 0x2df2 <xTaskGenericNotify+0xfc>
    2d8a:	66 0f       	add	r22, r22
    2d8c:	77 1f       	adc	r23, r23
    2d8e:	66 0f       	add	r22, r22
    2d90:	77 1f       	adc	r23, r23
    2d92:	fd 01       	movw	r30, r26
    2d94:	e6 0f       	add	r30, r22
    2d96:	f7 1f       	adc	r31, r23
    2d98:	47 a5       	ldd	r20, Z+47	; 0x2f
    2d9a:	50 a9       	ldd	r21, Z+48	; 0x30
    2d9c:	61 a9       	ldd	r22, Z+49	; 0x31
    2d9e:	72 a9       	ldd	r23, Z+50	; 0x32
    2da0:	4f 5f       	subi	r20, 0xFF	; 255
    2da2:	5f 4f       	sbci	r21, 0xFF	; 255
    2da4:	6f 4f       	sbci	r22, 0xFF	; 255
    2da6:	7f 4f       	sbci	r23, 0xFF	; 255
    2da8:	47 a7       	std	Z+47, r20	; 0x2f
    2daa:	50 ab       	std	Z+48, r21	; 0x30
    2dac:	61 ab       	std	Z+49, r22	; 0x31
    2dae:	72 ab       	std	Z+50, r23	; 0x32
    2db0:	01 e0       	ldi	r16, 0x01	; 1
    2db2:	1f c0       	rjmp	.+62     	; 0x2df2 <xTaskGenericNotify+0xfc>
    2db4:	66 0f       	add	r22, r22
    2db6:	77 1f       	adc	r23, r23
    2db8:	66 0f       	add	r22, r22
    2dba:	77 1f       	adc	r23, r23
    2dbc:	fd 01       	movw	r30, r26
    2dbe:	e6 0f       	add	r30, r22
    2dc0:	f7 1f       	adc	r31, r23
    2dc2:	27 a7       	std	Z+47, r18	; 0x2f
    2dc4:	30 ab       	std	Z+48, r19	; 0x30
    2dc6:	41 ab       	std	Z+49, r20	; 0x31
    2dc8:	52 ab       	std	Z+50, r21	; 0x32
    2dca:	01 e0       	ldi	r16, 0x01	; 1
    2dcc:	12 c0       	rjmp	.+36     	; 0x2df2 <xTaskGenericNotify+0xfc>
    2dce:	82 30       	cpi	r24, 0x02	; 2
    2dd0:	79 f0       	breq	.+30     	; 0x2df0 <xTaskGenericNotify+0xfa>
    2dd2:	66 0f       	add	r22, r22
    2dd4:	77 1f       	adc	r23, r23
    2dd6:	66 0f       	add	r22, r22
    2dd8:	77 1f       	adc	r23, r23
    2dda:	fd 01       	movw	r30, r26
    2ddc:	e6 0f       	add	r30, r22
    2dde:	f7 1f       	adc	r31, r23
    2de0:	27 a7       	std	Z+47, r18	; 0x2f
    2de2:	30 ab       	std	Z+48, r19	; 0x30
    2de4:	41 ab       	std	Z+49, r20	; 0x31
    2de6:	52 ab       	std	Z+50, r21	; 0x32
    2de8:	01 e0       	ldi	r16, 0x01	; 1
    2dea:	03 c0       	rjmp	.+6      	; 0x2df2 <xTaskGenericNotify+0xfc>
    2dec:	01 e0       	ldi	r16, 0x01	; 1
    2dee:	01 c0       	rjmp	.+2      	; 0x2df2 <xTaskGenericNotify+0xfc>
    2df0:	00 e0       	ldi	r16, 0x00	; 0
    2df2:	81 30       	cpi	r24, 0x01	; 1
    2df4:	09 f0       	breq	.+2      	; 0x2df8 <xTaskGenericNotify+0x102>
    2df6:	69 c0       	rjmp	.+210    	; 0x2eca <xTaskGenericNotify+0x1d4>
    2df8:	1c 96       	adiw	r26, 0x0c	; 12
    2dfa:	ed 91       	ld	r30, X+
    2dfc:	fc 91       	ld	r31, X
    2dfe:	1d 97       	sbiw	r26, 0x0d	; 13
    2e00:	16 96       	adiw	r26, 0x06	; 6
    2e02:	cd 91       	ld	r28, X+
    2e04:	dc 91       	ld	r29, X
    2e06:	17 97       	sbiw	r26, 0x07	; 7
    2e08:	18 96       	adiw	r26, 0x08	; 8
    2e0a:	8d 91       	ld	r24, X+
    2e0c:	9c 91       	ld	r25, X
    2e0e:	19 97       	sbiw	r26, 0x09	; 9
    2e10:	9f 83       	std	Y+7, r25	; 0x07
    2e12:	8e 83       	std	Y+6, r24	; 0x06
    2e14:	18 96       	adiw	r26, 0x08	; 8
    2e16:	cd 91       	ld	r28, X+
    2e18:	dc 91       	ld	r29, X
    2e1a:	19 97       	sbiw	r26, 0x09	; 9
    2e1c:	16 96       	adiw	r26, 0x06	; 6
    2e1e:	8d 91       	ld	r24, X+
    2e20:	9c 91       	ld	r25, X
    2e22:	17 97       	sbiw	r26, 0x07	; 7
    2e24:	9d 83       	std	Y+5, r25	; 0x05
    2e26:	8c 83       	std	Y+4, r24	; 0x04
    2e28:	81 81       	ldd	r24, Z+1	; 0x01
    2e2a:	92 81       	ldd	r25, Z+2	; 0x02
    2e2c:	9d 01       	movw	r18, r26
    2e2e:	2e 5f       	subi	r18, 0xFE	; 254
    2e30:	3f 4f       	sbci	r19, 0xFF	; 255
    2e32:	82 17       	cp	r24, r18
    2e34:	93 07       	cpc	r25, r19
    2e36:	31 f4       	brne	.+12     	; 0x2e44 <xTaskGenericNotify+0x14e>
    2e38:	18 96       	adiw	r26, 0x08	; 8
    2e3a:	8d 91       	ld	r24, X+
    2e3c:	9c 91       	ld	r25, X
    2e3e:	19 97       	sbiw	r26, 0x09	; 9
    2e40:	92 83       	std	Z+2, r25	; 0x02
    2e42:	81 83       	std	Z+1, r24	; 0x01
    2e44:	1d 96       	adiw	r26, 0x0d	; 13
    2e46:	1c 92       	st	X, r1
    2e48:	1e 92       	st	-X, r1
    2e4a:	1c 97       	sbiw	r26, 0x0c	; 12
    2e4c:	80 81       	ld	r24, Z
    2e4e:	81 50       	subi	r24, 0x01	; 1
    2e50:	80 83       	st	Z, r24
    2e52:	5a 96       	adiw	r26, 0x1a	; 26
    2e54:	ec 91       	ld	r30, X
    2e56:	5a 97       	sbiw	r26, 0x1a	; 26
    2e58:	80 91 a7 16 	lds	r24, 0x16A7	; 0x8016a7 <uxTopReadyPriority>
    2e5c:	8e 17       	cp	r24, r30
    2e5e:	10 f4       	brcc	.+4      	; 0x2e64 <xTaskGenericNotify+0x16e>
    2e60:	e0 93 a7 16 	sts	0x16A7, r30	; 0x8016a7 <uxTopReadyPriority>
    2e64:	8b e0       	ldi	r24, 0x0B	; 11
    2e66:	8e 9f       	mul	r24, r30
    2e68:	f0 01       	movw	r30, r0
    2e6a:	11 24       	eor	r1, r1
    2e6c:	e7 51       	subi	r30, 0x17	; 23
    2e6e:	f9 4e       	sbci	r31, 0xE9	; 233
    2e70:	01 80       	ldd	r0, Z+1	; 0x01
    2e72:	f2 81       	ldd	r31, Z+2	; 0x02
    2e74:	e0 2d       	mov	r30, r0
    2e76:	17 96       	adiw	r26, 0x07	; 7
    2e78:	fc 93       	st	X, r31
    2e7a:	ee 93       	st	-X, r30
    2e7c:	16 97       	sbiw	r26, 0x06	; 6
    2e7e:	46 81       	ldd	r20, Z+6	; 0x06
    2e80:	57 81       	ldd	r21, Z+7	; 0x07
    2e82:	19 96       	adiw	r26, 0x09	; 9
    2e84:	5c 93       	st	X, r21
    2e86:	4e 93       	st	-X, r20
    2e88:	18 97       	sbiw	r26, 0x08	; 8
    2e8a:	c6 81       	ldd	r28, Z+6	; 0x06
    2e8c:	d7 81       	ldd	r29, Z+7	; 0x07
    2e8e:	3d 83       	std	Y+5, r19	; 0x05
    2e90:	2c 83       	std	Y+4, r18	; 0x04
    2e92:	37 83       	std	Z+7, r19	; 0x07
    2e94:	26 83       	std	Z+6, r18	; 0x06
    2e96:	5a 96       	adiw	r26, 0x1a	; 26
    2e98:	ec 91       	ld	r30, X
    2e9a:	5a 97       	sbiw	r26, 0x1a	; 26
    2e9c:	8e 9f       	mul	r24, r30
    2e9e:	f0 01       	movw	r30, r0
    2ea0:	11 24       	eor	r1, r1
    2ea2:	e7 51       	subi	r30, 0x17	; 23
    2ea4:	f9 4e       	sbci	r31, 0xE9	; 233
    2ea6:	1d 96       	adiw	r26, 0x0d	; 13
    2ea8:	fc 93       	st	X, r31
    2eaa:	ee 93       	st	-X, r30
    2eac:	1c 97       	sbiw	r26, 0x0c	; 12
    2eae:	80 81       	ld	r24, Z
    2eb0:	8f 5f       	subi	r24, 0xFF	; 255
    2eb2:	80 83       	st	Z, r24
    2eb4:	5a 96       	adiw	r26, 0x1a	; 26
    2eb6:	9c 91       	ld	r25, X
    2eb8:	e0 91 57 17 	lds	r30, 0x1757	; 0x801757 <pxCurrentTCB>
    2ebc:	f0 91 58 17 	lds	r31, 0x1758	; 0x801758 <pxCurrentTCB+0x1>
    2ec0:	82 8d       	ldd	r24, Z+26	; 0x1a
    2ec2:	89 17       	cp	r24, r25
    2ec4:	10 f4       	brcc	.+4      	; 0x2eca <xTaskGenericNotify+0x1d4>
    2ec6:	0e 94 91 04 	call	0x922	; 0x922 <vPortYield>
    2eca:	0f 90       	pop	r0
    2ecc:	0f be       	out	0x3f, r0	; 63
    2ece:	80 2f       	mov	r24, r16
    2ed0:	df 91       	pop	r29
    2ed2:	cf 91       	pop	r28
    2ed4:	0f 91       	pop	r16
    2ed6:	ff 90       	pop	r15
    2ed8:	ef 90       	pop	r14
    2eda:	bf 90       	pop	r11
    2edc:	af 90       	pop	r10
    2ede:	9f 90       	pop	r9
    2ee0:	8f 90       	pop	r8
    2ee2:	08 95       	ret

00002ee4 <xTaskGenericNotifyFromISR>:
    2ee4:	8f 92       	push	r8
    2ee6:	9f 92       	push	r9
    2ee8:	af 92       	push	r10
    2eea:	bf 92       	push	r11
    2eec:	cf 92       	push	r12
    2eee:	df 92       	push	r13
    2ef0:	ef 92       	push	r14
    2ef2:	ff 92       	push	r15
    2ef4:	0f 93       	push	r16
    2ef6:	cf 93       	push	r28
    2ef8:	df 93       	push	r29
    2efa:	dc 01       	movw	r26, r24
    2efc:	e1 14       	cp	r14, r1
    2efe:	f1 04       	cpc	r15, r1
    2f00:	89 f0       	breq	.+34     	; 0x2f24 <xTaskGenericNotifyFromISR+0x40>
    2f02:	e6 2f       	mov	r30, r22
    2f04:	f0 e0       	ldi	r31, 0x00	; 0
    2f06:	ee 0f       	add	r30, r30
    2f08:	ff 1f       	adc	r31, r31
    2f0a:	ee 0f       	add	r30, r30
    2f0c:	ff 1f       	adc	r31, r31
    2f0e:	e8 0f       	add	r30, r24
    2f10:	f9 1f       	adc	r31, r25
    2f12:	87 a4       	ldd	r8, Z+47	; 0x2f
    2f14:	90 a8       	ldd	r9, Z+48	; 0x30
    2f16:	a1 a8       	ldd	r10, Z+49	; 0x31
    2f18:	b2 a8       	ldd	r11, Z+50	; 0x32
    2f1a:	f7 01       	movw	r30, r14
    2f1c:	80 82       	st	Z, r8
    2f1e:	91 82       	std	Z+1, r9	; 0x01
    2f20:	a2 82       	std	Z+2, r10	; 0x02
    2f22:	b3 82       	std	Z+3, r11	; 0x03
    2f24:	70 e0       	ldi	r23, 0x00	; 0
    2f26:	fd 01       	movw	r30, r26
    2f28:	e6 0f       	add	r30, r22
    2f2a:	f7 1f       	adc	r31, r23
    2f2c:	93 a9       	ldd	r25, Z+51	; 0x33
    2f2e:	82 e0       	ldi	r24, 0x02	; 2
    2f30:	83 ab       	std	Z+51, r24	; 0x33
    2f32:	02 30       	cpi	r16, 0x02	; 2
    2f34:	01 f1       	breq	.+64     	; 0x2f76 <xTaskGenericNotifyFromISR+0x92>
    2f36:	18 f4       	brcc	.+6      	; 0x2f3e <xTaskGenericNotifyFromISR+0x5a>
    2f38:	01 30       	cpi	r16, 0x01	; 1
    2f3a:	31 f0       	breq	.+12     	; 0x2f48 <xTaskGenericNotifyFromISR+0x64>
    2f3c:	4d c0       	rjmp	.+154    	; 0x2fd8 <xTaskGenericNotifyFromISR+0xf4>
    2f3e:	03 30       	cpi	r16, 0x03	; 3
    2f40:	79 f1       	breq	.+94     	; 0x2fa0 <xTaskGenericNotifyFromISR+0xbc>
    2f42:	04 30       	cpi	r16, 0x04	; 4
    2f44:	d1 f1       	breq	.+116    	; 0x2fba <xTaskGenericNotifyFromISR+0xd6>
    2f46:	48 c0       	rjmp	.+144    	; 0x2fd8 <xTaskGenericNotifyFromISR+0xf4>
    2f48:	66 0f       	add	r22, r22
    2f4a:	77 1f       	adc	r23, r23
    2f4c:	66 0f       	add	r22, r22
    2f4e:	77 1f       	adc	r23, r23
    2f50:	fd 01       	movw	r30, r26
    2f52:	e6 0f       	add	r30, r22
    2f54:	f7 1f       	adc	r31, r23
    2f56:	87 a4       	ldd	r8, Z+47	; 0x2f
    2f58:	90 a8       	ldd	r9, Z+48	; 0x30
    2f5a:	a1 a8       	ldd	r10, Z+49	; 0x31
    2f5c:	b2 a8       	ldd	r11, Z+50	; 0x32
    2f5e:	ba 01       	movw	r22, r20
    2f60:	a9 01       	movw	r20, r18
    2f62:	48 29       	or	r20, r8
    2f64:	59 29       	or	r21, r9
    2f66:	6a 29       	or	r22, r10
    2f68:	7b 29       	or	r23, r11
    2f6a:	47 a7       	std	Z+47, r20	; 0x2f
    2f6c:	50 ab       	std	Z+48, r21	; 0x30
    2f6e:	61 ab       	std	Z+49, r22	; 0x31
    2f70:	72 ab       	std	Z+50, r23	; 0x32
    2f72:	81 e0       	ldi	r24, 0x01	; 1
    2f74:	34 c0       	rjmp	.+104    	; 0x2fde <xTaskGenericNotifyFromISR+0xfa>
    2f76:	66 0f       	add	r22, r22
    2f78:	77 1f       	adc	r23, r23
    2f7a:	66 0f       	add	r22, r22
    2f7c:	77 1f       	adc	r23, r23
    2f7e:	fd 01       	movw	r30, r26
    2f80:	e6 0f       	add	r30, r22
    2f82:	f7 1f       	adc	r31, r23
    2f84:	47 a5       	ldd	r20, Z+47	; 0x2f
    2f86:	50 a9       	ldd	r21, Z+48	; 0x30
    2f88:	61 a9       	ldd	r22, Z+49	; 0x31
    2f8a:	72 a9       	ldd	r23, Z+50	; 0x32
    2f8c:	4f 5f       	subi	r20, 0xFF	; 255
    2f8e:	5f 4f       	sbci	r21, 0xFF	; 255
    2f90:	6f 4f       	sbci	r22, 0xFF	; 255
    2f92:	7f 4f       	sbci	r23, 0xFF	; 255
    2f94:	47 a7       	std	Z+47, r20	; 0x2f
    2f96:	50 ab       	std	Z+48, r21	; 0x30
    2f98:	61 ab       	std	Z+49, r22	; 0x31
    2f9a:	72 ab       	std	Z+50, r23	; 0x32
    2f9c:	81 e0       	ldi	r24, 0x01	; 1
    2f9e:	1f c0       	rjmp	.+62     	; 0x2fde <xTaskGenericNotifyFromISR+0xfa>
    2fa0:	66 0f       	add	r22, r22
    2fa2:	77 1f       	adc	r23, r23
    2fa4:	66 0f       	add	r22, r22
    2fa6:	77 1f       	adc	r23, r23
    2fa8:	fd 01       	movw	r30, r26
    2faa:	e6 0f       	add	r30, r22
    2fac:	f7 1f       	adc	r31, r23
    2fae:	27 a7       	std	Z+47, r18	; 0x2f
    2fb0:	30 ab       	std	Z+48, r19	; 0x30
    2fb2:	41 ab       	std	Z+49, r20	; 0x31
    2fb4:	52 ab       	std	Z+50, r21	; 0x32
    2fb6:	81 e0       	ldi	r24, 0x01	; 1
    2fb8:	12 c0       	rjmp	.+36     	; 0x2fde <xTaskGenericNotifyFromISR+0xfa>
    2fba:	92 30       	cpi	r25, 0x02	; 2
    2fbc:	79 f0       	breq	.+30     	; 0x2fdc <xTaskGenericNotifyFromISR+0xf8>
    2fbe:	66 0f       	add	r22, r22
    2fc0:	77 1f       	adc	r23, r23
    2fc2:	66 0f       	add	r22, r22
    2fc4:	77 1f       	adc	r23, r23
    2fc6:	fd 01       	movw	r30, r26
    2fc8:	e6 0f       	add	r30, r22
    2fca:	f7 1f       	adc	r31, r23
    2fcc:	27 a7       	std	Z+47, r18	; 0x2f
    2fce:	30 ab       	std	Z+48, r19	; 0x30
    2fd0:	41 ab       	std	Z+49, r20	; 0x31
    2fd2:	52 ab       	std	Z+50, r21	; 0x32
    2fd4:	81 e0       	ldi	r24, 0x01	; 1
    2fd6:	03 c0       	rjmp	.+6      	; 0x2fde <xTaskGenericNotifyFromISR+0xfa>
    2fd8:	81 e0       	ldi	r24, 0x01	; 1
    2fda:	01 c0       	rjmp	.+2      	; 0x2fde <xTaskGenericNotifyFromISR+0xfa>
    2fdc:	80 e0       	ldi	r24, 0x00	; 0
    2fde:	91 30       	cpi	r25, 0x01	; 1
    2fe0:	09 f0       	breq	.+2      	; 0x2fe4 <xTaskGenericNotifyFromISR+0x100>
    2fe2:	96 c0       	rjmp	.+300    	; 0x3110 <xTaskGenericNotifyFromISR+0x22c>
    2fe4:	90 91 98 16 	lds	r25, 0x1698	; 0x801698 <uxSchedulerSuspended>
    2fe8:	91 11       	cpse	r25, r1
    2fea:	5f c0       	rjmp	.+190    	; 0x30aa <xTaskGenericNotifyFromISR+0x1c6>
    2fec:	1c 96       	adiw	r26, 0x0c	; 12
    2fee:	ed 91       	ld	r30, X+
    2ff0:	fc 91       	ld	r31, X
    2ff2:	1d 97       	sbiw	r26, 0x0d	; 13
    2ff4:	16 96       	adiw	r26, 0x06	; 6
    2ff6:	cd 91       	ld	r28, X+
    2ff8:	dc 91       	ld	r29, X
    2ffa:	17 97       	sbiw	r26, 0x07	; 7
    2ffc:	18 96       	adiw	r26, 0x08	; 8
    2ffe:	2d 91       	ld	r18, X+
    3000:	3c 91       	ld	r19, X
    3002:	19 97       	sbiw	r26, 0x09	; 9
    3004:	3f 83       	std	Y+7, r19	; 0x07
    3006:	2e 83       	std	Y+6, r18	; 0x06
    3008:	18 96       	adiw	r26, 0x08	; 8
    300a:	cd 91       	ld	r28, X+
    300c:	dc 91       	ld	r29, X
    300e:	19 97       	sbiw	r26, 0x09	; 9
    3010:	16 96       	adiw	r26, 0x06	; 6
    3012:	2d 91       	ld	r18, X+
    3014:	3c 91       	ld	r19, X
    3016:	17 97       	sbiw	r26, 0x07	; 7
    3018:	3d 83       	std	Y+5, r19	; 0x05
    301a:	2c 83       	std	Y+4, r18	; 0x04
    301c:	41 81       	ldd	r20, Z+1	; 0x01
    301e:	52 81       	ldd	r21, Z+2	; 0x02
    3020:	9d 01       	movw	r18, r26
    3022:	2e 5f       	subi	r18, 0xFE	; 254
    3024:	3f 4f       	sbci	r19, 0xFF	; 255
    3026:	42 17       	cp	r20, r18
    3028:	53 07       	cpc	r21, r19
    302a:	31 f4       	brne	.+12     	; 0x3038 <xTaskGenericNotifyFromISR+0x154>
    302c:	18 96       	adiw	r26, 0x08	; 8
    302e:	4d 91       	ld	r20, X+
    3030:	5c 91       	ld	r21, X
    3032:	19 97       	sbiw	r26, 0x09	; 9
    3034:	52 83       	std	Z+2, r21	; 0x02
    3036:	41 83       	std	Z+1, r20	; 0x01
    3038:	1d 96       	adiw	r26, 0x0d	; 13
    303a:	1c 92       	st	X, r1
    303c:	1e 92       	st	-X, r1
    303e:	1c 97       	sbiw	r26, 0x0c	; 12
    3040:	90 81       	ld	r25, Z
    3042:	91 50       	subi	r25, 0x01	; 1
    3044:	90 83       	st	Z, r25
    3046:	5a 96       	adiw	r26, 0x1a	; 26
    3048:	ec 91       	ld	r30, X
    304a:	5a 97       	sbiw	r26, 0x1a	; 26
    304c:	90 91 a7 16 	lds	r25, 0x16A7	; 0x8016a7 <uxTopReadyPriority>
    3050:	9e 17       	cp	r25, r30
    3052:	10 f4       	brcc	.+4      	; 0x3058 <xTaskGenericNotifyFromISR+0x174>
    3054:	e0 93 a7 16 	sts	0x16A7, r30	; 0x8016a7 <uxTopReadyPriority>
    3058:	9b e0       	ldi	r25, 0x0B	; 11
    305a:	9e 9f       	mul	r25, r30
    305c:	f0 01       	movw	r30, r0
    305e:	11 24       	eor	r1, r1
    3060:	e7 51       	subi	r30, 0x17	; 23
    3062:	f9 4e       	sbci	r31, 0xE9	; 233
    3064:	01 80       	ldd	r0, Z+1	; 0x01
    3066:	f2 81       	ldd	r31, Z+2	; 0x02
    3068:	e0 2d       	mov	r30, r0
    306a:	17 96       	adiw	r26, 0x07	; 7
    306c:	fc 93       	st	X, r31
    306e:	ee 93       	st	-X, r30
    3070:	16 97       	sbiw	r26, 0x06	; 6
    3072:	46 81       	ldd	r20, Z+6	; 0x06
    3074:	57 81       	ldd	r21, Z+7	; 0x07
    3076:	19 96       	adiw	r26, 0x09	; 9
    3078:	5c 93       	st	X, r21
    307a:	4e 93       	st	-X, r20
    307c:	18 97       	sbiw	r26, 0x08	; 8
    307e:	c6 81       	ldd	r28, Z+6	; 0x06
    3080:	d7 81       	ldd	r29, Z+7	; 0x07
    3082:	3d 83       	std	Y+5, r19	; 0x05
    3084:	2c 83       	std	Y+4, r18	; 0x04
    3086:	37 83       	std	Z+7, r19	; 0x07
    3088:	26 83       	std	Z+6, r18	; 0x06
    308a:	5a 96       	adiw	r26, 0x1a	; 26
    308c:	ec 91       	ld	r30, X
    308e:	5a 97       	sbiw	r26, 0x1a	; 26
    3090:	9e 9f       	mul	r25, r30
    3092:	f0 01       	movw	r30, r0
    3094:	11 24       	eor	r1, r1
    3096:	e7 51       	subi	r30, 0x17	; 23
    3098:	f9 4e       	sbci	r31, 0xE9	; 233
    309a:	1d 96       	adiw	r26, 0x0d	; 13
    309c:	fc 93       	st	X, r31
    309e:	ee 93       	st	-X, r30
    30a0:	1c 97       	sbiw	r26, 0x0c	; 12
    30a2:	90 81       	ld	r25, Z
    30a4:	9f 5f       	subi	r25, 0xFF	; 255
    30a6:	90 83       	st	Z, r25
    30a8:	21 c0       	rjmp	.+66     	; 0x30ec <xTaskGenericNotifyFromISR+0x208>
    30aa:	64 ec       	ldi	r22, 0xC4	; 196
    30ac:	76 e1       	ldi	r23, 0x16	; 22
    30ae:	fb 01       	movw	r30, r22
    30b0:	c1 81       	ldd	r28, Z+1	; 0x01
    30b2:	d2 81       	ldd	r29, Z+2	; 0x02
    30b4:	53 96       	adiw	r26, 0x13	; 19
    30b6:	dc 93       	st	X, r29
    30b8:	ce 93       	st	-X, r28
    30ba:	52 97       	sbiw	r26, 0x12	; 18
    30bc:	2e 81       	ldd	r18, Y+6	; 0x06
    30be:	3f 81       	ldd	r19, Y+7	; 0x07
    30c0:	55 96       	adiw	r26, 0x15	; 21
    30c2:	3c 93       	st	X, r19
    30c4:	2e 93       	st	-X, r18
    30c6:	54 97       	sbiw	r26, 0x14	; 20
    30c8:	4e 81       	ldd	r20, Y+6	; 0x06
    30ca:	5f 81       	ldd	r21, Y+7	; 0x07
    30cc:	9d 01       	movw	r18, r26
    30ce:	22 5f       	subi	r18, 0xF2	; 242
    30d0:	3f 4f       	sbci	r19, 0xFF	; 255
    30d2:	fa 01       	movw	r30, r20
    30d4:	35 83       	std	Z+5, r19	; 0x05
    30d6:	24 83       	std	Z+4, r18	; 0x04
    30d8:	3f 83       	std	Y+7, r19	; 0x07
    30da:	2e 83       	std	Y+6, r18	; 0x06
    30dc:	59 96       	adiw	r26, 0x19	; 25
    30de:	7c 93       	st	X, r23
    30e0:	6e 93       	st	-X, r22
    30e2:	58 97       	sbiw	r26, 0x18	; 24
    30e4:	fb 01       	movw	r30, r22
    30e6:	90 81       	ld	r25, Z
    30e8:	9f 5f       	subi	r25, 0xFF	; 255
    30ea:	90 83       	st	Z, r25
    30ec:	5a 96       	adiw	r26, 0x1a	; 26
    30ee:	2c 91       	ld	r18, X
    30f0:	e0 91 57 17 	lds	r30, 0x1757	; 0x801757 <pxCurrentTCB>
    30f4:	f0 91 58 17 	lds	r31, 0x1758	; 0x801758 <pxCurrentTCB+0x1>
    30f8:	92 8d       	ldd	r25, Z+26	; 0x1a
    30fa:	92 17       	cp	r25, r18
    30fc:	48 f4       	brcc	.+18     	; 0x3110 <xTaskGenericNotifyFromISR+0x22c>
    30fe:	c1 14       	cp	r12, r1
    3100:	d1 04       	cpc	r13, r1
    3102:	19 f0       	breq	.+6      	; 0x310a <xTaskGenericNotifyFromISR+0x226>
    3104:	91 e0       	ldi	r25, 0x01	; 1
    3106:	f6 01       	movw	r30, r12
    3108:	90 83       	st	Z, r25
    310a:	91 e0       	ldi	r25, 0x01	; 1
    310c:	90 93 a1 16 	sts	0x16A1, r25	; 0x8016a1 <xYieldPending>
    3110:	df 91       	pop	r29
    3112:	cf 91       	pop	r28
    3114:	0f 91       	pop	r16
    3116:	ff 90       	pop	r15
    3118:	ef 90       	pop	r14
    311a:	df 90       	pop	r13
    311c:	cf 90       	pop	r12
    311e:	bf 90       	pop	r11
    3120:	af 90       	pop	r10
    3122:	9f 90       	pop	r9
    3124:	8f 90       	pop	r8
    3126:	08 95       	ret

00003128 <xTaskGenericNotifyStateClear>:

        configASSERT( uxIndexToClear < configTASK_NOTIFICATION_ARRAY_ENTRIES );

        /* If null is passed in here then it is the calling task that is having
         * its notification state cleared. */
        pxTCB = prvGetTCBFromHandle( xTask );
    3128:	00 97       	sbiw	r24, 0x00	; 0
    312a:	21 f4       	brne	.+8      	; 0x3134 <xTaskGenericNotifyStateClear+0xc>
    312c:	80 91 57 17 	lds	r24, 0x1757	; 0x801757 <pxCurrentTCB>
    3130:	90 91 58 17 	lds	r25, 0x1758	; 0x801758 <pxCurrentTCB+0x1>

        taskENTER_CRITICAL();
    3134:	0f b6       	in	r0, 0x3f	; 63
    3136:	f8 94       	cli
    3138:	0f 92       	push	r0
        {
            if( pxTCB->ucNotifyState[ uxIndexToClear ] == taskNOTIFICATION_RECEIVED )
    313a:	70 e0       	ldi	r23, 0x00	; 0
    313c:	fc 01       	movw	r30, r24
    313e:	e6 0f       	add	r30, r22
    3140:	f7 1f       	adc	r31, r23
    3142:	23 a9       	ldd	r18, Z+51	; 0x33
    3144:	22 30       	cpi	r18, 0x02	; 2
    3146:	31 f4       	brne	.+12     	; 0x3154 <xTaskGenericNotifyStateClear+0x2c>
            {
                pxTCB->ucNotifyState[ uxIndexToClear ] = taskNOT_WAITING_NOTIFICATION;
    3148:	fc 01       	movw	r30, r24
    314a:	e6 0f       	add	r30, r22
    314c:	f7 1f       	adc	r31, r23
    314e:	13 aa       	std	Z+51, r1	; 0x33
                xReturn = pdPASS;
    3150:	81 e0       	ldi	r24, 0x01	; 1
    3152:	01 c0       	rjmp	.+2      	; 0x3156 <xTaskGenericNotifyStateClear+0x2e>
            }
            else
            {
                xReturn = pdFAIL;
    3154:	80 e0       	ldi	r24, 0x00	; 0
            }
        }
        taskEXIT_CRITICAL();
    3156:	0f 90       	pop	r0
    3158:	0f be       	out	0x3f, r0	; 63

        return xReturn;
    }
    315a:	08 95       	ret

0000315c <prvGetNextExpireTime>:
    315c:	dc 01       	movw	r26, r24
    315e:	e0 91 63 17 	lds	r30, 0x1763	; 0x801763 <pxCurrentTimerList>
    3162:	f0 91 64 17 	lds	r31, 0x1764	; 0x801764 <pxCurrentTimerList+0x1>
    3166:	80 81       	ld	r24, Z
    3168:	91 e0       	ldi	r25, 0x01	; 1
    316a:	81 11       	cpse	r24, r1
    316c:	90 e0       	ldi	r25, 0x00	; 0
    316e:	9c 93       	st	X, r25
    3170:	91 11       	cpse	r25, r1
    3172:	08 c0       	rjmp	.+16     	; 0x3184 <prvGetNextExpireTime+0x28>
    3174:	07 80       	ldd	r0, Z+7	; 0x07
    3176:	f0 85       	ldd	r31, Z+8	; 0x08
    3178:	e0 2d       	mov	r30, r0
    317a:	60 81       	ld	r22, Z
    317c:	71 81       	ldd	r23, Z+1	; 0x01
    317e:	82 81       	ldd	r24, Z+2	; 0x02
    3180:	93 81       	ldd	r25, Z+3	; 0x03
    3182:	08 95       	ret
    3184:	60 e0       	ldi	r22, 0x00	; 0
    3186:	70 e0       	ldi	r23, 0x00	; 0
    3188:	cb 01       	movw	r24, r22
    318a:	08 95       	ret

0000318c <prvInsertTimerInActiveList>:
    318c:	cf 92       	push	r12
    318e:	df 92       	push	r13
    3190:	ef 92       	push	r14
    3192:	ff 92       	push	r15
    3194:	0f 93       	push	r16
    3196:	1f 93       	push	r17
    3198:	fc 01       	movw	r30, r24
    319a:	42 83       	std	Z+2, r20	; 0x02
    319c:	53 83       	std	Z+3, r21	; 0x03
    319e:	64 83       	std	Z+4, r22	; 0x04
    31a0:	75 83       	std	Z+5, r23	; 0x05
    31a2:	93 87       	std	Z+11, r25	; 0x0b
    31a4:	82 87       	std	Z+10, r24	; 0x0a
    31a6:	04 17       	cp	r16, r20
    31a8:	15 07       	cpc	r17, r21
    31aa:	26 07       	cpc	r18, r22
    31ac:	37 07       	cpc	r19, r23
    31ae:	c0 f0       	brcs	.+48     	; 0x31e0 <prvInsertTimerInActiveList+0x54>
    31b0:	0c 19       	sub	r16, r12
    31b2:	1d 09       	sbc	r17, r13
    31b4:	2e 09       	sbc	r18, r14
    31b6:	3f 09       	sbc	r19, r15
    31b8:	86 85       	ldd	r24, Z+14	; 0x0e
    31ba:	97 85       	ldd	r25, Z+15	; 0x0f
    31bc:	a0 89       	ldd	r26, Z+16	; 0x10
    31be:	b1 89       	ldd	r27, Z+17	; 0x11
    31c0:	08 17       	cp	r16, r24
    31c2:	19 07       	cpc	r17, r25
    31c4:	2a 07       	cpc	r18, r26
    31c6:	3b 07       	cpc	r19, r27
    31c8:	00 f5       	brcc	.+64     	; 0x320a <prvInsertTimerInActiveList+0x7e>
    31ca:	bf 01       	movw	r22, r30
    31cc:	6e 5f       	subi	r22, 0xFE	; 254
    31ce:	7f 4f       	sbci	r23, 0xFF	; 255
    31d0:	80 91 61 17 	lds	r24, 0x1761	; 0x801761 <pxOverflowTimerList>
    31d4:	90 91 62 17 	lds	r25, 0x1762	; 0x801762 <pxOverflowTimerList+0x1>
    31d8:	0e 94 d8 03 	call	0x7b0	; 0x7b0 <vListInsert>
    31dc:	80 e0       	ldi	r24, 0x00	; 0
    31de:	18 c0       	rjmp	.+48     	; 0x3210 <prvInsertTimerInActiveList+0x84>
    31e0:	0c 15       	cp	r16, r12
    31e2:	1d 05       	cpc	r17, r13
    31e4:	2e 05       	cpc	r18, r14
    31e6:	3f 05       	cpc	r19, r15
    31e8:	28 f4       	brcc	.+10     	; 0x31f4 <prvInsertTimerInActiveList+0x68>
    31ea:	4c 15       	cp	r20, r12
    31ec:	5d 05       	cpc	r21, r13
    31ee:	6e 05       	cpc	r22, r14
    31f0:	7f 05       	cpc	r23, r15
    31f2:	68 f4       	brcc	.+26     	; 0x320e <prvInsertTimerInActiveList+0x82>
    31f4:	bf 01       	movw	r22, r30
    31f6:	6e 5f       	subi	r22, 0xFE	; 254
    31f8:	7f 4f       	sbci	r23, 0xFF	; 255
    31fa:	80 91 63 17 	lds	r24, 0x1763	; 0x801763 <pxCurrentTimerList>
    31fe:	90 91 64 17 	lds	r25, 0x1764	; 0x801764 <pxCurrentTimerList+0x1>
    3202:	0e 94 d8 03 	call	0x7b0	; 0x7b0 <vListInsert>
    3206:	80 e0       	ldi	r24, 0x00	; 0
    3208:	03 c0       	rjmp	.+6      	; 0x3210 <prvInsertTimerInActiveList+0x84>
    320a:	81 e0       	ldi	r24, 0x01	; 1
    320c:	01 c0       	rjmp	.+2      	; 0x3210 <prvInsertTimerInActiveList+0x84>
    320e:	81 e0       	ldi	r24, 0x01	; 1
    3210:	1f 91       	pop	r17
    3212:	0f 91       	pop	r16
    3214:	ff 90       	pop	r15
    3216:	ef 90       	pop	r14
    3218:	df 90       	pop	r13
    321a:	cf 90       	pop	r12
    321c:	08 95       	ret

0000321e <prvCheckForValidListAndQueue>:
    321e:	0f b6       	in	r0, 0x3f	; 63
    3220:	f8 94       	cli
    3222:	0f 92       	push	r0
    3224:	80 91 5f 17 	lds	r24, 0x175F	; 0x80175f <xTimerQueue>
    3228:	90 91 60 17 	lds	r25, 0x1760	; 0x801760 <xTimerQueue+0x1>
    322c:	89 2b       	or	r24, r25
    322e:	e9 f4       	brne	.+58     	; 0x326a <prvCheckForValidListAndQueue+0x4c>
    3230:	80 e7       	ldi	r24, 0x70	; 112
    3232:	97 e1       	ldi	r25, 0x17	; 23
    3234:	0e 94 c3 03 	call	0x786	; 0x786 <vListInitialise>
    3238:	85 e6       	ldi	r24, 0x65	; 101
    323a:	97 e1       	ldi	r25, 0x17	; 23
    323c:	0e 94 c3 03 	call	0x786	; 0x786 <vListInitialise>
    3240:	80 e7       	ldi	r24, 0x70	; 112
    3242:	97 e1       	ldi	r25, 0x17	; 23
    3244:	90 93 64 17 	sts	0x1764, r25	; 0x801764 <pxCurrentTimerList+0x1>
    3248:	80 93 63 17 	sts	0x1763, r24	; 0x801763 <pxCurrentTimerList>
    324c:	85 e6       	ldi	r24, 0x65	; 101
    324e:	97 e1       	ldi	r25, 0x17	; 23
    3250:	90 93 62 17 	sts	0x1762, r25	; 0x801762 <pxOverflowTimerList+0x1>
    3254:	80 93 61 17 	sts	0x1761, r24	; 0x801761 <pxOverflowTimerList>
    3258:	40 e0       	ldi	r20, 0x00	; 0
    325a:	67 e0       	ldi	r22, 0x07	; 7
    325c:	8a e0       	ldi	r24, 0x0A	; 10
    325e:	0e 94 86 06 	call	0xd0c	; 0xd0c <xQueueGenericCreate>
    3262:	90 93 60 17 	sts	0x1760, r25	; 0x801760 <xTimerQueue+0x1>
    3266:	80 93 5f 17 	sts	0x175F, r24	; 0x80175f <xTimerQueue>
    326a:	0f 90       	pop	r0
    326c:	0f be       	out	0x3f, r0	; 63
    326e:	08 95       	ret

00003270 <xTimerCreateTimerTask>:
    3270:	ef 92       	push	r14
    3272:	ff 92       	push	r15
    3274:	0f 93       	push	r16
    3276:	d3 df       	rcall	.-90     	; 0x321e <prvCheckForValidListAndQueue>
    3278:	80 91 5f 17 	lds	r24, 0x175F	; 0x80175f <xTimerQueue>
    327c:	90 91 60 17 	lds	r25, 0x1760	; 0x801760 <xTimerQueue+0x1>
    3280:	89 2b       	or	r24, r25
    3282:	91 f0       	breq	.+36     	; 0x32a8 <xTimerCreateTimerTask+0x38>
    3284:	0f 2e       	mov	r0, r31
    3286:	fd e5       	ldi	r31, 0x5D	; 93
    3288:	ef 2e       	mov	r14, r31
    328a:	f7 e1       	ldi	r31, 0x17	; 23
    328c:	ff 2e       	mov	r15, r31
    328e:	f0 2d       	mov	r31, r0
    3290:	03 e0       	ldi	r16, 0x03	; 3
    3292:	20 e0       	ldi	r18, 0x00	; 0
    3294:	30 e0       	ldi	r19, 0x00	; 0
    3296:	40 ec       	ldi	r20, 0xC0	; 192
    3298:	50 e0       	ldi	r21, 0x00	; 0
    329a:	64 e7       	ldi	r22, 0x74	; 116
    329c:	72 e0       	ldi	r23, 0x02	; 2
    329e:	87 ed       	ldi	r24, 0xD7	; 215
    32a0:	90 e0       	ldi	r25, 0x00	; 0
    32a2:	0e 94 39 0e 	call	0x1c72	; 0x1c72 <xTaskCreate>
    32a6:	01 c0       	rjmp	.+2      	; 0x32aa <xTimerCreateTimerTask+0x3a>
    32a8:	80 e0       	ldi	r24, 0x00	; 0
    32aa:	0f 91       	pop	r16
    32ac:	ff 90       	pop	r15
    32ae:	ef 90       	pop	r14
    32b0:	08 95       	ret

000032b2 <xTimerGenericCommand>:
    BaseType_t xTimerGenericCommand( TimerHandle_t xTimer,
                                     const BaseType_t xCommandID,
                                     const TickType_t xOptionalValue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const TickType_t xTicksToWait )
    {
    32b2:	8f 92       	push	r8
    32b4:	9f 92       	push	r9
    32b6:	af 92       	push	r10
    32b8:	bf 92       	push	r11
    32ba:	cf 92       	push	r12
    32bc:	df 92       	push	r13
    32be:	ef 92       	push	r14
    32c0:	ff 92       	push	r15
    32c2:	0f 93       	push	r16
    32c4:	1f 93       	push	r17
    32c6:	cf 93       	push	r28
    32c8:	df 93       	push	r29
    32ca:	cd b7       	in	r28, 0x3d	; 61
    32cc:	de b7       	in	r29, 0x3e	; 62
    32ce:	27 97       	sbiw	r28, 0x07	; 7
    32d0:	0f b6       	in	r0, 0x3f	; 63
    32d2:	f8 94       	cli
    32d4:	de bf       	out	0x3e, r29	; 62
    32d6:	0f be       	out	0x3f, r0	; 63
    32d8:	cd bf       	out	0x3d, r28	; 61

        configASSERT( xTimer );

        /* Send a message to the timer service task to perform a particular action
         * on a particular timer definition. */
        if( xTimerQueue != NULL )
    32da:	e0 91 5f 17 	lds	r30, 0x175F	; 0x80175f <xTimerQueue>
    32de:	f0 91 60 17 	lds	r31, 0x1760	; 0x801760 <xTimerQueue+0x1>
    32e2:	30 97       	sbiw	r30, 0x00	; 0
    32e4:	81 f1       	breq	.+96     	; 0x3346 <xTimerGenericCommand+0x94>
        {
            /* Send a command to the timer service task to start the xTimer timer. */
            xMessage.xMessageID = xCommandID;
    32e6:	69 83       	std	Y+1, r22	; 0x01
            xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
    32e8:	2a 83       	std	Y+2, r18	; 0x02
    32ea:	3b 83       	std	Y+3, r19	; 0x03
    32ec:	4c 83       	std	Y+4, r20	; 0x04
    32ee:	5d 83       	std	Y+5, r21	; 0x05
            xMessage.u.xTimerParameters.pxTimer = xTimer;
    32f0:	9f 83       	std	Y+7, r25	; 0x07
    32f2:	8e 83       	std	Y+6, r24	; 0x06

            if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
    32f4:	66 30       	cpi	r22, 0x06	; 6
    32f6:	f4 f4       	brge	.+60     	; 0x3334 <xTimerGenericCommand+0x82>
            {
                if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
    32f8:	c3 da       	rcall	.-2682   	; 0x2880 <xTaskGetSchedulerState>
    32fa:	82 30       	cpi	r24, 0x02	; 2
    32fc:	69 f4       	brne	.+26     	; 0x3318 <xTimerGenericCommand+0x66>
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
    32fe:	00 e0       	ldi	r16, 0x00	; 0
    3300:	a7 01       	movw	r20, r14
    3302:	96 01       	movw	r18, r12
    3304:	be 01       	movw	r22, r28
    3306:	6f 5f       	subi	r22, 0xFF	; 255
    3308:	7f 4f       	sbci	r23, 0xFF	; 255
    330a:	80 91 5f 17 	lds	r24, 0x175F	; 0x80175f <xTimerQueue>
    330e:	90 91 60 17 	lds	r25, 0x1760	; 0x801760 <xTimerQueue+0x1>
    3312:	0e 94 a9 06 	call	0xd52	; 0xd52 <xQueueGenericSend>
    3316:	18 c0       	rjmp	.+48     	; 0x3348 <xTimerGenericCommand+0x96>
                }
                else
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
    3318:	00 e0       	ldi	r16, 0x00	; 0
    331a:	20 e0       	ldi	r18, 0x00	; 0
    331c:	30 e0       	ldi	r19, 0x00	; 0
    331e:	a9 01       	movw	r20, r18
    3320:	be 01       	movw	r22, r28
    3322:	6f 5f       	subi	r22, 0xFF	; 255
    3324:	7f 4f       	sbci	r23, 0xFF	; 255
    3326:	80 91 5f 17 	lds	r24, 0x175F	; 0x80175f <xTimerQueue>
    332a:	90 91 60 17 	lds	r25, 0x1760	; 0x801760 <xTimerQueue+0x1>
    332e:	0e 94 a9 06 	call	0xd52	; 0xd52 <xQueueGenericSend>
    3332:	0a c0       	rjmp	.+20     	; 0x3348 <xTimerGenericCommand+0x96>
                }
            }
            else
            {
                xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
    3334:	20 e0       	ldi	r18, 0x00	; 0
    3336:	a8 01       	movw	r20, r16
    3338:	be 01       	movw	r22, r28
    333a:	6f 5f       	subi	r22, 0xFF	; 255
    333c:	7f 4f       	sbci	r23, 0xFF	; 255
    333e:	cf 01       	movw	r24, r30
    3340:	0e 94 59 07 	call	0xeb2	; 0xeb2 <xQueueGenericSendFromISR>
    3344:	01 c0       	rjmp	.+2      	; 0x3348 <xTimerGenericCommand+0x96>
                                     const BaseType_t xCommandID,
                                     const TickType_t xOptionalValue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const TickType_t xTicksToWait )
    {
        BaseType_t xReturn = pdFAIL;
    3346:	80 e0       	ldi	r24, 0x00	; 0
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
    }
    3348:	27 96       	adiw	r28, 0x07	; 7
    334a:	0f b6       	in	r0, 0x3f	; 63
    334c:	f8 94       	cli
    334e:	de bf       	out	0x3e, r29	; 62
    3350:	0f be       	out	0x3f, r0	; 63
    3352:	cd bf       	out	0x3d, r28	; 61
    3354:	df 91       	pop	r29
    3356:	cf 91       	pop	r28
    3358:	1f 91       	pop	r17
    335a:	0f 91       	pop	r16
    335c:	ff 90       	pop	r15
    335e:	ef 90       	pop	r14
    3360:	df 90       	pop	r13
    3362:	cf 90       	pop	r12
    3364:	bf 90       	pop	r11
    3366:	af 90       	pop	r10
    3368:	9f 90       	pop	r9
    336a:	8f 90       	pop	r8
    336c:	08 95       	ret

0000336e <prvSwitchTimerLists>:
        }
    }
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
    336e:	8f 92       	push	r8
    3370:	9f 92       	push	r9
    3372:	af 92       	push	r10
    3374:	bf 92       	push	r11
    3376:	cf 92       	push	r12
    3378:	df 92       	push	r13
    337a:	ef 92       	push	r14
    337c:	ff 92       	push	r15
    337e:	0f 93       	push	r16
    3380:	1f 93       	push	r17
    3382:	cf 93       	push	r28
    3384:	df 93       	push	r29

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
    3386:	3b c0       	rjmp	.+118    	; 0x33fe <prvSwitchTimerLists+0x90>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
    3388:	07 80       	ldd	r0, Z+7	; 0x07
    338a:	f0 85       	ldd	r31, Z+8	; 0x08
    338c:	e0 2d       	mov	r30, r0
    338e:	80 80       	ld	r8, Z
    3390:	91 80       	ldd	r9, Z+1	; 0x01
    3392:	a2 80       	ldd	r10, Z+2	; 0x02
    3394:	b3 80       	ldd	r11, Z+3	; 0x03

            /* Remove the timer from the list. */
            pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
    3396:	c0 85       	ldd	r28, Z+8	; 0x08
    3398:	d1 85       	ldd	r29, Z+9	; 0x09
            ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    339a:	8e 01       	movw	r16, r28
    339c:	0e 5f       	subi	r16, 0xFE	; 254
    339e:	1f 4f       	sbci	r17, 0xFF	; 255
    33a0:	c8 01       	movw	r24, r16
    33a2:	0e 94 15 04 	call	0x82a	; 0x82a <uxListRemove>
            traceTIMER_EXPIRED( pxTimer );

            /* Execute its callback, then send a command to restart the timer if
             * it is an auto-reload timer.  It cannot be restarted here as the lists
             * have not yet been switched. */
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    33a6:	ec 89       	ldd	r30, Y+20	; 0x14
    33a8:	fd 89       	ldd	r31, Y+21	; 0x15
    33aa:	ce 01       	movw	r24, r28
    33ac:	19 95       	eicall

            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
    33ae:	8e 89       	ldd	r24, Y+22	; 0x16
    33b0:	82 ff       	sbrs	r24, 2
    33b2:	25 c0       	rjmp	.+74     	; 0x33fe <prvSwitchTimerLists+0x90>
                 * the timer going into the same timer list then it has already expired
                 * and the timer should be re-inserted into the current list so it is
                 * processed again within this loop.  Otherwise a command should be sent
                 * to restart the timer to ensure it is only inserted into a list after
                 * the lists have been swapped. */
                xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
    33b4:	8e 85       	ldd	r24, Y+14	; 0x0e
    33b6:	9f 85       	ldd	r25, Y+15	; 0x0f
    33b8:	a8 89       	ldd	r26, Y+16	; 0x10
    33ba:	b9 89       	ldd	r27, Y+17	; 0x11
    33bc:	88 0d       	add	r24, r8
    33be:	99 1d       	adc	r25, r9
    33c0:	aa 1d       	adc	r26, r10
    33c2:	bb 1d       	adc	r27, r11

                if( xReloadTime > xNextExpireTime )
    33c4:	88 16       	cp	r8, r24
    33c6:	99 06       	cpc	r9, r25
    33c8:	aa 06       	cpc	r10, r26
    33ca:	bb 06       	cpc	r11, r27
    33cc:	70 f4       	brcc	.+28     	; 0x33ea <prvSwitchTimerLists+0x7c>
                {
                    listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
    33ce:	8a 83       	std	Y+2, r24	; 0x02
    33d0:	9b 83       	std	Y+3, r25	; 0x03
    33d2:	ac 83       	std	Y+4, r26	; 0x04
    33d4:	bd 83       	std	Y+5, r27	; 0x05
                    listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
    33d6:	db 87       	std	Y+11, r29	; 0x0b
    33d8:	ca 87       	std	Y+10, r28	; 0x0a
                    vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
    33da:	b8 01       	movw	r22, r16
    33dc:	80 91 63 17 	lds	r24, 0x1763	; 0x801763 <pxCurrentTimerList>
    33e0:	90 91 64 17 	lds	r25, 0x1764	; 0x801764 <pxCurrentTimerList+0x1>
    33e4:	0e 94 d8 03 	call	0x7b0	; 0x7b0 <vListInsert>
    33e8:	0a c0       	rjmp	.+20     	; 0x33fe <prvSwitchTimerLists+0x90>
                }
                else
                {
                    xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
    33ea:	c1 2c       	mov	r12, r1
    33ec:	d1 2c       	mov	r13, r1
    33ee:	76 01       	movw	r14, r12
    33f0:	00 e0       	ldi	r16, 0x00	; 0
    33f2:	10 e0       	ldi	r17, 0x00	; 0
    33f4:	a5 01       	movw	r20, r10
    33f6:	94 01       	movw	r18, r8
    33f8:	60 e0       	ldi	r22, 0x00	; 0
    33fa:	ce 01       	movw	r24, r28
    33fc:	5a df       	rcall	.-332    	; 0x32b2 <xTimerGenericCommand>

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
    33fe:	e0 91 63 17 	lds	r30, 0x1763	; 0x801763 <pxCurrentTimerList>
    3402:	f0 91 64 17 	lds	r31, 0x1764	; 0x801764 <pxCurrentTimerList+0x1>
    3406:	80 81       	ld	r24, Z
    3408:	81 11       	cpse	r24, r1
    340a:	be cf       	rjmp	.-132    	; 0x3388 <prvSwitchTimerLists+0x1a>
                mtCOVERAGE_TEST_MARKER();
            }
        }

        pxTemp = pxCurrentTimerList;
        pxCurrentTimerList = pxOverflowTimerList;
    340c:	80 91 61 17 	lds	r24, 0x1761	; 0x801761 <pxOverflowTimerList>
    3410:	90 91 62 17 	lds	r25, 0x1762	; 0x801762 <pxOverflowTimerList+0x1>
    3414:	90 93 64 17 	sts	0x1764, r25	; 0x801764 <pxCurrentTimerList+0x1>
    3418:	80 93 63 17 	sts	0x1763, r24	; 0x801763 <pxCurrentTimerList>
        pxOverflowTimerList = pxTemp;
    341c:	f0 93 62 17 	sts	0x1762, r31	; 0x801762 <pxOverflowTimerList+0x1>
    3420:	e0 93 61 17 	sts	0x1761, r30	; 0x801761 <pxOverflowTimerList>
    }
    3424:	df 91       	pop	r29
    3426:	cf 91       	pop	r28
    3428:	1f 91       	pop	r17
    342a:	0f 91       	pop	r16
    342c:	ff 90       	pop	r15
    342e:	ef 90       	pop	r14
    3430:	df 90       	pop	r13
    3432:	cf 90       	pop	r12
    3434:	bf 90       	pop	r11
    3436:	af 90       	pop	r10
    3438:	9f 90       	pop	r9
    343a:	8f 90       	pop	r8
    343c:	08 95       	ret

0000343e <prvSampleTimeNow>:
        return xNextExpireTime;
    }
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
    343e:	cf 92       	push	r12
    3440:	df 92       	push	r13
    3442:	ef 92       	push	r14
    3444:	ff 92       	push	r15
    3446:	cf 93       	push	r28
    3448:	df 93       	push	r29
    344a:	ec 01       	movw	r28, r24
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
    344c:	0e 94 c3 0e 	call	0x1d86	; 0x1d86 <xTaskGetTickCount>
    3450:	6b 01       	movw	r12, r22
    3452:	7c 01       	movw	r14, r24

        if( xTimeNow < xLastTime )
    3454:	80 91 59 17 	lds	r24, 0x1759	; 0x801759 <xLastTime.2436>
    3458:	90 91 5a 17 	lds	r25, 0x175A	; 0x80175a <xLastTime.2436+0x1>
    345c:	a0 91 5b 17 	lds	r26, 0x175B	; 0x80175b <xLastTime.2436+0x2>
    3460:	b0 91 5c 17 	lds	r27, 0x175C	; 0x80175c <xLastTime.2436+0x3>
    3464:	c8 16       	cp	r12, r24
    3466:	d9 06       	cpc	r13, r25
    3468:	ea 06       	cpc	r14, r26
    346a:	fb 06       	cpc	r15, r27
    346c:	20 f4       	brcc	.+8      	; 0x3476 <prvSampleTimeNow+0x38>
        {
            prvSwitchTimerLists();
    346e:	7f df       	rcall	.-258    	; 0x336e <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
    3470:	81 e0       	ldi	r24, 0x01	; 1
    3472:	88 83       	st	Y, r24
    3474:	01 c0       	rjmp	.+2      	; 0x3478 <prvSampleTimeNow+0x3a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
    3476:	18 82       	st	Y, r1
        }

        xLastTime = xTimeNow;
    3478:	c0 92 59 17 	sts	0x1759, r12	; 0x801759 <xLastTime.2436>
    347c:	d0 92 5a 17 	sts	0x175A, r13	; 0x80175a <xLastTime.2436+0x1>
    3480:	e0 92 5b 17 	sts	0x175B, r14	; 0x80175b <xLastTime.2436+0x2>
    3484:	f0 92 5c 17 	sts	0x175C, r15	; 0x80175c <xLastTime.2436+0x3>

        return xTimeNow;
    }
    3488:	c7 01       	movw	r24, r14
    348a:	b6 01       	movw	r22, r12
    348c:	df 91       	pop	r29
    348e:	cf 91       	pop	r28
    3490:	ff 90       	pop	r15
    3492:	ef 90       	pop	r14
    3494:	df 90       	pop	r13
    3496:	cf 90       	pop	r12
    3498:	08 95       	ret

0000349a <prvProcessExpiredTimer>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
    349a:	4f 92       	push	r4
    349c:	5f 92       	push	r5
    349e:	6f 92       	push	r6
    34a0:	7f 92       	push	r7
    34a2:	8f 92       	push	r8
    34a4:	9f 92       	push	r9
    34a6:	af 92       	push	r10
    34a8:	bf 92       	push	r11
    34aa:	cf 92       	push	r12
    34ac:	df 92       	push	r13
    34ae:	ef 92       	push	r14
    34b0:	ff 92       	push	r15
    34b2:	0f 93       	push	r16
    34b4:	1f 93       	push	r17
    34b6:	cf 93       	push	r28
    34b8:	df 93       	push	r29
    34ba:	4b 01       	movw	r8, r22
    34bc:	5c 01       	movw	r10, r24
    34be:	29 01       	movw	r4, r18
    34c0:	3a 01       	movw	r6, r20
        BaseType_t xResult;
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
    34c2:	e0 91 63 17 	lds	r30, 0x1763	; 0x801763 <pxCurrentTimerList>
    34c6:	f0 91 64 17 	lds	r31, 0x1764	; 0x801764 <pxCurrentTimerList+0x1>
    34ca:	07 80       	ldd	r0, Z+7	; 0x07
    34cc:	f0 85       	ldd	r31, Z+8	; 0x08
    34ce:	e0 2d       	mov	r30, r0
    34d0:	c0 85       	ldd	r28, Z+8	; 0x08
    34d2:	d1 85       	ldd	r29, Z+9	; 0x09

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    34d4:	ce 01       	movw	r24, r28
    34d6:	02 96       	adiw	r24, 0x02	; 2
    34d8:	0e 94 15 04 	call	0x82a	; 0x82a <uxListRemove>
        traceTIMER_EXPIRED( pxTimer );

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
    34dc:	8e 89       	ldd	r24, Y+22	; 0x16
    34de:	82 ff       	sbrs	r24, 2
    34e0:	1b c0       	rjmp	.+54     	; 0x3518 <prvProcessExpiredTimer+0x7e>
        {
            /* The timer is inserted into a list using a time relative to anything
             * other than the current time.  It will therefore be inserted into the
             * correct list relative to the time this task thinks it is now. */
            if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
    34e2:	4e 85       	ldd	r20, Y+14	; 0x0e
    34e4:	5f 85       	ldd	r21, Y+15	; 0x0f
    34e6:	68 89       	ldd	r22, Y+16	; 0x10
    34e8:	79 89       	ldd	r23, Y+17	; 0x11
    34ea:	48 0d       	add	r20, r8
    34ec:	59 1d       	adc	r21, r9
    34ee:	6a 1d       	adc	r22, r10
    34f0:	7b 1d       	adc	r23, r11
    34f2:	75 01       	movw	r14, r10
    34f4:	64 01       	movw	r12, r8
    34f6:	93 01       	movw	r18, r6
    34f8:	82 01       	movw	r16, r4
    34fa:	ce 01       	movw	r24, r28
    34fc:	47 de       	rcall	.-882    	; 0x318c <prvInsertTimerInActiveList>
    34fe:	88 23       	and	r24, r24
    3500:	69 f0       	breq	.+26     	; 0x351c <prvProcessExpiredTimer+0x82>
            {
                /* The timer expired before it was added to the active timer
                 * list.  Reload it now.  */
                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
    3502:	c1 2c       	mov	r12, r1
    3504:	d1 2c       	mov	r13, r1
    3506:	76 01       	movw	r14, r12
    3508:	00 e0       	ldi	r16, 0x00	; 0
    350a:	10 e0       	ldi	r17, 0x00	; 0
    350c:	a5 01       	movw	r20, r10
    350e:	94 01       	movw	r18, r8
    3510:	60 e0       	ldi	r22, 0x00	; 0
    3512:	ce 01       	movw	r24, r28
    3514:	ce de       	rcall	.-612    	; 0x32b2 <xTimerGenericCommand>
    3516:	02 c0       	rjmp	.+4      	; 0x351c <prvProcessExpiredTimer+0x82>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
    3518:	8e 7f       	andi	r24, 0xFE	; 254
    351a:	8e 8b       	std	Y+22, r24	; 0x16
            mtCOVERAGE_TEST_MARKER();
        }

        /* Call the timer callback. */
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    351c:	ec 89       	ldd	r30, Y+20	; 0x14
    351e:	fd 89       	ldd	r31, Y+21	; 0x15
    3520:	ce 01       	movw	r24, r28
    3522:	19 95       	eicall
    }
    3524:	df 91       	pop	r29
    3526:	cf 91       	pop	r28
    3528:	1f 91       	pop	r17
    352a:	0f 91       	pop	r16
    352c:	ff 90       	pop	r15
    352e:	ef 90       	pop	r14
    3530:	df 90       	pop	r13
    3532:	cf 90       	pop	r12
    3534:	bf 90       	pop	r11
    3536:	af 90       	pop	r10
    3538:	9f 90       	pop	r9
    353a:	8f 90       	pop	r8
    353c:	7f 90       	pop	r7
    353e:	6f 90       	pop	r6
    3540:	5f 90       	pop	r5
    3542:	4f 90       	pop	r4
    3544:	08 95       	ret

00003546 <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
    3546:	8f 92       	push	r8
    3548:	9f 92       	push	r9
    354a:	af 92       	push	r10
    354c:	bf 92       	push	r11
    354e:	cf 92       	push	r12
    3550:	df 92       	push	r13
    3552:	ef 92       	push	r14
    3554:	ff 92       	push	r15
    3556:	1f 93       	push	r17
    3558:	cf 93       	push	r28
    355a:	df 93       	push	r29
    355c:	1f 92       	push	r1
    355e:	cd b7       	in	r28, 0x3d	; 61
    3560:	de b7       	in	r29, 0x3e	; 62
    3562:	6b 01       	movw	r12, r22
    3564:	7c 01       	movw	r14, r24
    3566:	14 2f       	mov	r17, r20
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
    3568:	0e 94 bd 0e 	call	0x1d7a	; 0x1d7a <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
    356c:	ce 01       	movw	r24, r28
    356e:	01 96       	adiw	r24, 0x01	; 1
    3570:	66 df       	rcall	.-308    	; 0x343e <prvSampleTimeNow>
    3572:	4b 01       	movw	r8, r22
    3574:	5c 01       	movw	r10, r24

            if( xTimerListsWereSwitched == pdFALSE )
    3576:	89 81       	ldd	r24, Y+1	; 0x01
    3578:	81 11       	cpse	r24, r1
    357a:	2d c0       	rjmp	.+90     	; 0x35d6 <prvProcessTimerOrBlockTask+0x90>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
    357c:	11 11       	cpse	r17, r1
    357e:	0d c0       	rjmp	.+26     	; 0x359a <prvProcessTimerOrBlockTask+0x54>
    3580:	8c 14       	cp	r8, r12
    3582:	9d 04       	cpc	r9, r13
    3584:	ae 04       	cpc	r10, r14
    3586:	bf 04       	cpc	r11, r15
    3588:	40 f0       	brcs	.+16     	; 0x359a <prvProcessTimerOrBlockTask+0x54>
                {
                    ( void ) xTaskResumeAll();
    358a:	0e 94 fd 0f 	call	0x1ffa	; 0x1ffa <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
    358e:	a5 01       	movw	r20, r10
    3590:	94 01       	movw	r18, r8
    3592:	c7 01       	movw	r24, r14
    3594:	b6 01       	movw	r22, r12
    3596:	81 df       	rcall	.-254    	; 0x349a <prvProcessExpiredTimer>
    3598:	20 c0       	rjmp	.+64     	; 0x35da <prvProcessTimerOrBlockTask+0x94>
                     * time has not been reached yet.  This task should therefore
                     * block to wait for the next expire time or a command to be
                     * received - whichever comes first.  The following line cannot
                     * be reached unless xNextExpireTime > xTimeNow, except in the
                     * case when the current timer list is empty. */
                    if( xListWasEmpty != pdFALSE )
    359a:	11 23       	and	r17, r17
    359c:	41 f0       	breq	.+16     	; 0x35ae <prvProcessTimerOrBlockTask+0x68>
                    {
                        /* The current timer list is empty - is the overflow list
                         * also empty? */
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
    359e:	e0 91 61 17 	lds	r30, 0x1761	; 0x801761 <pxOverflowTimerList>
    35a2:	f0 91 62 17 	lds	r31, 0x1762	; 0x801762 <pxOverflowTimerList+0x1>
    35a6:	80 81       	ld	r24, Z
    35a8:	11 e0       	ldi	r17, 0x01	; 1
    35aa:	81 11       	cpse	r24, r1
    35ac:	10 e0       	ldi	r17, 0x00	; 0
                    }

                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
    35ae:	b7 01       	movw	r22, r14
    35b0:	a6 01       	movw	r20, r12
    35b2:	48 19       	sub	r20, r8
    35b4:	59 09       	sbc	r21, r9
    35b6:	6a 09       	sbc	r22, r10
    35b8:	7b 09       	sbc	r23, r11
    35ba:	21 2f       	mov	r18, r17
    35bc:	80 91 5f 17 	lds	r24, 0x175F	; 0x80175f <xTimerQueue>
    35c0:	90 91 60 17 	lds	r25, 0x1760	; 0x801760 <xTimerQueue+0x1>
    35c4:	0e 94 d4 08 	call	0x11a8	; 0x11a8 <vQueueWaitForMessageRestricted>

                    if( xTaskResumeAll() == pdFALSE )
    35c8:	0e 94 fd 0f 	call	0x1ffa	; 0x1ffa <xTaskResumeAll>
    35cc:	81 11       	cpse	r24, r1
    35ce:	05 c0       	rjmp	.+10     	; 0x35da <prvProcessTimerOrBlockTask+0x94>
                    {
                        /* Yield to wait for either a command to arrive, or the
                         * block time to expire.  If a command arrived between the
                         * critical section being exited and this yield then the yield
                         * will not cause the task to block. */
                        portYIELD_WITHIN_API();
    35d0:	0e 94 91 04 	call	0x922	; 0x922 <vPortYield>
    35d4:	02 c0       	rjmp	.+4      	; 0x35da <prvProcessTimerOrBlockTask+0x94>
                    }
                }
            }
            else
            {
                ( void ) xTaskResumeAll();
    35d6:	0e 94 fd 0f 	call	0x1ffa	; 0x1ffa <xTaskResumeAll>
            }
        }
    }
    35da:	0f 90       	pop	r0
    35dc:	df 91       	pop	r29
    35de:	cf 91       	pop	r28
    35e0:	1f 91       	pop	r17
    35e2:	ff 90       	pop	r15
    35e4:	ef 90       	pop	r14
    35e6:	df 90       	pop	r13
    35e8:	cf 90       	pop	r12
    35ea:	bf 90       	pop	r11
    35ec:	af 90       	pop	r10
    35ee:	9f 90       	pop	r9
    35f0:	8f 90       	pop	r8
    35f2:	08 95       	ret

000035f4 <prvProcessReceivedCommands>:
        return xProcessTimerNow;
    }
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
    35f4:	af 92       	push	r10
    35f6:	bf 92       	push	r11
    35f8:	cf 92       	push	r12
    35fa:	df 92       	push	r13
    35fc:	ef 92       	push	r14
    35fe:	ff 92       	push	r15
    3600:	0f 93       	push	r16
    3602:	1f 93       	push	r17
    3604:	cf 93       	push	r28
    3606:	df 93       	push	r29
    3608:	cd b7       	in	r28, 0x3d	; 61
    360a:	de b7       	in	r29, 0x3e	; 62
    360c:	28 97       	sbiw	r28, 0x08	; 8
    360e:	0f b6       	in	r0, 0x3f	; 63
    3610:	f8 94       	cli
    3612:	de bf       	out	0x3e, r29	; 62
    3614:	0f be       	out	0x3f, r0	; 63
    3616:	cd bf       	out	0x3d, r28	; 61
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched, xResult;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
    3618:	82 c0       	rjmp	.+260    	; 0x371e <prvProcessReceivedCommands+0x12a>
                }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
    361a:	89 81       	ldd	r24, Y+1	; 0x01
    361c:	88 23       	and	r24, r24
    361e:	0c f4       	brge	.+2      	; 0x3622 <prvProcessReceivedCommands+0x2e>
    3620:	7e c0       	rjmp	.+252    	; 0x371e <prvProcessReceivedCommands+0x12a>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
    3622:	ae 80       	ldd	r10, Y+6	; 0x06
    3624:	bf 80       	ldd	r11, Y+7	; 0x07

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
    3626:	d5 01       	movw	r26, r10
    3628:	1c 96       	adiw	r26, 0x0c	; 12
    362a:	8d 91       	ld	r24, X+
    362c:	9c 91       	ld	r25, X
    362e:	1d 97       	sbiw	r26, 0x0d	; 13
    3630:	89 2b       	or	r24, r25
    3632:	21 f0       	breq	.+8      	; 0x363c <prvProcessReceivedCommands+0x48>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    3634:	c5 01       	movw	r24, r10
    3636:	02 96       	adiw	r24, 0x02	; 2
    3638:	0e 94 15 04 	call	0x82a	; 0x82a <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
    363c:	ce 01       	movw	r24, r28
    363e:	08 96       	adiw	r24, 0x08	; 8
    3640:	fe de       	rcall	.-516    	; 0x343e <prvSampleTimeNow>
    3642:	8b 01       	movw	r16, r22
    3644:	9c 01       	movw	r18, r24

                switch( xMessage.xMessageID )
    3646:	e9 81       	ldd	r30, Y+1	; 0x01
    3648:	0e 2e       	mov	r0, r30
    364a:	00 0c       	add	r0, r0
    364c:	ff 0b       	sbc	r31, r31
    364e:	ea 30       	cpi	r30, 0x0A	; 10
    3650:	f1 05       	cpc	r31, r1
    3652:	08 f0       	brcs	.+2      	; 0x3656 <prvProcessReceivedCommands+0x62>
    3654:	64 c0       	rjmp	.+200    	; 0x371e <prvProcessReceivedCommands+0x12a>
    3656:	88 27       	eor	r24, r24
    3658:	ee 58       	subi	r30, 0x8E	; 142
    365a:	ff 4f       	sbci	r31, 0xFF	; 255
    365c:	8f 4f       	sbci	r24, 0xFF	; 255
    365e:	0c 94 f0 2e 	jmp	0x5de0	; 0x5de0 <__tablejump2__>
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                    case tmrCOMMAND_START_DONT_TRACE:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
    3662:	f5 01       	movw	r30, r10
    3664:	86 89       	ldd	r24, Z+22	; 0x16
    3666:	81 60       	ori	r24, 0x01	; 1
    3668:	86 8b       	std	Z+22, r24	; 0x16

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
    366a:	ca 80       	ldd	r12, Y+2	; 0x02
    366c:	db 80       	ldd	r13, Y+3	; 0x03
    366e:	ec 80       	ldd	r14, Y+4	; 0x04
    3670:	fd 80       	ldd	r15, Y+5	; 0x05
    3672:	46 85       	ldd	r20, Z+14	; 0x0e
    3674:	57 85       	ldd	r21, Z+15	; 0x0f
    3676:	60 89       	ldd	r22, Z+16	; 0x10
    3678:	71 89       	ldd	r23, Z+17	; 0x11
    367a:	4c 0d       	add	r20, r12
    367c:	5d 1d       	adc	r21, r13
    367e:	6e 1d       	adc	r22, r14
    3680:	7f 1d       	adc	r23, r15
    3682:	c5 01       	movw	r24, r10
    3684:	83 dd       	rcall	.-1274   	; 0x318c <prvInsertTimerInActiveList>
    3686:	88 23       	and	r24, r24
    3688:	09 f4       	brne	.+2      	; 0x368c <prvProcessReceivedCommands+0x98>
    368a:	49 c0       	rjmp	.+146    	; 0x371e <prvProcessReceivedCommands+0x12a>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    368c:	d5 01       	movw	r26, r10
    368e:	54 96       	adiw	r26, 0x14	; 20
    3690:	ed 91       	ld	r30, X+
    3692:	fc 91       	ld	r31, X
    3694:	55 97       	sbiw	r26, 0x15	; 21
    3696:	c5 01       	movw	r24, r10
    3698:	19 95       	eicall
                            traceTIMER_EXPIRED( pxTimer );

                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
    369a:	f5 01       	movw	r30, r10
    369c:	86 89       	ldd	r24, Z+22	; 0x16
    369e:	82 ff       	sbrs	r24, 2
    36a0:	3e c0       	rjmp	.+124    	; 0x371e <prvProcessReceivedCommands+0x12a>
                            {
                                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
    36a2:	4a 81       	ldd	r20, Y+2	; 0x02
    36a4:	5b 81       	ldd	r21, Y+3	; 0x03
    36a6:	6c 81       	ldd	r22, Y+4	; 0x04
    36a8:	7d 81       	ldd	r23, Y+5	; 0x05
    36aa:	86 85       	ldd	r24, Z+14	; 0x0e
    36ac:	97 85       	ldd	r25, Z+15	; 0x0f
    36ae:	a0 89       	ldd	r26, Z+16	; 0x10
    36b0:	b1 89       	ldd	r27, Z+17	; 0x11
    36b2:	9a 01       	movw	r18, r20
    36b4:	ab 01       	movw	r20, r22
    36b6:	28 0f       	add	r18, r24
    36b8:	39 1f       	adc	r19, r25
    36ba:	4a 1f       	adc	r20, r26
    36bc:	5b 1f       	adc	r21, r27
    36be:	c1 2c       	mov	r12, r1
    36c0:	d1 2c       	mov	r13, r1
    36c2:	76 01       	movw	r14, r12
    36c4:	00 e0       	ldi	r16, 0x00	; 0
    36c6:	10 e0       	ldi	r17, 0x00	; 0
    36c8:	60 e0       	ldi	r22, 0x00	; 0
    36ca:	c5 01       	movw	r24, r10
    36cc:	f2 dd       	rcall	.-1052   	; 0x32b2 <xTimerGenericCommand>
    36ce:	27 c0       	rjmp	.+78     	; 0x371e <prvProcessReceivedCommands+0x12a>
                        break;

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
    36d0:	d5 01       	movw	r26, r10
    36d2:	56 96       	adiw	r26, 0x16	; 22
    36d4:	8c 91       	ld	r24, X
    36d6:	56 97       	sbiw	r26, 0x16	; 22
    36d8:	8e 7f       	andi	r24, 0xFE	; 254
    36da:	56 96       	adiw	r26, 0x16	; 22
    36dc:	8c 93       	st	X, r24
                        break;
    36de:	1f c0       	rjmp	.+62     	; 0x371e <prvProcessReceivedCommands+0x12a>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
    36e0:	f5 01       	movw	r30, r10
    36e2:	86 89       	ldd	r24, Z+22	; 0x16
    36e4:	81 60       	ori	r24, 0x01	; 1
    36e6:	86 8b       	std	Z+22, r24	; 0x16
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
    36e8:	4a 81       	ldd	r20, Y+2	; 0x02
    36ea:	5b 81       	ldd	r21, Y+3	; 0x03
    36ec:	6c 81       	ldd	r22, Y+4	; 0x04
    36ee:	7d 81       	ldd	r23, Y+5	; 0x05
    36f0:	46 87       	std	Z+14, r20	; 0x0e
    36f2:	57 87       	std	Z+15, r21	; 0x0f
    36f4:	60 8b       	std	Z+16, r22	; 0x10
    36f6:	71 8b       	std	Z+17, r23	; 0x11
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
    36f8:	40 0f       	add	r20, r16
    36fa:	51 1f       	adc	r21, r17
    36fc:	62 1f       	adc	r22, r18
    36fe:	73 1f       	adc	r23, r19
    3700:	68 01       	movw	r12, r16
    3702:	79 01       	movw	r14, r18
    3704:	c5 01       	movw	r24, r10
    3706:	42 dd       	rcall	.-1404   	; 0x318c <prvInsertTimerInActiveList>
                        break;
    3708:	0a c0       	rjmp	.+20     	; 0x371e <prvProcessReceivedCommands+0x12a>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                            {
                                /* The timer has already been removed from the active list,
                                 * just free up the memory if the memory was dynamically
                                 * allocated. */
                                if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
    370a:	f5 01       	movw	r30, r10
    370c:	86 89       	ldd	r24, Z+22	; 0x16
    370e:	81 fd       	sbrc	r24, 1
    3710:	04 c0       	rjmp	.+8      	; 0x371a <prvProcessReceivedCommands+0x126>
                                {
                                    vPortFree( pxTimer );
    3712:	c5 01       	movw	r24, r10
    3714:	0e 94 86 03 	call	0x70c	; 0x70c <vPortFree>
    3718:	02 c0       	rjmp	.+4      	; 0x371e <prvProcessReceivedCommands+0x12a>
                                }
                                else
                                {
                                    pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
    371a:	8e 7f       	andi	r24, 0xFE	; 254
    371c:	86 8b       	std	Z+22, r24	; 0x16
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched, xResult;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
    371e:	20 e0       	ldi	r18, 0x00	; 0
    3720:	30 e0       	ldi	r19, 0x00	; 0
    3722:	a9 01       	movw	r20, r18
    3724:	be 01       	movw	r22, r28
    3726:	6f 5f       	subi	r22, 0xFF	; 255
    3728:	7f 4f       	sbci	r23, 0xFF	; 255
    372a:	80 91 5f 17 	lds	r24, 0x175F	; 0x80175f <xTimerQueue>
    372e:	90 91 60 17 	lds	r25, 0x1760	; 0x801760 <xTimerQueue+0x1>
    3732:	0e 94 94 07 	call	0xf28	; 0xf28 <xQueueReceive>
    3736:	81 11       	cpse	r24, r1
    3738:	70 cf       	rjmp	.-288    	; 0x361a <prvProcessReceivedCommands+0x26>
                        /* Don't expect to get here. */
                        break;
                }
            }
        }
    }
    373a:	28 96       	adiw	r28, 0x08	; 8
    373c:	0f b6       	in	r0, 0x3f	; 63
    373e:	f8 94       	cli
    3740:	de bf       	out	0x3e, r29	; 62
    3742:	0f be       	out	0x3f, r0	; 63
    3744:	cd bf       	out	0x3d, r28	; 61
    3746:	df 91       	pop	r29
    3748:	cf 91       	pop	r28
    374a:	1f 91       	pop	r17
    374c:	0f 91       	pop	r16
    374e:	ff 90       	pop	r15
    3750:	ef 90       	pop	r14
    3752:	df 90       	pop	r13
    3754:	cf 90       	pop	r12
    3756:	bf 90       	pop	r11
    3758:	af 90       	pop	r10
    375a:	08 95       	ret

0000375c <vApplicationIdleHook>:
 *
 */
void vApplicationIdleHook( void ) __attribute__((weak));

void vApplicationIdleHook( void )
{
    375c:	08 95       	ret

0000375e <prvSetMainLedOn>:
 * Private function to enable board led to use it in application hooks
 */
void prvSetMainLedOn( void ) 
{
#if defined(__AVR_ATmega640__) || defined(__AVR_ATmega1280__) || defined(__AVR_ATmega1281__) || defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__) // Arduino Mega with 2560
    DDRB  |= _BV(DDB7);
    375e:	84 b1       	in	r24, 0x04	; 4
    3760:	80 68       	ori	r24, 0x80	; 128
    3762:	84 b9       	out	0x04, r24	; 4
    PORTB |= _BV(PORTB7);       // Main (red PB7) LED on. Main LED on.
    3764:	85 b1       	in	r24, 0x05	; 5
    3766:	80 68       	ori	r24, 0x80	; 128
    3768:	85 b9       	out	0x05, r24	; 5
    376a:	08 95       	ret

0000376c <prvBlinkMainLed>:
 */
void prvBlinkMainLed( void ) 
{

#if defined(__AVR_ATmega640__) || defined(__AVR_ATmega1280__) || defined(__AVR_ATmega1281__) || defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__)  // Mega with 2560
        PINB  |= _BV(PINB7);       // Main (red PB7) LED toggle.
    376c:	83 b1       	in	r24, 0x03	; 3
    376e:	80 68       	ori	r24, 0x80	; 128
    3770:	83 b9       	out	0x03, r24	; 3
    3772:	08 95       	ret

00003774 <vApplicationMallocFailedHook>:
\*---------------------------------------------------------------------------*/
void vApplicationMallocFailedHook( void ) __attribute__((weak));

void vApplicationMallocFailedHook( void )
{
    prvSetMainLedOn(); // Main LED on.
    3774:	f4 df       	rcall	.-24     	; 0x375e <prvSetMainLedOn>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    3776:	2f ef       	ldi	r18, 0xFF	; 255
    3778:	80 e7       	ldi	r24, 0x70	; 112
    377a:	92 e0       	ldi	r25, 0x02	; 2
    377c:	21 50       	subi	r18, 0x01	; 1
    377e:	80 40       	sbci	r24, 0x00	; 0
    3780:	90 40       	sbci	r25, 0x00	; 0
    3782:	e1 f7       	brne	.-8      	; 0x377c <vApplicationMallocFailedHook+0x8>
    3784:	00 c0       	rjmp	.+0      	; 0x3786 <vApplicationMallocFailedHook+0x12>
    
    for(;;)
    {
        _delay_ms(50);
        prvBlinkMainLed(); // Main LED fast blink.
    3786:	00 00       	nop
    3788:	f1 df       	rcall	.-30     	; 0x376c <prvBlinkMainLed>
    378a:	f5 cf       	rjmp	.-22     	; 0x3776 <vApplicationMallocFailedHook+0x2>

0000378c <vApplicationStackOverflowHook>:

void vApplicationStackOverflowHook( TaskHandle_t xTask __attribute__((unused)),
                                    char * pcTaskName __attribute__((unused)) )
{

    prvSetMainLedOn(); // Main LED on.
    378c:	e8 df       	rcall	.-48     	; 0x375e <prvSetMainLedOn>
    378e:	2f ef       	ldi	r18, 0xFF	; 255
    3790:	87 ea       	ldi	r24, 0xA7	; 167
    3792:	91 e6       	ldi	r25, 0x61	; 97
    3794:	21 50       	subi	r18, 0x01	; 1
    3796:	80 40       	sbci	r24, 0x00	; 0
    3798:	90 40       	sbci	r25, 0x00	; 0
    379a:	e1 f7       	brne	.-8      	; 0x3794 <vApplicationStackOverflowHook+0x8>
    379c:	00 c0       	rjmp	.+0      	; 0x379e <vApplicationStackOverflowHook+0x12>

    for(;;)
    {
        _delay_ms(2000);
        prvBlinkMainLed();  // Main LED slow blink.
    379e:	00 00       	nop
    37a0:	e5 df       	rcall	.-54     	; 0x376c <prvBlinkMainLed>
    37a2:	f5 cf       	rjmp	.-22     	; 0x378e <vApplicationStackOverflowHook+0x2>

000037a4 <applicationTask>:
extern EventGroupHandle_t measureEventGroup;
extern EventGroupHandle_t dataConfigurationGroup;


void applicationTask(void *pvParameters)
{
    37a4:	cf 93       	push	r28
    37a6:	df 93       	push	r29
    37a8:	cd b7       	in	r28, 0x3d	; 61
    37aa:	de b7       	in	r29, 0x3e	; 62
    37ac:	66 97       	sbiw	r28, 0x16	; 22
    37ae:	0f b6       	in	r0, 0x3f	; 63
    37b0:	f8 94       	cli
    37b2:	de bf       	out	0x3e, r29	; 62
    37b4:	0f be       	out	0x3f, r0	; 63
    37b6:	cd bf       	out	0x3d, r28	; 61
	for (;;)
	{
		xEventGroupSetBits(measureEventGroup,co2_bit | temperature_and_humidity_bit);
    37b8:	43 e0       	ldi	r20, 0x03	; 3
    37ba:	50 e0       	ldi	r21, 0x00	; 0
    37bc:	60 e0       	ldi	r22, 0x00	; 0
    37be:	70 e0       	ldi	r23, 0x00	; 0
    37c0:	80 91 b4 18 	lds	r24, 0x18B4	; 0x8018b4 <measureEventGroup>
    37c4:	90 91 b5 18 	lds	r25, 0x18B5	; 0x8018b5 <measureEventGroup+0x1>
    37c8:	0e 94 dc 01 	call	0x3b8	; 0x3b8 <xEventGroupSetBits>
		EventBits_t eventBits = xEventGroupWaitBits(dataConfigurationGroup,temperature_and_humidity_bit|co2_bit, pdTRUE, pdTRUE,portMAX_DELAY);
    37cc:	cc 24       	eor	r12, r12
    37ce:	ca 94       	dec	r12
    37d0:	dc 2c       	mov	r13, r12
    37d2:	76 01       	movw	r14, r12
    37d4:	01 e0       	ldi	r16, 0x01	; 1
    37d6:	21 e0       	ldi	r18, 0x01	; 1
    37d8:	43 e0       	ldi	r20, 0x03	; 3
    37da:	50 e0       	ldi	r21, 0x00	; 0
    37dc:	60 e0       	ldi	r22, 0x00	; 0
    37de:	70 e0       	ldi	r23, 0x00	; 0
    37e0:	80 91 ce 18 	lds	r24, 0x18CE	; 0x8018ce <dataConfigurationGroup>
    37e4:	90 91 cf 18 	lds	r25, 0x18CF	; 0x8018cf <dataConfigurationGroup+0x1>
    37e8:	0e 94 3c 01 	call	0x278	; 0x278 <xEventGroupWaitBits>
		if((eventBits &(co2_bit | temperature_and_humidity_bit))==(co2_bit | temperature_and_humidity_bit)) 
    37ec:	dc 01       	movw	r26, r24
    37ee:	cb 01       	movw	r24, r22
    37f0:	83 70       	andi	r24, 0x03	; 3
    37f2:	99 27       	eor	r25, r25
    37f4:	aa 27       	eor	r26, r26
    37f6:	bb 27       	eor	r27, r27
    37f8:	03 97       	sbiw	r24, 0x03	; 3
    37fa:	a1 05       	cpc	r26, r1
    37fc:	b1 05       	cpc	r27, r1
    37fe:	31 f5       	brne	.+76     	; 0x384c <applicationTask+0xa8>
		{
			SensorDataSharePackage_setCo2_value(get_co2_data());
    3800:	a8 d0       	rcall	.+336    	; 0x3952 <get_co2_data>
    3802:	cb d2       	rcall	.+1430   	; 0x3d9a <SensorDataSharePackage_setCo2_value>
			SensorDataSharePackage_setTemperature_value(get_temperature_data());
    3804:	e3 d3       	rcall	.+1990   	; 0x3fcc <get_temperature_data>
    3806:	bf d2       	rcall	.+1406   	; 0x3d86 <SensorDataSharePackage_setTemperature_value>
			SensorDataSharePackage_setHumidity_value(get_humidity_data());
    3808:	ec d3       	rcall	.+2008   	; 0x3fe2 <get_humidity_data>
    380a:	c2 d2       	rcall	.+1412   	; 0x3d90 <SensorDataSharePackage_setHumidity_value>
    380c:	62 e0       	ldi	r22, 0x02	; 2
			payload=SensorDataSharePackage_getLoraPayload(2);
    380e:	ce 01       	movw	r24, r28
    3810:	01 96       	adiw	r24, 0x01	; 1
    3812:	c8 d2       	rcall	.+1424   	; 0x3da4 <SensorDataSharePackage_getLoraPayload>
    3814:	86 e1       	ldi	r24, 0x16	; 22
    3816:	fe 01       	movw	r30, r28
    3818:	31 96       	adiw	r30, 0x01	; 1
    381a:	a8 eb       	ldi	r26, 0xB8	; 184
    381c:	b8 e1       	ldi	r27, 0x18	; 24
    381e:	01 90       	ld	r0, Z+
    3820:	0d 92       	st	X+, r0
    3822:	8a 95       	dec	r24
    3824:	e1 f7       	brne	.-8      	; 0x381e <applicationTask+0x7a>
    3826:	0f ef       	ldi	r16, 0xFF	; 255
    3828:	1f ef       	ldi	r17, 0xFF	; 255
			xMessageBufferSend(uplinkMessageBuffer,(void*)&payload,sizeof(lora_driver_payload_t),portMAX_DELAY);
    382a:	98 01       	movw	r18, r16
    382c:	46 e1       	ldi	r20, 0x16	; 22
    382e:	50 e0       	ldi	r21, 0x00	; 0
    3830:	68 eb       	ldi	r22, 0xB8	; 184
    3832:	78 e1       	ldi	r23, 0x18	; 24
    3834:	80 91 d0 18 	lds	r24, 0x18D0	; 0x8018d0 <uplinkMessageBuffer>
    3838:	90 91 d1 18 	lds	r25, 0x18D1	; 0x8018d1 <uplinkMessageBuffer+0x1>
    383c:	0e 94 95 0a 	call	0x152a	; 0x152a <xStreamBufferSend>
    3840:	64 e4       	ldi	r22, 0x44	; 68
    3842:	77 e0       	ldi	r23, 0x07	; 7
			vTaskDelay(pdMS_TO_TICKS(30000));
    3844:	80 e0       	ldi	r24, 0x00	; 0
    3846:	90 e0       	ldi	r25, 0x00	; 0
    3848:	0e 94 3e 11 	call	0x227c	; 0x227c <vTaskDelay>
    384c:	63 e0       	ldi	r22, 0x03	; 3
    384e:	70 e0       	ldi	r23, 0x00	; 0
		}
		vTaskDelay(pdMS_TO_TICKS(50));
    3850:	80 e0       	ldi	r24, 0x00	; 0
    3852:	90 e0       	ldi	r25, 0x00	; 0
    3854:	0e 94 3e 11 	call	0x227c	; 0x227c <vTaskDelay>
    3858:	af cf       	rjmp	.-162    	; 0x37b8 <applicationTask+0x14>

0000385a <applicationTaskRun>:
    385a:	ef 92       	push	r14
	}
    385c:	ff 92       	push	r15
}

void applicationTaskRun(UBaseType_t priority)
{
    385e:	0f 93       	push	r16
	xTaskCreate(
    3860:	e1 2c       	mov	r14, r1
    3862:	f1 2c       	mov	r15, r1
    3864:	08 2f       	mov	r16, r24
    3866:	20 e0       	ldi	r18, 0x00	; 0
    3868:	30 e0       	ldi	r19, 0x00	; 0
    386a:	40 ec       	ldi	r20, 0xC0	; 192
    386c:	50 e0       	ldi	r21, 0x00	; 0
    386e:	6c e7       	ldi	r22, 0x7C	; 124
    3870:	72 e0       	ldi	r23, 0x02	; 2
    3872:	82 ed       	ldi	r24, 0xD2	; 210
    3874:	9b e1       	ldi	r25, 0x1B	; 27
    3876:	0e 94 39 0e 	call	0x1c72	; 0x1c72 <xTaskCreate>
	,  "AppTask"
	,  configMINIMAL_STACK_SIZE
	,  NULL
	,  tskIDLE_PRIORITY + priority
	,  NULL );
}
    387a:	0f 91       	pop	r16
    387c:	ff 90       	pop	r15
    387e:	ef 90       	pop	r14
    3880:	08 95       	ret

00003882 <myCo2CallBack>:
	 return co2_data;
 }

void myCo2CallBack(uint16_t* ppm) {
	
	co2_data = ppm;
    3882:	80 93 d3 18 	sts	0x18D3, r24	; 0x8018d3 <co2_data>
    3886:	90 93 d4 18 	sts	0x18D4, r25	; 0x8018d4 <co2_data+0x1>
	printf("CO2:  %i",co2_data);
    388a:	9f 93       	push	r25
    388c:	8f 93       	push	r24
    388e:	84 e8       	ldi	r24, 0x84	; 132
    3890:	92 e0       	ldi	r25, 0x02	; 2
    3892:	9f 93       	push	r25
    3894:	8f 93       	push	r24
    3896:	0e 94 7c 30 	call	0x60f8	; 0x60f8 <printf>
	xEventGroupSetBits(dataConfigurationGroup, co2_bit);
    389a:	42 e0       	ldi	r20, 0x02	; 2
    389c:	50 e0       	ldi	r21, 0x00	; 0
    389e:	60 e0       	ldi	r22, 0x00	; 0
    38a0:	70 e0       	ldi	r23, 0x00	; 0
    38a2:	80 91 ce 18 	lds	r24, 0x18CE	; 0x8018ce <dataConfigurationGroup>
    38a6:	90 91 cf 18 	lds	r25, 0x18CF	; 0x8018cf <dataConfigurationGroup+0x1>
    38aa:	0e 94 dc 01 	call	0x3b8	; 0x3b8 <xEventGroupSetBits>
	
}
    38ae:	0f 90       	pop	r0
    38b0:	0f 90       	pop	r0
    38b2:	0f 90       	pop	r0
    38b4:	0f 90       	pop	r0
    38b6:	08 95       	ret

000038b8 <Co2_init>:
 
 uint16_t co2_data;
 
 void Co2_init() {
	 
	mh_z19_initialise(ser_USART3);
    38b8:	83 e0       	ldi	r24, 0x03	; 3
    38ba:	0e 94 23 26 	call	0x4c46	; 0x4c46 <mh_z19_initialise>
	mh_z19_injectCallBack(myCo2CallBack);
    38be:	81 e4       	ldi	r24, 0x41	; 65
    38c0:	9c e1       	ldi	r25, 0x1C	; 28
    38c2:	0c 94 48 26 	jmp	0x4c90	; 0x4c90 <mh_z19_injectCallBack>
    38c6:	08 95       	ret

000038c8 <Co2_measureTask>:
 }
 
 void Co2_measureTask(void) {
 
	rc = mh_z19_takeMeassuring();
    38c8:	0e 94 4d 26 	call	0x4c9a	; 0x4c9a <mh_z19_takeMeassuring>
    38cc:	80 93 d2 18 	sts	0x18D2, r24	; 0x8018d2 <rc>
 
	if (rc != MHZ19_OK)
    38d0:	88 23       	and	r24, r24
    38d2:	41 f0       	breq	.+16     	; 0x38e4 <Co2_measureTask+0x1c>
	{
		printf("das ist kaput, scheisse");
    38d4:	8d e8       	ldi	r24, 0x8D	; 141
    38d6:	92 e0       	ldi	r25, 0x02	; 2
    38d8:	9f 93       	push	r25
    38da:	8f 93       	push	r24
    38dc:	0e 94 7c 30 	call	0x60f8	; 0x60f8 <printf>
    38e0:	0f 90       	pop	r0
    38e2:	0f 90       	pop	r0
	}
	printf("CO2 Task set  ");	
    38e4:	85 ea       	ldi	r24, 0xA5	; 165
    38e6:	92 e0       	ldi	r25, 0x02	; 2
    38e8:	9f 93       	push	r25
    38ea:	8f 93       	push	r24
    38ec:	0e 94 7c 30 	call	0x60f8	; 0x60f8 <printf>
 }
    38f0:	0f 90       	pop	r0
    38f2:	0f 90       	pop	r0
    38f4:	08 95       	ret

000038f6 <Co2_getDataFromSensorTask>:
}
 
 void Co2_getDataFromSensorTask() {
	 
	 while (1) {
		 EventBits_t sensorDataBits = xEventGroupWaitBits(measureEventGroup,co2_bit,pdTRUE,pdTRUE,portMAX_DELAY);
    38f6:	cc 24       	eor	r12, r12
    38f8:	ca 94       	dec	r12
    38fa:	dc 2c       	mov	r13, r12
    38fc:	76 01       	movw	r14, r12
    38fe:	01 e0       	ldi	r16, 0x01	; 1
    3900:	21 e0       	ldi	r18, 0x01	; 1
    3902:	42 e0       	ldi	r20, 0x02	; 2
    3904:	50 e0       	ldi	r21, 0x00	; 0
    3906:	60 e0       	ldi	r22, 0x00	; 0
    3908:	70 e0       	ldi	r23, 0x00	; 0
    390a:	80 91 b4 18 	lds	r24, 0x18B4	; 0x8018b4 <measureEventGroup>
    390e:	90 91 b5 18 	lds	r25, 0x18B5	; 0x8018b5 <measureEventGroup+0x1>
    3912:	0e 94 3c 01 	call	0x278	; 0x278 <xEventGroupWaitBits>
		 if ((sensorDataBits & co2_bit) == co2_bit) 
    3916:	61 fd       	sbrc	r22, 1
			 Co2_measureTask();
    3918:	d7 df       	rcall	.-82     	; 0x38c8 <Co2_measureTask>
			 vTaskDelay(pdMS_TO_TICKS(50));
    391a:	63 e0       	ldi	r22, 0x03	; 3
    391c:	70 e0       	ldi	r23, 0x00	; 0
    391e:	80 e0       	ldi	r24, 0x00	; 0
    3920:	90 e0       	ldi	r25, 0x00	; 0
    3922:	0e 94 3e 11 	call	0x227c	; 0x227c <vTaskDelay>
	 }
    3926:	e7 cf       	rjmp	.-50     	; 0x38f6 <Co2_getDataFromSensorTask>

00003928 <createCo2Task>:
		printf("das ist kaput, scheisse");
	}
	printf("CO2 Task set  ");	
 }
 
 void createCo2Task( UBaseType_t priority) {
    3928:	ef 92       	push	r14
    392a:	ff 92       	push	r15
    392c:	0f 93       	push	r16
    392e:	08 2f       	mov	r16, r24
	Co2_init();
    3930:	c3 df       	rcall	.-122    	; 0x38b8 <Co2_init>
	xTaskCreate(
    3932:	e1 2c       	mov	r14, r1
    3934:	f1 2c       	mov	r15, r1
    3936:	20 e0       	ldi	r18, 0x00	; 0
    3938:	30 e0       	ldi	r19, 0x00	; 0
    393a:	40 ec       	ldi	r20, 0xC0	; 192
    393c:	50 e0       	ldi	r21, 0x00	; 0
    393e:	64 eb       	ldi	r22, 0xB4	; 180
    3940:	72 e0       	ldi	r23, 0x02	; 2
    3942:	8b e7       	ldi	r24, 0x7B	; 123
    3944:	9c e1       	ldi	r25, 0x1C	; 28
    3946:	0e 94 39 0e 	call	0x1c72	; 0x1c72 <xTaskCreate>
	, configMINIMAL_STACK_SIZE
	,  NULL
	, priority
	,NULL
	);
}
    394a:	0f 91       	pop	r16
    394c:	ff 90       	pop	r15
    394e:	ef 90       	pop	r14
    3950:	08 95       	ret

00003952 <get_co2_data>:
	 }
 }
 
 uint16_t get_co2_data() {
	 return co2_data;
 }
    3952:	80 91 d3 18 	lds	r24, 0x18D3	; 0x8018d3 <co2_data>
    3956:	90 91 d4 18 	lds	r25, 0x18D4	; 0x8018d4 <co2_data+0x1>
    395a:	08 95       	ret

0000395c <initializeTemperatureAndHumiditySemaphore>:
 *  Author: Ionut / Dragos / Alexandru
 */ 
#include "../Source/headers/Initializers.h"


void initializeTemperatureAndHumiditySemaphore() {
    395c:	0f 93       	push	r16
	temperatureAndHumiditySemaphore = xSemaphoreCreateBinary();
    395e:	43 e0       	ldi	r20, 0x03	; 3
    3960:	60 e0       	ldi	r22, 0x00	; 0
    3962:	81 e0       	ldi	r24, 0x01	; 1
    3964:	0e 94 86 06 	call	0xd0c	; 0xd0c <xQueueGenericCreate>
    3968:	90 93 b7 18 	sts	0x18B7, r25	; 0x8018b7 <temperatureAndHumiditySemaphore+0x1>
    396c:	80 93 b6 18 	sts	0x18B6, r24	; 0x8018b6 <temperatureAndHumiditySemaphore>
	xSemaphoreGive(temperatureAndHumiditySemaphore);
    3970:	00 e0       	ldi	r16, 0x00	; 0
    3972:	20 e0       	ldi	r18, 0x00	; 0
    3974:	30 e0       	ldi	r19, 0x00	; 0
    3976:	a9 01       	movw	r20, r18
    3978:	60 e0       	ldi	r22, 0x00	; 0
    397a:	70 e0       	ldi	r23, 0x00	; 0
    397c:	0e 94 a9 06 	call	0xd52	; 0xd52 <xQueueGenericSend>
}
    3980:	0f 91       	pop	r16
    3982:	08 95       	ret

00003984 <initialize_mutex>:

void initialize_mutex() {
	mutex = xSemaphoreCreateMutex();
    3984:	81 e0       	ldi	r24, 0x01	; 1
    3986:	0e 94 4d 07 	call	0xe9a	; 0xe9a <xQueueCreateMutex>
    398a:	90 93 b3 18 	sts	0x18B3, r25	; 0x8018b3 <mutex+0x1>
    398e:	80 93 b2 18 	sts	0x18B2, r24	; 0x8018b2 <mutex>
    3992:	08 95       	ret

00003994 <initializeEventGroup>:
}

void initializeEventGroup() {
	dataConfigurationGroup = xEventGroupCreate();
    3994:	0e 94 29 01 	call	0x252	; 0x252 <xEventGroupCreate>
    3998:	90 93 cf 18 	sts	0x18CF, r25	; 0x8018cf <dataConfigurationGroup+0x1>
    399c:	80 93 ce 18 	sts	0x18CE, r24	; 0x8018ce <dataConfigurationGroup>
	measureEventGroup=xEventGroupCreate();
    39a0:	0e 94 29 01 	call	0x252	; 0x252 <xEventGroupCreate>
    39a4:	90 93 b5 18 	sts	0x18B5, r25	; 0x8018b5 <measureEventGroup+0x1>
    39a8:	80 93 b4 18 	sts	0x18B4, r24	; 0x8018b4 <measureEventGroup>
    39ac:	08 95       	ret

000039ae <initializeDownlinkMessageBuffer>:
}

void initializeDownlinkMessageBuffer() {
	
	uplinkMessageBuffer=xMessageBufferCreate(sizeof(lora_driver_payload_t) * 2);
    39ae:	41 e0       	ldi	r20, 0x01	; 1
    39b0:	60 e0       	ldi	r22, 0x00	; 0
    39b2:	70 e0       	ldi	r23, 0x00	; 0
    39b4:	8c e2       	ldi	r24, 0x2C	; 44
    39b6:	90 e0       	ldi	r25, 0x00	; 0
    39b8:	0e 94 33 0a 	call	0x1466	; 0x1466 <xStreamBufferGenericCreate>
    39bc:	90 93 d1 18 	sts	0x18D1, r25	; 0x8018d1 <uplinkMessageBuffer+0x1>
    39c0:	80 93 d0 18 	sts	0x18D0, r24	; 0x8018d0 <uplinkMessageBuffer>
	downlinkMessageBuffer = xMessageBufferCreate(sizeof(lora_driver_payload_t) * 2);
    39c4:	41 e0       	ldi	r20, 0x01	; 1
    39c6:	60 e0       	ldi	r22, 0x00	; 0
    39c8:	70 e0       	ldi	r23, 0x00	; 0
    39ca:	8c e2       	ldi	r24, 0x2C	; 44
    39cc:	90 e0       	ldi	r25, 0x00	; 0
    39ce:	0e 94 33 0a 	call	0x1466	; 0x1466 <xStreamBufferGenericCreate>
    39d2:	90 93 b1 18 	sts	0x18B1, r25	; 0x8018b1 <downlinkMessageBuffer+0x1>
    39d6:	80 93 b0 18 	sts	0x18B0, r24	; 0x8018b0 <downlinkMessageBuffer>
    39da:	08 95       	ret

000039dc <lora_downlink_handler_task>:
	
}


void lora_downlink_handler_task()
{
    39dc:	0f 93       	push	r16
    39de:	1f 93       	push	r17
    39e0:	cf 93       	push	r28
    39e2:	df 93       	push	r29
	
	EventBits_t temp=xMessageBufferReceive(downlinkMessageBuffer, &downlink_payload, sizeof(lora_driver_payload_t), portMAX_DELAY);
    39e4:	0f ef       	ldi	r16, 0xFF	; 255
    39e6:	1f ef       	ldi	r17, 0xFF	; 255
    39e8:	98 01       	movw	r18, r16
    39ea:	46 e1       	ldi	r20, 0x16	; 22
    39ec:	50 e0       	ldi	r21, 0x00	; 0
    39ee:	65 ed       	ldi	r22, 0xD5	; 213
    39f0:	78 e1       	ldi	r23, 0x18	; 24
    39f2:	80 91 b0 18 	lds	r24, 0x18B0	; 0x8018b0 <downlinkMessageBuffer>
    39f6:	90 91 b1 18 	lds	r25, 0x18B1	; 0x8018b1 <downlinkMessageBuffer+0x1>
    39fa:	0e 94 9e 0b 	call	0x173c	; 0x173c <xStreamBufferReceive>
	
		if(temp > 0)
    39fe:	89 2b       	or	r24, r25
    3a00:	a9 f1       	breq	.+106    	; 0x3a6c <lora_downlink_handler_task+0x90>
		{
			printf("DOWN LINK<<<<<: from port: %d with %d bytes received!",downlink_payload.portNo, downlink_payload.len); 
    3a02:	c5 ed       	ldi	r28, 0xD5	; 213
    3a04:	d8 e1       	ldi	r29, 0x18	; 24
    3a06:	99 81       	ldd	r25, Y+1	; 0x01
    3a08:	88 81       	ld	r24, Y
    3a0a:	1f 92       	push	r1
    3a0c:	9f 93       	push	r25
    3a0e:	1f 92       	push	r1
    3a10:	8f 93       	push	r24
    3a12:	8f ec       	ldi	r24, 0xCF	; 207
    3a14:	92 e0       	ldi	r25, 0x02	; 2
    3a16:	9f 93       	push	r25
    3a18:	8f 93       	push	r24
    3a1a:	0e 94 7c 30 	call	0x60f8	; 0x60f8 <printf>
		
			if (2 == downlink_payload.len)
    3a1e:	89 81       	ldd	r24, Y+1	; 0x01
    3a20:	0f 90       	pop	r0
    3a22:	0f 90       	pop	r0
    3a24:	0f 90       	pop	r0
    3a26:	0f 90       	pop	r0
    3a28:	0f 90       	pop	r0
    3a2a:	0f 90       	pop	r0
    3a2c:	82 30       	cpi	r24, 0x02	; 2
    3a2e:	c1 f4       	brne	.+48     	; 0x3a60 <lora_downlink_handler_task+0x84>
			{
				
			uint16_t minHumid = (downlink_payload.bytes[0] << 8) + downlink_payload.bytes[1];
    3a30:	fe 01       	movw	r30, r28
    3a32:	ca 81       	ldd	r28, Y+2	; 0x02
    3a34:	d0 e0       	ldi	r29, 0x00	; 0
    3a36:	dc 2f       	mov	r29, r28
    3a38:	cc 27       	eor	r28, r28
    3a3a:	83 81       	ldd	r24, Z+3	; 0x03
    3a3c:	c8 0f       	add	r28, r24
    3a3e:	d1 1d       	adc	r29, r1
			printf("Minimum Humidity  %d", minHumid);
    3a40:	df 93       	push	r29
    3a42:	cf 93       	push	r28
    3a44:	85 e0       	ldi	r24, 0x05	; 5
    3a46:	93 e0       	ldi	r25, 0x03	; 3
    3a48:	9f 93       	push	r25
    3a4a:	8f 93       	push	r24
    3a4c:	0e 94 7c 30 	call	0x60f8	; 0x60f8 <printf>
			organization_set_min_humidity(minHumid);
    3a50:	8c 2f       	mov	r24, r28
    3a52:	9d 2f       	mov	r25, r29
    3a54:	51 d1       	rcall	.+674    	; 0x3cf8 <organization_set_min_humidity>
    3a56:	0f 90       	pop	r0
    3a58:	0f 90       	pop	r0
    3a5a:	0f 90       	pop	r0
    3a5c:	0f 90       	pop	r0
    3a5e:	06 c0       	rjmp	.+12     	; 0x3a6c <lora_downlink_handler_task+0x90>
			}
			else {
				
				vTaskDelay(pdMS_TO_TICKS(15000));
    3a60:	62 ea       	ldi	r22, 0xA2	; 162
    3a62:	73 e0       	ldi	r23, 0x03	; 3
    3a64:	80 e0       	ldi	r24, 0x00	; 0
    3a66:	90 e0       	ldi	r25, 0x00	; 0
    3a68:	0e 94 3e 11 	call	0x227c	; 0x227c <vTaskDelay>
			}
		}
}
    3a6c:	df 91       	pop	r29
    3a6e:	cf 91       	pop	r28
    3a70:	1f 91       	pop	r17
    3a72:	0f 91       	pop	r16
    3a74:	08 95       	ret

00003a76 <lora_downlink_handler_run>:

void lora_downlink_handler_run() {
	
	for(;;) {
		
		lora_downlink_handler_task();
    3a76:	b2 df       	rcall	.-156    	; 0x39dc <lora_downlink_handler_task>
    3a78:	fe cf       	rjmp	.-4      	; 0x3a76 <lora_downlink_handler_run>

00003a7a <lora_downlink_handler_create>:
		}
}


void lora_downlink_handler_create(UBaseType_t lora_handler_task_priority)
{
    3a7a:	ef 92       	push	r14
    3a7c:	ff 92       	push	r15
    3a7e:	0f 93       	push	r16
		xTaskCreate(
    3a80:	20 91 b0 18 	lds	r18, 0x18B0	; 0x8018b0 <downlinkMessageBuffer>
    3a84:	30 91 b1 18 	lds	r19, 0x18B1	; 0x8018b1 <downlinkMessageBuffer+0x1>
    3a88:	e1 2c       	mov	r14, r1
    3a8a:	f1 2c       	mov	r15, r1
    3a8c:	08 2f       	mov	r16, r24
    3a8e:	40 ec       	ldi	r20, 0xC0	; 192
    3a90:	50 e0       	ldi	r21, 0x00	; 0
    3a92:	6a e1       	ldi	r22, 0x1A	; 26
    3a94:	73 e0       	ldi	r23, 0x03	; 3
    3a96:	8b e3       	ldi	r24, 0x3B	; 59
    3a98:	9d e1       	ldi	r25, 0x1D	; 29
    3a9a:	0e 94 39 0e 	call	0x1c72	; 0x1c72 <xTaskCreate>
		,"lora_downlink"
		, configMINIMAL_STACK_SIZE
		, (void*)downlinkMessageBuffer
		,lora_handler_task_priority
		, NULL );
}
    3a9e:	0f 91       	pop	r16
    3aa0:	ff 90       	pop	r15
    3aa2:	ef 90       	pop	r14
    3aa4:	08 95       	ret

00003aa6 <_lora_setup>:

lora_driver_payload_t payload;


static void _lora_setup(void)
{
    3aa6:	0f 93       	push	r16
    3aa8:	1f 93       	push	r17
    3aaa:	cf 93       	push	r28
    3aac:	df 93       	push	r29
    3aae:	cd b7       	in	r28, 0x3d	; 61
    3ab0:	de b7       	in	r29, 0x3e	; 62
    3ab2:	64 97       	sbiw	r28, 0x14	; 20
    3ab4:	0f b6       	in	r0, 0x3f	; 63
    3ab6:	f8 94       	cli
    3ab8:	de bf       	out	0x3e, r29	; 62
    3aba:	0f be       	out	0x3f, r0	; 63
    3abc:	cd bf       	out	0x3d, r28	; 61
	char _out_buf[20];
	
	lora_driver_returnCode_t rc;
	
	status_leds_slowBlink(led_ST2); // OPTIONAL: Led the green led blink slowly while we are setting up LoRa
    3abe:	81 e0       	ldi	r24, 0x01	; 1
    3ac0:	0e 94 26 2b 	call	0x564c	; 0x564c <status_leds_slowBlink>

	// Factory reset the transceiver
	printf("FactoryReset >%s<\n", lora_driver_mapReturnCodeToText(lora_driver_rn2483FactoryReset()));
    3ac4:	67 d5       	rcall	.+2766   	; 0x4594 <lora_driver_rn2483FactoryReset>
    3ac6:	e3 d7       	rcall	.+4038   	; 0x4a8e <lora_driver_mapReturnCodeToText>
    3ac8:	9f 93       	push	r25
    3aca:	8f 93       	push	r24
    3acc:	88 e2       	ldi	r24, 0x28	; 40
    3ace:	93 e0       	ldi	r25, 0x03	; 3
    3ad0:	9f 93       	push	r25
    3ad2:	8f 93       	push	r24
    3ad4:	0e 94 7c 30 	call	0x60f8	; 0x60f8 <printf>
	
	// Configure to EU868 LoRaWAN standards
	printf("Configure to EU868 >%s<\n", lora_driver_mapReturnCodeToText(lora_driver_configureToEu868()));
    3ad8:	db d6       	rcall	.+3510   	; 0x4890 <lora_driver_configureToEu868>
    3ada:	d9 d7       	rcall	.+4018   	; 0x4a8e <lora_driver_mapReturnCodeToText>
    3adc:	9f 93       	push	r25
    3ade:	8f 93       	push	r24
    3ae0:	8b e3       	ldi	r24, 0x3B	; 59
    3ae2:	93 e0       	ldi	r25, 0x03	; 3
    3ae4:	9f 93       	push	r25
    3ae6:	8f 93       	push	r24
    3ae8:	0e 94 7c 30 	call	0x60f8	; 0x60f8 <printf>
    3aec:	8e 01       	movw	r16, r28
    3aee:	0f 5f       	subi	r16, 0xFF	; 255

	// Get the transceivers HW EUI
	rc = lora_driver_getRn2483Hweui(_out_buf);
    3af0:	1f 4f       	sbci	r17, 0xFF	; 255
    3af2:	c8 01       	movw	r24, r16
    3af4:	61 d5       	rcall	.+2754   	; 0x45b8 <lora_driver_getRn2483Hweui>
    3af6:	cb d7       	rcall	.+3990   	; 0x4a8e <lora_driver_mapReturnCodeToText>
	
	printf("Get HWEUI >%s<: %s\n",lora_driver_mapReturnCodeToText(rc), _out_buf);
    3af8:	1f 93       	push	r17
    3afa:	0f 93       	push	r16
    3afc:	9f 93       	push	r25
    3afe:	8f 93       	push	r24
    3b00:	84 e5       	ldi	r24, 0x54	; 84
    3b02:	93 e0       	ldi	r25, 0x03	; 3
    3b04:	9f 93       	push	r25
    3b06:	8f 93       	push	r24
    3b08:	0e 94 7c 30 	call	0x60f8	; 0x60f8 <printf>

	// Set the HWEUI as DevEUI in the LoRaWAN software stack in the transceiver
	printf("Set DevEUI: %s >%s<\n", _out_buf, lora_driver_mapReturnCodeToText(lora_driver_setDeviceIdentifier(_out_buf)));
    3b0c:	c8 01       	movw	r24, r16
    3b0e:	70 d5       	rcall	.+2784   	; 0x45f0 <lora_driver_setDeviceIdentifier>
    3b10:	be d7       	rcall	.+3964   	; 0x4a8e <lora_driver_mapReturnCodeToText>
    3b12:	9f 93       	push	r25
    3b14:	8f 93       	push	r24
    3b16:	1f 93       	push	r17
    3b18:	0f 93       	push	r16
    3b1a:	88 e6       	ldi	r24, 0x68	; 104
    3b1c:	93 e0       	ldi	r25, 0x03	; 3
    3b1e:	9f 93       	push	r25
    3b20:	8f 93       	push	r24
    3b22:	0e 94 7c 30 	call	0x60f8	; 0x60f8 <printf>
    3b26:	a8 01       	movw	r20, r16

	// Set Over The Air Activation parameters to be ready to join the LoRaWAN
	printf("Set OTAA Identity appEUI:%s appKEY:%s devEUI:%s >%s<\n", LORA_appEUI, LORA_appKEY, _out_buf, lora_driver_mapReturnCodeToText(lora_driver_setOtaaIdentity(LORA_appEUI,LORA_appKEY,_out_buf)));
    3b28:	6d e7       	ldi	r22, 0x7D	; 125
    3b2a:	73 e0       	ldi	r23, 0x03	; 3
    3b2c:	8e e9       	ldi	r24, 0x9E	; 158
    3b2e:	93 e0       	ldi	r25, 0x03	; 3
    3b30:	8d d7       	rcall	.+3866   	; 0x4a4c <lora_driver_setOtaaIdentity>
    3b32:	ad d7       	rcall	.+3930   	; 0x4a8e <lora_driver_mapReturnCodeToText>
    3b34:	9f 93       	push	r25
    3b36:	8f 93       	push	r24
    3b38:	1f 93       	push	r17
    3b3a:	0f 93       	push	r16
    3b3c:	8d e7       	ldi	r24, 0x7D	; 125
    3b3e:	93 e0       	ldi	r25, 0x03	; 3
    3b40:	9f 93       	push	r25
    3b42:	8f 93       	push	r24
    3b44:	8e e9       	ldi	r24, 0x9E	; 158
    3b46:	93 e0       	ldi	r25, 0x03	; 3
    3b48:	9f 93       	push	r25
    3b4a:	8f 93       	push	r24
    3b4c:	8f ea       	ldi	r24, 0xAF	; 175
    3b4e:	93 e0       	ldi	r25, 0x03	; 3
    3b50:	9f 93       	push	r25
    3b52:	8f 93       	push	r24
    3b54:	0e 94 7c 30 	call	0x60f8	; 0x60f8 <printf>

	// Save all the MAC settings in the transceiver
	printf("Save mac >%s<\n",lora_driver_mapReturnCodeToText(lora_driver_saveMac()));
    3b58:	7e d5       	rcall	.+2812   	; 0x4656 <lora_driver_saveMac>
    3b5a:	99 d7       	rcall	.+3890   	; 0x4a8e <lora_driver_mapReturnCodeToText>
    3b5c:	9f 93       	push	r25
    3b5e:	8f 93       	push	r24
    3b60:	85 ee       	ldi	r24, 0xE5	; 229
    3b62:	93 e0       	ldi	r25, 0x03	; 3
    3b64:	9f 93       	push	r25
    3b66:	8f 93       	push	r24
    3b68:	0e 94 7c 30 	call	0x60f8	; 0x60f8 <printf>
    3b6c:	0f b6       	in	r0, 0x3f	; 63

	// Enable Adaptive Data Rate
	printf("Set Adaptive Data Rate: ON >%s<\n", lora_driver_mapReturnCodeToText(lora_driver_setAdaptiveDataRate(LORA_ON)));
    3b6e:	f8 94       	cli
    3b70:	de bf       	out	0x3e, r29	; 62
    3b72:	0f be       	out	0x3f, r0	; 63
    3b74:	cd bf       	out	0x3d, r28	; 61
    3b76:	81 e0       	ldi	r24, 0x01	; 1
    3b78:	68 d6       	rcall	.+3280   	; 0x484a <lora_driver_setAdaptiveDataRate>
    3b7a:	89 d7       	rcall	.+3858   	; 0x4a8e <lora_driver_mapReturnCodeToText>
    3b7c:	9f 93       	push	r25
    3b7e:	8f 93       	push	r24
    3b80:	84 ef       	ldi	r24, 0xF4	; 244
    3b82:	93 e0       	ldi	r25, 0x03	; 3
    3b84:	9f 93       	push	r25
    3b86:	8f 93       	push	r24
    3b88:	0e 94 7c 30 	call	0x60f8	; 0x60f8 <printf>

	// Set receiver window1 delay to 500 ms - this is needed if down-link messages will be used
	printf("Set Receiver Delay: %d ms >%s<\n", 500, lora_driver_mapReturnCodeToText(lora_driver_setReceiveDelay(500)));
    3b8c:	84 ef       	ldi	r24, 0xF4	; 244
    3b8e:	91 e0       	ldi	r25, 0x01	; 1
    3b90:	67 d6       	rcall	.+3278   	; 0x4860 <lora_driver_setReceiveDelay>
    3b92:	7d d7       	rcall	.+3834   	; 0x4a8e <lora_driver_mapReturnCodeToText>
    3b94:	9f 93       	push	r25
    3b96:	8f 93       	push	r24
    3b98:	81 e0       	ldi	r24, 0x01	; 1
    3b9a:	8f 93       	push	r24
    3b9c:	84 ef       	ldi	r24, 0xF4	; 244
    3b9e:	8f 93       	push	r24
    3ba0:	85 e1       	ldi	r24, 0x15	; 21
    3ba2:	94 e0       	ldi	r25, 0x04	; 4
    3ba4:	9f 93       	push	r25
    3ba6:	8f 93       	push	r24
    3ba8:	0e 94 7c 30 	call	0x60f8	; 0x60f8 <printf>
    3bac:	0f b6       	in	r0, 0x3f	; 63
    3bae:	f8 94       	cli
    3bb0:	de bf       	out	0x3e, r29	; 62
    3bb2:	0f be       	out	0x3f, r0	; 63
    3bb4:	cd bf       	out	0x3d, r28	; 61

	// Join the LoRaWAN
	uint8_t maxJoinTriesLeft = 100;
    3bb6:	14 e6       	ldi	r17, 0x64	; 100
	
	do {
		rc = lora_driver_join(LORA_OTAA);
    3bb8:	80 e0       	ldi	r24, 0x00	; 0
    3bba:	53 d5       	rcall	.+2726   	; 0x4662 <lora_driver_join>
    3bbc:	08 2f       	mov	r16, r24
    3bbe:	67 d7       	rcall	.+3790   	; 0x4a8e <lora_driver_mapReturnCodeToText>
				
		printf("Join Network TriesLeft:%d >%s<\n", maxJoinTriesLeft, lora_driver_mapReturnCodeToText(rc));
    3bc0:	9f 93       	push	r25
    3bc2:	8f 93       	push	r24
    3bc4:	1f 92       	push	r1
    3bc6:	1f 93       	push	r17
    3bc8:	85 e3       	ldi	r24, 0x35	; 53
    3bca:	94 e0       	ldi	r25, 0x04	; 4
    3bcc:	9f 93       	push	r25
    3bce:	8f 93       	push	r24
    3bd0:	0e 94 7c 30 	call	0x60f8	; 0x60f8 <printf>
    3bd4:	0f 90       	pop	r0
    3bd6:	0f 90       	pop	r0

		if ( rc != LORA_ACCEPTED)
    3bd8:	0f 90       	pop	r0
    3bda:	0f 90       	pop	r0
    3bdc:	0f 90       	pop	r0
    3bde:	0f 90       	pop	r0
    3be0:	08 30       	cpi	r16, 0x08	; 8
    3be2:	59 f0       	breq	.+22     	; 0x3bfa <_lora_setup+0x154>
    3be4:	80 e0       	ldi	r24, 0x00	; 0
    3be6:	0e 94 8a 2b 	call	0x5714	; 0x5714 <status_leds_longPuls>
		{
			// Make the red led pulse to tell something went wrong
			status_leds_longPuls(led_ST1); // OPTIONAL
    3bea:	66 e3       	ldi	r22, 0x36	; 54
    3bec:	71 e0       	ldi	r23, 0x01	; 1
			// Wait 5 sec and lets try again
			vTaskDelay(pdMS_TO_TICKS(5000UL));
    3bee:	80 e0       	ldi	r24, 0x00	; 0
    3bf0:	90 e0       	ldi	r25, 0x00	; 0
    3bf2:	0e 94 3e 11 	call	0x227c	; 0x227c <vTaskDelay>
    3bf6:	11 50       	subi	r17, 0x01	; 1
    3bf8:	f9 f6       	brne	.-66     	; 0x3bb8 <_lora_setup+0x112>
		}
		else
		{
			break;
		}
	} while (--maxJoinTriesLeft);
    3bfa:	08 30       	cpi	r16, 0x08	; 8
    3bfc:	21 f4       	brne	.+8      	; 0x3c06 <_lora_setup+0x160>

	if (rc == LORA_ACCEPTED)
    3bfe:	81 e0       	ldi	r24, 0x01	; 1
    3c00:	0e 94 6c 2b 	call	0x56d8	; 0x56d8 <status_leds_ledOn>
	{
		// Connected to LoRaWAN :-)
		// Make the green led steady
		status_leds_ledOn(led_ST2); // OPTIONAL
    3c04:	09 c0       	rjmp	.+18     	; 0x3c18 <_lora_setup+0x172>
    3c06:	81 e0       	ldi	r24, 0x01	; 1
		while (1)
		{
			taskYIELD();
		}
	}
}
    3c08:	0e 94 7b 2b 	call	0x56f6	; 0x56f6 <status_leds_ledOff>
	}
	else
	{
		// Something went wrong
		// Turn off the green led
		status_leds_ledOff(led_ST2); // OPTIONAL
    3c0c:	80 e0       	ldi	r24, 0x00	; 0
    3c0e:	0e 94 49 2b 	call	0x5692	; 0x5692 <status_leds_fastBlink>
		// Make the red led blink fast to tell something went wrong
		status_leds_fastBlink(led_ST1); // OPTIONAL
    3c12:	0e 94 91 04 	call	0x922	; 0x922 <vPortYield>

		// Lets stay here
		while (1)
		{
			taskYIELD();
    3c16:	fd cf       	rjmp	.-6      	; 0x3c12 <_lora_setup+0x16c>
    3c18:	64 96       	adiw	r28, 0x14	; 20
    3c1a:	0f b6       	in	r0, 0x3f	; 63
		}
	}
}
    3c1c:	f8 94       	cli
    3c1e:	de bf       	out	0x3e, r29	; 62
    3c20:	0f be       	out	0x3f, r0	; 63
    3c22:	cd bf       	out	0x3d, r28	; 61
    3c24:	df 91       	pop	r29
    3c26:	cf 91       	pop	r28
    3c28:	1f 91       	pop	r17
    3c2a:	0f 91       	pop	r16
    3c2c:	08 95       	ret

00003c2e <lora_handler_uplink_task>:
    3c2e:	cf 93       	push	r28
    3c30:	df 93       	push	r29

/*-----------------------------------------------------------*/
void lora_handler_uplink_task( void *pvParameters )
{
    3c32:	00 d0       	rcall	.+0      	; 0x3c34 <lora_handler_uplink_task+0x6>
    3c34:	1f 92       	push	r1
    3c36:	cd b7       	in	r28, 0x3d	; 61
    3c38:	de b7       	in	r29, 0x3e	; 62
	// Hardware reset of LoRaWAN transceiver
	lora_driver_resetRn2483(1);
    3c3a:	81 e0       	ldi	r24, 0x01	; 1
    3c3c:	9d d4       	rcall	.+2362   	; 0x4578 <lora_driver_resetRn2483>
	vTaskDelay(2);
    3c3e:	62 e0       	ldi	r22, 0x02	; 2
    3c40:	70 e0       	ldi	r23, 0x00	; 0
    3c42:	80 e0       	ldi	r24, 0x00	; 0
    3c44:	90 e0       	ldi	r25, 0x00	; 0
    3c46:	0e 94 3e 11 	call	0x227c	; 0x227c <vTaskDelay>
	lora_driver_resetRn2483(0);
    3c4a:	80 e0       	ldi	r24, 0x00	; 0
    3c4c:	95 d4       	rcall	.+2346   	; 0x4578 <lora_driver_resetRn2483>
	// Give it a chance to wakeup
	vTaskDelay(150);
    3c4e:	66 e9       	ldi	r22, 0x96	; 150
    3c50:	70 e0       	ldi	r23, 0x00	; 0
    3c52:	80 e0       	ldi	r24, 0x00	; 0
    3c54:	90 e0       	ldi	r25, 0x00	; 0
    3c56:	0e 94 3e 11 	call	0x227c	; 0x227c <vTaskDelay>

	lora_driver_flushBuffers(); // get rid of first version string from module after reset!
    3c5a:	47 d4       	rcall	.+2190   	; 0x44ea <lora_driver_flushBuffers>

	_lora_setup();
    3c5c:	24 df       	rcall	.-440    	; 0x3aa6 <_lora_setup>
    3c5e:	0e 94 c3 0e 	call	0x1d86	; 0x1d86 <xTaskGetTickCount>
	//_uplink_payload.len = 6;
	//_uplink_payload.portNo = 2;

	TickType_t xLastWakeTime;
	const TickType_t xFrequency = pdMS_TO_TICKS(3000UL); // Upload message every 5 minutes (300000 ms)
	xLastWakeTime = xTaskGetTickCount();
    3c62:	69 83       	std	Y+1, r22	; 0x01
    3c64:	7a 83       	std	Y+2, r23	; 0x02
    3c66:	8b 83       	std	Y+3, r24	; 0x03
    3c68:	9c 83       	std	Y+4, r25	; 0x04
    3c6a:	0f ef       	ldi	r16, 0xFF	; 255
	for(;;)
	{
		
		EventBits_t temp;
	
		temp=xMessageBufferReceive(uplinkMessageBuffer,(void*)&payload,sizeof(payload),portMAX_DELAY);
    3c6c:	1f ef       	ldi	r17, 0xFF	; 255
    3c6e:	98 01       	movw	r18, r16
    3c70:	46 e1       	ldi	r20, 0x16	; 22
    3c72:	50 e0       	ldi	r21, 0x00	; 0
    3c74:	68 eb       	ldi	r22, 0xB8	; 184
    3c76:	78 e1       	ldi	r23, 0x18	; 24
    3c78:	80 91 d0 18 	lds	r24, 0x18D0	; 0x8018d0 <uplinkMessageBuffer>
    3c7c:	90 91 d1 18 	lds	r25, 0x18D1	; 0x8018d1 <uplinkMessageBuffer+0x1>
    3c80:	0e 94 9e 0b 	call	0x173c	; 0x173c <xStreamBufferReceive>
    3c84:	8c 01       	movw	r16, r24
    3c86:	4a eb       	ldi	r20, 0xBA	; 186
	
		xTaskDelayUntil( &xLastWakeTime, xFrequency );
    3c88:	50 e0       	ldi	r21, 0x00	; 0
    3c8a:	60 e0       	ldi	r22, 0x00	; 0
    3c8c:	70 e0       	ldi	r23, 0x00	; 0
    3c8e:	ce 01       	movw	r24, r28
    3c90:	01 96       	adiw	r24, 0x01	; 1
    3c92:	0e 94 d9 10 	call	0x21b2	; 0x21b2 <xTaskDelayUntil>
    3c96:	01 2b       	or	r16, r17
		
		if( temp > 0 )
    3c98:	a1 f0       	breq	.+40     	; 0x3cc2 <lora_handler_uplink_task+0x94>
    3c9a:	83 e0       	ldi	r24, 0x03	; 3
		{
			status_leds_shortPuls(led_ST4);  // OPTIONAL
    3c9c:	0e 94 9c 2b 	call	0x5738	; 0x5738 <status_leds_shortPuls>
			printf("Uploaded Message ------------------>%s<\n", lora_driver_mapReturnCodeToText(lora_driver_sendUploadMessage(false, &payload)));
    3ca0:	68 eb       	ldi	r22, 0xB8	; 184
    3ca2:	78 e1       	ldi	r23, 0x18	; 24
    3ca4:	80 e0       	ldi	r24, 0x00	; 0
    3ca6:	06 d5       	rcall	.+2572   	; 0x46b4 <lora_driver_sendUploadMessage>
    3ca8:	f2 d6       	rcall	.+3556   	; 0x4a8e <lora_driver_mapReturnCodeToText>
    3caa:	9f 93       	push	r25
    3cac:	8f 93       	push	r24
    3cae:	85 e5       	ldi	r24, 0x55	; 85
    3cb0:	94 e0       	ldi	r25, 0x04	; 4
    3cb2:	9f 93       	push	r25
    3cb4:	8f 93       	push	r24
    3cb6:	0e 94 7c 30 	call	0x60f8	; 0x60f8 <printf>
    3cba:	0f 90       	pop	r0
    3cbc:	0f 90       	pop	r0
    3cbe:	0f 90       	pop	r0
    3cc0:	0f 90       	pop	r0
    3cc2:	64 e6       	ldi	r22, 0x64	; 100
		}
		vTaskDelay(100);  
    3cc4:	70 e0       	ldi	r23, 0x00	; 0
    3cc6:	80 e0       	ldi	r24, 0x00	; 0
    3cc8:	90 e0       	ldi	r25, 0x00	; 0
    3cca:	0e 94 3e 11 	call	0x227c	; 0x227c <vTaskDelay>
    3cce:	cd cf       	rjmp	.-102    	; 0x3c6a <lora_handler_uplink_task+0x3c>

00003cd0 <lora_uplink_handler_create>:
	}
    3cd0:	ef 92       	push	r14
}
void lora_uplink_handler_create(UBaseType_t lora_handler_task_priority)
{
    3cd2:	ff 92       	push	r15
    3cd4:	0f 93       	push	r16
	xTaskCreate(
    3cd6:	e1 2c       	mov	r14, r1
    3cd8:	f1 2c       	mov	r15, r1
    3cda:	08 2f       	mov	r16, r24
    3cdc:	20 e0       	ldi	r18, 0x00	; 0
    3cde:	30 e0       	ldi	r19, 0x00	; 0
    3ce0:	40 ec       	ldi	r20, 0xC0	; 192
    3ce2:	50 e0       	ldi	r21, 0x00	; 0
    3ce4:	6e e7       	ldi	r22, 0x7E	; 126
    3ce6:	74 e0       	ldi	r23, 0x04	; 4
    3ce8:	87 e1       	ldi	r24, 0x17	; 23
    3cea:	9e e1       	ldi	r25, 0x1E	; 30
    3cec:	0e 94 39 0e 	call	0x1c72	; 0x1c72 <xTaskCreate>
	"LRHandUplink"  // A name just for humans
	, configMINIMAL_STACK_SIZE  // This stack size can be checked & adjusted by reading the Stack Highwater
	, NULL
	, lora_handler_task_priority  // Priority, with 3 (configMAX_PRIORITIES - 1) being the highest, and 0 being the lowest.
	, NULL );
}
    3cf0:	0f 91       	pop	r16
    3cf2:	ff 90       	pop	r15
    3cf4:	ef 90       	pop	r14
    3cf6:	08 95       	ret

00003cf8 <organization_set_min_humidity>:

uint16_t hum_data;
extern SemaphoreHandle_t mutex;


void organization_set_min_humidity(uint16_t min_humidity_data) {
    3cf8:	0f 93       	push	r16
    3cfa:	cf 93       	push	r28
    3cfc:	df 93       	push	r29
    3cfe:	ec 01       	movw	r28, r24
	printf("set here");
    3d00:	8b e8       	ldi	r24, 0x8B	; 139
    3d02:	94 e0       	ldi	r25, 0x04	; 4
    3d04:	9f 93       	push	r25
    3d06:	8f 93       	push	r24
    3d08:	0e 94 7c 30 	call	0x60f8	; 0x60f8 <printf>
	hum_data=1;
    3d0c:	81 e0       	ldi	r24, 0x01	; 1
    3d0e:	90 e0       	ldi	r25, 0x00	; 0
    3d10:	90 93 ee 18 	sts	0x18EE, r25	; 0x8018ee <hum_data+0x1>
    3d14:	80 93 ed 18 	sts	0x18ED, r24	; 0x8018ed <hum_data>
	if (xSemaphoreTake(mutex, pdMS_TO_TICKS(200)) == pdTRUE)
    3d18:	4c e0       	ldi	r20, 0x0C	; 12
    3d1a:	50 e0       	ldi	r21, 0x00	; 0
    3d1c:	60 e0       	ldi	r22, 0x00	; 0
    3d1e:	70 e0       	ldi	r23, 0x00	; 0
    3d20:	80 91 b2 18 	lds	r24, 0x18B2	; 0x8018b2 <mutex>
    3d24:	90 91 b3 18 	lds	r25, 0x18B3	; 0x8018b3 <mutex+0x1>
    3d28:	0e 94 23 08 	call	0x1046	; 0x1046 <xQueueSemaphoreTake>
    3d2c:	0f 90       	pop	r0
    3d2e:	0f 90       	pop	r0
    3d30:	81 30       	cpi	r24, 0x01	; 1
    3d32:	c1 f4       	brne	.+48     	; 0x3d64 <organization_set_min_humidity+0x6c>
	{
		printf("set inside");
    3d34:	84 e9       	ldi	r24, 0x94	; 148
    3d36:	94 e0       	ldi	r25, 0x04	; 4
    3d38:	9f 93       	push	r25
    3d3a:	8f 93       	push	r24
    3d3c:	0e 94 7c 30 	call	0x60f8	; 0x60f8 <printf>
		hum_data = min_humidity_data;
    3d40:	d0 93 ee 18 	sts	0x18EE, r29	; 0x8018ee <hum_data+0x1>
    3d44:	c0 93 ed 18 	sts	0x18ED, r28	; 0x8018ed <hum_data>
		xSemaphoreGive(mutex);
    3d48:	00 e0       	ldi	r16, 0x00	; 0
    3d4a:	20 e0       	ldi	r18, 0x00	; 0
    3d4c:	30 e0       	ldi	r19, 0x00	; 0
    3d4e:	a9 01       	movw	r20, r18
    3d50:	60 e0       	ldi	r22, 0x00	; 0
    3d52:	70 e0       	ldi	r23, 0x00	; 0
    3d54:	80 91 b2 18 	lds	r24, 0x18B2	; 0x8018b2 <mutex>
    3d58:	90 91 b3 18 	lds	r25, 0x18B3	; 0x8018b3 <mutex+0x1>
    3d5c:	0e 94 a9 06 	call	0xd52	; 0xd52 <xQueueGenericSend>
    3d60:	0f 90       	pop	r0
    3d62:	0f 90       	pop	r0
	}
	printf("HAHHAHAHAHAHAHAH");
    3d64:	8f e9       	ldi	r24, 0x9F	; 159
    3d66:	94 e0       	ldi	r25, 0x04	; 4
    3d68:	9f 93       	push	r25
    3d6a:	8f 93       	push	r24
    3d6c:	0e 94 7c 30 	call	0x60f8	; 0x60f8 <printf>
}
    3d70:	0f 90       	pop	r0
    3d72:	0f 90       	pop	r0
    3d74:	df 91       	pop	r29
    3d76:	cf 91       	pop	r28
    3d78:	0f 91       	pop	r16
    3d7a:	08 95       	ret

00003d7c <organization_get_min_humidity>:

uint16_t organization_get_min_humidity() {
	 // the value is used to determine if the iot can get the hum from the gateway app
	return hum_data;
}
    3d7c:	80 91 ed 18 	lds	r24, 0x18ED	; 0x8018ed <hum_data>
    3d80:	90 91 ee 18 	lds	r25, 0x18EE	; 0x8018ee <hum_data+0x1>
    3d84:	08 95       	ret

00003d86 <SensorDataSharePackage_setTemperature_value>:
void SensorDataSharePackage_setCo2_value(uint16_t value) {
	co2_value = value;
}

void SensorDataSharePackage_setServo(uint8_t servo_state) {
	servo_actuator = servo_state;
    3d86:	90 93 f0 18 	sts	0x18F0, r25	; 0x8018f0 <temperature_value+0x1>
    3d8a:	80 93 ef 18 	sts	0x18EF, r24	; 0x8018ef <temperature_value>
    3d8e:	08 95       	ret

00003d90 <SensorDataSharePackage_setHumidity_value>:
    3d90:	90 93 0b 19 	sts	0x190B, r25	; 0x80190b <humidity_value+0x1>
    3d94:	80 93 0a 19 	sts	0x190A, r24	; 0x80190a <humidity_value>
    3d98:	08 95       	ret

00003d9a <SensorDataSharePackage_setCo2_value>:
    3d9a:	90 93 09 19 	sts	0x1909, r25	; 0x801909 <co2_value+0x1>
    3d9e:	80 93 08 19 	sts	0x1908, r24	; 0x801908 <co2_value>
    3da2:	08 95       	ret

00003da4 <SensorDataSharePackage_getLoraPayload>:
}

lora_driver_payload_t SensorDataSharePackage_getLoraPayload(uint8_t port_No) {
    3da4:	1f 93       	push	r17
    3da6:	cf 93       	push	r28
    3da8:	df 93       	push	r29
    3daa:	ec 01       	movw	r28, r24
    3dac:	16 2f       	mov	r17, r22
	
	
		printf( "Temperature ---> %i",temperature_value);
    3dae:	80 91 f0 18 	lds	r24, 0x18F0	; 0x8018f0 <temperature_value+0x1>
    3db2:	8f 93       	push	r24
    3db4:	80 91 ef 18 	lds	r24, 0x18EF	; 0x8018ef <temperature_value>
    3db8:	8f 93       	push	r24
    3dba:	80 eb       	ldi	r24, 0xB0	; 176
    3dbc:	94 e0       	ldi	r25, 0x04	; 4
    3dbe:	9f 93       	push	r25
    3dc0:	8f 93       	push	r24
    3dc2:	0e 94 7c 30 	call	0x60f8	; 0x60f8 <printf>
		printf("Humidity ---> %i",humidity_value);
    3dc6:	80 91 0b 19 	lds	r24, 0x190B	; 0x80190b <humidity_value+0x1>
    3dca:	8f 93       	push	r24
    3dcc:	80 91 0a 19 	lds	r24, 0x190A	; 0x80190a <humidity_value>
    3dd0:	8f 93       	push	r24
    3dd2:	84 ec       	ldi	r24, 0xC4	; 196
    3dd4:	94 e0       	ldi	r25, 0x04	; 4
    3dd6:	9f 93       	push	r25
    3dd8:	8f 93       	push	r24
    3dda:	0e 94 7c 30 	call	0x60f8	; 0x60f8 <printf>
		printf("CO2 ---> %i",co2_value);
    3dde:	80 91 09 19 	lds	r24, 0x1909	; 0x801909 <co2_value+0x1>
    3de2:	8f 93       	push	r24
    3de4:	80 91 08 19 	lds	r24, 0x1908	; 0x801908 <co2_value>
    3de8:	8f 93       	push	r24
    3dea:	85 ed       	ldi	r24, 0xD5	; 213
    3dec:	94 e0       	ldi	r25, 0x04	; 4
    3dee:	9f 93       	push	r25
    3df0:	8f 93       	push	r24
    3df2:	0e 94 7c 30 	call	0x60f8	; 0x60f8 <printf>
		
		uplink_payload.portNo = port_No;
    3df6:	e1 ef       	ldi	r30, 0xF1	; 241
    3df8:	f8 e1       	ldi	r31, 0x18	; 24
    3dfa:	10 83       	st	Z, r17
		uplink_payload.len = 6;
    3dfc:	86 e0       	ldi	r24, 0x06	; 6
    3dfe:	81 83       	std	Z+1, r24	; 0x01
		
		uplink_payload.bytes[0] =(uint8_t) (humidity_value >> 8);
    3e00:	80 91 0a 19 	lds	r24, 0x190A	; 0x80190a <humidity_value>
    3e04:	90 91 0b 19 	lds	r25, 0x190B	; 0x80190b <humidity_value+0x1>
    3e08:	92 83       	std	Z+2, r25	; 0x02
		uplink_payload.bytes[1] =(uint8_t) (humidity_value & 0xFF);
    3e0a:	83 83       	std	Z+3, r24	; 0x03
		
		uplink_payload.bytes[2] =(uint8_t) (temperature_value >> 8);
    3e0c:	80 91 ef 18 	lds	r24, 0x18EF	; 0x8018ef <temperature_value>
    3e10:	90 91 f0 18 	lds	r25, 0x18F0	; 0x8018f0 <temperature_value+0x1>
    3e14:	94 83       	std	Z+4, r25	; 0x04
		uplink_payload.bytes[3] =(uint8_t) (temperature_value & 0xFF);
    3e16:	85 83       	std	Z+5, r24	; 0x05
		
		uplink_payload.bytes[4] =(uint8_t) (co2_value >> 8);
    3e18:	80 91 08 19 	lds	r24, 0x1908	; 0x801908 <co2_value>
    3e1c:	90 91 09 19 	lds	r25, 0x1909	; 0x801909 <co2_value+0x1>
    3e20:	96 83       	std	Z+6, r25	; 0x06
		uplink_payload.bytes[5] =(uint8_t) (co2_value & 0xFF);
    3e22:	87 83       	std	Z+7, r24	; 0x07

	
	return uplink_payload;
    3e24:	86 e1       	ldi	r24, 0x16	; 22
    3e26:	de 01       	movw	r26, r28
    3e28:	01 90       	ld	r0, Z+
    3e2a:	0d 92       	st	X+, r0
    3e2c:	8a 95       	dec	r24
    3e2e:	e1 f7       	brne	.-8      	; 0x3e28 <SensorDataSharePackage_getLoraPayload+0x84>
    3e30:	8d b7       	in	r24, 0x3d	; 61
    3e32:	9e b7       	in	r25, 0x3e	; 62
    3e34:	0c 96       	adiw	r24, 0x0c	; 12
    3e36:	0f b6       	in	r0, 0x3f	; 63
    3e38:	f8 94       	cli
    3e3a:	9e bf       	out	0x3e, r25	; 62
    3e3c:	0f be       	out	0x3f, r0	; 63
    3e3e:	8d bf       	out	0x3d, r24	; 61
    3e40:	ce 01       	movw	r24, r28
    3e42:	df 91       	pop	r29
    3e44:	cf 91       	pop	r28
    3e46:	1f 91       	pop	r17
    3e48:	08 95       	ret

00003e4a <servo_TurnTask>:
void servo_TurnTask(void *pvParameters)
{	


	for (;;) {
		vTaskDelay(pdMS_TO_TICKS(6000));
    3e4a:	64 e7       	ldi	r22, 0x74	; 116
    3e4c:	71 e0       	ldi	r23, 0x01	; 1
    3e4e:	80 e0       	ldi	r24, 0x00	; 0
    3e50:	90 e0       	ldi	r25, 0x00	; 0
    3e52:	0e 94 3e 11 	call	0x227c	; 0x227c <vTaskDelay>
		uint16_t temo = organization_get_min_humidity();
    3e56:	92 df       	rcall	.-220    	; 0x3d7c <organization_get_min_humidity>
    3e58:	ec 01       	movw	r28, r24
		printf("TEMO--->>> %i",temo);
    3e5a:	df 93       	push	r29
    3e5c:	cf 93       	push	r28
    3e5e:	81 ee       	ldi	r24, 0xE1	; 225
    3e60:	94 e0       	ldi	r25, 0x04	; 4
    3e62:	9f 93       	push	r25
    3e64:	8f 93       	push	r24
    3e66:	0e 94 7c 30 	call	0x60f8	; 0x60f8 <printf>
		if (temo != 0 && temo<40)
    3e6a:	21 97       	sbiw	r28, 0x01	; 1
    3e6c:	0f 90       	pop	r0
    3e6e:	0f 90       	pop	r0
    3e70:	0f 90       	pop	r0
    3e72:	0f 90       	pop	r0
    3e74:	a7 97       	sbiw	r28, 0x27	; 39
    3e76:	48 f7       	brcc	.-46     	; 0x3e4a <servo_TurnTask>
		{
			printf("SERVO");
    3e78:	8f ee       	ldi	r24, 0xEF	; 239
    3e7a:	94 e0       	ldi	r25, 0x04	; 4
    3e7c:	9f 93       	push	r25
    3e7e:	8f 93       	push	r24
    3e80:	0e 94 7c 30 	call	0x60f8	; 0x60f8 <printf>
			{
				rc_servo_setPosition((uint8_t)0, 100);
			}
			else
			{
				rc_servo_setPosition((uint8_t)0, -100);
    3e84:	6c e9       	ldi	r22, 0x9C	; 156
    3e86:	80 e0       	ldi	r24, 0x00	; 0
    3e88:	37 d7       	rcall	.+3694   	; 0x4cf8 <rc_servo_setPosition>
    3e8a:	0f 90       	pop	r0
    3e8c:	0f 90       	pop	r0
    3e8e:	dd cf       	rjmp	.-70     	; 0x3e4a <servo_TurnTask>

00003e90 <servo_TaskRun>:
	}
}


void servo_TaskRun()
{
    3e90:	ef 92       	push	r14
    3e92:	ff 92       	push	r15
    3e94:	0f 93       	push	r16
	rc_servo_initialise();
    3e96:	48 d7       	rcall	.+3728   	; 0x4d28 <rc_servo_initialise>
	
	xTaskCreate(
    3e98:	e1 2c       	mov	r14, r1
    3e9a:	f1 2c       	mov	r15, r1
    3e9c:	03 e0       	ldi	r16, 0x03	; 3
    3e9e:	20 e0       	ldi	r18, 0x00	; 0
    3ea0:	30 e0       	ldi	r19, 0x00	; 0
    3ea2:	40 ec       	ldi	r20, 0xC0	; 192
    3ea4:	50 e0       	ldi	r21, 0x00	; 0
    3ea6:	65 ef       	ldi	r22, 0xF5	; 245
    3ea8:	74 e0       	ldi	r23, 0x04	; 4
    3eaa:	85 e2       	ldi	r24, 0x25	; 37
    3eac:	9f e1       	ldi	r25, 0x1F	; 31
    3eae:	0e 94 39 0e 	call	0x1c72	; 0x1c72 <xTaskCreate>
	, "Actuator"  // A name just for humans
	, configMINIMAL_STACK_SIZE // This stack size can be checked & adjusted by reading the Stack Highwater
	, NULL
	, 3 // Priority, with 3 (configMAX_PRIORITIES - 1) being the highest, and 0 being the lowest.
	, NULL );
}
    3eb2:	0f 91       	pop	r16
    3eb4:	ff 90       	pop	r15
    3eb6:	ef 90       	pop	r14
    3eb8:	08 95       	ret

00003eba <TempHumid_init>:
uint16_t humidity_data = 0;


void TempHumid_init()
{
	if (HIH8120_OK == hih8120_initialise())
    3eba:	7e d1       	rcall	.+764    	; 0x41b8 <hih8120_initialise>
    3ebc:	81 11       	cpse	r24, r1
    3ebe:	09 c0       	rjmp	.+18     	; 0x3ed2 <TempHumid_init+0x18>
	{
		printf("The driver for temperature and humidity is initialized"); //The driver is initialized.
    3ec0:	8e ef       	ldi	r24, 0xFE	; 254
    3ec2:	94 e0       	ldi	r25, 0x04	; 4
    3ec4:	9f 93       	push	r25
    3ec6:	8f 93       	push	r24
    3ec8:	0e 94 7c 30 	call	0x60f8	; 0x60f8 <printf>
    3ecc:	0f 90       	pop	r0
    3ece:	0f 90       	pop	r0
    3ed0:	08 95       	ret
	}
	else
	{	
		printf("The driver didn't start");
    3ed2:	85 e3       	ldi	r24, 0x35	; 53
    3ed4:	95 e0       	ldi	r25, 0x05	; 5
    3ed6:	9f 93       	push	r25
    3ed8:	8f 93       	push	r24
    3eda:	0e 94 7c 30 	call	0x60f8	; 0x60f8 <printf>
    3ede:	0f 90       	pop	r0
    3ee0:	0f 90       	pop	r0
    3ee2:	08 95       	ret

00003ee4 <TempHumid_measureTask>:

void TempHumid_measureTask(void)
{
	
	
	if (HIH8120_OK != hih8120_wakeup())
    3ee4:	81 d1       	rcall	.+770    	; 0x41e8 <hih8120_wakeup>
    3ee6:	88 23       	and	r24, r24
    3ee8:	41 f0       	breq	.+16     	; 0x3efa <TempHumid_measureTask+0x16>
	{
		printf("Temperature&humidity sensor didn't wake up retrying");	
    3eea:	8d e4       	ldi	r24, 0x4D	; 77
    3eec:	95 e0       	ldi	r25, 0x05	; 5
    3eee:	9f 93       	push	r25
    3ef0:	8f 93       	push	r24
    3ef2:	0e 94 7c 30 	call	0x60f8	; 0x60f8 <printf>
    3ef6:	0f 90       	pop	r0
    3ef8:	0f 90       	pop	r0
		
	}
	vTaskDelay(pdMS_TO_TICKS(100));
    3efa:	66 e0       	ldi	r22, 0x06	; 6
    3efc:	70 e0       	ldi	r23, 0x00	; 0
    3efe:	80 e0       	ldi	r24, 0x00	; 0
    3f00:	90 e0       	ldi	r25, 0x00	; 0
    3f02:	0e 94 3e 11 	call	0x227c	; 0x227c <vTaskDelay>
	
	if ( HIH8120_OK !=  hih8120_measure())
    3f06:	85 d1       	rcall	.+778    	; 0x4212 <hih8120_measure>
    3f08:	88 23       	and	r24, r24
    3f0a:	41 f0       	breq	.+16     	; 0x3f1c <TempHumid_measureTask+0x38>
	{
		printf("Temperature&humidity sensor could not perform measurement ");
    3f0c:	81 e8       	ldi	r24, 0x81	; 129
    3f0e:	95 e0       	ldi	r25, 0x05	; 5
    3f10:	9f 93       	push	r25
    3f12:	8f 93       	push	r24
    3f14:	0e 94 7c 30 	call	0x60f8	; 0x60f8 <printf>
    3f18:	0f 90       	pop	r0
    3f1a:	0f 90       	pop	r0
		
	}
	
	vTaskDelay(pdMS_TO_TICKS(20));
    3f1c:	61 e0       	ldi	r22, 0x01	; 1
    3f1e:	70 e0       	ldi	r23, 0x00	; 0
    3f20:	80 e0       	ldi	r24, 0x00	; 0
    3f22:	90 e0       	ldi	r25, 0x00	; 0
    3f24:	0c 94 3e 11 	jmp	0x227c	; 0x227c <vTaskDelay>
    3f28:	08 95       	ret

00003f2a <TempHumid_getDataFromSensorTask>:

void TempHumid_getDataFromSensorTask(void *pvParameters)
{
	while (1) {
		
		xEventGroupWaitBits(measureEventGroup,temperature_and_humidity_bit,pdTRUE,pdTRUE,portMAX_DELAY);
    3f2a:	cc 24       	eor	r12, r12
    3f2c:	ca 94       	dec	r12
    3f2e:	dc 2c       	mov	r13, r12
    3f30:	76 01       	movw	r14, r12
    3f32:	01 e0       	ldi	r16, 0x01	; 1
    3f34:	21 e0       	ldi	r18, 0x01	; 1
    3f36:	41 e0       	ldi	r20, 0x01	; 1
    3f38:	50 e0       	ldi	r21, 0x00	; 0
    3f3a:	60 e0       	ldi	r22, 0x00	; 0
    3f3c:	70 e0       	ldi	r23, 0x00	; 0
    3f3e:	80 91 b4 18 	lds	r24, 0x18B4	; 0x8018b4 <measureEventGroup>
    3f42:	90 91 b5 18 	lds	r25, 0x18B5	; 0x8018b5 <measureEventGroup+0x1>
    3f46:	0e 94 3c 01 	call	0x278	; 0x278 <xEventGroupWaitBits>
		
			
			TempHumid_measureTask();
    3f4a:	cc df       	rcall	.-104    	; 0x3ee4 <TempHumid_measureTask>
			temperature_data = hih8120_getTemperature_x10();
    3f4c:	ab d1       	rcall	.+854    	; 0x42a4 <hih8120_getTemperature_x10>
    3f4e:	bc 01       	movw	r22, r24
    3f50:	99 0f       	add	r25, r25
    3f52:	88 0b       	sbc	r24, r24
    3f54:	99 0b       	sbc	r25, r25
    3f56:	9f d0       	rcall	.+318    	; 0x4096 <__floatsisf>
    3f58:	60 93 7d 17 	sts	0x177D, r22	; 0x80177d <temperature_data>
    3f5c:	70 93 7e 17 	sts	0x177E, r23	; 0x80177e <temperature_data+0x1>
    3f60:	80 93 7f 17 	sts	0x177F, r24	; 0x80177f <temperature_data+0x2>
    3f64:	90 93 80 17 	sts	0x1780, r25	; 0x801780 <temperature_data+0x3>
			humidity_data = hih8120_getHumidityPercent_x10();
    3f68:	79 d1       	rcall	.+754    	; 0x425c <hih8120_getHumidityPercent_x10>
    3f6a:	90 93 7c 17 	sts	0x177C, r25	; 0x80177c <humidity_data+0x1>
    3f6e:	80 93 7b 17 	sts	0x177B, r24	; 0x80177b <humidity_data>
    3f72:	8c eb       	ldi	r24, 0xBC	; 188
			printf("Temperature and Humidity task created  ");
    3f74:	95 e0       	ldi	r25, 0x05	; 5
    3f76:	9f 93       	push	r25
    3f78:	8f 93       	push	r24
    3f7a:	0e 94 7c 30 	call	0x60f8	; 0x60f8 <printf>
    3f7e:	41 e0       	ldi	r20, 0x01	; 1
			xEventGroupSetBits(dataConfigurationGroup,temperature_and_humidity_bit);
    3f80:	50 e0       	ldi	r21, 0x00	; 0
    3f82:	60 e0       	ldi	r22, 0x00	; 0
    3f84:	70 e0       	ldi	r23, 0x00	; 0
    3f86:	80 91 ce 18 	lds	r24, 0x18CE	; 0x8018ce <dataConfigurationGroup>
    3f8a:	90 91 cf 18 	lds	r25, 0x18CF	; 0x8018cf <dataConfigurationGroup+0x1>
    3f8e:	0e 94 dc 01 	call	0x3b8	; 0x3b8 <xEventGroupSetBits>
    3f92:	60 e0       	ldi	r22, 0x00	; 0
		
		vTaskDelay(pdMS_TO_TICKS(10));
    3f94:	70 e0       	ldi	r23, 0x00	; 0
    3f96:	cb 01       	movw	r24, r22
    3f98:	0e 94 3e 11 	call	0x227c	; 0x227c <vTaskDelay>
    3f9c:	0f 90       	pop	r0
    3f9e:	0f 90       	pop	r0
    3fa0:	c4 cf       	rjmp	.-120    	; 0x3f2a <TempHumid_getDataFromSensorTask>

00003fa2 <createTempHumidTask>:
    3fa2:	ef 92       	push	r14
	}
	
	vTaskDelay(pdMS_TO_TICKS(20));
	
}
void createTempHumidTask(UBaseType_t priority) {
    3fa4:	ff 92       	push	r15
    3fa6:	0f 93       	push	r16
    3fa8:	08 2f       	mov	r16, r24
	TempHumid_init(); // in main cred
    3faa:	87 df       	rcall	.-242    	; 0x3eba <TempHumid_init>
	
	xTaskCreate (
    3fac:	e1 2c       	mov	r14, r1
    3fae:	f1 2c       	mov	r15, r1
    3fb0:	20 e0       	ldi	r18, 0x00	; 0
    3fb2:	30 e0       	ldi	r19, 0x00	; 0
    3fb4:	40 ec       	ldi	r20, 0xC0	; 192
    3fb6:	50 e0       	ldi	r21, 0x00	; 0
    3fb8:	64 ee       	ldi	r22, 0xE4	; 228
    3fba:	75 e0       	ldi	r23, 0x05	; 5
    3fbc:	85 e9       	ldi	r24, 0x95	; 149
    3fbe:	9f e1       	ldi	r25, 0x1F	; 31
    3fc0:	0e 94 39 0e 	call	0x1c72	; 0x1c72 <xTaskCreate>
	, "Get data from Sensor task"
	, configMINIMAL_STACK_SIZE
	,  NULL
	, priority
	, NULL);
}
    3fc4:	0f 91       	pop	r16
    3fc6:	ff 90       	pop	r15
    3fc8:	ef 90       	pop	r14
    3fca:	08 95       	ret

00003fcc <get_temperature_data>:
	}
}

uint16_t get_temperature_data() {
	
	return temperature_data;
    3fcc:	60 91 7d 17 	lds	r22, 0x177D	; 0x80177d <temperature_data>
    3fd0:	70 91 7e 17 	lds	r23, 0x177E	; 0x80177e <temperature_data+0x1>
    3fd4:	80 91 7f 17 	lds	r24, 0x177F	; 0x80177f <temperature_data+0x2>
    3fd8:	90 91 80 17 	lds	r25, 0x1780	; 0x801780 <temperature_data+0x3>
    3fdc:	2e d0       	rcall	.+92     	; 0x403a <__fixunssfsi>
}
    3fde:	cb 01       	movw	r24, r22
    3fe0:	08 95       	ret

00003fe2 <get_humidity_data>:

uint16_t get_humidity_data() {
	
	return humidity_data;
}
    3fe2:	80 91 7b 17 	lds	r24, 0x177B	; 0x80177b <humidity_data>
    3fe6:	90 91 7c 17 	lds	r25, 0x177C	; 0x80177c <humidity_data+0x1>
    3fea:	08 95       	ret

00003fec <taskInitializeData>:
// Prototype for LoRaWAN handler
//void lora_handler_initialise(UBaseType_t lora_handler_task_priority);

void taskInitializeData()
{
	initializeTemperatureAndHumiditySemaphore();
    3fec:	b7 dc       	rcall	.-1682   	; 0x395c <initializeTemperatureAndHumiditySemaphore>
	initializeEventGroup();
    3fee:	d2 dc       	rcall	.-1628   	; 0x3994 <initializeEventGroup>
	initializeDownlinkMessageBuffer();
    3ff0:	de dc       	rcall	.-1604   	; 0x39ae <initializeDownlinkMessageBuffer>
    3ff2:	c8 dc       	rcall	.-1648   	; 0x3984 <initialize_mutex>
	initialize_mutex();
    3ff4:	60 91 b0 18 	lds	r22, 0x18B0	; 0x8018b0 <downlinkMessageBuffer>
	lora_driver_initialise(ser_USART1, downlinkMessageBuffer);
    3ff8:	70 91 b1 18 	lds	r23, 0x18B1	; 0x8018b1 <downlinkMessageBuffer+0x1>
    3ffc:	81 e0       	ldi	r24, 0x01	; 1
    3ffe:	7c c2       	rjmp	.+1272   	; 0x44f8 <lora_driver_initialise>
    4000:	08 95       	ret

00004002 <create_tasks>:
    4002:	81 e0       	ldi	r24, 0x01	; 1
    4004:	ce df       	rcall	.-100    	; 0x3fa2 <createTempHumidTask>

/*-----------------------------------------------------------*/
void create_tasks(void)
{
	createTempHumidTask(1);
	createCo2Task(1);
    4006:	81 e0       	ldi	r24, 0x01	; 1
    4008:	8f dc       	rcall	.-1762   	; 0x3928 <createCo2Task>
	applicationTaskRun(3);
    400a:	83 e0       	ldi	r24, 0x03	; 3
    400c:	26 dc       	rcall	.-1972   	; 0x385a <applicationTaskRun>
	lora_uplink_handler_create(4);
    400e:	84 e0       	ldi	r24, 0x04	; 4
    4010:	5f de       	rcall	.-834    	; 0x3cd0 <lora_uplink_handler_create>
	lora_downlink_handler_create(5);
    4012:	85 e0       	ldi	r24, 0x05	; 5
    4014:	32 dd       	rcall	.-1436   	; 0x3a7a <lora_downlink_handler_create>
	servo_TaskRun(2);
    4016:	82 e0       	ldi	r24, 0x02	; 2
    4018:	90 e0       	ldi	r25, 0x00	; 0
    401a:	3a cf       	rjmp	.-396    	; 0x3e90 <servo_TaskRun>
    401c:	08 95       	ret

0000401e <initialiseSystem>:
    401e:	80 e0       	ldi	r24, 0x00	; 0


/*-----------------------------------------------------------*/
void initialiseSystem()
{
	stdio_initialise(ser_USART0);
    4020:	0e 94 65 2a 	call	0x54ca	; 0x54ca <stdio_initialise>
	taskInitializeData();
    4024:	e3 df       	rcall	.-58     	; 0x3fec <taskInitializeData>
	create_tasks();
    4026:	ed cf       	rjmp	.-38     	; 0x4002 <create_tasks>
    4028:	08 95       	ret

0000402a <main>:
    402a:	f9 df       	rcall	.-14     	; 0x401e <initialiseSystem>

/*-----------------------------------------------------------*/
int main(void)
{
	initialiseSystem(); // Must be done as the very first thing!!
	printf("Program Started!!\n");
    402c:	8e ef       	ldi	r24, 0xFE	; 254
    402e:	95 e0       	ldi	r25, 0x05	; 5
    4030:	0e 94 8f 30 	call	0x611e	; 0x611e <puts>
	vTaskStartScheduler(); // Initialize and run the freeRTOS scheduler. Execution should never return from here.
    4034:	0e 94 85 0e 	call	0x1d0a	; 0x1d0a <vTaskStartScheduler>
    4038:	ff cf       	rjmp	.-2      	; 0x4038 <main+0xe>

0000403a <__fixunssfsi>:
    403a:	70 d0       	rcall	.+224    	; 0x411c <__fp_splitA>
    403c:	88 f0       	brcs	.+34     	; 0x4060 <__fixunssfsi+0x26>
    403e:	9f 57       	subi	r25, 0x7F	; 127
    4040:	90 f0       	brcs	.+36     	; 0x4066 <__fixunssfsi+0x2c>
    4042:	b9 2f       	mov	r27, r25
    4044:	99 27       	eor	r25, r25
    4046:	b7 51       	subi	r27, 0x17	; 23
    4048:	a0 f0       	brcs	.+40     	; 0x4072 <__fixunssfsi+0x38>
    404a:	d1 f0       	breq	.+52     	; 0x4080 <__fixunssfsi+0x46>
    404c:	66 0f       	add	r22, r22
    404e:	77 1f       	adc	r23, r23
    4050:	88 1f       	adc	r24, r24
    4052:	99 1f       	adc	r25, r25
    4054:	1a f0       	brmi	.+6      	; 0x405c <__fixunssfsi+0x22>
    4056:	ba 95       	dec	r27
    4058:	c9 f7       	brne	.-14     	; 0x404c <__fixunssfsi+0x12>
    405a:	12 c0       	rjmp	.+36     	; 0x4080 <__fixunssfsi+0x46>
    405c:	b1 30       	cpi	r27, 0x01	; 1
    405e:	81 f0       	breq	.+32     	; 0x4080 <__fixunssfsi+0x46>
    4060:	77 d0       	rcall	.+238    	; 0x4150 <__fp_zero>
    4062:	b1 e0       	ldi	r27, 0x01	; 1
    4064:	08 95       	ret
    4066:	74 c0       	rjmp	.+232    	; 0x4150 <__fp_zero>
    4068:	67 2f       	mov	r22, r23
    406a:	78 2f       	mov	r23, r24
    406c:	88 27       	eor	r24, r24
    406e:	b8 5f       	subi	r27, 0xF8	; 248
    4070:	39 f0       	breq	.+14     	; 0x4080 <__fixunssfsi+0x46>
    4072:	b9 3f       	cpi	r27, 0xF9	; 249
    4074:	cc f3       	brlt	.-14     	; 0x4068 <__fixunssfsi+0x2e>
    4076:	86 95       	lsr	r24
    4078:	77 95       	ror	r23
    407a:	67 95       	ror	r22
    407c:	b3 95       	inc	r27
    407e:	d9 f7       	brne	.-10     	; 0x4076 <__fixunssfsi+0x3c>
    4080:	3e f4       	brtc	.+14     	; 0x4090 <__fixunssfsi+0x56>
    4082:	90 95       	com	r25
    4084:	80 95       	com	r24
    4086:	70 95       	com	r23
    4088:	61 95       	neg	r22
    408a:	7f 4f       	sbci	r23, 0xFF	; 255
    408c:	8f 4f       	sbci	r24, 0xFF	; 255
    408e:	9f 4f       	sbci	r25, 0xFF	; 255
    4090:	08 95       	ret

00004092 <__floatunsisf>:
    4092:	e8 94       	clt
    4094:	09 c0       	rjmp	.+18     	; 0x40a8 <__floatsisf+0x12>

00004096 <__floatsisf>:
    4096:	97 fb       	bst	r25, 7
    4098:	3e f4       	brtc	.+14     	; 0x40a8 <__floatsisf+0x12>
    409a:	90 95       	com	r25
    409c:	80 95       	com	r24
    409e:	70 95       	com	r23
    40a0:	61 95       	neg	r22
    40a2:	7f 4f       	sbci	r23, 0xFF	; 255
    40a4:	8f 4f       	sbci	r24, 0xFF	; 255
    40a6:	9f 4f       	sbci	r25, 0xFF	; 255
    40a8:	99 23       	and	r25, r25
    40aa:	a9 f0       	breq	.+42     	; 0x40d6 <__floatsisf+0x40>
    40ac:	f9 2f       	mov	r31, r25
    40ae:	96 e9       	ldi	r25, 0x96	; 150
    40b0:	bb 27       	eor	r27, r27
    40b2:	93 95       	inc	r25
    40b4:	f6 95       	lsr	r31
    40b6:	87 95       	ror	r24
    40b8:	77 95       	ror	r23
    40ba:	67 95       	ror	r22
    40bc:	b7 95       	ror	r27
    40be:	f1 11       	cpse	r31, r1
    40c0:	f8 cf       	rjmp	.-16     	; 0x40b2 <__floatsisf+0x1c>
    40c2:	fa f4       	brpl	.+62     	; 0x4102 <__floatsisf+0x6c>
    40c4:	bb 0f       	add	r27, r27
    40c6:	11 f4       	brne	.+4      	; 0x40cc <__floatsisf+0x36>
    40c8:	60 ff       	sbrs	r22, 0
    40ca:	1b c0       	rjmp	.+54     	; 0x4102 <__floatsisf+0x6c>
    40cc:	6f 5f       	subi	r22, 0xFF	; 255
    40ce:	7f 4f       	sbci	r23, 0xFF	; 255
    40d0:	8f 4f       	sbci	r24, 0xFF	; 255
    40d2:	9f 4f       	sbci	r25, 0xFF	; 255
    40d4:	16 c0       	rjmp	.+44     	; 0x4102 <__floatsisf+0x6c>
    40d6:	88 23       	and	r24, r24
    40d8:	11 f0       	breq	.+4      	; 0x40de <__floatsisf+0x48>
    40da:	96 e9       	ldi	r25, 0x96	; 150
    40dc:	11 c0       	rjmp	.+34     	; 0x4100 <__floatsisf+0x6a>
    40de:	77 23       	and	r23, r23
    40e0:	21 f0       	breq	.+8      	; 0x40ea <__floatsisf+0x54>
    40e2:	9e e8       	ldi	r25, 0x8E	; 142
    40e4:	87 2f       	mov	r24, r23
    40e6:	76 2f       	mov	r23, r22
    40e8:	05 c0       	rjmp	.+10     	; 0x40f4 <__floatsisf+0x5e>
    40ea:	66 23       	and	r22, r22
    40ec:	71 f0       	breq	.+28     	; 0x410a <__floatsisf+0x74>
    40ee:	96 e8       	ldi	r25, 0x86	; 134
    40f0:	86 2f       	mov	r24, r22
    40f2:	70 e0       	ldi	r23, 0x00	; 0
    40f4:	60 e0       	ldi	r22, 0x00	; 0
    40f6:	2a f0       	brmi	.+10     	; 0x4102 <__floatsisf+0x6c>
    40f8:	9a 95       	dec	r25
    40fa:	66 0f       	add	r22, r22
    40fc:	77 1f       	adc	r23, r23
    40fe:	88 1f       	adc	r24, r24
    4100:	da f7       	brpl	.-10     	; 0x40f8 <__floatsisf+0x62>
    4102:	88 0f       	add	r24, r24
    4104:	96 95       	lsr	r25
    4106:	87 95       	ror	r24
    4108:	97 f9       	bld	r25, 7
    410a:	08 95       	ret

0000410c <__fp_split3>:
    410c:	57 fd       	sbrc	r21, 7
    410e:	90 58       	subi	r25, 0x80	; 128
    4110:	44 0f       	add	r20, r20
    4112:	55 1f       	adc	r21, r21
    4114:	59 f0       	breq	.+22     	; 0x412c <__fp_splitA+0x10>
    4116:	5f 3f       	cpi	r21, 0xFF	; 255
    4118:	71 f0       	breq	.+28     	; 0x4136 <__fp_splitA+0x1a>
    411a:	47 95       	ror	r20

0000411c <__fp_splitA>:
    411c:	88 0f       	add	r24, r24
    411e:	97 fb       	bst	r25, 7
    4120:	99 1f       	adc	r25, r25
    4122:	61 f0       	breq	.+24     	; 0x413c <__fp_splitA+0x20>
    4124:	9f 3f       	cpi	r25, 0xFF	; 255
    4126:	79 f0       	breq	.+30     	; 0x4146 <__fp_splitA+0x2a>
    4128:	87 95       	ror	r24
    412a:	08 95       	ret
    412c:	12 16       	cp	r1, r18
    412e:	13 06       	cpc	r1, r19
    4130:	14 06       	cpc	r1, r20
    4132:	55 1f       	adc	r21, r21
    4134:	f2 cf       	rjmp	.-28     	; 0x411a <__fp_split3+0xe>
    4136:	46 95       	lsr	r20
    4138:	f1 df       	rcall	.-30     	; 0x411c <__fp_splitA>
    413a:	08 c0       	rjmp	.+16     	; 0x414c <__fp_splitA+0x30>
    413c:	16 16       	cp	r1, r22
    413e:	17 06       	cpc	r1, r23
    4140:	18 06       	cpc	r1, r24
    4142:	99 1f       	adc	r25, r25
    4144:	f1 cf       	rjmp	.-30     	; 0x4128 <__fp_splitA+0xc>
    4146:	86 95       	lsr	r24
    4148:	71 05       	cpc	r23, r1
    414a:	61 05       	cpc	r22, r1
    414c:	08 94       	sec
    414e:	08 95       	ret

00004150 <__fp_zero>:
    4150:	e8 94       	clt

00004152 <__fp_szero>:
    4152:	bb 27       	eor	r27, r27
    4154:	66 27       	eor	r22, r22
    4156:	77 27       	eor	r23, r23
    4158:	cb 01       	movw	r24, r22
    415a:	97 f9       	bld	r25, 7
    415c:	08 95       	ret

0000415e <_hihTwiCallback>:
    415e:	65 30       	cpi	r22, 0x05	; 5
    4160:	f1 f4       	brne	.+60     	; 0x419e <_hihTwiCallback+0x40>
    4162:	fa 01       	movw	r30, r20
    4164:	80 81       	ld	r24, Z
    4166:	8f 73       	andi	r24, 0x3F	; 63
    4168:	90 e0       	ldi	r25, 0x00	; 0
    416a:	98 2f       	mov	r25, r24
    416c:	88 27       	eor	r24, r24
    416e:	21 81       	ldd	r18, Z+1	; 0x01
    4170:	82 2b       	or	r24, r18
    4172:	90 93 0a 02 	sts	0x020A, r25	; 0x80020a <_hum+0x1>
    4176:	80 93 09 02 	sts	0x0209, r24	; 0x800209 <_hum>
    417a:	82 81       	ldd	r24, Z+2	; 0x02
    417c:	f0 e4       	ldi	r31, 0x40	; 64
    417e:	8f 9f       	mul	r24, r31
    4180:	c0 01       	movw	r24, r0
    4182:	11 24       	eor	r1, r1
    4184:	fa 01       	movw	r30, r20
    4186:	23 81       	ldd	r18, Z+3	; 0x03
    4188:	26 95       	lsr	r18
    418a:	26 95       	lsr	r18
    418c:	82 2b       	or	r24, r18
    418e:	90 93 08 02 	sts	0x0208, r25	; 0x800208 <_temp+0x1>
    4192:	80 93 07 02 	sts	0x0207, r24	; 0x800207 <_temp>
    4196:	81 e0       	ldi	r24, 0x01	; 1
    4198:	80 93 81 17 	sts	0x1781, r24	; 0x801781 <_measuringIsReady>
    419c:	08 95       	ret
    419e:	64 30       	cpi	r22, 0x04	; 4
    41a0:	51 f0       	breq	.+20     	; 0x41b6 <_hihTwiCallback+0x58>
    41a2:	80 e0       	ldi	r24, 0x00	; 0
    41a4:	90 e4       	ldi	r25, 0x40	; 64
    41a6:	90 93 08 02 	sts	0x0208, r25	; 0x800208 <_temp+0x1>
    41aa:	80 93 07 02 	sts	0x0207, r24	; 0x800207 <_temp>
    41ae:	90 93 0a 02 	sts	0x020A, r25	; 0x80020a <_hum+0x1>
    41b2:	80 93 09 02 	sts	0x0209, r24	; 0x800209 <_hum>
    41b6:	08 95       	ret

000041b8 <hih8120_initialise>:
    41b8:	0f 93       	push	r16
    41ba:	1f 93       	push	r17
    41bc:	0f ea       	ldi	r16, 0xAF	; 175
    41be:	10 e2       	ldi	r17, 0x20	; 32
    41c0:	20 e0       	ldi	r18, 0x00	; 0
    41c2:	34 e2       	ldi	r19, 0x24	; 36
    41c4:	44 ef       	ldi	r20, 0xF4	; 244
    41c6:	50 e0       	ldi	r21, 0x00	; 0
    41c8:	60 e0       	ldi	r22, 0x00	; 0
    41ca:	87 e2       	ldi	r24, 0x27	; 39
    41cc:	0e 94 be 2b 	call	0x577c	; 0x577c <twiCreate>
    41d0:	90 93 83 17 	sts	0x1783, r25	; 0x801783 <_hih8120Handler+0x1>
    41d4:	80 93 82 17 	sts	0x1782, r24	; 0x801782 <_hih8120Handler>
    41d8:	21 e0       	ldi	r18, 0x01	; 1
    41da:	89 2b       	or	r24, r25
    41dc:	09 f0       	breq	.+2      	; 0x41e0 <hih8120_initialise+0x28>
    41de:	20 e0       	ldi	r18, 0x00	; 0
    41e0:	82 2f       	mov	r24, r18
    41e2:	1f 91       	pop	r17
    41e4:	0f 91       	pop	r16
    41e6:	08 95       	ret

000041e8 <hih8120_wakeup>:
    41e8:	80 91 82 17 	lds	r24, 0x1782	; 0x801782 <_hih8120Handler>
    41ec:	90 91 83 17 	lds	r25, 0x1783	; 0x801783 <_hih8120Handler+0x1>
    41f0:	00 97       	sbiw	r24, 0x00	; 0
    41f2:	59 f0       	breq	.+22     	; 0x420a <hih8120_wakeup+0x22>
    41f4:	40 e0       	ldi	r20, 0x00	; 0
    41f6:	60 e0       	ldi	r22, 0x00	; 0
    41f8:	70 e0       	ldi	r23, 0x00	; 0
    41fa:	0e 94 0f 2c 	call	0x581e	; 0x581e <twiTransmit>
    41fe:	84 30       	cpi	r24, 0x04	; 4
    4200:	31 f4       	brne	.+12     	; 0x420e <hih8120_wakeup+0x26>
    4202:	10 92 81 17 	sts	0x1781, r1	; 0x801781 <_measuringIsReady>
    4206:	80 e0       	ldi	r24, 0x00	; 0
    4208:	08 95       	ret
    420a:	82 e0       	ldi	r24, 0x02	; 2
    420c:	08 95       	ret
    420e:	83 e0       	ldi	r24, 0x03	; 3
    4210:	08 95       	ret

00004212 <hih8120_measure>:
    4212:	80 91 82 17 	lds	r24, 0x1782	; 0x801782 <_hih8120Handler>
    4216:	90 91 83 17 	lds	r25, 0x1783	; 0x801783 <_hih8120Handler+0x1>
    421a:	00 97       	sbiw	r24, 0x00	; 0
    421c:	39 f0       	breq	.+14     	; 0x422c <hih8120_measure+0x1a>
    421e:	64 e0       	ldi	r22, 0x04	; 4
    4220:	0e 94 5b 2c 	call	0x58b6	; 0x58b6 <twiReceive>
    4224:	85 30       	cpi	r24, 0x05	; 5
    4226:	21 f0       	breq	.+8      	; 0x4230 <hih8120_measure+0x1e>
    4228:	83 e0       	ldi	r24, 0x03	; 3
    422a:	08 95       	ret
    422c:	82 e0       	ldi	r24, 0x02	; 2
    422e:	08 95       	ret
    4230:	80 e0       	ldi	r24, 0x00	; 0
    4232:	08 95       	ret

00004234 <hih8120_getHumidity>:
    4234:	60 91 09 02 	lds	r22, 0x0209	; 0x800209 <_hum>
    4238:	70 91 0a 02 	lds	r23, 0x020A	; 0x80020a <_hum+0x1>
    423c:	80 e0       	ldi	r24, 0x00	; 0
    423e:	90 e0       	ldi	r25, 0x00	; 0
    4240:	28 df       	rcall	.-432    	; 0x4092 <__floatunsisf>
    4242:	20 e0       	ldi	r18, 0x00	; 0
    4244:	30 e0       	ldi	r19, 0x00	; 0
    4246:	48 ec       	ldi	r20, 0xC8	; 200
    4248:	52 e4       	ldi	r21, 0x42	; 66
    424a:	0e 94 68 2e 	call	0x5cd0	; 0x5cd0 <__mulsf3>
    424e:	20 e0       	ldi	r18, 0x00	; 0
    4250:	38 ef       	ldi	r19, 0xF8	; 248
    4252:	4f e7       	ldi	r20, 0x7F	; 127
    4254:	56 e4       	ldi	r21, 0x46	; 70
    4256:	0c 94 ce 2d 	jmp	0x5b9c	; 0x5b9c <__divsf3>
    425a:	08 95       	ret

0000425c <hih8120_getHumidityPercent_x10>:
    425c:	eb df       	rcall	.-42     	; 0x4234 <hih8120_getHumidity>
    425e:	20 e0       	ldi	r18, 0x00	; 0
    4260:	30 e0       	ldi	r19, 0x00	; 0
    4262:	40 e2       	ldi	r20, 0x20	; 32
    4264:	51 e4       	ldi	r21, 0x41	; 65
    4266:	0e 94 68 2e 	call	0x5cd0	; 0x5cd0 <__mulsf3>
    426a:	e7 de       	rcall	.-562    	; 0x403a <__fixunssfsi>
    426c:	cb 01       	movw	r24, r22
    426e:	08 95       	ret

00004270 <hih8120_getTemperature>:
    4270:	60 91 07 02 	lds	r22, 0x0207	; 0x800207 <_temp>
    4274:	70 91 08 02 	lds	r23, 0x0208	; 0x800208 <_temp+0x1>
    4278:	80 e0       	ldi	r24, 0x00	; 0
    427a:	90 e0       	ldi	r25, 0x00	; 0
    427c:	0a df       	rcall	.-492    	; 0x4092 <__floatunsisf>
    427e:	20 e0       	ldi	r18, 0x00	; 0
    4280:	30 e0       	ldi	r19, 0x00	; 0
    4282:	45 e2       	ldi	r20, 0x25	; 37
    4284:	53 e4       	ldi	r21, 0x43	; 67
    4286:	0e 94 68 2e 	call	0x5cd0	; 0x5cd0 <__mulsf3>
    428a:	20 e0       	ldi	r18, 0x00	; 0
    428c:	38 ef       	ldi	r19, 0xF8	; 248
    428e:	4f e7       	ldi	r20, 0x7F	; 127
    4290:	56 e4       	ldi	r21, 0x46	; 70
    4292:	0e 94 ce 2d 	call	0x5b9c	; 0x5b9c <__divsf3>
    4296:	20 e0       	ldi	r18, 0x00	; 0
    4298:	30 e0       	ldi	r19, 0x00	; 0
    429a:	40 e2       	ldi	r20, 0x20	; 32
    429c:	52 e4       	ldi	r21, 0x42	; 66
    429e:	0c 94 67 2d 	jmp	0x5ace	; 0x5ace <__subsf3>
    42a2:	08 95       	ret

000042a4 <hih8120_getTemperature_x10>:
    42a4:	e5 df       	rcall	.-54     	; 0x4270 <hih8120_getTemperature>
    42a6:	20 e0       	ldi	r18, 0x00	; 0
    42a8:	30 e0       	ldi	r19, 0x00	; 0
    42aa:	40 e2       	ldi	r20, 0x20	; 32
    42ac:	51 e4       	ldi	r21, 0x41	; 65
    42ae:	0e 94 68 2e 	call	0x5cd0	; 0x5cd0 <__mulsf3>
    42b2:	0e 94 39 2e 	call	0x5c72	; 0x5c72 <__fixsfsi>
    42b6:	cb 01       	movw	r24, r22
    42b8:	08 95       	ret

000042ba <_serialCallBack>:
    42ba:	0f 93       	push	r16
    42bc:	1f 93       	push	r17
    42be:	cf 93       	push	r28
    42c0:	df 93       	push	r29
    42c2:	1f 92       	push	r1
    42c4:	1f 92       	push	r1
    42c6:	cd b7       	in	r28, 0x3d	; 61
    42c8:	de b7       	in	r29, 0x3e	; 62
    42ca:	8c 01       	movw	r16, r24
    42cc:	19 82       	std	Y+1, r1	; 0x01
    42ce:	2d c0       	rjmp	.+90     	; 0x432a <_serialCallBack+0x70>
    42d0:	e0 91 bb 17 	lds	r30, 0x17BB	; 0x8017bb <rec_buf_inp.2878>
    42d4:	ec 32       	cpi	r30, 0x2C	; 44
    42d6:	50 f4       	brcc	.+20     	; 0x42ec <_serialCallBack+0x32>
    42d8:	81 e0       	ldi	r24, 0x01	; 1
    42da:	8e 0f       	add	r24, r30
    42dc:	80 93 bb 17 	sts	0x17BB, r24	; 0x8017bb <rec_buf_inp.2878>
    42e0:	f0 e0       	ldi	r31, 0x00	; 0
    42e2:	e3 51       	subi	r30, 0x13	; 19
    42e4:	f8 4e       	sbci	r31, 0xE8	; 232
    42e6:	8a 81       	ldd	r24, Y+2	; 0x02
    42e8:	80 83       	st	Z, r24
    42ea:	02 c0       	rjmp	.+4      	; 0x42f0 <_serialCallBack+0x36>
    42ec:	10 92 bb 17 	sts	0x17BB, r1	; 0x8017bb <rec_buf_inp.2878>
    42f0:	8a 81       	ldd	r24, Y+2	; 0x02
    42f2:	8a 30       	cpi	r24, 0x0A	; 10
    42f4:	d1 f4       	brne	.+52     	; 0x432a <_serialCallBack+0x70>
    42f6:	40 91 bb 17 	lds	r20, 0x17BB	; 0x8017bb <rec_buf_inp.2878>
    42fa:	50 e0       	ldi	r21, 0x00	; 0
    42fc:	fa 01       	movw	r30, r20
    42fe:	e5 51       	subi	r30, 0x15	; 21
    4300:	f8 4e       	sbci	r31, 0xE8	; 232
    4302:	10 82       	st	Z, r1
    4304:	41 50       	subi	r20, 0x01	; 1
    4306:	51 09       	sbc	r21, r1
    4308:	9e 01       	movw	r18, r28
    430a:	2f 5f       	subi	r18, 0xFF	; 255
    430c:	3f 4f       	sbci	r19, 0xFF	; 255
    430e:	6d ee       	ldi	r22, 0xED	; 237
    4310:	77 e1       	ldi	r23, 0x17	; 23
    4312:	80 91 be 17 	lds	r24, 0x17BE	; 0x8017be <_serialReplyBufferHandle>
    4316:	90 91 bf 17 	lds	r25, 0x17BF	; 0x8017bf <_serialReplyBufferHandle+0x1>
    431a:	0e 94 5a 0b 	call	0x16b4	; 0x16b4 <xStreamBufferSendFromISR>
    431e:	89 81       	ldd	r24, Y+1	; 0x01
    4320:	81 11       	cpse	r24, r1
    4322:	0e 94 91 04 	call	0x922	; 0x922 <vPortYield>
    4326:	10 92 bb 17 	sts	0x17BB, r1	; 0x8017bb <rec_buf_inp.2878>
    432a:	be 01       	movw	r22, r28
    432c:	6e 5f       	subi	r22, 0xFE	; 254
    432e:	7f 4f       	sbci	r23, 0xFF	; 255
    4330:	c8 01       	movw	r24, r16
    4332:	35 d6       	rcall	.+3178   	; 0x4f9e <serial_getByte>
    4334:	88 23       	and	r24, r24
    4336:	61 f2       	breq	.-104    	; 0x42d0 <_serialCallBack+0x16>
    4338:	0f 90       	pop	r0
    433a:	0f 90       	pop	r0
    433c:	df 91       	pop	r29
    433e:	cf 91       	pop	r28
    4340:	1f 91       	pop	r17
    4342:	0f 91       	pop	r16
    4344:	08 95       	ret

00004346 <_uploadMessage>:
    4346:	0f 93       	push	r16
    4348:	1f 93       	push	r17
    434a:	cf 93       	push	r28
    434c:	df 93       	push	r29
    434e:	8c 01       	movw	r16, r24
    4350:	eb 01       	movw	r28, r22
    4352:	80 91 be 17 	lds	r24, 0x17BE	; 0x8017be <_serialReplyBufferHandle>
    4356:	90 91 bf 17 	lds	r25, 0x17BF	; 0x8017bf <_serialReplyBufferHandle+0x1>
    435a:	0e 94 65 0a 	call	0x14ca	; 0x14ca <xStreamBufferReset>
    435e:	b8 01       	movw	r22, r16
    4360:	84 e8       	ldi	r24, 0x84	; 132
    4362:	97 e1       	ldi	r25, 0x17	; 23
    4364:	0e 94 5d 30 	call	0x60ba	; 0x60ba <strcpy>
    4368:	20 97       	sbiw	r28, 0x00	; 0
    436a:	79 f0       	breq	.+30     	; 0x438a <_uploadMessage+0x44>
    436c:	e4 e8       	ldi	r30, 0x84	; 132
    436e:	f7 e1       	ldi	r31, 0x17	; 23
    4370:	01 90       	ld	r0, Z+
    4372:	00 20       	and	r0, r0
    4374:	e9 f7       	brne	.-6      	; 0x4370 <_uploadMessage+0x2a>
    4376:	31 97       	sbiw	r30, 0x01	; 1
    4378:	80 e2       	ldi	r24, 0x20	; 32
    437a:	90 e0       	ldi	r25, 0x00	; 0
    437c:	91 83       	std	Z+1, r25	; 0x01
    437e:	80 83       	st	Z, r24
    4380:	be 01       	movw	r22, r28
    4382:	84 e8       	ldi	r24, 0x84	; 132
    4384:	97 e1       	ldi	r25, 0x17	; 23
    4386:	0e 94 52 30 	call	0x60a4	; 0x60a4 <strcat>
    438a:	e4 e8       	ldi	r30, 0x84	; 132
    438c:	f7 e1       	ldi	r31, 0x17	; 23
    438e:	df 01       	movw	r26, r30
    4390:	0d 90       	ld	r0, X+
    4392:	00 20       	and	r0, r0
    4394:	e9 f7       	brne	.-6      	; 0x4390 <_uploadMessage+0x4a>
    4396:	11 97       	sbiw	r26, 0x01	; 1
    4398:	8d e0       	ldi	r24, 0x0D	; 13
    439a:	9a e0       	ldi	r25, 0x0A	; 10
    439c:	11 96       	adiw	r26, 0x01	; 1
    439e:	9c 93       	st	X, r25
    43a0:	8e 93       	st	-X, r24
    43a2:	12 96       	adiw	r26, 0x02	; 2
    43a4:	1c 92       	st	X, r1
    43a6:	01 90       	ld	r0, Z+
    43a8:	00 20       	and	r0, r0
    43aa:	e9 f7       	brne	.-6      	; 0x43a6 <_uploadMessage+0x60>
    43ac:	31 97       	sbiw	r30, 0x01	; 1
    43ae:	e4 58       	subi	r30, 0x84	; 132
    43b0:	f7 41       	sbci	r31, 0x17	; 23
    43b2:	ae 2f       	mov	r26, r30
    43b4:	84 e8       	ldi	r24, 0x84	; 132
    43b6:	97 e1       	ldi	r25, 0x17	; 23
    43b8:	ac 01       	movw	r20, r24
    43ba:	6a 2f       	mov	r22, r26
    43bc:	80 91 c0 17 	lds	r24, 0x17C0	; 0x8017c0 <_rn2483_serial>
    43c0:	90 91 c1 17 	lds	r25, 0x17C1	; 0x8017c1 <_rn2483_serial+0x1>
    43c4:	97 d5       	rcall	.+2862   	; 0x4ef4 <serial_sendBytes>
    43c6:	81 11       	cpse	r24, r1
    43c8:	11 c0       	rjmp	.+34     	; 0x43ec <_uploadMessage+0xa6>
    43ca:	08 e2       	ldi	r16, 0x28	; 40
    43cc:	15 e0       	ldi	r17, 0x05	; 5
    43ce:	20 e0       	ldi	r18, 0x00	; 0
    43d0:	30 e0       	ldi	r19, 0x00	; 0
    43d2:	4d e2       	ldi	r20, 0x2D	; 45
    43d4:	50 e0       	ldi	r21, 0x00	; 0
    43d6:	67 e4       	ldi	r22, 0x47	; 71
    43d8:	78 e1       	ldi	r23, 0x18	; 24
    43da:	80 91 be 17 	lds	r24, 0x17BE	; 0x8017be <_serialReplyBufferHandle>
    43de:	90 91 bf 17 	lds	r25, 0x17BF	; 0x8017bf <_serialReplyBufferHandle+0x1>
    43e2:	0e 94 9e 0b 	call	0x173c	; 0x173c <xStreamBufferReceive>
    43e6:	87 e4       	ldi	r24, 0x47	; 71
    43e8:	98 e1       	ldi	r25, 0x18	; 24
    43ea:	02 c0       	rjmp	.+4      	; 0x43f0 <_uploadMessage+0xaa>
    43ec:	80 e0       	ldi	r24, 0x00	; 0
    43ee:	90 e0       	ldi	r25, 0x00	; 0
    43f0:	df 91       	pop	r29
    43f2:	cf 91       	pop	r28
    43f4:	1f 91       	pop	r17
    43f6:	0f 91       	pop	r16
    43f8:	08 95       	ret

000043fa <_reply2ReturnCode>:
    43fa:	2f 92       	push	r2
    43fc:	3f 92       	push	r3
    43fe:	4f 92       	push	r4
    4400:	5f 92       	push	r5
    4402:	6f 92       	push	r6
    4404:	7f 92       	push	r7
    4406:	8f 92       	push	r8
    4408:	9f 92       	push	r9
    440a:	af 92       	push	r10
    440c:	bf 92       	push	r11
    440e:	cf 92       	push	r12
    4410:	df 92       	push	r13
    4412:	ef 92       	push	r14
    4414:	ff 92       	push	r15
    4416:	0f 93       	push	r16
    4418:	1f 93       	push	r17
    441a:	cf 93       	push	r28
    441c:	df 93       	push	r29
    441e:	5c 01       	movw	r10, r24
    4420:	fc 01       	movw	r30, r24
    4422:	01 90       	ld	r0, Z+
    4424:	00 20       	and	r0, r0
    4426:	e9 f7       	brne	.-6      	; 0x4422 <_reply2ReturnCode+0x28>
    4428:	31 97       	sbiw	r30, 0x01	; 1
    442a:	6f 01       	movw	r12, r30
    442c:	c8 1a       	sub	r12, r24
    442e:	d9 0a       	sbc	r13, r25
    4430:	5c 2c       	mov	r5, r12
    4432:	0f 2e       	mov	r0, r31
    4434:	f9 ea       	ldi	r31, 0xA9	; 169
    4436:	8f 2e       	mov	r8, r31
    4438:	f8 e0       	ldi	r31, 0x08	; 8
    443a:	9f 2e       	mov	r9, r31
    443c:	f0 2d       	mov	r31, r0
    443e:	e1 2c       	mov	r14, r1
    4440:	f1 2c       	mov	r15, r1
    4442:	4c 2c       	mov	r4, r12
    4444:	37 01       	movw	r6, r14
    4446:	f4 01       	movw	r30, r8
    4448:	01 81       	ldd	r16, Z+1	; 0x01
    444a:	12 81       	ldd	r17, Z+2	; 0x02
    444c:	e8 01       	movw	r28, r16
    444e:	09 90       	ld	r0, Y+
    4450:	00 20       	and	r0, r0
    4452:	e9 f7       	brne	.-6      	; 0x444e <_reply2ReturnCode+0x54>
    4454:	21 97       	sbiw	r28, 0x01	; 1
    4456:	c0 1b       	sub	r28, r16
    4458:	d1 0b       	sbc	r29, r17
    445a:	3c 2e       	mov	r3, r28
    445c:	f9 e0       	ldi	r31, 0x09	; 9
    445e:	cf 16       	cp	r12, r31
    4460:	d1 04       	cpc	r13, r1
    4462:	58 f0       	brcs	.+22     	; 0x447a <_reply2ReturnCode+0x80>
    4464:	f4 01       	movw	r30, r8
    4466:	20 80       	ld	r2, Z
    4468:	fe e0       	ldi	r31, 0x0E	; 14
    446a:	2f 12       	cpse	r2, r31
    446c:	06 c0       	rjmp	.+12     	; 0x447a <_reply2ReturnCode+0x80>
    446e:	b8 01       	movw	r22, r16
    4470:	c5 01       	movw	r24, r10
    4472:	0e 94 2d 30 	call	0x605a	; 0x605a <strcasestr>
    4476:	89 2b       	or	r24, r25
    4478:	09 f5       	brne	.+66     	; 0x44bc <_reply2ReturnCode+0xc2>
    447a:	44 2d       	mov	r20, r4
    447c:	35 14       	cp	r3, r5
    447e:	08 f4       	brcc	.+2      	; 0x4482 <_reply2ReturnCode+0x88>
    4480:	4c 2f       	mov	r20, r28
    4482:	50 e0       	ldi	r21, 0x00	; 0
    4484:	b8 01       	movw	r22, r16
    4486:	c5 01       	movw	r24, r10
    4488:	0e 94 64 30 	call	0x60c8	; 0x60c8 <strncasecmp>
    448c:	89 2b       	or	r24, r25
    448e:	49 f4       	brne	.+18     	; 0x44a2 <_reply2ReturnCode+0xa8>
    4490:	f3 01       	movw	r30, r6
    4492:	ee 0f       	add	r30, r30
    4494:	ff 1f       	adc	r31, r31
    4496:	e6 0d       	add	r30, r6
    4498:	f7 1d       	adc	r31, r7
    449a:	e7 55       	subi	r30, 0x57	; 87
    449c:	f7 4f       	sbci	r31, 0xF7	; 247
    449e:	20 80       	ld	r2, Z
    44a0:	0d c0       	rjmp	.+26     	; 0x44bc <_reply2ReturnCode+0xc2>
    44a2:	8f ef       	ldi	r24, 0xFF	; 255
    44a4:	e8 1a       	sub	r14, r24
    44a6:	f8 0a       	sbc	r15, r24
    44a8:	e3 e0       	ldi	r30, 0x03	; 3
    44aa:	8e 0e       	add	r8, r30
    44ac:	91 1c       	adc	r9, r1
    44ae:	f1 e1       	ldi	r31, 0x11	; 17
    44b0:	ef 16       	cp	r14, r31
    44b2:	f1 04       	cpc	r15, r1
    44b4:	39 f6       	brne	.-114    	; 0x4444 <_reply2ReturnCode+0x4a>
    44b6:	68 94       	set
    44b8:	22 24       	eor	r2, r2
    44ba:	24 f8       	bld	r2, 4
    44bc:	82 2d       	mov	r24, r2
    44be:	df 91       	pop	r29
    44c0:	cf 91       	pop	r28
    44c2:	1f 91       	pop	r17
    44c4:	0f 91       	pop	r16
    44c6:	ff 90       	pop	r15
    44c8:	ef 90       	pop	r14
    44ca:	df 90       	pop	r13
    44cc:	cf 90       	pop	r12
    44ce:	bf 90       	pop	r11
    44d0:	af 90       	pop	r10
    44d2:	9f 90       	pop	r9
    44d4:	8f 90       	pop	r8
    44d6:	7f 90       	pop	r7
    44d8:	6f 90       	pop	r6
    44da:	5f 90       	pop	r5
    44dc:	4f 90       	pop	r4
    44de:	3f 90       	pop	r3
    44e0:	2f 90       	pop	r2
    44e2:	08 95       	ret

000044e4 <_uploadMessageRc>:
    44e4:	30 df       	rcall	.-416    	; 0x4346 <_uploadMessage>
    44e6:	89 cf       	rjmp	.-238    	; 0x43fa <_reply2ReturnCode>
    44e8:	08 95       	ret

000044ea <lora_driver_flushBuffers>:
    44ea:	80 91 be 17 	lds	r24, 0x17BE	; 0x8017be <_serialReplyBufferHandle>
    44ee:	90 91 bf 17 	lds	r25, 0x17BF	; 0x8017bf <_serialReplyBufferHandle+0x1>
    44f2:	0c 94 65 0a 	jmp	0x14ca	; 0x14ca <xStreamBufferReset>
    44f6:	08 95       	ret

000044f8 <lora_driver_initialise>:
    44f8:	8f 92       	push	r8
    44fa:	9f 92       	push	r9
    44fc:	af 92       	push	r10
    44fe:	cf 92       	push	r12
    4500:	ef 92       	push	r14
    4502:	0f 93       	push	r16
    4504:	1f 93       	push	r17
    4506:	cf 93       	push	r28
    4508:	c8 2f       	mov	r28, r24
    450a:	8b 01       	movw	r16, r22
    450c:	41 e0       	ldi	r20, 0x01	; 1
    450e:	60 e0       	ldi	r22, 0x00	; 0
    4510:	70 e0       	ldi	r23, 0x00	; 0
    4512:	88 ec       	ldi	r24, 0xC8	; 200
    4514:	90 e0       	ldi	r25, 0x00	; 0
    4516:	0e 94 33 0a 	call	0x1466	; 0x1466 <xStreamBufferGenericCreate>
    451a:	90 93 bf 17 	sts	0x17BF, r25	; 0x8017bf <_serialReplyBufferHandle+0x1>
    451e:	80 93 be 17 	sts	0x17BE, r24	; 0x8017be <_serialReplyBufferHandle>
    4522:	10 93 bd 17 	sts	0x17BD, r17	; 0x8017bd <_downlinkMessageBuffer+0x1>
    4526:	00 93 bc 17 	sts	0x17BC, r16	; 0x8017bc <_downlinkMessageBuffer>
    452a:	0f 2e       	mov	r0, r31
    452c:	fd e5       	ldi	r31, 0x5D	; 93
    452e:	8f 2e       	mov	r8, r31
    4530:	f1 e2       	ldi	r31, 0x21	; 33
    4532:	9f 2e       	mov	r9, r31
    4534:	f0 2d       	mov	r31, r0
    4536:	68 94       	set
    4538:	aa 24       	eor	r10, r10
    453a:	a6 f8       	bld	r10, 6
    453c:	68 94       	set
    453e:	cc 24       	eor	r12, r12
    4540:	c6 f8       	bld	r12, 6
    4542:	e1 2c       	mov	r14, r1
    4544:	00 e0       	ldi	r16, 0x00	; 0
    4546:	23 e0       	ldi	r18, 0x03	; 3
    4548:	40 e0       	ldi	r20, 0x00	; 0
    454a:	51 ee       	ldi	r21, 0xE1	; 225
    454c:	60 e0       	ldi	r22, 0x00	; 0
    454e:	70 e0       	ldi	r23, 0x00	; 0
    4550:	8c 2f       	mov	r24, r28
    4552:	06 d4       	rcall	.+2060   	; 0x4d60 <serial_create>
    4554:	90 93 c1 17 	sts	0x17C1, r25	; 0x8017c1 <_rn2483_serial+0x1>
    4558:	80 93 c0 17 	sts	0x17C0, r24	; 0x8017c0 <_rn2483_serial>
    455c:	e7 e0       	ldi	r30, 0x07	; 7
    455e:	f1 e0       	ldi	r31, 0x01	; 1
    4560:	80 81       	ld	r24, Z
    4562:	80 61       	ori	r24, 0x10	; 16
    4564:	80 83       	st	Z, r24
    4566:	cf 91       	pop	r28
    4568:	1f 91       	pop	r17
    456a:	0f 91       	pop	r16
    456c:	ef 90       	pop	r14
    456e:	cf 90       	pop	r12
    4570:	af 90       	pop	r10
    4572:	9f 90       	pop	r9
    4574:	8f 90       	pop	r8
    4576:	08 95       	ret

00004578 <lora_driver_resetRn2483>:
    4578:	88 23       	and	r24, r24
    457a:	31 f0       	breq	.+12     	; 0x4588 <lora_driver_resetRn2483+0x10>
    457c:	e8 e0       	ldi	r30, 0x08	; 8
    457e:	f1 e0       	ldi	r31, 0x01	; 1
    4580:	80 81       	ld	r24, Z
    4582:	8f 7e       	andi	r24, 0xEF	; 239
    4584:	80 83       	st	Z, r24
    4586:	08 95       	ret
    4588:	e8 e0       	ldi	r30, 0x08	; 8
    458a:	f1 e0       	ldi	r31, 0x01	; 1
    458c:	80 81       	ld	r24, Z
    458e:	80 61       	ori	r24, 0x10	; 16
    4590:	80 83       	st	Z, r24
    4592:	08 95       	ret

00004594 <lora_driver_rn2483FactoryReset>:
    4594:	60 e0       	ldi	r22, 0x00	; 0
    4596:	70 e0       	ldi	r23, 0x00	; 0
    4598:	8f e2       	ldi	r24, 0x2F	; 47
    459a:	96 e0       	ldi	r25, 0x06	; 6
    459c:	d4 de       	rcall	.-600    	; 0x4346 <_uploadMessage>
    459e:	e7 e4       	ldi	r30, 0x47	; 71
    45a0:	f8 e1       	ldi	r31, 0x18	; 24
    45a2:	01 90       	ld	r0, Z+
    45a4:	00 20       	and	r0, r0
    45a6:	e9 f7       	brne	.-6      	; 0x45a2 <lora_driver_rn2483FactoryReset+0xe>
    45a8:	31 97       	sbiw	r30, 0x01	; 1
    45aa:	e7 54       	subi	r30, 0x47	; 71
    45ac:	f8 41       	sbci	r31, 0x18	; 24
    45ae:	81 e0       	ldi	r24, 0x01	; 1
    45b0:	75 97       	sbiw	r30, 0x15	; 21
    45b2:	08 f0       	brcs	.+2      	; 0x45b6 <lora_driver_rn2483FactoryReset+0x22>
    45b4:	80 e0       	ldi	r24, 0x00	; 0
    45b6:	08 95       	ret

000045b8 <lora_driver_getRn2483Hweui>:
    45b8:	cf 93       	push	r28
    45ba:	df 93       	push	r29
    45bc:	ec 01       	movw	r28, r24
    45be:	60 e0       	ldi	r22, 0x00	; 0
    45c0:	70 e0       	ldi	r23, 0x00	; 0
    45c2:	80 e4       	ldi	r24, 0x40	; 64
    45c4:	96 e0       	ldi	r25, 0x06	; 6
    45c6:	bf de       	rcall	.-642    	; 0x4346 <_uploadMessage>
    45c8:	e7 e4       	ldi	r30, 0x47	; 71
    45ca:	f8 e1       	ldi	r31, 0x18	; 24
    45cc:	01 90       	ld	r0, Z+
    45ce:	00 20       	and	r0, r0
    45d0:	e9 f7       	brne	.-6      	; 0x45cc <lora_driver_getRn2483Hweui+0x14>
    45d2:	e8 55       	subi	r30, 0x58	; 88
    45d4:	f8 41       	sbci	r31, 0x18	; 24
    45d6:	39 f4       	brne	.+14     	; 0x45e6 <lora_driver_getRn2483Hweui+0x2e>
    45d8:	67 e4       	ldi	r22, 0x47	; 71
    45da:	78 e1       	ldi	r23, 0x18	; 24
    45dc:	ce 01       	movw	r24, r28
    45de:	0e 94 5d 30 	call	0x60ba	; 0x60ba <strcpy>
    45e2:	80 e0       	ldi	r24, 0x00	; 0
    45e4:	02 c0       	rjmp	.+4      	; 0x45ea <lora_driver_getRn2483Hweui+0x32>
    45e6:	18 82       	st	Y, r1
    45e8:	81 e0       	ldi	r24, 0x01	; 1
    45ea:	df 91       	pop	r29
    45ec:	cf 91       	pop	r28
    45ee:	08 95       	ret

000045f0 <lora_driver_setDeviceIdentifier>:
    45f0:	fc 01       	movw	r30, r24
    45f2:	01 90       	ld	r0, Z+
    45f4:	00 20       	and	r0, r0
    45f6:	e9 f7       	brne	.-6      	; 0x45f2 <lora_driver_setDeviceIdentifier+0x2>
    45f8:	9f 01       	movw	r18, r30
    45fa:	21 51       	subi	r18, 0x11	; 17
    45fc:	31 09       	sbc	r19, r1
    45fe:	28 17       	cp	r18, r24
    4600:	39 07       	cpc	r19, r25
    4602:	29 f4       	brne	.+10     	; 0x460e <lora_driver_setDeviceIdentifier+0x1e>
    4604:	bc 01       	movw	r22, r24
    4606:	8e e6       	ldi	r24, 0x6E	; 110
    4608:	96 e0       	ldi	r25, 0x06	; 6
    460a:	6c cf       	rjmp	.-296    	; 0x44e4 <_uploadMessageRc>
    460c:	08 95       	ret
    460e:	89 e0       	ldi	r24, 0x09	; 9
    4610:	08 95       	ret

00004612 <lora_driver_setApplicationIdentifier>:
    4612:	fc 01       	movw	r30, r24
    4614:	01 90       	ld	r0, Z+
    4616:	00 20       	and	r0, r0
    4618:	e9 f7       	brne	.-6      	; 0x4614 <lora_driver_setApplicationIdentifier+0x2>
    461a:	9f 01       	movw	r18, r30
    461c:	21 51       	subi	r18, 0x11	; 17
    461e:	31 09       	sbc	r19, r1
    4620:	28 17       	cp	r18, r24
    4622:	39 07       	cpc	r19, r25
    4624:	29 f4       	brne	.+10     	; 0x4630 <lora_driver_setApplicationIdentifier+0x1e>
    4626:	bc 01       	movw	r22, r24
    4628:	8d e7       	ldi	r24, 0x7D	; 125
    462a:	96 e0       	ldi	r25, 0x06	; 6
    462c:	5b cf       	rjmp	.-330    	; 0x44e4 <_uploadMessageRc>
    462e:	08 95       	ret
    4630:	89 e0       	ldi	r24, 0x09	; 9
    4632:	08 95       	ret

00004634 <lora_driver_setApplicationKey>:
    4634:	fc 01       	movw	r30, r24
    4636:	01 90       	ld	r0, Z+
    4638:	00 20       	and	r0, r0
    463a:	e9 f7       	brne	.-6      	; 0x4636 <lora_driver_setApplicationKey+0x2>
    463c:	9f 01       	movw	r18, r30
    463e:	21 52       	subi	r18, 0x21	; 33
    4640:	31 09       	sbc	r19, r1
    4642:	28 17       	cp	r18, r24
    4644:	39 07       	cpc	r19, r25
    4646:	29 f4       	brne	.+10     	; 0x4652 <lora_driver_setApplicationKey+0x1e>
    4648:	bc 01       	movw	r22, r24
    464a:	8c e8       	ldi	r24, 0x8C	; 140
    464c:	96 e0       	ldi	r25, 0x06	; 6
    464e:	4a cf       	rjmp	.-364    	; 0x44e4 <_uploadMessageRc>
    4650:	08 95       	ret
    4652:	89 e0       	ldi	r24, 0x09	; 9
    4654:	08 95       	ret

00004656 <lora_driver_saveMac>:
    4656:	60 e0       	ldi	r22, 0x00	; 0
    4658:	70 e0       	ldi	r23, 0x00	; 0
    465a:	8b ec       	ldi	r24, 0xCB	; 203
    465c:	96 e0       	ldi	r25, 0x06	; 6
    465e:	42 cf       	rjmp	.-380    	; 0x44e4 <_uploadMessageRc>
    4660:	08 95       	ret

00004662 <lora_driver_join>:
    4662:	0f 93       	push	r16
    4664:	1f 93       	push	r17
    4666:	e8 2f       	mov	r30, r24
    4668:	f0 e0       	ldi	r31, 0x00	; 0
    466a:	ee 0f       	add	r30, r30
    466c:	ff 1f       	adc	r31, r31
    466e:	eb 55       	subi	r30, 0x5B	; 91
    4670:	f7 4f       	sbci	r31, 0xF7	; 247
    4672:	60 81       	ld	r22, Z
    4674:	71 81       	ldd	r23, Z+1	; 0x01
    4676:	84 ed       	ldi	r24, 0xD4	; 212
    4678:	96 e0       	ldi	r25, 0x06	; 6
    467a:	34 df       	rcall	.-408    	; 0x44e4 <_uploadMessageRc>
    467c:	81 11       	cpse	r24, r1
    467e:	14 c0       	rjmp	.+40     	; 0x46a8 <lora_driver_join+0x46>
    4680:	08 e2       	ldi	r16, 0x28	; 40
    4682:	15 e0       	ldi	r17, 0x05	; 5
    4684:	20 e0       	ldi	r18, 0x00	; 0
    4686:	30 e0       	ldi	r19, 0x00	; 0
    4688:	4d e2       	ldi	r20, 0x2D	; 45
    468a:	50 e0       	ldi	r21, 0x00	; 0
    468c:	67 e4       	ldi	r22, 0x47	; 71
    468e:	78 e1       	ldi	r23, 0x18	; 24
    4690:	80 91 be 17 	lds	r24, 0x17BE	; 0x8017be <_serialReplyBufferHandle>
    4694:	90 91 bf 17 	lds	r25, 0x17BF	; 0x8017bf <_serialReplyBufferHandle+0x1>
    4698:	0e 94 9e 0b 	call	0x173c	; 0x173c <xStreamBufferReceive>
    469c:	88 23       	and	r24, r24
    469e:	21 f0       	breq	.+8      	; 0x46a8 <lora_driver_join+0x46>
    46a0:	87 e4       	ldi	r24, 0x47	; 71
    46a2:	98 e1       	ldi	r25, 0x18	; 24
    46a4:	aa de       	rcall	.-684    	; 0x43fa <_reply2ReturnCode>
    46a6:	03 c0       	rjmp	.+6      	; 0x46ae <lora_driver_join+0x4c>
    46a8:	87 e4       	ldi	r24, 0x47	; 71
    46aa:	98 e1       	ldi	r25, 0x18	; 24
    46ac:	a6 de       	rcall	.-692    	; 0x43fa <_reply2ReturnCode>
    46ae:	1f 91       	pop	r17
    46b0:	0f 91       	pop	r16
    46b2:	08 95       	ret

000046b4 <lora_driver_sendUploadMessage>:
    46b4:	0f 93       	push	r16
    46b6:	1f 93       	push	r17
    46b8:	cf 93       	push	r28
    46ba:	df 93       	push	r29
    46bc:	1f 92       	push	r1
    46be:	cd b7       	in	r28, 0x3d	; 61
    46c0:	de b7       	in	r29, 0x3e	; 62
    46c2:	db 01       	movw	r26, r22
    46c4:	11 96       	adiw	r26, 0x01	; 1
    46c6:	9c 91       	ld	r25, X
    46c8:	11 97       	sbiw	r26, 0x01	; 1
    46ca:	95 31       	cpi	r25, 0x15	; 21
    46cc:	08 f0       	brcs	.+2      	; 0x46d0 <lora_driver_sendUploadMessage+0x1c>
    46ce:	b4 c0       	rjmp	.+360    	; 0x4838 <lora_driver_sendUploadMessage+0x184>
    46d0:	99 23       	and	r25, r25
    46d2:	81 f1       	breq	.+96     	; 0x4734 <lora_driver_sendUploadMessage+0x80>
    46d4:	60 e0       	ldi	r22, 0x00	; 0
    46d6:	70 e0       	ldi	r23, 0x00	; 0
    46d8:	27 2f       	mov	r18, r23
    46da:	30 e0       	ldi	r19, 0x00	; 0
    46dc:	46 2f       	mov	r20, r22
    46de:	50 e0       	ldi	r21, 0x00	; 0
    46e0:	fd 01       	movw	r30, r26
    46e2:	e4 0f       	add	r30, r20
    46e4:	f5 1f       	adc	r31, r21
    46e6:	92 81       	ldd	r25, Z+2	; 0x02
    46e8:	92 95       	swap	r25
    46ea:	9f 70       	andi	r25, 0x0F	; 15
    46ec:	9a 30       	cpi	r25, 0x0A	; 10
    46ee:	10 f0       	brcs	.+4      	; 0x46f4 <lora_driver_sendUploadMessage+0x40>
    46f0:	99 5c       	subi	r25, 0xC9	; 201
    46f2:	01 c0       	rjmp	.+2      	; 0x46f6 <lora_driver_sendUploadMessage+0x42>
    46f4:	90 5d       	subi	r25, 0xD0	; 208
    46f6:	f9 01       	movw	r30, r18
    46f8:	e8 52       	subi	r30, 0x28	; 40
    46fa:	f8 4e       	sbci	r31, 0xE8	; 232
    46fc:	90 83       	st	Z, r25
    46fe:	2f 5f       	subi	r18, 0xFF	; 255
    4700:	3f 4f       	sbci	r19, 0xFF	; 255
    4702:	fd 01       	movw	r30, r26
    4704:	e4 0f       	add	r30, r20
    4706:	f5 1f       	adc	r31, r21
    4708:	92 81       	ldd	r25, Z+2	; 0x02
    470a:	9f 70       	andi	r25, 0x0F	; 15
    470c:	49 2f       	mov	r20, r25
    470e:	50 e0       	ldi	r21, 0x00	; 0
    4710:	4a 30       	cpi	r20, 0x0A	; 10
    4712:	51 05       	cpc	r21, r1
    4714:	14 f0       	brlt	.+4      	; 0x471a <lora_driver_sendUploadMessage+0x66>
    4716:	99 5c       	subi	r25, 0xC9	; 201
    4718:	01 c0       	rjmp	.+2      	; 0x471c <lora_driver_sendUploadMessage+0x68>
    471a:	90 5d       	subi	r25, 0xD0	; 208
    471c:	f9 01       	movw	r30, r18
    471e:	e8 52       	subi	r30, 0x28	; 40
    4720:	f8 4e       	sbci	r31, 0xE8	; 232
    4722:	90 83       	st	Z, r25
    4724:	7e 5f       	subi	r23, 0xFE	; 254
    4726:	6f 5f       	subi	r22, 0xFF	; 255
    4728:	11 96       	adiw	r26, 0x01	; 1
    472a:	9c 91       	ld	r25, X
    472c:	11 97       	sbiw	r26, 0x01	; 1
    472e:	69 17       	cp	r22, r25
    4730:	98 f2       	brcs	.-90     	; 0x46d8 <lora_driver_sendUploadMessage+0x24>
    4732:	01 c0       	rjmp	.+2      	; 0x4736 <lora_driver_sendUploadMessage+0x82>
    4734:	70 e0       	ldi	r23, 0x00	; 0
    4736:	e7 2f       	mov	r30, r23
    4738:	f0 e0       	ldi	r31, 0x00	; 0
    473a:	e8 52       	subi	r30, 0x28	; 40
    473c:	f8 4e       	sbci	r31, 0xE8	; 232
    473e:	10 82       	st	Z, r1
    4740:	4c 91       	ld	r20, X
    4742:	81 11       	cpse	r24, r1
    4744:	03 c0       	rjmp	.+6      	; 0x474c <lora_driver_sendUploadMessage+0x98>
    4746:	8d ed       	ldi	r24, 0xDD	; 221
    4748:	96 e0       	ldi	r25, 0x06	; 6
    474a:	02 c0       	rjmp	.+4      	; 0x4750 <lora_driver_sendUploadMessage+0x9c>
    474c:	8f ed       	ldi	r24, 0xDF	; 223
    474e:	96 e0       	ldi	r25, 0x06	; 6
    4750:	28 ed       	ldi	r18, 0xD8	; 216
    4752:	37 e1       	ldi	r19, 0x17	; 23
    4754:	3f 93       	push	r19
    4756:	2f 93       	push	r18
    4758:	1f 92       	push	r1
    475a:	4f 93       	push	r20
    475c:	9f 93       	push	r25
    475e:	8f 93       	push	r24
    4760:	83 ee       	ldi	r24, 0xE3	; 227
    4762:	96 e0       	ldi	r25, 0x06	; 6
    4764:	9f 93       	push	r25
    4766:	8f 93       	push	r24
    4768:	8a e1       	ldi	r24, 0x1A	; 26
    476a:	98 e1       	ldi	r25, 0x18	; 24
    476c:	9f 93       	push	r25
    476e:	8f 93       	push	r24
    4770:	0e 94 bf 30 	call	0x617e	; 0x617e <sprintf>
    4774:	60 e0       	ldi	r22, 0x00	; 0
    4776:	70 e0       	ldi	r23, 0x00	; 0
    4778:	8a e1       	ldi	r24, 0x1A	; 26
    477a:	98 e1       	ldi	r25, 0x18	; 24
    477c:	b3 de       	rcall	.-666    	; 0x44e4 <_uploadMessageRc>
    477e:	0f b6       	in	r0, 0x3f	; 63
    4780:	f8 94       	cli
    4782:	de bf       	out	0x3e, r29	; 62
    4784:	0f be       	out	0x3f, r0	; 63
    4786:	cd bf       	out	0x3d, r28	; 61
    4788:	81 11       	cpse	r24, r1
    478a:	59 c0       	rjmp	.+178    	; 0x483e <lora_driver_sendUploadMessage+0x18a>
    478c:	08 e2       	ldi	r16, 0x28	; 40
    478e:	15 e0       	ldi	r17, 0x05	; 5
    4790:	20 e0       	ldi	r18, 0x00	; 0
    4792:	30 e0       	ldi	r19, 0x00	; 0
    4794:	4d e2       	ldi	r20, 0x2D	; 45
    4796:	50 e0       	ldi	r21, 0x00	; 0
    4798:	67 e4       	ldi	r22, 0x47	; 71
    479a:	78 e1       	ldi	r23, 0x18	; 24
    479c:	80 91 be 17 	lds	r24, 0x17BE	; 0x8017be <_serialReplyBufferHandle>
    47a0:	90 91 bf 17 	lds	r25, 0x17BF	; 0x8017bf <_serialReplyBufferHandle+0x1>
    47a4:	0e 94 9e 0b 	call	0x173c	; 0x173c <xStreamBufferReceive>
    47a8:	88 23       	and	r24, r24
    47aa:	09 f4       	brne	.+2      	; 0x47ae <lora_driver_sendUploadMessage+0xfa>
    47ac:	47 c0       	rjmp	.+142    	; 0x483c <lora_driver_sendUploadMessage+0x188>
    47ae:	87 e4       	ldi	r24, 0x47	; 71
    47b0:	98 e1       	ldi	r25, 0x18	; 24
    47b2:	23 de       	rcall	.-954    	; 0x43fa <_reply2ReturnCode>
    47b4:	8e 30       	cpi	r24, 0x0E	; 14
    47b6:	09 f0       	breq	.+2      	; 0x47ba <lora_driver_sendUploadMessage+0x106>
    47b8:	42 c0       	rjmp	.+132    	; 0x483e <lora_driver_sendUploadMessage+0x18a>
    47ba:	87 e0       	ldi	r24, 0x07	; 7
    47bc:	89 83       	std	Y+1, r24	; 0x01
    47be:	80 91 bc 17 	lds	r24, 0x17BC	; 0x8017bc <_downlinkMessageBuffer>
    47c2:	90 91 bd 17 	lds	r25, 0x17BD	; 0x8017bd <_downlinkMessageBuffer+0x1>
    47c6:	89 2b       	or	r24, r25
    47c8:	a9 f1       	breq	.+106    	; 0x4834 <lora_driver_sendUploadMessage+0x180>
    47ca:	be 01       	movw	r22, r28
    47cc:	6f 5f       	subi	r22, 0xFF	; 255
    47ce:	7f 4f       	sbci	r23, 0xFF	; 255
    47d0:	87 e4       	ldi	r24, 0x47	; 71
    47d2:	98 e1       	ldi	r25, 0x18	; 24
    47d4:	68 d1       	rcall	.+720    	; 0x4aa6 <decode_port_no>
    47d6:	80 93 c2 17 	sts	0x17C2, r24	; 0x8017c2 <_downlinkPayload>
    47da:	e9 81       	ldd	r30, Y+1	; 0x01
    47dc:	f0 e0       	ldi	r31, 0x00	; 0
    47de:	e9 5b       	subi	r30, 0xB9	; 185
    47e0:	f7 4e       	sbci	r31, 0xE7	; 231
    47e2:	df 01       	movw	r26, r30
    47e4:	0d 90       	ld	r0, X+
    47e6:	00 20       	and	r0, r0
    47e8:	e9 f7       	brne	.-6      	; 0x47e4 <lora_driver_sendUploadMessage+0x130>
    47ea:	11 97       	sbiw	r26, 0x01	; 1
    47ec:	ae 1b       	sub	r26, r30
    47ee:	bf 0b       	sbc	r27, r31
    47f0:	aa 23       	and	r26, r26
    47f2:	91 f0       	breq	.+36     	; 0x4818 <lora_driver_sendUploadMessage+0x164>
    47f4:	bb 27       	eor	r27, r27
    47f6:	cd 01       	movw	r24, r26
    47f8:	01 97       	sbiw	r24, 0x01	; 1
    47fa:	9c 01       	movw	r18, r24
    47fc:	12 f4       	brpl	.+4      	; 0x4802 <lora_driver_sendUploadMessage+0x14e>
    47fe:	2f 5f       	subi	r18, 0xFF	; 255
    4800:	3f 4f       	sbci	r19, 0xFF	; 255
    4802:	35 95       	asr	r19
    4804:	27 95       	ror	r18
    4806:	20 93 c3 17 	sts	0x17C3, r18	; 0x8017c3 <_downlinkPayload+0x1>
    480a:	af 01       	movw	r20, r30
    480c:	4f 5f       	subi	r20, 0xFF	; 255
    480e:	5f 4f       	sbci	r21, 0xFF	; 255
    4810:	64 e1       	ldi	r22, 0x14	; 20
    4812:	84 ec       	ldi	r24, 0xC4	; 196
    4814:	97 e1       	ldi	r25, 0x17	; 23
    4816:	73 d1       	rcall	.+742    	; 0x4afe <decode_hexadecimal_string_bytes>
    4818:	01 e0       	ldi	r16, 0x01	; 1
    481a:	10 e0       	ldi	r17, 0x00	; 0
    481c:	20 e0       	ldi	r18, 0x00	; 0
    481e:	30 e0       	ldi	r19, 0x00	; 0
    4820:	46 e1       	ldi	r20, 0x16	; 22
    4822:	50 e0       	ldi	r21, 0x00	; 0
    4824:	62 ec       	ldi	r22, 0xC2	; 194
    4826:	77 e1       	ldi	r23, 0x17	; 23
    4828:	80 91 bc 17 	lds	r24, 0x17BC	; 0x8017bc <_downlinkMessageBuffer>
    482c:	90 91 bd 17 	lds	r25, 0x17BD	; 0x8017bd <_downlinkMessageBuffer+0x1>
    4830:	0e 94 95 0a 	call	0x152a	; 0x152a <xStreamBufferSend>
    4834:	8e e0       	ldi	r24, 0x0E	; 14
    4836:	03 c0       	rjmp	.+6      	; 0x483e <lora_driver_sendUploadMessage+0x18a>
    4838:	84 e1       	ldi	r24, 0x14	; 20
    483a:	01 c0       	rjmp	.+2      	; 0x483e <lora_driver_sendUploadMessage+0x18a>
    483c:	80 e0       	ldi	r24, 0x00	; 0
    483e:	0f 90       	pop	r0
    4840:	df 91       	pop	r29
    4842:	cf 91       	pop	r28
    4844:	1f 91       	pop	r17
    4846:	0f 91       	pop	r16
    4848:	08 95       	ret

0000484a <lora_driver_setAdaptiveDataRate>:
    484a:	81 30       	cpi	r24, 0x01	; 1
    484c:	19 f0       	breq	.+6      	; 0x4854 <lora_driver_setAdaptiveDataRate+0xa>
    484e:	63 ef       	ldi	r22, 0xF3	; 243
    4850:	76 e0       	ldi	r23, 0x06	; 6
    4852:	02 c0       	rjmp	.+4      	; 0x4858 <lora_driver_setAdaptiveDataRate+0xe>
    4854:	6c ec       	ldi	r22, 0xCC	; 204
    4856:	77 e0       	ldi	r23, 0x07	; 7
    4858:	87 ef       	ldi	r24, 0xF7	; 247
    485a:	96 e0       	ldi	r25, 0x06	; 6
    485c:	43 ce       	rjmp	.-890    	; 0x44e4 <_uploadMessageRc>
    485e:	08 95       	ret

00004860 <lora_driver_setReceiveDelay>:
    4860:	9f 93       	push	r25
    4862:	8f 93       	push	r24
    4864:	88 e2       	ldi	r24, 0x28	; 40
    4866:	97 e0       	ldi	r25, 0x07	; 7
    4868:	9f 93       	push	r25
    486a:	8f 93       	push	r24
    486c:	8a e1       	ldi	r24, 0x1A	; 26
    486e:	98 e1       	ldi	r25, 0x18	; 24
    4870:	9f 93       	push	r25
    4872:	8f 93       	push	r24
    4874:	0e 94 bf 30 	call	0x617e	; 0x617e <sprintf>
    4878:	60 e0       	ldi	r22, 0x00	; 0
    487a:	70 e0       	ldi	r23, 0x00	; 0
    487c:	8a e1       	ldi	r24, 0x1A	; 26
    487e:	98 e1       	ldi	r25, 0x18	; 24
    4880:	31 de       	rcall	.-926    	; 0x44e4 <_uploadMessageRc>
    4882:	0f 90       	pop	r0
    4884:	0f 90       	pop	r0
    4886:	0f 90       	pop	r0
    4888:	0f 90       	pop	r0
    488a:	0f 90       	pop	r0
    488c:	0f 90       	pop	r0
    488e:	08 95       	ret

00004890 <lora_driver_configureToEu868>:
    4890:	2f 92       	push	r2
    4892:	3f 92       	push	r3
    4894:	4f 92       	push	r4
    4896:	5f 92       	push	r5
    4898:	6f 92       	push	r6
    489a:	7f 92       	push	r7
    489c:	8f 92       	push	r8
    489e:	9f 92       	push	r9
    48a0:	af 92       	push	r10
    48a2:	bf 92       	push	r11
    48a4:	cf 92       	push	r12
    48a6:	df 92       	push	r13
    48a8:	ef 92       	push	r14
    48aa:	ff 92       	push	r15
    48ac:	0f 93       	push	r16
    48ae:	1f 93       	push	r17
    48b0:	cf 93       	push	r28
    48b2:	df 93       	push	r29
    48b4:	cd b7       	in	r28, 0x3d	; 61
    48b6:	de b7       	in	r29, 0x3e	; 62
    48b8:	a0 97       	sbiw	r28, 0x20	; 32
    48ba:	0f b6       	in	r0, 0x3f	; 63
    48bc:	f8 94       	cli
    48be:	de bf       	out	0x3e, r29	; 62
    48c0:	0f be       	out	0x3f, r0	; 63
    48c2:	cd bf       	out	0x3d, r28	; 61
    48c4:	65 e5       	ldi	r22, 0x55	; 85
    48c6:	77 e0       	ldi	r23, 0x07	; 7
    48c8:	81 e6       	ldi	r24, 0x61	; 97
    48ca:	97 e0       	ldi	r25, 0x07	; 7
    48cc:	3c dd       	rcall	.-1416   	; 0x4346 <_uploadMessage>
    48ce:	95 dd       	rcall	.-1238   	; 0x43fa <_reply2ReturnCode>
    48d0:	81 11       	cpse	r24, r1
    48d2:	a3 c0       	rjmp	.+326    	; 0x4a1a <lora_driver_configureToEu868+0x18a>
    48d4:	80 e2       	ldi	r24, 0x20	; 32
    48d6:	e2 e2       	ldi	r30, 0x22	; 34
    48d8:	f2 e0       	ldi	r31, 0x02	; 2
    48da:	de 01       	movw	r26, r28
    48dc:	11 96       	adiw	r26, 0x01	; 1
    48de:	01 90       	ld	r0, Z+
    48e0:	0d 92       	st	X+, r0
    48e2:	8a 95       	dec	r24
    48e4:	e1 f7       	brne	.-8      	; 0x48de <lora_driver_configureToEu868+0x4e>
    48e6:	9e 01       	movw	r18, r28
    48e8:	2f 5f       	subi	r18, 0xFF	; 255
    48ea:	3f 4f       	sbci	r19, 0xFF	; 255
    48ec:	69 01       	movw	r12, r18
    48ee:	e1 2c       	mov	r14, r1
    48f0:	f1 2c       	mov	r15, r1
    48f2:	0f 2e       	mov	r0, r31
    48f4:	fd e6       	ldi	r31, 0x6D	; 109
    48f6:	af 2e       	mov	r10, r31
    48f8:	f7 e0       	ldi	r31, 0x07	; 7
    48fa:	bf 2e       	mov	r11, r31
    48fc:	f0 2d       	mov	r31, r0
    48fe:	0a e1       	ldi	r16, 0x1A	; 26
    4900:	18 e1       	ldi	r17, 0x18	; 24
    4902:	0f 2e       	mov	r0, r31
    4904:	f6 e8       	ldi	r31, 0x86	; 134
    4906:	4f 2e       	mov	r4, r31
    4908:	f7 e0       	ldi	r31, 0x07	; 7
    490a:	5f 2e       	mov	r5, r31
    490c:	f0 2d       	mov	r31, r0
    490e:	0f 2e       	mov	r0, r31
    4910:	fd e9       	ldi	r31, 0x9D	; 157
    4912:	8f 2e       	mov	r8, r31
    4914:	f7 e0       	ldi	r31, 0x07	; 7
    4916:	9f 2e       	mov	r9, r31
    4918:	f0 2d       	mov	r31, r0
    491a:	0f 2e       	mov	r0, r31
    491c:	f7 eb       	ldi	r31, 0xB7	; 183
    491e:	6f 2e       	mov	r6, r31
    4920:	f7 e0       	ldi	r31, 0x07	; 7
    4922:	7f 2e       	mov	r7, r31
    4924:	f0 2d       	mov	r31, r0
    4926:	3e 2c       	mov	r3, r14
    4928:	2f 2c       	mov	r2, r15
    492a:	ff 92       	push	r15
    492c:	ef 92       	push	r14
    492e:	bf 92       	push	r11
    4930:	af 92       	push	r10
    4932:	1f 93       	push	r17
    4934:	0f 93       	push	r16
    4936:	0e 94 bf 30 	call	0x617e	; 0x617e <sprintf>
    493a:	60 e0       	ldi	r22, 0x00	; 0
    493c:	70 e0       	ldi	r23, 0x00	; 0
    493e:	c8 01       	movw	r24, r16
    4940:	02 dd       	rcall	.-1532   	; 0x4346 <_uploadMessage>
    4942:	5b dd       	rcall	.-1354   	; 0x43fa <_reply2ReturnCode>
    4944:	0f 90       	pop	r0
    4946:	0f 90       	pop	r0
    4948:	0f 90       	pop	r0
    494a:	0f 90       	pop	r0
    494c:	0f 90       	pop	r0
    494e:	0f 90       	pop	r0
    4950:	81 11       	cpse	r24, r1
    4952:	63 c0       	rjmp	.+198    	; 0x4a1a <lora_driver_configureToEu868+0x18a>
    4954:	32 e0       	ldi	r19, 0x02	; 2
    4956:	3e 15       	cp	r19, r14
    4958:	e8 f4       	brcc	.+58     	; 0x4994 <lora_driver_configureToEu868+0x104>
    495a:	f6 01       	movw	r30, r12
    495c:	83 81       	ldd	r24, Z+3	; 0x03
    495e:	8f 93       	push	r24
    4960:	82 81       	ldd	r24, Z+2	; 0x02
    4962:	8f 93       	push	r24
    4964:	81 81       	ldd	r24, Z+1	; 0x01
    4966:	8f 93       	push	r24
    4968:	80 81       	ld	r24, Z
    496a:	8f 93       	push	r24
    496c:	ff 92       	push	r15
    496e:	ef 92       	push	r14
    4970:	5f 92       	push	r5
    4972:	4f 92       	push	r4
    4974:	1f 93       	push	r17
    4976:	0f 93       	push	r16
    4978:	0e 94 bf 30 	call	0x617e	; 0x617e <sprintf>
    497c:	60 e0       	ldi	r22, 0x00	; 0
    497e:	70 e0       	ldi	r23, 0x00	; 0
    4980:	c8 01       	movw	r24, r16
    4982:	e1 dc       	rcall	.-1598   	; 0x4346 <_uploadMessage>
    4984:	3a dd       	rcall	.-1420   	; 0x43fa <_reply2ReturnCode>
    4986:	0f b6       	in	r0, 0x3f	; 63
    4988:	f8 94       	cli
    498a:	de bf       	out	0x3e, r29	; 62
    498c:	0f be       	out	0x3f, r0	; 63
    498e:	cd bf       	out	0x3d, r28	; 61
    4990:	81 11       	cpse	r24, r1
    4992:	43 c0       	rjmp	.+134    	; 0x4a1a <lora_driver_configureToEu868+0x18a>
    4994:	2f 92       	push	r2
    4996:	3f 92       	push	r3
    4998:	9f 92       	push	r9
    499a:	8f 92       	push	r8
    499c:	1f 93       	push	r17
    499e:	0f 93       	push	r16
    49a0:	0e 94 bf 30 	call	0x617e	; 0x617e <sprintf>
    49a4:	60 e0       	ldi	r22, 0x00	; 0
    49a6:	70 e0       	ldi	r23, 0x00	; 0
    49a8:	c8 01       	movw	r24, r16
    49aa:	cd dc       	rcall	.-1638   	; 0x4346 <_uploadMessage>
    49ac:	26 dd       	rcall	.-1460   	; 0x43fa <_reply2ReturnCode>
    49ae:	0f 90       	pop	r0
    49b0:	0f 90       	pop	r0
    49b2:	0f 90       	pop	r0
    49b4:	0f 90       	pop	r0
    49b6:	0f 90       	pop	r0
    49b8:	0f 90       	pop	r0
    49ba:	81 11       	cpse	r24, r1
    49bc:	2e c0       	rjmp	.+92     	; 0x4a1a <lora_driver_configureToEu868+0x18a>
    49be:	2f 92       	push	r2
    49c0:	3f 92       	push	r3
    49c2:	7f 92       	push	r7
    49c4:	6f 92       	push	r6
    49c6:	1f 93       	push	r17
    49c8:	0f 93       	push	r16
    49ca:	0e 94 bf 30 	call	0x617e	; 0x617e <sprintf>
    49ce:	60 e0       	ldi	r22, 0x00	; 0
    49d0:	70 e0       	ldi	r23, 0x00	; 0
    49d2:	c8 01       	movw	r24, r16
    49d4:	b8 dc       	rcall	.-1680   	; 0x4346 <_uploadMessage>
    49d6:	11 dd       	rcall	.-1502   	; 0x43fa <_reply2ReturnCode>
    49d8:	0f 90       	pop	r0
    49da:	0f 90       	pop	r0
    49dc:	0f 90       	pop	r0
    49de:	0f 90       	pop	r0
    49e0:	0f 90       	pop	r0
    49e2:	0f 90       	pop	r0
    49e4:	81 11       	cpse	r24, r1
    49e6:	19 c0       	rjmp	.+50     	; 0x4a1a <lora_driver_configureToEu868+0x18a>
    49e8:	3f ef       	ldi	r19, 0xFF	; 255
    49ea:	e3 1a       	sub	r14, r19
    49ec:	f3 0a       	sbc	r15, r19
    49ee:	84 e0       	ldi	r24, 0x04	; 4
    49f0:	c8 0e       	add	r12, r24
    49f2:	d1 1c       	adc	r13, r1
    49f4:	98 e0       	ldi	r25, 0x08	; 8
    49f6:	e9 16       	cp	r14, r25
    49f8:	f1 04       	cpc	r15, r1
    49fa:	09 f0       	breq	.+2      	; 0x49fe <lora_driver_configureToEu868+0x16e>
    49fc:	94 cf       	rjmp	.-216    	; 0x4926 <lora_driver_configureToEu868+0x96>
    49fe:	60 e0       	ldi	r22, 0x00	; 0
    4a00:	70 e0       	ldi	r23, 0x00	; 0
    4a02:	8f ec       	ldi	r24, 0xCF	; 207
    4a04:	97 e0       	ldi	r25, 0x07	; 7
    4a06:	9f dc       	rcall	.-1730   	; 0x4346 <_uploadMessage>
    4a08:	f8 dc       	rcall	.-1552   	; 0x43fa <_reply2ReturnCode>
    4a0a:	81 11       	cpse	r24, r1
    4a0c:	06 c0       	rjmp	.+12     	; 0x4a1a <lora_driver_configureToEu868+0x18a>
    4a0e:	60 e0       	ldi	r22, 0x00	; 0
    4a10:	70 e0       	ldi	r23, 0x00	; 0
    4a12:	80 ee       	ldi	r24, 0xE0	; 224
    4a14:	97 e0       	ldi	r25, 0x07	; 7
    4a16:	97 dc       	rcall	.-1746   	; 0x4346 <_uploadMessage>
    4a18:	f0 dc       	rcall	.-1568   	; 0x43fa <_reply2ReturnCode>
    4a1a:	a0 96       	adiw	r28, 0x20	; 32
    4a1c:	0f b6       	in	r0, 0x3f	; 63
    4a1e:	f8 94       	cli
    4a20:	de bf       	out	0x3e, r29	; 62
    4a22:	0f be       	out	0x3f, r0	; 63
    4a24:	cd bf       	out	0x3d, r28	; 61
    4a26:	df 91       	pop	r29
    4a28:	cf 91       	pop	r28
    4a2a:	1f 91       	pop	r17
    4a2c:	0f 91       	pop	r16
    4a2e:	ff 90       	pop	r15
    4a30:	ef 90       	pop	r14
    4a32:	df 90       	pop	r13
    4a34:	cf 90       	pop	r12
    4a36:	bf 90       	pop	r11
    4a38:	af 90       	pop	r10
    4a3a:	9f 90       	pop	r9
    4a3c:	8f 90       	pop	r8
    4a3e:	7f 90       	pop	r7
    4a40:	6f 90       	pop	r6
    4a42:	5f 90       	pop	r5
    4a44:	4f 90       	pop	r4
    4a46:	3f 90       	pop	r3
    4a48:	2f 90       	pop	r2
    4a4a:	08 95       	ret

00004a4c <lora_driver_setOtaaIdentity>:
    4a4c:	ef 92       	push	r14
    4a4e:	ff 92       	push	r15
    4a50:	0f 93       	push	r16
    4a52:	1f 93       	push	r17
    4a54:	cf 93       	push	r28
    4a56:	df 93       	push	r29
    4a58:	ec 01       	movw	r28, r24
    4a5a:	8b 01       	movw	r16, r22
    4a5c:	7a 01       	movw	r14, r20
    4a5e:	81 e0       	ldi	r24, 0x01	; 1
    4a60:	f4 de       	rcall	.-536    	; 0x484a <lora_driver_setAdaptiveDataRate>
    4a62:	81 11       	cpse	r24, r1
    4a64:	0d c0       	rjmp	.+26     	; 0x4a80 <lora_driver_setOtaaIdentity+0x34>
    4a66:	ce 01       	movw	r24, r28
    4a68:	d4 dd       	rcall	.-1112   	; 0x4612 <lora_driver_setApplicationIdentifier>
    4a6a:	81 11       	cpse	r24, r1
    4a6c:	09 c0       	rjmp	.+18     	; 0x4a80 <lora_driver_setOtaaIdentity+0x34>
    4a6e:	c8 01       	movw	r24, r16
    4a70:	e1 dd       	rcall	.-1086   	; 0x4634 <lora_driver_setApplicationKey>
    4a72:	81 11       	cpse	r24, r1
    4a74:	05 c0       	rjmp	.+10     	; 0x4a80 <lora_driver_setOtaaIdentity+0x34>
    4a76:	c7 01       	movw	r24, r14
    4a78:	bb dd       	rcall	.-1162   	; 0x45f0 <lora_driver_setDeviceIdentifier>
    4a7a:	81 11       	cpse	r24, r1
    4a7c:	01 c0       	rjmp	.+2      	; 0x4a80 <lora_driver_setOtaaIdentity+0x34>
    4a7e:	eb dd       	rcall	.-1066   	; 0x4656 <lora_driver_saveMac>
    4a80:	df 91       	pop	r29
    4a82:	cf 91       	pop	r28
    4a84:	1f 91       	pop	r17
    4a86:	0f 91       	pop	r16
    4a88:	ff 90       	pop	r15
    4a8a:	ef 90       	pop	r14
    4a8c:	08 95       	ret

00004a8e <lora_driver_mapReturnCodeToText>:
    4a8e:	90 e0       	ldi	r25, 0x00	; 0
    4a90:	fc 01       	movw	r30, r24
    4a92:	ee 0f       	add	r30, r30
    4a94:	ff 1f       	adc	r31, r31
    4a96:	8e 0f       	add	r24, r30
    4a98:	9f 1f       	adc	r25, r31
    4a9a:	fc 01       	movw	r30, r24
    4a9c:	e7 55       	subi	r30, 0x57	; 87
    4a9e:	f7 4f       	sbci	r31, 0xF7	; 247
    4aa0:	81 81       	ldd	r24, Z+1	; 0x01
    4aa2:	92 81       	ldd	r25, Z+2	; 0x02
    4aa4:	08 95       	ret

00004aa6 <decode_port_no>:
    4aa6:	dc 01       	movw	r26, r24
    4aa8:	00 97       	sbiw	r24, 0x00	; 0
    4aaa:	29 f1       	breq	.+74     	; 0x4af6 <decode_port_no+0x50>
    4aac:	fb 01       	movw	r30, r22
    4aae:	20 81       	ld	r18, Z
    4ab0:	fc 01       	movw	r30, r24
    4ab2:	01 90       	ld	r0, Z+
    4ab4:	00 20       	and	r0, r0
    4ab6:	e9 f7       	brne	.-6      	; 0x4ab2 <decode_port_no+0xc>
    4ab8:	31 97       	sbiw	r30, 0x01	; 1
    4aba:	e8 1b       	sub	r30, r24
    4abc:	f9 0b       	sbc	r31, r25
    4abe:	82 2f       	mov	r24, r18
    4ac0:	90 e0       	ldi	r25, 0x00	; 0
    4ac2:	e8 17       	cp	r30, r24
    4ac4:	f9 07       	cpc	r31, r25
    4ac6:	c8 f0       	brcs	.+50     	; 0x4afa <decode_port_no+0x54>
    4ac8:	80 e0       	ldi	r24, 0x00	; 0
    4aca:	08 c0       	rjmp	.+16     	; 0x4adc <decode_port_no+0x36>
    4acc:	88 0f       	add	r24, r24
    4ace:	38 2f       	mov	r19, r24
    4ad0:	33 0f       	add	r19, r19
    4ad2:	33 0f       	add	r19, r19
    4ad4:	83 0f       	add	r24, r19
    4ad6:	80 53       	subi	r24, 0x30	; 48
    4ad8:	89 0f       	add	r24, r25
    4ada:	2f 5f       	subi	r18, 0xFF	; 255
    4adc:	fd 01       	movw	r30, r26
    4ade:	e2 0f       	add	r30, r18
    4ae0:	f1 1d       	adc	r31, r1
    4ae2:	90 81       	ld	r25, Z
    4ae4:	30 ed       	ldi	r19, 0xD0	; 208
    4ae6:	39 0f       	add	r19, r25
    4ae8:	3a 30       	cpi	r19, 0x0A	; 10
    4aea:	10 f4       	brcc	.+4      	; 0x4af0 <decode_port_no+0x4a>
    4aec:	91 11       	cpse	r25, r1
    4aee:	ee cf       	rjmp	.-36     	; 0x4acc <decode_port_no+0x26>
    4af0:	fb 01       	movw	r30, r22
    4af2:	20 83       	st	Z, r18
    4af4:	08 95       	ret
    4af6:	80 e0       	ldi	r24, 0x00	; 0
    4af8:	08 95       	ret
    4afa:	80 e0       	ldi	r24, 0x00	; 0
    4afc:	08 95       	ret

00004afe <decode_hexadecimal_string_bytes>:
    4afe:	0f 93       	push	r16
    4b00:	1f 93       	push	r17
    4b02:	cf 93       	push	r28
    4b04:	df 93       	push	r29
    4b06:	dc 01       	movw	r26, r24
    4b08:	ea 01       	movw	r28, r20
    4b0a:	20 97       	sbiw	r28, 0x00	; 0
    4b0c:	e1 f1       	breq	.+120    	; 0x4b86 <decode_hexadecimal_string_bytes+0x88>
    4b0e:	fa 01       	movw	r30, r20
    4b10:	01 90       	ld	r0, Z+
    4b12:	00 20       	and	r0, r0
    4b14:	e9 f7       	brne	.-6      	; 0x4b10 <decode_hexadecimal_string_bytes+0x12>
    4b16:	31 97       	sbiw	r30, 0x01	; 1
    4b18:	e4 1b       	sub	r30, r20
    4b1a:	f5 0b       	sbc	r31, r21
    4b1c:	32 97       	sbiw	r30, 0x02	; 2
    4b1e:	10 f5       	brcc	.+68     	; 0x4b64 <decode_hexadecimal_string_bytes+0x66>
    4b20:	32 c0       	rjmp	.+100    	; 0x4b86 <decode_hexadecimal_string_bytes+0x88>
    4b22:	8d 01       	movw	r16, r26
    4b24:	04 0f       	add	r16, r20
    4b26:	15 1f       	adc	r17, r21
    4b28:	30 e0       	ldi	r19, 0x00	; 0
    4b2a:	ae 01       	movw	r20, r28
    4b2c:	42 0f       	add	r20, r18
    4b2e:	53 1f       	adc	r21, r19
    4b30:	fa 01       	movw	r30, r20
    4b32:	90 81       	ld	r25, Z
    4b34:	91 34       	cpi	r25, 0x41	; 65
    4b36:	28 f0       	brcs	.+10     	; 0x4b42 <decode_hexadecimal_string_bytes+0x44>
    4b38:	97 53       	subi	r25, 0x37	; 55
    4b3a:	59 2f       	mov	r21, r25
    4b3c:	52 95       	swap	r21
    4b3e:	50 7f       	andi	r21, 0xF0	; 240
    4b40:	03 c0       	rjmp	.+6      	; 0x4b48 <decode_hexadecimal_string_bytes+0x4a>
    4b42:	59 2f       	mov	r21, r25
    4b44:	52 95       	swap	r21
    4b46:	50 7f       	andi	r21, 0xF0	; 240
    4b48:	2c 0f       	add	r18, r28
    4b4a:	3d 1f       	adc	r19, r29
    4b4c:	f9 01       	movw	r30, r18
    4b4e:	91 81       	ldd	r25, Z+1	; 0x01
    4b50:	91 34       	cpi	r25, 0x41	; 65
    4b52:	10 f0       	brcs	.+4      	; 0x4b58 <decode_hexadecimal_string_bytes+0x5a>
    4b54:	97 53       	subi	r25, 0x37	; 55
    4b56:	01 c0       	rjmp	.+2      	; 0x4b5a <decode_hexadecimal_string_bytes+0x5c>
    4b58:	90 53       	subi	r25, 0x30	; 48
    4b5a:	95 0f       	add	r25, r21
    4b5c:	f8 01       	movw	r30, r16
    4b5e:	90 83       	st	Z, r25
    4b60:	8f 5f       	subi	r24, 0xFF	; 255
    4b62:	01 c0       	rjmp	.+2      	; 0x4b66 <decode_hexadecimal_string_bytes+0x68>
    4b64:	80 e0       	ldi	r24, 0x00	; 0
    4b66:	28 2f       	mov	r18, r24
    4b68:	22 0f       	add	r18, r18
    4b6a:	48 2f       	mov	r20, r24
    4b6c:	50 e0       	ldi	r21, 0x00	; 0
    4b6e:	fe 01       	movw	r30, r28
    4b70:	01 90       	ld	r0, Z+
    4b72:	00 20       	and	r0, r0
    4b74:	e9 f7       	brne	.-6      	; 0x4b70 <decode_hexadecimal_string_bytes+0x72>
    4b76:	31 97       	sbiw	r30, 0x01	; 1
    4b78:	ec 1b       	sub	r30, r28
    4b7a:	fd 0b       	sbc	r31, r29
    4b7c:	4e 17       	cp	r20, r30
    4b7e:	5f 07       	cpc	r21, r31
    4b80:	10 f4       	brcc	.+4      	; 0x4b86 <decode_hexadecimal_string_bytes+0x88>
    4b82:	86 13       	cpse	r24, r22
    4b84:	ce cf       	rjmp	.-100    	; 0x4b22 <decode_hexadecimal_string_bytes+0x24>
    4b86:	df 91       	pop	r29
    4b88:	cf 91       	pop	r28
    4b8a:	1f 91       	pop	r17
    4b8c:	0f 91       	pop	r16
    4b8e:	08 95       	ret

00004b90 <_serialCallBack>:
    4b90:	80 91 77 18 	lds	r24, 0x1877	; 0x801877 <crc_sum.1945>
    4b94:	86 0f       	add	r24, r22
    4b96:	80 93 77 18 	sts	0x1877, r24	; 0x801877 <crc_sum.1945>
    4b9a:	90 91 7a 18 	lds	r25, 0x187A	; 0x80187a <_mh_state>
    4b9e:	91 30       	cpi	r25, 0x01	; 1
    4ba0:	79 f0       	breq	.+30     	; 0x4bc0 <_serialCallBack+0x30>
    4ba2:	28 f0       	brcs	.+10     	; 0x4bae <_serialCallBack+0x1e>
    4ba4:	92 30       	cpi	r25, 0x02	; 2
    4ba6:	a9 f0       	breq	.+42     	; 0x4bd2 <_serialCallBack+0x42>
    4ba8:	93 30       	cpi	r25, 0x03	; 3
    4baa:	19 f1       	breq	.+70     	; 0x4bf2 <_serialCallBack+0x62>
    4bac:	08 95       	ret
    4bae:	6f 3f       	cpi	r22, 0xFF	; 255
    4bb0:	09 f0       	breq	.+2      	; 0x4bb4 <_serialCallBack+0x24>
    4bb2:	48 c0       	rjmp	.+144    	; 0x4c44 <_serialCallBack+0xb4>
    4bb4:	10 92 77 18 	sts	0x1877, r1	; 0x801877 <crc_sum.1945>
    4bb8:	81 e0       	ldi	r24, 0x01	; 1
    4bba:	80 93 7a 18 	sts	0x187A, r24	; 0x80187a <_mh_state>
    4bbe:	08 95       	ret
    4bc0:	66 38       	cpi	r22, 0x86	; 134
    4bc2:	09 f0       	breq	.+2      	; 0x4bc6 <_serialCallBack+0x36>
    4bc4:	3f c0       	rjmp	.+126    	; 0x4c44 <_serialCallBack+0xb4>
    4bc6:	10 92 76 18 	sts	0x1876, r1	; 0x801876 <inDex.1943>
    4bca:	82 e0       	ldi	r24, 0x02	; 2
    4bcc:	80 93 7a 18 	sts	0x187A, r24	; 0x80187a <_mh_state>
    4bd0:	08 95       	ret
    4bd2:	e0 91 76 18 	lds	r30, 0x1876	; 0x801876 <inDex.1943>
    4bd6:	81 e0       	ldi	r24, 0x01	; 1
    4bd8:	8e 0f       	add	r24, r30
    4bda:	80 93 76 18 	sts	0x1876, r24	; 0x801876 <inDex.1943>
    4bde:	f0 e0       	ldi	r31, 0x00	; 0
    4be0:	ec 58       	subi	r30, 0x8C	; 140
    4be2:	f7 4e       	sbci	r31, 0xE7	; 231
    4be4:	60 83       	st	Z, r22
    4be6:	82 30       	cpi	r24, 0x02	; 2
    4be8:	69 f5       	brne	.+90     	; 0x4c44 <_serialCallBack+0xb4>
    4bea:	83 e0       	ldi	r24, 0x03	; 3
    4bec:	80 93 7a 18 	sts	0x187A, r24	; 0x80187a <_mh_state>
    4bf0:	08 95       	ret
    4bf2:	90 91 76 18 	lds	r25, 0x1876	; 0x801876 <inDex.1943>
    4bf6:	21 e0       	ldi	r18, 0x01	; 1
    4bf8:	29 0f       	add	r18, r25
    4bfa:	20 93 76 18 	sts	0x1876, r18	; 0x801876 <inDex.1943>
    4bfe:	96 30       	cpi	r25, 0x06	; 6
    4c00:	09 f5       	brne	.+66     	; 0x4c44 <_serialCallBack+0xb4>
    4c02:	81 11       	cpse	r24, r1
    4c04:	0e c0       	rjmp	.+28     	; 0x4c22 <_serialCallBack+0x92>
    4c06:	e4 e7       	ldi	r30, 0x74	; 116
    4c08:	f8 e1       	ldi	r31, 0x18	; 24
    4c0a:	80 81       	ld	r24, Z
    4c0c:	90 e0       	ldi	r25, 0x00	; 0
    4c0e:	98 2f       	mov	r25, r24
    4c10:	88 27       	eor	r24, r24
    4c12:	21 81       	ldd	r18, Z+1	; 0x01
    4c14:	82 0f       	add	r24, r18
    4c16:	91 1d       	adc	r25, r1
    4c18:	90 93 7c 18 	sts	0x187C, r25	; 0x80187c <_ppm+0x1>
    4c1c:	80 93 7b 18 	sts	0x187B, r24	; 0x80187b <_ppm>
    4c20:	04 c0       	rjmp	.+8      	; 0x4c2a <_serialCallBack+0x9a>
    4c22:	10 92 7c 18 	sts	0x187C, r1	; 0x80187c <_ppm+0x1>
    4c26:	10 92 7b 18 	sts	0x187B, r1	; 0x80187b <_ppm>
    4c2a:	10 92 7a 18 	sts	0x187A, r1	; 0x80187a <_mh_state>
    4c2e:	e0 91 78 18 	lds	r30, 0x1878	; 0x801878 <_appCallBack>
    4c32:	f0 91 79 18 	lds	r31, 0x1879	; 0x801879 <_appCallBack+0x1>
    4c36:	30 97       	sbiw	r30, 0x00	; 0
    4c38:	29 f0       	breq	.+10     	; 0x4c44 <_serialCallBack+0xb4>
    4c3a:	80 91 7b 18 	lds	r24, 0x187B	; 0x80187b <_ppm>
    4c3e:	90 91 7c 18 	lds	r25, 0x187C	; 0x80187c <_ppm+0x1>
    4c42:	19 95       	eicall
    4c44:	08 95       	ret

00004c46 <mh_z19_initialise>:
    4c46:	8f 92       	push	r8
    4c48:	9f 92       	push	r9
    4c4a:	af 92       	push	r10
    4c4c:	cf 92       	push	r12
    4c4e:	ef 92       	push	r14
    4c50:	0f 93       	push	r16
    4c52:	0f 2e       	mov	r0, r31
    4c54:	f8 ec       	ldi	r31, 0xC8	; 200
    4c56:	8f 2e       	mov	r8, r31
    4c58:	f5 e2       	ldi	r31, 0x25	; 37
    4c5a:	9f 2e       	mov	r9, r31
    4c5c:	f0 2d       	mov	r31, r0
    4c5e:	68 94       	set
    4c60:	aa 24       	eor	r10, r10
    4c62:	a4 f8       	bld	r10, 4
    4c64:	68 94       	set
    4c66:	cc 24       	eor	r12, r12
    4c68:	c4 f8       	bld	r12, 4
    4c6a:	e1 2c       	mov	r14, r1
    4c6c:	00 e0       	ldi	r16, 0x00	; 0
    4c6e:	23 e0       	ldi	r18, 0x03	; 3
    4c70:	40 e8       	ldi	r20, 0x80	; 128
    4c72:	55 e2       	ldi	r21, 0x25	; 37
    4c74:	60 e0       	ldi	r22, 0x00	; 0
    4c76:	70 e0       	ldi	r23, 0x00	; 0
    4c78:	73 d0       	rcall	.+230    	; 0x4d60 <serial_create>
    4c7a:	90 93 7e 18 	sts	0x187E, r25	; 0x80187e <_serial+0x1>
    4c7e:	80 93 7d 18 	sts	0x187D, r24	; 0x80187d <_serial>
    4c82:	0f 91       	pop	r16
    4c84:	ef 90       	pop	r14
    4c86:	cf 90       	pop	r12
    4c88:	af 90       	pop	r10
    4c8a:	9f 90       	pop	r9
    4c8c:	8f 90       	pop	r8
    4c8e:	08 95       	ret

00004c90 <mh_z19_injectCallBack>:
    4c90:	90 93 79 18 	sts	0x1879, r25	; 0x801879 <_appCallBack+0x1>
    4c94:	80 93 78 18 	sts	0x1878, r24	; 0x801878 <_appCallBack>
    4c98:	08 95       	ret

00004c9a <mh_z19_takeMeassuring>:
    4c9a:	cf 93       	push	r28
    4c9c:	df 93       	push	r29
    4c9e:	cd b7       	in	r28, 0x3d	; 61
    4ca0:	de b7       	in	r29, 0x3e	; 62
    4ca2:	29 97       	sbiw	r28, 0x09	; 9
    4ca4:	0f b6       	in	r0, 0x3f	; 63
    4ca6:	f8 94       	cli
    4ca8:	de bf       	out	0x3e, r29	; 62
    4caa:	0f be       	out	0x3f, r0	; 63
    4cac:	cd bf       	out	0x3d, r28	; 61
    4cae:	89 e0       	ldi	r24, 0x09	; 9
    4cb0:	e2 e4       	ldi	r30, 0x42	; 66
    4cb2:	f2 e0       	ldi	r31, 0x02	; 2
    4cb4:	9e 01       	movw	r18, r28
    4cb6:	2f 5f       	subi	r18, 0xFF	; 255
    4cb8:	3f 4f       	sbci	r19, 0xFF	; 255
    4cba:	d9 01       	movw	r26, r18
    4cbc:	01 90       	ld	r0, Z+
    4cbe:	0d 92       	st	X+, r0
    4cc0:	8a 95       	dec	r24
    4cc2:	e1 f7       	brne	.-8      	; 0x4cbc <mh_z19_takeMeassuring+0x22>
    4cc4:	10 92 7c 18 	sts	0x187C, r1	; 0x80187c <_ppm+0x1>
    4cc8:	10 92 7b 18 	sts	0x187B, r1	; 0x80187b <_ppm>
    4ccc:	80 91 7d 18 	lds	r24, 0x187D	; 0x80187d <_serial>
    4cd0:	90 91 7e 18 	lds	r25, 0x187E	; 0x80187e <_serial+0x1>
    4cd4:	00 97       	sbiw	r24, 0x00	; 0
    4cd6:	31 f0       	breq	.+12     	; 0x4ce4 <mh_z19_takeMeassuring+0x4a>
    4cd8:	42 2f       	mov	r20, r18
    4cda:	53 2f       	mov	r21, r19
    4cdc:	69 e0       	ldi	r22, 0x09	; 9
    4cde:	0a d1       	rcall	.+532    	; 0x4ef4 <serial_sendBytes>
    4ce0:	80 e0       	ldi	r24, 0x00	; 0
    4ce2:	01 c0       	rjmp	.+2      	; 0x4ce6 <mh_z19_takeMeassuring+0x4c>
    4ce4:	82 e0       	ldi	r24, 0x02	; 2
    4ce6:	29 96       	adiw	r28, 0x09	; 9
    4ce8:	0f b6       	in	r0, 0x3f	; 63
    4cea:	f8 94       	cli
    4cec:	de bf       	out	0x3e, r29	; 62
    4cee:	0f be       	out	0x3f, r0	; 63
    4cf0:	cd bf       	out	0x3d, r28	; 61
    4cf2:	df 91       	pop	r29
    4cf4:	cf 91       	pop	r28
    4cf6:	08 95       	ret

00004cf8 <rc_servo_setPosition>:
    4cf8:	65 36       	cpi	r22, 0x65	; 101
    4cfa:	0c f0       	brlt	.+2      	; 0x4cfe <rc_servo_setPosition+0x6>
    4cfc:	64 e6       	ldi	r22, 0x64	; 100
    4cfe:	6c 39       	cpi	r22, 0x9C	; 156
    4d00:	0c f4       	brge	.+2      	; 0x4d04 <rc_servo_setPosition+0xc>
    4d02:	6c e9       	ldi	r22, 0x9C	; 156
    4d04:	96 ef       	ldi	r25, 0xF6	; 246
    4d06:	69 02       	muls	r22, r25
    4d08:	b0 01       	movw	r22, r0
    4d0a:	11 24       	eor	r1, r1
    4d0c:	68 54       	subi	r22, 0x48	; 72
    4d0e:	74 4f       	sbci	r23, 0xF4	; 244
    4d10:	81 11       	cpse	r24, r1
    4d12:	05 c0       	rjmp	.+10     	; 0x4d1e <rc_servo_setPosition+0x26>
    4d14:	70 93 29 01 	sts	0x0129, r23	; 0x800129 <__TEXT_REGION_LENGTH__+0x7c0129>
    4d18:	60 93 28 01 	sts	0x0128, r22	; 0x800128 <__TEXT_REGION_LENGTH__+0x7c0128>
    4d1c:	08 95       	ret
    4d1e:	70 93 2b 01 	sts	0x012B, r23	; 0x80012b <__TEXT_REGION_LENGTH__+0x7c012b>
    4d22:	60 93 2a 01 	sts	0x012A, r22	; 0x80012a <__TEXT_REGION_LENGTH__+0x7c012a>
    4d26:	08 95       	ret

00004d28 <rc_servo_initialise>:
    4d28:	ea e0       	ldi	r30, 0x0A	; 10
    4d2a:	f1 e0       	ldi	r31, 0x01	; 1
    4d2c:	80 81       	ld	r24, Z
    4d2e:	88 61       	ori	r24, 0x18	; 24
    4d30:	80 83       	st	Z, r24
    4d32:	8f e3       	ldi	r24, 0x3F	; 63
    4d34:	9c e9       	ldi	r25, 0x9C	; 156
    4d36:	90 93 27 01 	sts	0x0127, r25	; 0x800127 <__TEXT_REGION_LENGTH__+0x7c0127>
    4d3a:	80 93 26 01 	sts	0x0126, r24	; 0x800126 <__TEXT_REGION_LENGTH__+0x7c0126>
    4d3e:	60 e0       	ldi	r22, 0x00	; 0
    4d40:	80 e0       	ldi	r24, 0x00	; 0
    4d42:	da df       	rcall	.-76     	; 0x4cf8 <rc_servo_setPosition>
    4d44:	60 e0       	ldi	r22, 0x00	; 0
    4d46:	81 e0       	ldi	r24, 0x01	; 1
    4d48:	d7 df       	rcall	.-82     	; 0x4cf8 <rc_servo_setPosition>
    4d4a:	e0 e2       	ldi	r30, 0x20	; 32
    4d4c:	f1 e0       	ldi	r31, 0x01	; 1
    4d4e:	80 81       	ld	r24, Z
    4d50:	82 6a       	ori	r24, 0xA2	; 162
    4d52:	80 83       	st	Z, r24
    4d54:	e1 e2       	ldi	r30, 0x21	; 33
    4d56:	f1 e0       	ldi	r31, 0x01	; 1
    4d58:	80 81       	ld	r24, Z
    4d5a:	8a 61       	ori	r24, 0x1A	; 26
    4d5c:	80 83       	st	Z, r24
    4d5e:	08 95       	ret

00004d60 <serial_create>:
    4d60:	2f 92       	push	r2
    4d62:	3f 92       	push	r3
    4d64:	4f 92       	push	r4
    4d66:	5f 92       	push	r5
    4d68:	6f 92       	push	r6
    4d6a:	7f 92       	push	r7
    4d6c:	8f 92       	push	r8
    4d6e:	9f 92       	push	r9
    4d70:	af 92       	push	r10
    4d72:	cf 92       	push	r12
    4d74:	ef 92       	push	r14
    4d76:	ff 92       	push	r15
    4d78:	0f 93       	push	r16
    4d7a:	1f 93       	push	r17
    4d7c:	cf 93       	push	r28
    4d7e:	df 93       	push	r29
    4d80:	cd b7       	in	r28, 0x3d	; 61
    4d82:	de b7       	in	r29, 0x3e	; 62
    4d84:	f8 2e       	mov	r15, r24
    4d86:	2a 01       	movw	r4, r20
    4d88:	3b 01       	movw	r6, r22
    4d8a:	88 e0       	ldi	r24, 0x08	; 8
    4d8c:	90 e0       	ldi	r25, 0x00	; 0
    4d8e:	0e 94 f8 2e 	call	0x5df0	; 0x5df0 <malloc>
    4d92:	8c 01       	movw	r16, r24
    4d94:	8f 2d       	mov	r24, r15
    4d96:	90 e0       	ldi	r25, 0x00	; 0
    4d98:	fc 01       	movw	r30, r24
    4d9a:	ee 0f       	add	r30, r30
    4d9c:	ff 1f       	adc	r31, r31
    4d9e:	e1 58       	subi	r30, 0x81	; 129
    4da0:	f7 4e       	sbci	r31, 0xE7	; 231
    4da2:	11 83       	std	Z+1, r17	; 0x01
    4da4:	00 83       	st	Z, r16
    4da6:	01 15       	cp	r16, r1
    4da8:	11 05       	cpc	r17, r1
    4daa:	09 f4       	brne	.+2      	; 0x4dae <serial_create+0x4e>
    4dac:	66 c0       	rjmp	.+204    	; 0x4e7a <serial_create+0x11a>
    4dae:	88 0f       	add	r24, r24
    4db0:	99 1f       	adc	r25, r25
    4db2:	fc 01       	movw	r30, r24
    4db4:	e5 5f       	subi	r30, 0xF5	; 245
    4db6:	fd 4f       	sbci	r31, 0xFD	; 253
    4db8:	80 81       	ld	r24, Z
    4dba:	91 81       	ldd	r25, Z+1	; 0x01
    4dbc:	d8 01       	movw	r26, r16
    4dbe:	8d 93       	st	X+, r24
    4dc0:	9c 93       	st	X, r25
    4dc2:	8c 2d       	mov	r24, r12
    4dc4:	90 e0       	ldi	r25, 0x00	; 0
    4dc6:	88 0f       	add	r24, r24
    4dc8:	99 1f       	adc	r25, r25
    4dca:	88 0f       	add	r24, r24
    4dcc:	99 1f       	adc	r25, r25
    4dce:	0e 94 f8 2e 	call	0x5df0	; 0x5df0 <malloc>
    4dd2:	1c 01       	movw	r2, r24
    4dd4:	86 e0       	ldi	r24, 0x06	; 6
    4dd6:	90 e0       	ldi	r25, 0x00	; 0
    4dd8:	0e 94 f8 2e 	call	0x5df0	; 0x5df0 <malloc>
    4ddc:	7c 01       	movw	r14, r24
    4dde:	4c 2d       	mov	r20, r12
    4de0:	b1 01       	movw	r22, r2
    4de2:	59 d6       	rcall	.+3250   	; 0x5a96 <fifo_init>
    4de4:	f8 01       	movw	r30, r16
    4de6:	f5 82       	std	Z+5, r15	; 0x05
    4de8:	e4 82       	std	Z+4, r14	; 0x04
    4dea:	8a 2d       	mov	r24, r10
    4dec:	90 e0       	ldi	r25, 0x00	; 0
    4dee:	88 0f       	add	r24, r24
    4df0:	99 1f       	adc	r25, r25
    4df2:	88 0f       	add	r24, r24
    4df4:	99 1f       	adc	r25, r25
    4df6:	fc d7       	rcall	.+4088   	; 0x5df0 <malloc>
    4df8:	1c 01       	movw	r2, r24
    4dfa:	86 e0       	ldi	r24, 0x06	; 6
    4dfc:	90 e0       	ldi	r25, 0x00	; 0
    4dfe:	f8 d7       	rcall	.+4080   	; 0x5df0 <malloc>
    4e00:	7c 01       	movw	r14, r24
    4e02:	4a 2d       	mov	r20, r10
    4e04:	b1 01       	movw	r22, r2
    4e06:	47 d6       	rcall	.+3214   	; 0x5a96 <fifo_init>
    4e08:	d8 01       	movw	r26, r16
    4e0a:	13 96       	adiw	r26, 0x03	; 3
    4e0c:	fc 92       	st	X, r15
    4e0e:	ee 92       	st	-X, r14
    4e10:	12 97       	sbiw	r26, 0x02	; 2
    4e12:	17 96       	adiw	r26, 0x07	; 7
    4e14:	9c 92       	st	X, r9
    4e16:	8e 92       	st	-X, r8
    4e18:	16 97       	sbiw	r26, 0x06	; 6
    4e1a:	ff b6       	in	r15, 0x3f	; 63
    4e1c:	f8 94       	cli
    4e1e:	ed 91       	ld	r30, X+
    4e20:	fc 91       	ld	r31, X
    4e22:	11 97       	sbiw	r26, 0x01	; 1
    4e24:	36 97       	sbiw	r30, 0x06	; 6
    4e26:	80 81       	ld	r24, Z
    4e28:	82 60       	ori	r24, 0x02	; 2
    4e2a:	80 83       	st	Z, r24
    4e2c:	8d 90       	ld	r8, X+
    4e2e:	9c 90       	ld	r9, X
    4e30:	c3 01       	movw	r24, r6
    4e32:	b2 01       	movw	r22, r4
    4e34:	2e d9       	rcall	.-3492   	; 0x4092 <__floatunsisf>
    4e36:	20 e0       	ldi	r18, 0x00	; 0
    4e38:	30 e0       	ldi	r19, 0x00	; 0
    4e3a:	40 e0       	ldi	r20, 0x00	; 0
    4e3c:	51 e4       	ldi	r21, 0x41	; 65
    4e3e:	48 d7       	rcall	.+3728   	; 0x5cd0 <__mulsf3>
    4e40:	9b 01       	movw	r18, r22
    4e42:	ac 01       	movw	r20, r24
    4e44:	60 e0       	ldi	r22, 0x00	; 0
    4e46:	74 e2       	ldi	r23, 0x24	; 36
    4e48:	84 e7       	ldi	r24, 0x74	; 116
    4e4a:	9b e4       	ldi	r25, 0x4B	; 75
    4e4c:	a7 d6       	rcall	.+3406   	; 0x5b9c <__divsf3>
    4e4e:	20 e0       	ldi	r18, 0x00	; 0
    4e50:	30 e0       	ldi	r19, 0x00	; 0
    4e52:	40 e8       	ldi	r20, 0x80	; 128
    4e54:	5f e3       	ldi	r21, 0x3F	; 63
    4e56:	3b d6       	rcall	.+3190   	; 0x5ace <__subsf3>
    4e58:	f0 d8       	rcall	.-3616   	; 0x403a <__fixunssfsi>
    4e5a:	f4 01       	movw	r30, r8
    4e5c:	32 97       	sbiw	r30, 0x02	; 2
    4e5e:	60 83       	st	Z, r22
    4e60:	d8 01       	movw	r26, r16
    4e62:	ed 91       	ld	r30, X+
    4e64:	fc 91       	ld	r31, X
    4e66:	11 97       	sbiw	r26, 0x01	; 1
    4e68:	35 97       	sbiw	r30, 0x05	; 5
    4e6a:	88 e9       	ldi	r24, 0x98	; 152
    4e6c:	80 83       	st	Z, r24
    4e6e:	ed 91       	ld	r30, X+
    4e70:	fc 91       	ld	r31, X
    4e72:	34 97       	sbiw	r30, 0x04	; 4
    4e74:	86 e0       	ldi	r24, 0x06	; 6
    4e76:	80 83       	st	Z, r24
    4e78:	ff be       	out	0x3f, r15	; 63
    4e7a:	c8 01       	movw	r24, r16
    4e7c:	df 91       	pop	r29
    4e7e:	cf 91       	pop	r28
    4e80:	1f 91       	pop	r17
    4e82:	0f 91       	pop	r16
    4e84:	ff 90       	pop	r15
    4e86:	ef 90       	pop	r14
    4e88:	cf 90       	pop	r12
    4e8a:	af 90       	pop	r10
    4e8c:	9f 90       	pop	r9
    4e8e:	8f 90       	pop	r8
    4e90:	7f 90       	pop	r7
    4e92:	6f 90       	pop	r6
    4e94:	5f 90       	pop	r5
    4e96:	4f 90       	pop	r4
    4e98:	3f 90       	pop	r3
    4e9a:	2f 90       	pop	r2
    4e9c:	08 95       	ret

00004e9e <serial_sendByte>:
    4e9e:	cf 93       	push	r28
    4ea0:	df 93       	push	r29
    4ea2:	dc 01       	movw	r26, r24
    4ea4:	89 2b       	or	r24, r25
    4ea6:	01 f1       	breq	.+64     	; 0x4ee8 <serial_sendByte+0x4a>
    4ea8:	12 96       	adiw	r26, 0x02	; 2
    4eaa:	ed 91       	ld	r30, X+
    4eac:	fc 91       	ld	r31, X
    4eae:	13 97       	sbiw	r26, 0x03	; 3
    4eb0:	93 81       	ldd	r25, Z+3	; 0x03
    4eb2:	82 81       	ldd	r24, Z+2	; 0x02
    4eb4:	25 81       	ldd	r18, Z+5	; 0x05
    4eb6:	98 1b       	sub	r25, r24
    4eb8:	92 23       	and	r25, r18
    4eba:	84 81       	ldd	r24, Z+4	; 0x04
    4ebc:	98 17       	cp	r25, r24
    4ebe:	b1 f0       	breq	.+44     	; 0x4eec <serial_sendByte+0x4e>
    4ec0:	83 81       	ldd	r24, Z+3	; 0x03
    4ec2:	26 95       	lsr	r18
    4ec4:	28 23       	and	r18, r24
    4ec6:	c0 81       	ld	r28, Z
    4ec8:	d1 81       	ldd	r29, Z+1	; 0x01
    4eca:	c2 0f       	add	r28, r18
    4ecc:	d1 1d       	adc	r29, r1
    4ece:	68 83       	st	Y, r22
    4ed0:	8f 5f       	subi	r24, 0xFF	; 255
    4ed2:	95 81       	ldd	r25, Z+5	; 0x05
    4ed4:	89 23       	and	r24, r25
    4ed6:	83 83       	std	Z+3, r24	; 0x03
    4ed8:	ed 91       	ld	r30, X+
    4eda:	fc 91       	ld	r31, X
    4edc:	35 97       	sbiw	r30, 0x05	; 5
    4ede:	80 81       	ld	r24, Z
    4ee0:	80 62       	ori	r24, 0x20	; 32
    4ee2:	80 83       	st	Z, r24
    4ee4:	80 e0       	ldi	r24, 0x00	; 0
    4ee6:	03 c0       	rjmp	.+6      	; 0x4eee <serial_sendByte+0x50>
    4ee8:	81 e0       	ldi	r24, 0x01	; 1
    4eea:	01 c0       	rjmp	.+2      	; 0x4eee <serial_sendByte+0x50>
    4eec:	82 e0       	ldi	r24, 0x02	; 2
    4eee:	df 91       	pop	r29
    4ef0:	cf 91       	pop	r28
    4ef2:	08 95       	ret

00004ef4 <serial_sendBytes>:
    4ef4:	ef 92       	push	r14
    4ef6:	ff 92       	push	r15
    4ef8:	0f 93       	push	r16
    4efa:	1f 93       	push	r17
    4efc:	cf 93       	push	r28
    4efe:	df 93       	push	r29
    4f00:	7c 01       	movw	r14, r24
    4f02:	00 97       	sbiw	r24, 0x00	; 0
    4f04:	09 f4       	brne	.+2      	; 0x4f08 <serial_sendBytes+0x14>
    4f06:	41 c0       	rjmp	.+130    	; 0x4f8a <serial_sendBytes+0x96>
    4f08:	dc 01       	movw	r26, r24
    4f0a:	12 96       	adiw	r26, 0x02	; 2
    4f0c:	ed 91       	ld	r30, X+
    4f0e:	fc 91       	ld	r31, X
    4f10:	13 97       	sbiw	r26, 0x03	; 3
    4f12:	93 81       	ldd	r25, Z+3	; 0x03
    4f14:	82 81       	ldd	r24, Z+2	; 0x02
    4f16:	98 1b       	sub	r25, r24
    4f18:	85 81       	ldd	r24, Z+5	; 0x05
    4f1a:	98 23       	and	r25, r24
    4f1c:	84 81       	ldd	r24, Z+4	; 0x04
    4f1e:	89 1b       	sub	r24, r25
    4f20:	86 17       	cp	r24, r22
    4f22:	a8 f1       	brcs	.+106    	; 0x4f8e <serial_sendBytes+0x9a>
    4f24:	66 23       	and	r22, r22
    4f26:	41 f1       	breq	.+80     	; 0x4f78 <serial_sendBytes+0x84>
    4f28:	84 2f       	mov	r24, r20
    4f2a:	95 2f       	mov	r25, r21
    4f2c:	dc 01       	movw	r26, r24
    4f2e:	61 50       	subi	r22, 0x01	; 1
    4f30:	46 2f       	mov	r20, r22
    4f32:	50 e0       	ldi	r21, 0x00	; 0
    4f34:	4f 5f       	subi	r20, 0xFF	; 255
    4f36:	5f 4f       	sbci	r21, 0xFF	; 255
    4f38:	48 0f       	add	r20, r24
    4f3a:	59 1f       	adc	r21, r25
    4f3c:	e7 01       	movw	r28, r14
    4f3e:	ea 81       	ldd	r30, Y+2	; 0x02
    4f40:	fb 81       	ldd	r31, Y+3	; 0x03
    4f42:	93 81       	ldd	r25, Z+3	; 0x03
    4f44:	82 81       	ldd	r24, Z+2	; 0x02
    4f46:	25 81       	ldd	r18, Z+5	; 0x05
    4f48:	98 1b       	sub	r25, r24
    4f4a:	92 23       	and	r25, r18
    4f4c:	84 81       	ldd	r24, Z+4	; 0x04
    4f4e:	98 17       	cp	r25, r24
    4f50:	79 f0       	breq	.+30     	; 0x4f70 <serial_sendBytes+0x7c>
    4f52:	8c 91       	ld	r24, X
    4f54:	93 81       	ldd	r25, Z+3	; 0x03
    4f56:	26 95       	lsr	r18
    4f58:	29 23       	and	r18, r25
    4f5a:	60 81       	ld	r22, Z
    4f5c:	71 81       	ldd	r23, Z+1	; 0x01
    4f5e:	8b 01       	movw	r16, r22
    4f60:	02 0f       	add	r16, r18
    4f62:	11 1d       	adc	r17, r1
    4f64:	e8 01       	movw	r28, r16
    4f66:	88 83       	st	Y, r24
    4f68:	9f 5f       	subi	r25, 0xFF	; 255
    4f6a:	85 81       	ldd	r24, Z+5	; 0x05
    4f6c:	98 23       	and	r25, r24
    4f6e:	93 83       	std	Z+3, r25	; 0x03
    4f70:	11 96       	adiw	r26, 0x01	; 1
    4f72:	a4 17       	cp	r26, r20
    4f74:	b5 07       	cpc	r27, r21
    4f76:	11 f7       	brne	.-60     	; 0x4f3c <serial_sendBytes+0x48>
    4f78:	d7 01       	movw	r26, r14
    4f7a:	ed 91       	ld	r30, X+
    4f7c:	fc 91       	ld	r31, X
    4f7e:	35 97       	sbiw	r30, 0x05	; 5
    4f80:	80 81       	ld	r24, Z
    4f82:	80 62       	ori	r24, 0x20	; 32
    4f84:	80 83       	st	Z, r24
    4f86:	80 e0       	ldi	r24, 0x00	; 0
    4f88:	03 c0       	rjmp	.+6      	; 0x4f90 <serial_sendBytes+0x9c>
    4f8a:	81 e0       	ldi	r24, 0x01	; 1
    4f8c:	01 c0       	rjmp	.+2      	; 0x4f90 <serial_sendBytes+0x9c>
    4f8e:	82 e0       	ldi	r24, 0x02	; 2
    4f90:	df 91       	pop	r29
    4f92:	cf 91       	pop	r28
    4f94:	1f 91       	pop	r17
    4f96:	0f 91       	pop	r16
    4f98:	ff 90       	pop	r15
    4f9a:	ef 90       	pop	r14
    4f9c:	08 95       	ret

00004f9e <serial_getByte>:
    4f9e:	00 97       	sbiw	r24, 0x00	; 0
    4fa0:	d1 f0       	breq	.+52     	; 0x4fd6 <serial_getByte+0x38>
    4fa2:	dc 01       	movw	r26, r24
    4fa4:	14 96       	adiw	r26, 0x04	; 4
    4fa6:	ed 91       	ld	r30, X+
    4fa8:	fc 91       	ld	r31, X
    4faa:	15 97       	sbiw	r26, 0x05	; 5
    4fac:	93 81       	ldd	r25, Z+3	; 0x03
    4fae:	82 81       	ldd	r24, Z+2	; 0x02
    4fb0:	98 17       	cp	r25, r24
    4fb2:	99 f0       	breq	.+38     	; 0x4fda <serial_getByte+0x3c>
    4fb4:	92 81       	ldd	r25, Z+2	; 0x02
    4fb6:	85 81       	ldd	r24, Z+5	; 0x05
    4fb8:	86 95       	lsr	r24
    4fba:	89 23       	and	r24, r25
    4fbc:	a0 81       	ld	r26, Z
    4fbe:	b1 81       	ldd	r27, Z+1	; 0x01
    4fc0:	a8 0f       	add	r26, r24
    4fc2:	b1 1d       	adc	r27, r1
    4fc4:	8c 91       	ld	r24, X
    4fc6:	db 01       	movw	r26, r22
    4fc8:	8c 93       	st	X, r24
    4fca:	9f 5f       	subi	r25, 0xFF	; 255
    4fcc:	85 81       	ldd	r24, Z+5	; 0x05
    4fce:	98 23       	and	r25, r24
    4fd0:	92 83       	std	Z+2, r25	; 0x02
    4fd2:	80 e0       	ldi	r24, 0x00	; 0
    4fd4:	08 95       	ret
    4fd6:	81 e0       	ldi	r24, 0x01	; 1
    4fd8:	08 95       	ret
    4fda:	83 e0       	ldi	r24, 0x03	; 3
    4fdc:	08 95       	ret

00004fde <__vector_25>:
    4fde:	1f 92       	push	r1
    4fe0:	0f 92       	push	r0
    4fe2:	0f b6       	in	r0, 0x3f	; 63
    4fe4:	0f 92       	push	r0
    4fe6:	11 24       	eor	r1, r1
    4fe8:	0b b6       	in	r0, 0x3b	; 59
    4fea:	0f 92       	push	r0
    4fec:	2f 93       	push	r18
    4fee:	3f 93       	push	r19
    4ff0:	4f 93       	push	r20
    4ff2:	5f 93       	push	r21
    4ff4:	6f 93       	push	r22
    4ff6:	7f 93       	push	r23
    4ff8:	8f 93       	push	r24
    4ffa:	9f 93       	push	r25
    4ffc:	af 93       	push	r26
    4ffe:	bf 93       	push	r27
    5000:	cf 93       	push	r28
    5002:	df 93       	push	r29
    5004:	ef 93       	push	r30
    5006:	ff 93       	push	r31
    5008:	a0 91 7f 18 	lds	r26, 0x187F	; 0x80187f <_ser_handle>
    500c:	b0 91 80 18 	lds	r27, 0x1880	; 0x801880 <_ser_handle+0x1>
    5010:	10 97       	sbiw	r26, 0x00	; 0
    5012:	11 f1       	breq	.+68     	; 0x5058 <__vector_25+0x7a>
    5014:	60 91 c6 00 	lds	r22, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7c00c6>
    5018:	14 96       	adiw	r26, 0x04	; 4
    501a:	ed 91       	ld	r30, X+
    501c:	fc 91       	ld	r31, X
    501e:	15 97       	sbiw	r26, 0x05	; 5
    5020:	93 81       	ldd	r25, Z+3	; 0x03
    5022:	82 81       	ldd	r24, Z+2	; 0x02
    5024:	25 81       	ldd	r18, Z+5	; 0x05
    5026:	98 1b       	sub	r25, r24
    5028:	92 23       	and	r25, r18
    502a:	84 81       	ldd	r24, Z+4	; 0x04
    502c:	98 17       	cp	r25, r24
    502e:	61 f0       	breq	.+24     	; 0x5048 <__vector_25+0x6a>
    5030:	83 81       	ldd	r24, Z+3	; 0x03
    5032:	26 95       	lsr	r18
    5034:	28 23       	and	r18, r24
    5036:	c0 81       	ld	r28, Z
    5038:	d1 81       	ldd	r29, Z+1	; 0x01
    503a:	c2 0f       	add	r28, r18
    503c:	d1 1d       	adc	r29, r1
    503e:	68 83       	st	Y, r22
    5040:	8f 5f       	subi	r24, 0xFF	; 255
    5042:	95 81       	ldd	r25, Z+5	; 0x05
    5044:	89 23       	and	r24, r25
    5046:	83 83       	std	Z+3, r24	; 0x03
    5048:	16 96       	adiw	r26, 0x06	; 6
    504a:	ed 91       	ld	r30, X+
    504c:	fc 91       	ld	r31, X
    504e:	17 97       	sbiw	r26, 0x07	; 7
    5050:	30 97       	sbiw	r30, 0x00	; 0
    5052:	11 f0       	breq	.+4      	; 0x5058 <__vector_25+0x7a>
    5054:	cd 01       	movw	r24, r26
    5056:	19 95       	eicall
    5058:	ff 91       	pop	r31
    505a:	ef 91       	pop	r30
    505c:	df 91       	pop	r29
    505e:	cf 91       	pop	r28
    5060:	bf 91       	pop	r27
    5062:	af 91       	pop	r26
    5064:	9f 91       	pop	r25
    5066:	8f 91       	pop	r24
    5068:	7f 91       	pop	r23
    506a:	6f 91       	pop	r22
    506c:	5f 91       	pop	r21
    506e:	4f 91       	pop	r20
    5070:	3f 91       	pop	r19
    5072:	2f 91       	pop	r18
    5074:	0f 90       	pop	r0
    5076:	0b be       	out	0x3b, r0	; 59
    5078:	0f 90       	pop	r0
    507a:	0f be       	out	0x3f, r0	; 63
    507c:	0f 90       	pop	r0
    507e:	1f 90       	pop	r1
    5080:	18 95       	reti

00005082 <__vector_26>:
    5082:	1f 92       	push	r1
    5084:	0f 92       	push	r0
    5086:	0f b6       	in	r0, 0x3f	; 63
    5088:	0f 92       	push	r0
    508a:	11 24       	eor	r1, r1
    508c:	0b b6       	in	r0, 0x3b	; 59
    508e:	0f 92       	push	r0
    5090:	2f 93       	push	r18
    5092:	8f 93       	push	r24
    5094:	9f 93       	push	r25
    5096:	af 93       	push	r26
    5098:	bf 93       	push	r27
    509a:	ef 93       	push	r30
    509c:	ff 93       	push	r31
    509e:	e0 91 7f 18 	lds	r30, 0x187F	; 0x80187f <_ser_handle>
    50a2:	f0 91 80 18 	lds	r31, 0x1880	; 0x801880 <_ser_handle+0x1>
    50a6:	30 97       	sbiw	r30, 0x00	; 0
    50a8:	b9 f0       	breq	.+46     	; 0x50d8 <__vector_26+0x56>
    50aa:	02 80       	ldd	r0, Z+2	; 0x02
    50ac:	f3 81       	ldd	r31, Z+3	; 0x03
    50ae:	e0 2d       	mov	r30, r0
    50b0:	93 81       	ldd	r25, Z+3	; 0x03
    50b2:	82 81       	ldd	r24, Z+2	; 0x02
    50b4:	98 17       	cp	r25, r24
    50b6:	b1 f0       	breq	.+44     	; 0x50e4 <__vector_26+0x62>
    50b8:	92 81       	ldd	r25, Z+2	; 0x02
    50ba:	85 81       	ldd	r24, Z+5	; 0x05
    50bc:	28 2f       	mov	r18, r24
    50be:	26 95       	lsr	r18
    50c0:	29 23       	and	r18, r25
    50c2:	a0 81       	ld	r26, Z
    50c4:	b1 81       	ldd	r27, Z+1	; 0x01
    50c6:	a2 0f       	add	r26, r18
    50c8:	b1 1d       	adc	r27, r1
    50ca:	2c 91       	ld	r18, X
    50cc:	9f 5f       	subi	r25, 0xFF	; 255
    50ce:	89 23       	and	r24, r25
    50d0:	82 83       	std	Z+2, r24	; 0x02
    50d2:	20 93 c6 00 	sts	0x00C6, r18	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7c00c6>
    50d6:	0b c0       	rjmp	.+22     	; 0x50ee <__vector_26+0x6c>
    50d8:	e1 ec       	ldi	r30, 0xC1	; 193
    50da:	f0 e0       	ldi	r31, 0x00	; 0
    50dc:	80 81       	ld	r24, Z
    50de:	8f 7d       	andi	r24, 0xDF	; 223
    50e0:	80 83       	st	Z, r24
    50e2:	05 c0       	rjmp	.+10     	; 0x50ee <__vector_26+0x6c>
    50e4:	e1 ec       	ldi	r30, 0xC1	; 193
    50e6:	f0 e0       	ldi	r31, 0x00	; 0
    50e8:	80 81       	ld	r24, Z
    50ea:	8f 7d       	andi	r24, 0xDF	; 223
    50ec:	80 83       	st	Z, r24
    50ee:	ff 91       	pop	r31
    50f0:	ef 91       	pop	r30
    50f2:	bf 91       	pop	r27
    50f4:	af 91       	pop	r26
    50f6:	9f 91       	pop	r25
    50f8:	8f 91       	pop	r24
    50fa:	2f 91       	pop	r18
    50fc:	0f 90       	pop	r0
    50fe:	0b be       	out	0x3b, r0	; 59
    5100:	0f 90       	pop	r0
    5102:	0f be       	out	0x3f, r0	; 63
    5104:	0f 90       	pop	r0
    5106:	1f 90       	pop	r1
    5108:	18 95       	reti

0000510a <__vector_36>:
    510a:	1f 92       	push	r1
    510c:	0f 92       	push	r0
    510e:	0f b6       	in	r0, 0x3f	; 63
    5110:	0f 92       	push	r0
    5112:	11 24       	eor	r1, r1
    5114:	0b b6       	in	r0, 0x3b	; 59
    5116:	0f 92       	push	r0
    5118:	2f 93       	push	r18
    511a:	3f 93       	push	r19
    511c:	4f 93       	push	r20
    511e:	5f 93       	push	r21
    5120:	6f 93       	push	r22
    5122:	7f 93       	push	r23
    5124:	8f 93       	push	r24
    5126:	9f 93       	push	r25
    5128:	af 93       	push	r26
    512a:	bf 93       	push	r27
    512c:	cf 93       	push	r28
    512e:	df 93       	push	r29
    5130:	ef 93       	push	r30
    5132:	ff 93       	push	r31
    5134:	a0 91 81 18 	lds	r26, 0x1881	; 0x801881 <_ser_handle+0x2>
    5138:	b0 91 82 18 	lds	r27, 0x1882	; 0x801882 <_ser_handle+0x3>
    513c:	10 97       	sbiw	r26, 0x00	; 0
    513e:	11 f1       	breq	.+68     	; 0x5184 <__vector_36+0x7a>
    5140:	60 91 ce 00 	lds	r22, 0x00CE	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7c00ce>
    5144:	14 96       	adiw	r26, 0x04	; 4
    5146:	ed 91       	ld	r30, X+
    5148:	fc 91       	ld	r31, X
    514a:	15 97       	sbiw	r26, 0x05	; 5
    514c:	93 81       	ldd	r25, Z+3	; 0x03
    514e:	82 81       	ldd	r24, Z+2	; 0x02
    5150:	25 81       	ldd	r18, Z+5	; 0x05
    5152:	98 1b       	sub	r25, r24
    5154:	92 23       	and	r25, r18
    5156:	84 81       	ldd	r24, Z+4	; 0x04
    5158:	98 17       	cp	r25, r24
    515a:	61 f0       	breq	.+24     	; 0x5174 <__vector_36+0x6a>
    515c:	83 81       	ldd	r24, Z+3	; 0x03
    515e:	26 95       	lsr	r18
    5160:	28 23       	and	r18, r24
    5162:	c0 81       	ld	r28, Z
    5164:	d1 81       	ldd	r29, Z+1	; 0x01
    5166:	c2 0f       	add	r28, r18
    5168:	d1 1d       	adc	r29, r1
    516a:	68 83       	st	Y, r22
    516c:	8f 5f       	subi	r24, 0xFF	; 255
    516e:	95 81       	ldd	r25, Z+5	; 0x05
    5170:	89 23       	and	r24, r25
    5172:	83 83       	std	Z+3, r24	; 0x03
    5174:	16 96       	adiw	r26, 0x06	; 6
    5176:	ed 91       	ld	r30, X+
    5178:	fc 91       	ld	r31, X
    517a:	17 97       	sbiw	r26, 0x07	; 7
    517c:	30 97       	sbiw	r30, 0x00	; 0
    517e:	11 f0       	breq	.+4      	; 0x5184 <__vector_36+0x7a>
    5180:	cd 01       	movw	r24, r26
    5182:	19 95       	eicall
    5184:	ff 91       	pop	r31
    5186:	ef 91       	pop	r30
    5188:	df 91       	pop	r29
    518a:	cf 91       	pop	r28
    518c:	bf 91       	pop	r27
    518e:	af 91       	pop	r26
    5190:	9f 91       	pop	r25
    5192:	8f 91       	pop	r24
    5194:	7f 91       	pop	r23
    5196:	6f 91       	pop	r22
    5198:	5f 91       	pop	r21
    519a:	4f 91       	pop	r20
    519c:	3f 91       	pop	r19
    519e:	2f 91       	pop	r18
    51a0:	0f 90       	pop	r0
    51a2:	0b be       	out	0x3b, r0	; 59
    51a4:	0f 90       	pop	r0
    51a6:	0f be       	out	0x3f, r0	; 63
    51a8:	0f 90       	pop	r0
    51aa:	1f 90       	pop	r1
    51ac:	18 95       	reti

000051ae <__vector_37>:
    51ae:	1f 92       	push	r1
    51b0:	0f 92       	push	r0
    51b2:	0f b6       	in	r0, 0x3f	; 63
    51b4:	0f 92       	push	r0
    51b6:	11 24       	eor	r1, r1
    51b8:	0b b6       	in	r0, 0x3b	; 59
    51ba:	0f 92       	push	r0
    51bc:	2f 93       	push	r18
    51be:	8f 93       	push	r24
    51c0:	9f 93       	push	r25
    51c2:	af 93       	push	r26
    51c4:	bf 93       	push	r27
    51c6:	ef 93       	push	r30
    51c8:	ff 93       	push	r31
    51ca:	e0 91 81 18 	lds	r30, 0x1881	; 0x801881 <_ser_handle+0x2>
    51ce:	f0 91 82 18 	lds	r31, 0x1882	; 0x801882 <_ser_handle+0x3>
    51d2:	30 97       	sbiw	r30, 0x00	; 0
    51d4:	b9 f0       	breq	.+46     	; 0x5204 <__vector_37+0x56>
    51d6:	02 80       	ldd	r0, Z+2	; 0x02
    51d8:	f3 81       	ldd	r31, Z+3	; 0x03
    51da:	e0 2d       	mov	r30, r0
    51dc:	93 81       	ldd	r25, Z+3	; 0x03
    51de:	82 81       	ldd	r24, Z+2	; 0x02
    51e0:	98 17       	cp	r25, r24
    51e2:	b1 f0       	breq	.+44     	; 0x5210 <__vector_37+0x62>
    51e4:	92 81       	ldd	r25, Z+2	; 0x02
    51e6:	85 81       	ldd	r24, Z+5	; 0x05
    51e8:	28 2f       	mov	r18, r24
    51ea:	26 95       	lsr	r18
    51ec:	29 23       	and	r18, r25
    51ee:	a0 81       	ld	r26, Z
    51f0:	b1 81       	ldd	r27, Z+1	; 0x01
    51f2:	a2 0f       	add	r26, r18
    51f4:	b1 1d       	adc	r27, r1
    51f6:	2c 91       	ld	r18, X
    51f8:	9f 5f       	subi	r25, 0xFF	; 255
    51fa:	89 23       	and	r24, r25
    51fc:	82 83       	std	Z+2, r24	; 0x02
    51fe:	20 93 ce 00 	sts	0x00CE, r18	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7c00ce>
    5202:	0b c0       	rjmp	.+22     	; 0x521a <__vector_37+0x6c>
    5204:	e9 ec       	ldi	r30, 0xC9	; 201
    5206:	f0 e0       	ldi	r31, 0x00	; 0
    5208:	80 81       	ld	r24, Z
    520a:	8f 7d       	andi	r24, 0xDF	; 223
    520c:	80 83       	st	Z, r24
    520e:	05 c0       	rjmp	.+10     	; 0x521a <__vector_37+0x6c>
    5210:	e9 ec       	ldi	r30, 0xC9	; 201
    5212:	f0 e0       	ldi	r31, 0x00	; 0
    5214:	80 81       	ld	r24, Z
    5216:	8f 7d       	andi	r24, 0xDF	; 223
    5218:	80 83       	st	Z, r24
    521a:	ff 91       	pop	r31
    521c:	ef 91       	pop	r30
    521e:	bf 91       	pop	r27
    5220:	af 91       	pop	r26
    5222:	9f 91       	pop	r25
    5224:	8f 91       	pop	r24
    5226:	2f 91       	pop	r18
    5228:	0f 90       	pop	r0
    522a:	0b be       	out	0x3b, r0	; 59
    522c:	0f 90       	pop	r0
    522e:	0f be       	out	0x3f, r0	; 63
    5230:	0f 90       	pop	r0
    5232:	1f 90       	pop	r1
    5234:	18 95       	reti

00005236 <__vector_51>:
    5236:	1f 92       	push	r1
    5238:	0f 92       	push	r0
    523a:	0f b6       	in	r0, 0x3f	; 63
    523c:	0f 92       	push	r0
    523e:	11 24       	eor	r1, r1
    5240:	0b b6       	in	r0, 0x3b	; 59
    5242:	0f 92       	push	r0
    5244:	2f 93       	push	r18
    5246:	3f 93       	push	r19
    5248:	4f 93       	push	r20
    524a:	5f 93       	push	r21
    524c:	6f 93       	push	r22
    524e:	7f 93       	push	r23
    5250:	8f 93       	push	r24
    5252:	9f 93       	push	r25
    5254:	af 93       	push	r26
    5256:	bf 93       	push	r27
    5258:	cf 93       	push	r28
    525a:	df 93       	push	r29
    525c:	ef 93       	push	r30
    525e:	ff 93       	push	r31
    5260:	a0 91 83 18 	lds	r26, 0x1883	; 0x801883 <_ser_handle+0x4>
    5264:	b0 91 84 18 	lds	r27, 0x1884	; 0x801884 <_ser_handle+0x5>
    5268:	10 97       	sbiw	r26, 0x00	; 0
    526a:	11 f1       	breq	.+68     	; 0x52b0 <__vector_51+0x7a>
    526c:	60 91 d6 00 	lds	r22, 0x00D6	; 0x8000d6 <__TEXT_REGION_LENGTH__+0x7c00d6>
    5270:	14 96       	adiw	r26, 0x04	; 4
    5272:	ed 91       	ld	r30, X+
    5274:	fc 91       	ld	r31, X
    5276:	15 97       	sbiw	r26, 0x05	; 5
    5278:	93 81       	ldd	r25, Z+3	; 0x03
    527a:	82 81       	ldd	r24, Z+2	; 0x02
    527c:	25 81       	ldd	r18, Z+5	; 0x05
    527e:	98 1b       	sub	r25, r24
    5280:	92 23       	and	r25, r18
    5282:	84 81       	ldd	r24, Z+4	; 0x04
    5284:	98 17       	cp	r25, r24
    5286:	61 f0       	breq	.+24     	; 0x52a0 <__vector_51+0x6a>
    5288:	83 81       	ldd	r24, Z+3	; 0x03
    528a:	26 95       	lsr	r18
    528c:	28 23       	and	r18, r24
    528e:	c0 81       	ld	r28, Z
    5290:	d1 81       	ldd	r29, Z+1	; 0x01
    5292:	c2 0f       	add	r28, r18
    5294:	d1 1d       	adc	r29, r1
    5296:	68 83       	st	Y, r22
    5298:	8f 5f       	subi	r24, 0xFF	; 255
    529a:	95 81       	ldd	r25, Z+5	; 0x05
    529c:	89 23       	and	r24, r25
    529e:	83 83       	std	Z+3, r24	; 0x03
    52a0:	16 96       	adiw	r26, 0x06	; 6
    52a2:	ed 91       	ld	r30, X+
    52a4:	fc 91       	ld	r31, X
    52a6:	17 97       	sbiw	r26, 0x07	; 7
    52a8:	30 97       	sbiw	r30, 0x00	; 0
    52aa:	11 f0       	breq	.+4      	; 0x52b0 <__vector_51+0x7a>
    52ac:	cd 01       	movw	r24, r26
    52ae:	19 95       	eicall
    52b0:	ff 91       	pop	r31
    52b2:	ef 91       	pop	r30
    52b4:	df 91       	pop	r29
    52b6:	cf 91       	pop	r28
    52b8:	bf 91       	pop	r27
    52ba:	af 91       	pop	r26
    52bc:	9f 91       	pop	r25
    52be:	8f 91       	pop	r24
    52c0:	7f 91       	pop	r23
    52c2:	6f 91       	pop	r22
    52c4:	5f 91       	pop	r21
    52c6:	4f 91       	pop	r20
    52c8:	3f 91       	pop	r19
    52ca:	2f 91       	pop	r18
    52cc:	0f 90       	pop	r0
    52ce:	0b be       	out	0x3b, r0	; 59
    52d0:	0f 90       	pop	r0
    52d2:	0f be       	out	0x3f, r0	; 63
    52d4:	0f 90       	pop	r0
    52d6:	1f 90       	pop	r1
    52d8:	18 95       	reti

000052da <__vector_52>:
    52da:	1f 92       	push	r1
    52dc:	0f 92       	push	r0
    52de:	0f b6       	in	r0, 0x3f	; 63
    52e0:	0f 92       	push	r0
    52e2:	11 24       	eor	r1, r1
    52e4:	0b b6       	in	r0, 0x3b	; 59
    52e6:	0f 92       	push	r0
    52e8:	2f 93       	push	r18
    52ea:	8f 93       	push	r24
    52ec:	9f 93       	push	r25
    52ee:	af 93       	push	r26
    52f0:	bf 93       	push	r27
    52f2:	ef 93       	push	r30
    52f4:	ff 93       	push	r31
    52f6:	e0 91 83 18 	lds	r30, 0x1883	; 0x801883 <_ser_handle+0x4>
    52fa:	f0 91 84 18 	lds	r31, 0x1884	; 0x801884 <_ser_handle+0x5>
    52fe:	30 97       	sbiw	r30, 0x00	; 0
    5300:	b9 f0       	breq	.+46     	; 0x5330 <__vector_52+0x56>
    5302:	02 80       	ldd	r0, Z+2	; 0x02
    5304:	f3 81       	ldd	r31, Z+3	; 0x03
    5306:	e0 2d       	mov	r30, r0
    5308:	93 81       	ldd	r25, Z+3	; 0x03
    530a:	82 81       	ldd	r24, Z+2	; 0x02
    530c:	98 17       	cp	r25, r24
    530e:	b1 f0       	breq	.+44     	; 0x533c <__vector_52+0x62>
    5310:	92 81       	ldd	r25, Z+2	; 0x02
    5312:	85 81       	ldd	r24, Z+5	; 0x05
    5314:	28 2f       	mov	r18, r24
    5316:	26 95       	lsr	r18
    5318:	29 23       	and	r18, r25
    531a:	a0 81       	ld	r26, Z
    531c:	b1 81       	ldd	r27, Z+1	; 0x01
    531e:	a2 0f       	add	r26, r18
    5320:	b1 1d       	adc	r27, r1
    5322:	2c 91       	ld	r18, X
    5324:	9f 5f       	subi	r25, 0xFF	; 255
    5326:	89 23       	and	r24, r25
    5328:	82 83       	std	Z+2, r24	; 0x02
    532a:	20 93 d6 00 	sts	0x00D6, r18	; 0x8000d6 <__TEXT_REGION_LENGTH__+0x7c00d6>
    532e:	0b c0       	rjmp	.+22     	; 0x5346 <__vector_52+0x6c>
    5330:	e1 ed       	ldi	r30, 0xD1	; 209
    5332:	f0 e0       	ldi	r31, 0x00	; 0
    5334:	80 81       	ld	r24, Z
    5336:	8f 7d       	andi	r24, 0xDF	; 223
    5338:	80 83       	st	Z, r24
    533a:	05 c0       	rjmp	.+10     	; 0x5346 <__vector_52+0x6c>
    533c:	e1 ed       	ldi	r30, 0xD1	; 209
    533e:	f0 e0       	ldi	r31, 0x00	; 0
    5340:	80 81       	ld	r24, Z
    5342:	8f 7d       	andi	r24, 0xDF	; 223
    5344:	80 83       	st	Z, r24
    5346:	ff 91       	pop	r31
    5348:	ef 91       	pop	r30
    534a:	bf 91       	pop	r27
    534c:	af 91       	pop	r26
    534e:	9f 91       	pop	r25
    5350:	8f 91       	pop	r24
    5352:	2f 91       	pop	r18
    5354:	0f 90       	pop	r0
    5356:	0b be       	out	0x3b, r0	; 59
    5358:	0f 90       	pop	r0
    535a:	0f be       	out	0x3f, r0	; 63
    535c:	0f 90       	pop	r0
    535e:	1f 90       	pop	r1
    5360:	18 95       	reti

00005362 <__vector_54>:
    5362:	1f 92       	push	r1
    5364:	0f 92       	push	r0
    5366:	0f b6       	in	r0, 0x3f	; 63
    5368:	0f 92       	push	r0
    536a:	11 24       	eor	r1, r1
    536c:	0b b6       	in	r0, 0x3b	; 59
    536e:	0f 92       	push	r0
    5370:	2f 93       	push	r18
    5372:	3f 93       	push	r19
    5374:	4f 93       	push	r20
    5376:	5f 93       	push	r21
    5378:	6f 93       	push	r22
    537a:	7f 93       	push	r23
    537c:	8f 93       	push	r24
    537e:	9f 93       	push	r25
    5380:	af 93       	push	r26
    5382:	bf 93       	push	r27
    5384:	cf 93       	push	r28
    5386:	df 93       	push	r29
    5388:	ef 93       	push	r30
    538a:	ff 93       	push	r31
    538c:	a0 91 85 18 	lds	r26, 0x1885	; 0x801885 <_ser_handle+0x6>
    5390:	b0 91 86 18 	lds	r27, 0x1886	; 0x801886 <_ser_handle+0x7>
    5394:	10 97       	sbiw	r26, 0x00	; 0
    5396:	11 f1       	breq	.+68     	; 0x53dc <__vector_54+0x7a>
    5398:	60 91 36 01 	lds	r22, 0x0136	; 0x800136 <__TEXT_REGION_LENGTH__+0x7c0136>
    539c:	14 96       	adiw	r26, 0x04	; 4
    539e:	ed 91       	ld	r30, X+
    53a0:	fc 91       	ld	r31, X
    53a2:	15 97       	sbiw	r26, 0x05	; 5
    53a4:	93 81       	ldd	r25, Z+3	; 0x03
    53a6:	82 81       	ldd	r24, Z+2	; 0x02
    53a8:	25 81       	ldd	r18, Z+5	; 0x05
    53aa:	98 1b       	sub	r25, r24
    53ac:	92 23       	and	r25, r18
    53ae:	84 81       	ldd	r24, Z+4	; 0x04
    53b0:	98 17       	cp	r25, r24
    53b2:	61 f0       	breq	.+24     	; 0x53cc <__vector_54+0x6a>
    53b4:	83 81       	ldd	r24, Z+3	; 0x03
    53b6:	26 95       	lsr	r18
    53b8:	28 23       	and	r18, r24
    53ba:	c0 81       	ld	r28, Z
    53bc:	d1 81       	ldd	r29, Z+1	; 0x01
    53be:	c2 0f       	add	r28, r18
    53c0:	d1 1d       	adc	r29, r1
    53c2:	68 83       	st	Y, r22
    53c4:	8f 5f       	subi	r24, 0xFF	; 255
    53c6:	95 81       	ldd	r25, Z+5	; 0x05
    53c8:	89 23       	and	r24, r25
    53ca:	83 83       	std	Z+3, r24	; 0x03
    53cc:	16 96       	adiw	r26, 0x06	; 6
    53ce:	ed 91       	ld	r30, X+
    53d0:	fc 91       	ld	r31, X
    53d2:	17 97       	sbiw	r26, 0x07	; 7
    53d4:	30 97       	sbiw	r30, 0x00	; 0
    53d6:	11 f0       	breq	.+4      	; 0x53dc <__vector_54+0x7a>
    53d8:	cd 01       	movw	r24, r26
    53da:	19 95       	eicall
    53dc:	ff 91       	pop	r31
    53de:	ef 91       	pop	r30
    53e0:	df 91       	pop	r29
    53e2:	cf 91       	pop	r28
    53e4:	bf 91       	pop	r27
    53e6:	af 91       	pop	r26
    53e8:	9f 91       	pop	r25
    53ea:	8f 91       	pop	r24
    53ec:	7f 91       	pop	r23
    53ee:	6f 91       	pop	r22
    53f0:	5f 91       	pop	r21
    53f2:	4f 91       	pop	r20
    53f4:	3f 91       	pop	r19
    53f6:	2f 91       	pop	r18
    53f8:	0f 90       	pop	r0
    53fa:	0b be       	out	0x3b, r0	; 59
    53fc:	0f 90       	pop	r0
    53fe:	0f be       	out	0x3f, r0	; 63
    5400:	0f 90       	pop	r0
    5402:	1f 90       	pop	r1
    5404:	18 95       	reti

00005406 <__vector_55>:
    5406:	1f 92       	push	r1
    5408:	0f 92       	push	r0
    540a:	0f b6       	in	r0, 0x3f	; 63
    540c:	0f 92       	push	r0
    540e:	11 24       	eor	r1, r1
    5410:	0b b6       	in	r0, 0x3b	; 59
    5412:	0f 92       	push	r0
    5414:	2f 93       	push	r18
    5416:	8f 93       	push	r24
    5418:	9f 93       	push	r25
    541a:	af 93       	push	r26
    541c:	bf 93       	push	r27
    541e:	ef 93       	push	r30
    5420:	ff 93       	push	r31
    5422:	e0 91 85 18 	lds	r30, 0x1885	; 0x801885 <_ser_handle+0x6>
    5426:	f0 91 86 18 	lds	r31, 0x1886	; 0x801886 <_ser_handle+0x7>
    542a:	30 97       	sbiw	r30, 0x00	; 0
    542c:	b9 f0       	breq	.+46     	; 0x545c <__vector_55+0x56>
    542e:	02 80       	ldd	r0, Z+2	; 0x02
    5430:	f3 81       	ldd	r31, Z+3	; 0x03
    5432:	e0 2d       	mov	r30, r0
    5434:	93 81       	ldd	r25, Z+3	; 0x03
    5436:	82 81       	ldd	r24, Z+2	; 0x02
    5438:	98 17       	cp	r25, r24
    543a:	b1 f0       	breq	.+44     	; 0x5468 <__vector_55+0x62>
    543c:	92 81       	ldd	r25, Z+2	; 0x02
    543e:	85 81       	ldd	r24, Z+5	; 0x05
    5440:	28 2f       	mov	r18, r24
    5442:	26 95       	lsr	r18
    5444:	29 23       	and	r18, r25
    5446:	a0 81       	ld	r26, Z
    5448:	b1 81       	ldd	r27, Z+1	; 0x01
    544a:	a2 0f       	add	r26, r18
    544c:	b1 1d       	adc	r27, r1
    544e:	2c 91       	ld	r18, X
    5450:	9f 5f       	subi	r25, 0xFF	; 255
    5452:	89 23       	and	r24, r25
    5454:	82 83       	std	Z+2, r24	; 0x02
    5456:	20 93 36 01 	sts	0x0136, r18	; 0x800136 <__TEXT_REGION_LENGTH__+0x7c0136>
    545a:	0b c0       	rjmp	.+22     	; 0x5472 <__vector_55+0x6c>
    545c:	e1 e3       	ldi	r30, 0x31	; 49
    545e:	f1 e0       	ldi	r31, 0x01	; 1
    5460:	80 81       	ld	r24, Z
    5462:	8f 7d       	andi	r24, 0xDF	; 223
    5464:	80 83       	st	Z, r24
    5466:	05 c0       	rjmp	.+10     	; 0x5472 <__vector_55+0x6c>
    5468:	e1 e3       	ldi	r30, 0x31	; 49
    546a:	f1 e0       	ldi	r31, 0x01	; 1
    546c:	80 81       	ld	r24, Z
    546e:	8f 7d       	andi	r24, 0xDF	; 223
    5470:	80 83       	st	Z, r24
    5472:	ff 91       	pop	r31
    5474:	ef 91       	pop	r30
    5476:	bf 91       	pop	r27
    5478:	af 91       	pop	r26
    547a:	9f 91       	pop	r25
    547c:	8f 91       	pop	r24
    547e:	2f 91       	pop	r18
    5480:	0f 90       	pop	r0
    5482:	0b be       	out	0x3b, r0	; 59
    5484:	0f 90       	pop	r0
    5486:	0f be       	out	0x3f, r0	; 63
    5488:	0f 90       	pop	r0
    548a:	1f 90       	pop	r1
    548c:	18 95       	reti

0000548e <usart_getchar>:
    548e:	cf 93       	push	r28
    5490:	df 93       	push	r29
    5492:	1f 92       	push	r1
    5494:	cd b7       	in	r28, 0x3d	; 61
    5496:	de b7       	in	r29, 0x3e	; 62
    5498:	be 01       	movw	r22, r28
    549a:	6f 5f       	subi	r22, 0xFF	; 255
    549c:	7f 4f       	sbci	r23, 0xFF	; 255
    549e:	80 91 87 18 	lds	r24, 0x1887	; 0x801887 <_com_serial_instance>
    54a2:	90 91 88 18 	lds	r25, 0x1888	; 0x801888 <_com_serial_instance+0x1>
    54a6:	7b dd       	rcall	.-1290   	; 0x4f9e <serial_getByte>
    54a8:	81 11       	cpse	r24, r1
    54aa:	f6 cf       	rjmp	.-20     	; 0x5498 <usart_getchar+0xa>
    54ac:	89 81       	ldd	r24, Y+1	; 0x01
    54ae:	90 e0       	ldi	r25, 0x00	; 0
    54b0:	0f 90       	pop	r0
    54b2:	df 91       	pop	r29
    54b4:	cf 91       	pop	r28
    54b6:	08 95       	ret

000054b8 <usart_putchar>:
    54b8:	68 2f       	mov	r22, r24
    54ba:	80 91 87 18 	lds	r24, 0x1887	; 0x801887 <_com_serial_instance>
    54be:	90 91 88 18 	lds	r25, 0x1888	; 0x801888 <_com_serial_instance+0x1>
    54c2:	ed dc       	rcall	.-1574   	; 0x4e9e <serial_sendByte>
    54c4:	80 e0       	ldi	r24, 0x00	; 0
    54c6:	90 e0       	ldi	r25, 0x00	; 0
    54c8:	08 95       	ret

000054ca <stdio_initialise>:
    54ca:	8f 92       	push	r8
    54cc:	9f 92       	push	r9
    54ce:	af 92       	push	r10
    54d0:	cf 92       	push	r12
    54d2:	ef 92       	push	r14
    54d4:	0f 93       	push	r16
    54d6:	81 2c       	mov	r8, r1
    54d8:	91 2c       	mov	r9, r1
    54da:	68 94       	set
    54dc:	aa 24       	eor	r10, r10
    54de:	a7 f8       	bld	r10, 7
    54e0:	68 94       	set
    54e2:	cc 24       	eor	r12, r12
    54e4:	c7 f8       	bld	r12, 7
    54e6:	e1 2c       	mov	r14, r1
    54e8:	00 e0       	ldi	r16, 0x00	; 0
    54ea:	23 e0       	ldi	r18, 0x03	; 3
    54ec:	40 e0       	ldi	r20, 0x00	; 0
    54ee:	51 ee       	ldi	r21, 0xE1	; 225
    54f0:	60 e0       	ldi	r22, 0x00	; 0
    54f2:	70 e0       	ldi	r23, 0x00	; 0
    54f4:	35 dc       	rcall	.-1942   	; 0x4d60 <serial_create>
    54f6:	90 93 88 18 	sts	0x1888, r25	; 0x801888 <_com_serial_instance+0x1>
    54fa:	80 93 87 18 	sts	0x1887, r24	; 0x801887 <_com_serial_instance>
    54fe:	e1 e1       	ldi	r30, 0x11	; 17
    5500:	f9 e1       	ldi	r31, 0x19	; 25
    5502:	83 e1       	ldi	r24, 0x13	; 19
    5504:	92 e0       	ldi	r25, 0x02	; 2
    5506:	91 83       	std	Z+1, r25	; 0x01
    5508:	80 83       	st	Z, r24
    550a:	93 83       	std	Z+3, r25	; 0x03
    550c:	82 83       	std	Z+2, r24	; 0x02
    550e:	0f 91       	pop	r16
    5510:	ef 90       	pop	r14
    5512:	cf 90       	pop	r12
    5514:	af 90       	pop	r10
    5516:	9f 90       	pop	r9
    5518:	8f 90       	pop	r8
    551a:	08 95       	ret

0000551c <_turn_off>:
    551c:	90 e0       	ldi	r25, 0x00	; 0
    551e:	fc 01       	movw	r30, r24
    5520:	ee 0f       	add	r30, r30
    5522:	ff 1f       	adc	r31, r31
    5524:	e8 0f       	add	r30, r24
    5526:	f9 1f       	adc	r31, r25
    5528:	ee 0f       	add	r30, r30
    552a:	ff 1f       	adc	r31, r31
    552c:	e7 57       	subi	r30, 0x77	; 119
    552e:	f7 4e       	sbci	r31, 0xE7	; 231
    5530:	23 81       	ldd	r18, Z+3	; 0x03
    5532:	21 11       	cpse	r18, r1
    5534:	1f c0       	rjmp	.+62     	; 0x5574 <_turn_off+0x58>
    5536:	9c 01       	movw	r18, r24
    5538:	22 0f       	add	r18, r18
    553a:	33 1f       	adc	r19, r19
    553c:	f9 01       	movw	r30, r18
    553e:	e8 0f       	add	r30, r24
    5540:	f9 1f       	adc	r31, r25
    5542:	ee 0f       	add	r30, r30
    5544:	ff 1f       	adc	r31, r31
    5546:	e7 57       	subi	r30, 0x77	; 119
    5548:	f7 4e       	sbci	r31, 0xE7	; 231
    554a:	a0 81       	ld	r26, Z
    554c:	b1 81       	ldd	r27, Z+1	; 0x01
    554e:	4c 91       	ld	r20, X
    5550:	f9 01       	movw	r30, r18
    5552:	e8 0f       	add	r30, r24
    5554:	f9 1f       	adc	r31, r25
    5556:	ee 0f       	add	r30, r30
    5558:	ff 1f       	adc	r31, r31
    555a:	e7 57       	subi	r30, 0x77	; 119
    555c:	f7 4e       	sbci	r31, 0xE7	; 231
    555e:	81 e0       	ldi	r24, 0x01	; 1
    5560:	90 e0       	ldi	r25, 0x00	; 0
    5562:	02 80       	ldd	r0, Z+2	; 0x02
    5564:	02 c0       	rjmp	.+4      	; 0x556a <_turn_off+0x4e>
    5566:	88 0f       	add	r24, r24
    5568:	99 1f       	adc	r25, r25
    556a:	0a 94       	dec	r0
    556c:	e2 f7       	brpl	.-8      	; 0x5566 <_turn_off+0x4a>
    556e:	84 2b       	or	r24, r20
    5570:	8c 93       	st	X, r24
    5572:	08 95       	ret
    5574:	fc 01       	movw	r30, r24
    5576:	ee 0f       	add	r30, r30
    5578:	ff 1f       	adc	r31, r31
    557a:	df 01       	movw	r26, r30
    557c:	a8 0f       	add	r26, r24
    557e:	b9 1f       	adc	r27, r25
    5580:	aa 0f       	add	r26, r26
    5582:	bb 1f       	adc	r27, r27
    5584:	a7 57       	subi	r26, 0x77	; 119
    5586:	b7 4e       	sbci	r27, 0xE7	; 231
    5588:	0d 90       	ld	r0, X+
    558a:	bc 91       	ld	r27, X
    558c:	a0 2d       	mov	r26, r0
    558e:	2c 91       	ld	r18, X
    5590:	e8 0f       	add	r30, r24
    5592:	f9 1f       	adc	r31, r25
    5594:	ee 0f       	add	r30, r30
    5596:	ff 1f       	adc	r31, r31
    5598:	e7 57       	subi	r30, 0x77	; 119
    559a:	f7 4e       	sbci	r31, 0xE7	; 231
    559c:	81 e0       	ldi	r24, 0x01	; 1
    559e:	90 e0       	ldi	r25, 0x00	; 0
    55a0:	02 80       	ldd	r0, Z+2	; 0x02
    55a2:	02 c0       	rjmp	.+4      	; 0x55a8 <_turn_off+0x8c>
    55a4:	88 0f       	add	r24, r24
    55a6:	99 1f       	adc	r25, r25
    55a8:	0a 94       	dec	r0
    55aa:	e2 f7       	brpl	.-8      	; 0x55a4 <_turn_off+0x88>
    55ac:	80 95       	com	r24
    55ae:	82 23       	and	r24, r18
    55b0:	8c 93       	st	X, r24
    55b2:	08 95       	ret

000055b4 <_turn_on>:
    55b4:	90 e0       	ldi	r25, 0x00	; 0
    55b6:	fc 01       	movw	r30, r24
    55b8:	ee 0f       	add	r30, r30
    55ba:	ff 1f       	adc	r31, r31
    55bc:	e8 0f       	add	r30, r24
    55be:	f9 1f       	adc	r31, r25
    55c0:	ee 0f       	add	r30, r30
    55c2:	ff 1f       	adc	r31, r31
    55c4:	e7 57       	subi	r30, 0x77	; 119
    55c6:	f7 4e       	sbci	r31, 0xE7	; 231
    55c8:	23 81       	ldd	r18, Z+3	; 0x03
    55ca:	21 11       	cpse	r18, r1
    55cc:	20 c0       	rjmp	.+64     	; 0x560e <_turn_on+0x5a>
    55ce:	9c 01       	movw	r18, r24
    55d0:	22 0f       	add	r18, r18
    55d2:	33 1f       	adc	r19, r19
    55d4:	f9 01       	movw	r30, r18
    55d6:	e8 0f       	add	r30, r24
    55d8:	f9 1f       	adc	r31, r25
    55da:	ee 0f       	add	r30, r30
    55dc:	ff 1f       	adc	r31, r31
    55de:	e7 57       	subi	r30, 0x77	; 119
    55e0:	f7 4e       	sbci	r31, 0xE7	; 231
    55e2:	a0 81       	ld	r26, Z
    55e4:	b1 81       	ldd	r27, Z+1	; 0x01
    55e6:	4c 91       	ld	r20, X
    55e8:	f9 01       	movw	r30, r18
    55ea:	e8 0f       	add	r30, r24
    55ec:	f9 1f       	adc	r31, r25
    55ee:	ee 0f       	add	r30, r30
    55f0:	ff 1f       	adc	r31, r31
    55f2:	e7 57       	subi	r30, 0x77	; 119
    55f4:	f7 4e       	sbci	r31, 0xE7	; 231
    55f6:	81 e0       	ldi	r24, 0x01	; 1
    55f8:	90 e0       	ldi	r25, 0x00	; 0
    55fa:	02 80       	ldd	r0, Z+2	; 0x02
    55fc:	02 c0       	rjmp	.+4      	; 0x5602 <_turn_on+0x4e>
    55fe:	88 0f       	add	r24, r24
    5600:	99 1f       	adc	r25, r25
    5602:	0a 94       	dec	r0
    5604:	e2 f7       	brpl	.-8      	; 0x55fe <_turn_on+0x4a>
    5606:	80 95       	com	r24
    5608:	84 23       	and	r24, r20
    560a:	8c 93       	st	X, r24
    560c:	08 95       	ret
    560e:	fc 01       	movw	r30, r24
    5610:	ee 0f       	add	r30, r30
    5612:	ff 1f       	adc	r31, r31
    5614:	df 01       	movw	r26, r30
    5616:	a8 0f       	add	r26, r24
    5618:	b9 1f       	adc	r27, r25
    561a:	aa 0f       	add	r26, r26
    561c:	bb 1f       	adc	r27, r27
    561e:	a7 57       	subi	r26, 0x77	; 119
    5620:	b7 4e       	sbci	r27, 0xE7	; 231
    5622:	0d 90       	ld	r0, X+
    5624:	bc 91       	ld	r27, X
    5626:	a0 2d       	mov	r26, r0
    5628:	2c 91       	ld	r18, X
    562a:	e8 0f       	add	r30, r24
    562c:	f9 1f       	adc	r31, r25
    562e:	ee 0f       	add	r30, r30
    5630:	ff 1f       	adc	r31, r31
    5632:	e7 57       	subi	r30, 0x77	; 119
    5634:	f7 4e       	sbci	r31, 0xE7	; 231
    5636:	81 e0       	ldi	r24, 0x01	; 1
    5638:	90 e0       	ldi	r25, 0x00	; 0
    563a:	02 80       	ldd	r0, Z+2	; 0x02
    563c:	02 c0       	rjmp	.+4      	; 0x5642 <_turn_on+0x8e>
    563e:	88 0f       	add	r24, r24
    5640:	99 1f       	adc	r25, r25
    5642:	0a 94       	dec	r0
    5644:	e2 f7       	brpl	.-8      	; 0x563e <_turn_on+0x8a>
    5646:	82 2b       	or	r24, r18
    5648:	8c 93       	st	X, r24
    564a:	08 95       	ret

0000564c <status_leds_slowBlink>:
    564c:	cf 93       	push	r28
    564e:	df 93       	push	r29
    5650:	90 e0       	ldi	r25, 0x00	; 0
    5652:	fc 01       	movw	r30, r24
    5654:	ee 0f       	add	r30, r30
    5656:	ff 1f       	adc	r31, r31
    5658:	df 01       	movw	r26, r30
    565a:	a8 0f       	add	r26, r24
    565c:	b9 1f       	adc	r27, r25
    565e:	aa 0f       	add	r26, r26
    5660:	bb 1f       	adc	r27, r27
    5662:	a7 57       	subi	r26, 0x77	; 119
    5664:	b7 4e       	sbci	r27, 0xE7	; 231
    5666:	cd 91       	ld	r28, X+
    5668:	dc 91       	ld	r29, X
    566a:	11 97       	sbiw	r26, 0x01	; 1
    566c:	48 81       	ld	r20, Y
    566e:	21 e0       	ldi	r18, 0x01	; 1
    5670:	30 e0       	ldi	r19, 0x00	; 0
    5672:	12 96       	adiw	r26, 0x02	; 2
    5674:	0c 90       	ld	r0, X
    5676:	12 97       	sbiw	r26, 0x02	; 2
    5678:	02 c0       	rjmp	.+4      	; 0x567e <status_leds_slowBlink+0x32>
    567a:	22 0f       	add	r18, r18
    567c:	33 1f       	adc	r19, r19
    567e:	0a 94       	dec	r0
    5680:	e2 f7       	brpl	.-8      	; 0x567a <status_leds_slowBlink+0x2e>
    5682:	24 27       	eor	r18, r20
    5684:	28 83       	st	Y, r18
    5686:	fd 01       	movw	r30, r26
    5688:	81 e0       	ldi	r24, 0x01	; 1
    568a:	84 83       	std	Z+4, r24	; 0x04
    568c:	df 91       	pop	r29
    568e:	cf 91       	pop	r28
    5690:	08 95       	ret

00005692 <status_leds_fastBlink>:
    5692:	cf 93       	push	r28
    5694:	df 93       	push	r29
    5696:	90 e0       	ldi	r25, 0x00	; 0
    5698:	fc 01       	movw	r30, r24
    569a:	ee 0f       	add	r30, r30
    569c:	ff 1f       	adc	r31, r31
    569e:	df 01       	movw	r26, r30
    56a0:	a8 0f       	add	r26, r24
    56a2:	b9 1f       	adc	r27, r25
    56a4:	aa 0f       	add	r26, r26
    56a6:	bb 1f       	adc	r27, r27
    56a8:	a7 57       	subi	r26, 0x77	; 119
    56aa:	b7 4e       	sbci	r27, 0xE7	; 231
    56ac:	cd 91       	ld	r28, X+
    56ae:	dc 91       	ld	r29, X
    56b0:	11 97       	sbiw	r26, 0x01	; 1
    56b2:	48 81       	ld	r20, Y
    56b4:	21 e0       	ldi	r18, 0x01	; 1
    56b6:	30 e0       	ldi	r19, 0x00	; 0
    56b8:	12 96       	adiw	r26, 0x02	; 2
    56ba:	0c 90       	ld	r0, X
    56bc:	12 97       	sbiw	r26, 0x02	; 2
    56be:	02 c0       	rjmp	.+4      	; 0x56c4 <status_leds_fastBlink+0x32>
    56c0:	22 0f       	add	r18, r18
    56c2:	33 1f       	adc	r19, r19
    56c4:	0a 94       	dec	r0
    56c6:	e2 f7       	brpl	.-8      	; 0x56c0 <status_leds_fastBlink+0x2e>
    56c8:	24 27       	eor	r18, r20
    56ca:	28 83       	st	Y, r18
    56cc:	fd 01       	movw	r30, r26
    56ce:	82 e0       	ldi	r24, 0x02	; 2
    56d0:	84 83       	std	Z+4, r24	; 0x04
    56d2:	df 91       	pop	r29
    56d4:	cf 91       	pop	r28
    56d6:	08 95       	ret

000056d8 <status_leds_ledOn>:
    56d8:	28 2f       	mov	r18, r24
    56da:	30 e0       	ldi	r19, 0x00	; 0
    56dc:	f9 01       	movw	r30, r18
    56de:	ee 0f       	add	r30, r30
    56e0:	ff 1f       	adc	r31, r31
    56e2:	e2 0f       	add	r30, r18
    56e4:	f3 1f       	adc	r31, r19
    56e6:	ee 0f       	add	r30, r30
    56e8:	ff 1f       	adc	r31, r31
    56ea:	e7 57       	subi	r30, 0x77	; 119
    56ec:	f7 4e       	sbci	r31, 0xE7	; 231
    56ee:	93 e0       	ldi	r25, 0x03	; 3
    56f0:	94 83       	std	Z+4, r25	; 0x04
    56f2:	60 cf       	rjmp	.-320    	; 0x55b4 <_turn_on>
    56f4:	08 95       	ret

000056f6 <status_leds_ledOff>:
    56f6:	28 2f       	mov	r18, r24
    56f8:	30 e0       	ldi	r19, 0x00	; 0
    56fa:	f9 01       	movw	r30, r18
    56fc:	ee 0f       	add	r30, r30
    56fe:	ff 1f       	adc	r31, r31
    5700:	e2 0f       	add	r30, r18
    5702:	f3 1f       	adc	r31, r19
    5704:	ee 0f       	add	r30, r30
    5706:	ff 1f       	adc	r31, r31
    5708:	e7 57       	subi	r30, 0x77	; 119
    570a:	f7 4e       	sbci	r31, 0xE7	; 231
    570c:	94 e0       	ldi	r25, 0x04	; 4
    570e:	94 83       	std	Z+4, r25	; 0x04
    5710:	05 cf       	rjmp	.-502    	; 0x551c <_turn_off>
    5712:	08 95       	ret

00005714 <status_leds_longPuls>:
    5714:	90 e0       	ldi	r25, 0x00	; 0
    5716:	fc 01       	movw	r30, r24
    5718:	ee 0f       	add	r30, r30
    571a:	ff 1f       	adc	r31, r31
    571c:	df 01       	movw	r26, r30
    571e:	a8 0f       	add	r26, r24
    5720:	b9 1f       	adc	r27, r25
    5722:	aa 0f       	add	r26, r26
    5724:	bb 1f       	adc	r27, r27
    5726:	a7 57       	subi	r26, 0x77	; 119
    5728:	b7 4e       	sbci	r27, 0xE7	; 231
    572a:	26 e0       	ldi	r18, 0x06	; 6
    572c:	15 96       	adiw	r26, 0x05	; 5
    572e:	2c 93       	st	X, r18
    5730:	15 97       	sbiw	r26, 0x05	; 5
    5732:	fd 01       	movw	r30, r26
    5734:	14 82       	std	Z+4, r1	; 0x04
    5736:	08 95       	ret

00005738 <status_leds_shortPuls>:
    5738:	90 e0       	ldi	r25, 0x00	; 0
    573a:	fc 01       	movw	r30, r24
    573c:	ee 0f       	add	r30, r30
    573e:	ff 1f       	adc	r31, r31
    5740:	df 01       	movw	r26, r30
    5742:	a8 0f       	add	r26, r24
    5744:	b9 1f       	adc	r27, r25
    5746:	aa 0f       	add	r26, r26
    5748:	bb 1f       	adc	r27, r27
    574a:	a7 57       	subi	r26, 0x77	; 119
    574c:	b7 4e       	sbci	r27, 0xE7	; 231
    574e:	15 96       	adiw	r26, 0x05	; 5
    5750:	1c 92       	st	X, r1
    5752:	15 97       	sbiw	r26, 0x05	; 5
    5754:	fd 01       	movw	r30, r26
    5756:	14 82       	std	Z+4, r1	; 0x04
    5758:	08 95       	ret

0000575a <_initTwiInterface>:
    575a:	80 91 af 18 	lds	r24, 0x18AF	; 0x8018af <_twiIsInitiated>
    575e:	81 11       	cpse	r24, r1
    5760:	0c c0       	rjmp	.+24     	; 0x577a <_initTwiInterface+0x20>
    5762:	8c e0       	ldi	r24, 0x0C	; 12
    5764:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7c00b8>
    5768:	8f ef       	ldi	r24, 0xFF	; 255
    576a:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7c00bb>
    576e:	84 e0       	ldi	r24, 0x04	; 4
    5770:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    5774:	81 e0       	ldi	r24, 0x01	; 1
    5776:	80 93 af 18 	sts	0x18AF, r24	; 0x8018af <_twiIsInitiated>
    577a:	08 95       	ret

0000577c <twiCreate>:
    577c:	af 92       	push	r10
    577e:	bf 92       	push	r11
    5780:	cf 92       	push	r12
    5782:	df 92       	push	r13
    5784:	ef 92       	push	r14
    5786:	ff 92       	push	r15
    5788:	0f 93       	push	r16
    578a:	1f 93       	push	r17
    578c:	cf 93       	push	r28
    578e:	df 93       	push	r29
    5790:	a8 2e       	mov	r10, r24
    5792:	b6 2e       	mov	r11, r22
    5794:	69 01       	movw	r12, r18
    5796:	7a 01       	movw	r14, r20
    5798:	84 e0       	ldi	r24, 0x04	; 4
    579a:	90 e0       	ldi	r25, 0x00	; 0
    579c:	29 d3       	rcall	.+1618   	; 0x5df0 <malloc>
    579e:	ec 01       	movw	r28, r24
    57a0:	89 2b       	or	r24, r25
    57a2:	61 f1       	breq	.+88     	; 0x57fc <twiCreate+0x80>
    57a4:	a8 82       	st	Y, r10
    57a6:	81 e0       	ldi	r24, 0x01	; 1
    57a8:	b8 12       	cpse	r11, r24
    57aa:	12 c0       	rjmp	.+36     	; 0x57d0 <twiCreate+0x54>
    57ac:	c7 01       	movw	r24, r14
    57ae:	b6 01       	movw	r22, r12
    57b0:	20 ea       	ldi	r18, 0xA0	; 160
    57b2:	36 e8       	ldi	r19, 0x86	; 134
    57b4:	41 e0       	ldi	r20, 0x01	; 1
    57b6:	50 e0       	ldi	r21, 0x00	; 0
    57b8:	f1 d2       	rcall	.+1506   	; 0x5d9c <__udivmodsi4>
    57ba:	da 01       	movw	r26, r20
    57bc:	c9 01       	movw	r24, r18
    57be:	40 97       	sbiw	r24, 0x10	; 16
    57c0:	a1 09       	sbc	r26, r1
    57c2:	b1 09       	sbc	r27, r1
    57c4:	b6 95       	lsr	r27
    57c6:	a7 95       	ror	r26
    57c8:	97 95       	ror	r25
    57ca:	87 95       	ror	r24
    57cc:	89 83       	std	Y+1, r24	; 0x01
    57ce:	11 c0       	rjmp	.+34     	; 0x57f2 <twiCreate+0x76>
    57d0:	c7 01       	movw	r24, r14
    57d2:	b6 01       	movw	r22, r12
    57d4:	20 e8       	ldi	r18, 0x80	; 128
    57d6:	3a e1       	ldi	r19, 0x1A	; 26
    57d8:	46 e0       	ldi	r20, 0x06	; 6
    57da:	50 e0       	ldi	r21, 0x00	; 0
    57dc:	df d2       	rcall	.+1470   	; 0x5d9c <__udivmodsi4>
    57de:	da 01       	movw	r26, r20
    57e0:	c9 01       	movw	r24, r18
    57e2:	40 97       	sbiw	r24, 0x10	; 16
    57e4:	a1 09       	sbc	r26, r1
    57e6:	b1 09       	sbc	r27, r1
    57e8:	b6 95       	lsr	r27
    57ea:	a7 95       	ror	r26
    57ec:	97 95       	ror	r25
    57ee:	87 95       	ror	r24
    57f0:	89 83       	std	Y+1, r24	; 0x01
    57f2:	1b 83       	std	Y+3, r17	; 0x03
    57f4:	0a 83       	std	Y+2, r16	; 0x02
    57f6:	8c 2f       	mov	r24, r28
    57f8:	9d 2f       	mov	r25, r29
    57fa:	02 c0       	rjmp	.+4      	; 0x5800 <twiCreate+0x84>
    57fc:	80 e0       	ldi	r24, 0x00	; 0
    57fe:	90 e0       	ldi	r25, 0x00	; 0
    5800:	df 91       	pop	r29
    5802:	cf 91       	pop	r28
    5804:	1f 91       	pop	r17
    5806:	0f 91       	pop	r16
    5808:	ff 90       	pop	r15
    580a:	ef 90       	pop	r14
    580c:	df 90       	pop	r13
    580e:	cf 90       	pop	r12
    5810:	bf 90       	pop	r11
    5812:	af 90       	pop	r10
    5814:	08 95       	ret

00005816 <twiIsBusy>:
    5816:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    581a:	81 70       	andi	r24, 0x01	; 1
    581c:	08 95       	ret

0000581e <twiTransmit>:
    581e:	ff 92       	push	r15
    5820:	0f 93       	push	r16
    5822:	1f 93       	push	r17
    5824:	cf 93       	push	r28
    5826:	df 93       	push	r29
    5828:	00 97       	sbiw	r24, 0x00	; 0
    582a:	d1 f1       	breq	.+116    	; 0x58a0 <twiTransmit+0x82>
    582c:	4a 30       	cpi	r20, 0x0A	; 10
    582e:	d0 f5       	brcc	.+116    	; 0x58a4 <twiTransmit+0x86>
    5830:	f4 2e       	mov	r15, r20
    5832:	8b 01       	movw	r16, r22
    5834:	ec 01       	movw	r28, r24
    5836:	ef df       	rcall	.-34     	; 0x5816 <twiIsBusy>
    5838:	81 11       	cpse	r24, r1
    583a:	36 c0       	rjmp	.+108    	; 0x58a8 <twiTransmit+0x8a>
    583c:	80 91 a2 18 	lds	r24, 0x18A2	; 0x8018a2 <_twiCurrentHandler>
    5840:	90 91 a3 18 	lds	r25, 0x18A3	; 0x8018a3 <_twiCurrentHandler+0x1>
    5844:	c8 17       	cp	r28, r24
    5846:	d9 07       	cpc	r29, r25
    5848:	41 f0       	breq	.+16     	; 0x585a <twiTransmit+0x3c>
    584a:	87 df       	rcall	.-242    	; 0x575a <_initTwiInterface>
    584c:	89 81       	ldd	r24, Y+1	; 0x01
    584e:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7c00b8>
    5852:	d0 93 a3 18 	sts	0x18A3, r29	; 0x8018a3 <_twiCurrentHandler+0x1>
    5856:	c0 93 a2 18 	sts	0x18A2, r28	; 0x8018a2 <_twiCurrentHandler>
    585a:	81 e0       	ldi	r24, 0x01	; 1
    585c:	8f 0d       	add	r24, r15
    585e:	80 93 a4 18 	sts	0x18A4, r24	; 0x8018a4 <_twiMessageLen>
    5862:	88 81       	ld	r24, Y
    5864:	88 0f       	add	r24, r24
    5866:	80 93 a5 18 	sts	0x18A5, r24	; 0x8018a5 <_twiMessageBuffer>
    586a:	ff 20       	and	r15, r15
    586c:	89 f0       	breq	.+34     	; 0x5890 <twiTransmit+0x72>
    586e:	f8 01       	movw	r30, r16
    5870:	a6 ea       	ldi	r26, 0xA6	; 166
    5872:	b8 e1       	ldi	r27, 0x18	; 24
    5874:	4f ef       	ldi	r20, 0xFF	; 255
    5876:	4f 0d       	add	r20, r15
    5878:	64 2f       	mov	r22, r20
    587a:	70 e0       	ldi	r23, 0x00	; 0
    587c:	cb 01       	movw	r24, r22
    587e:	01 96       	adiw	r24, 0x01	; 1
    5880:	b8 01       	movw	r22, r16
    5882:	68 0f       	add	r22, r24
    5884:	79 1f       	adc	r23, r25
    5886:	81 91       	ld	r24, Z+
    5888:	8d 93       	st	X+, r24
    588a:	e6 17       	cp	r30, r22
    588c:	f7 07       	cpc	r31, r23
    588e:	d9 f7       	brne	.-10     	; 0x5886 <twiTransmit+0x68>
    5890:	88 ef       	ldi	r24, 0xF8	; 248
    5892:	80 93 21 02 	sts	0x0221, r24	; 0x800221 <_twiCurrentState>
    5896:	85 ea       	ldi	r24, 0xA5	; 165
    5898:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    589c:	84 e0       	ldi	r24, 0x04	; 4
    589e:	05 c0       	rjmp	.+10     	; 0x58aa <twiTransmit+0x8c>
    58a0:	86 e0       	ldi	r24, 0x06	; 6
    58a2:	03 c0       	rjmp	.+6      	; 0x58aa <twiTransmit+0x8c>
    58a4:	87 e0       	ldi	r24, 0x07	; 7
    58a6:	01 c0       	rjmp	.+2      	; 0x58aa <twiTransmit+0x8c>
    58a8:	82 e0       	ldi	r24, 0x02	; 2
    58aa:	df 91       	pop	r29
    58ac:	cf 91       	pop	r28
    58ae:	1f 91       	pop	r17
    58b0:	0f 91       	pop	r16
    58b2:	ff 90       	pop	r15
    58b4:	08 95       	ret

000058b6 <twiReceive>:
    58b6:	1f 93       	push	r17
    58b8:	cf 93       	push	r28
    58ba:	df 93       	push	r29
    58bc:	00 97       	sbiw	r24, 0x00	; 0
    58be:	29 f1       	breq	.+74     	; 0x590a <twiReceive+0x54>
    58c0:	6b 30       	cpi	r22, 0x0B	; 11
    58c2:	28 f5       	brcc	.+74     	; 0x590e <twiReceive+0x58>
    58c4:	16 2f       	mov	r17, r22
    58c6:	ec 01       	movw	r28, r24
    58c8:	a6 df       	rcall	.-180    	; 0x5816 <twiIsBusy>
    58ca:	81 11       	cpse	r24, r1
    58cc:	22 c0       	rjmp	.+68     	; 0x5912 <twiReceive+0x5c>
    58ce:	80 91 a2 18 	lds	r24, 0x18A2	; 0x8018a2 <_twiCurrentHandler>
    58d2:	90 91 a3 18 	lds	r25, 0x18A3	; 0x8018a3 <_twiCurrentHandler+0x1>
    58d6:	c8 17       	cp	r28, r24
    58d8:	d9 07       	cpc	r29, r25
    58da:	41 f0       	breq	.+16     	; 0x58ec <twiReceive+0x36>
    58dc:	3e df       	rcall	.-388    	; 0x575a <_initTwiInterface>
    58de:	89 81       	ldd	r24, Y+1	; 0x01
    58e0:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7c00b8>
    58e4:	d0 93 a3 18 	sts	0x18A3, r29	; 0x8018a3 <_twiCurrentHandler+0x1>
    58e8:	c0 93 a2 18 	sts	0x18A2, r28	; 0x8018a2 <_twiCurrentHandler>
    58ec:	10 93 a4 18 	sts	0x18A4, r17	; 0x8018a4 <_twiMessageLen>
    58f0:	88 81       	ld	r24, Y
    58f2:	88 0f       	add	r24, r24
    58f4:	81 60       	ori	r24, 0x01	; 1
    58f6:	80 93 a5 18 	sts	0x18A5, r24	; 0x8018a5 <_twiMessageBuffer>
    58fa:	88 ef       	ldi	r24, 0xF8	; 248
    58fc:	80 93 21 02 	sts	0x0221, r24	; 0x800221 <_twiCurrentState>
    5900:	85 ea       	ldi	r24, 0xA5	; 165
    5902:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    5906:	85 e0       	ldi	r24, 0x05	; 5
    5908:	05 c0       	rjmp	.+10     	; 0x5914 <twiReceive+0x5e>
    590a:	86 e0       	ldi	r24, 0x06	; 6
    590c:	03 c0       	rjmp	.+6      	; 0x5914 <twiReceive+0x5e>
    590e:	87 e0       	ldi	r24, 0x07	; 7
    5910:	01 c0       	rjmp	.+2      	; 0x5914 <twiReceive+0x5e>
    5912:	82 e0       	ldi	r24, 0x02	; 2
    5914:	df 91       	pop	r29
    5916:	cf 91       	pop	r28
    5918:	1f 91       	pop	r17
    591a:	08 95       	ret

0000591c <__vector_39>:
    591c:	1f 92       	push	r1
    591e:	0f 92       	push	r0
    5920:	0f b6       	in	r0, 0x3f	; 63
    5922:	0f 92       	push	r0
    5924:	11 24       	eor	r1, r1
    5926:	0b b6       	in	r0, 0x3b	; 59
    5928:	0f 92       	push	r0
    592a:	2f 93       	push	r18
    592c:	3f 93       	push	r19
    592e:	4f 93       	push	r20
    5930:	5f 93       	push	r21
    5932:	6f 93       	push	r22
    5934:	7f 93       	push	r23
    5936:	8f 93       	push	r24
    5938:	9f 93       	push	r25
    593a:	af 93       	push	r26
    593c:	bf 93       	push	r27
    593e:	ef 93       	push	r30
    5940:	ff 93       	push	r31
    5942:	e0 91 b9 00 	lds	r30, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7c00b9>
    5946:	8e 2f       	mov	r24, r30
    5948:	90 e0       	ldi	r25, 0x00	; 0
    594a:	fc 01       	movw	r30, r24
    594c:	38 97       	sbiw	r30, 0x08	; 8
    594e:	e1 35       	cpi	r30, 0x51	; 81
    5950:	f1 05       	cpc	r31, r1
    5952:	08 f0       	brcs	.+2      	; 0x5956 <__vector_39+0x3a>
    5954:	75 c0       	rjmp	.+234    	; 0x5a40 <__vector_39+0x124>
    5956:	88 27       	eor	r24, r24
    5958:	e4 58       	subi	r30, 0x84	; 132
    595a:	ff 4f       	sbci	r31, 0xFF	; 255
    595c:	8f 4f       	sbci	r24, 0xFF	; 255
    595e:	40 c2       	rjmp	.+1152   	; 0x5de0 <__tablejump2__>
    5960:	10 92 a1 18 	sts	0x18A1, r1	; 0x8018a1 <_index.1885>
    5964:	e0 91 a1 18 	lds	r30, 0x18A1	; 0x8018a1 <_index.1885>
    5968:	80 91 a4 18 	lds	r24, 0x18A4	; 0x8018a4 <_twiMessageLen>
    596c:	e8 17       	cp	r30, r24
    596e:	70 f4       	brcc	.+28     	; 0x598c <__vector_39+0x70>
    5970:	81 e0       	ldi	r24, 0x01	; 1
    5972:	8e 0f       	add	r24, r30
    5974:	80 93 a1 18 	sts	0x18A1, r24	; 0x8018a1 <_index.1885>
    5978:	f0 e0       	ldi	r31, 0x00	; 0
    597a:	eb 55       	subi	r30, 0x5B	; 91
    597c:	f7 4e       	sbci	r31, 0xE7	; 231
    597e:	80 81       	ld	r24, Z
    5980:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7c00bb>
    5984:	85 e8       	ldi	r24, 0x85	; 133
    5986:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    598a:	72 c0       	rjmp	.+228    	; 0x5a70 <__vector_39+0x154>
    598c:	84 e9       	ldi	r24, 0x94	; 148
    598e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    5992:	80 91 a2 18 	lds	r24, 0x18A2	; 0x8018a2 <_twiCurrentHandler>
    5996:	90 91 a3 18 	lds	r25, 0x18A3	; 0x8018a3 <_twiCurrentHandler+0x1>
    599a:	dc 01       	movw	r26, r24
    599c:	12 96       	adiw	r26, 0x02	; 2
    599e:	ed 91       	ld	r30, X+
    59a0:	fc 91       	ld	r31, X
    59a2:	13 97       	sbiw	r26, 0x03	; 3
    59a4:	30 97       	sbiw	r30, 0x00	; 0
    59a6:	09 f4       	brne	.+2      	; 0x59aa <__vector_39+0x8e>
    59a8:	63 c0       	rjmp	.+198    	; 0x5a70 <__vector_39+0x154>
    59aa:	20 e0       	ldi	r18, 0x00	; 0
    59ac:	40 e0       	ldi	r20, 0x00	; 0
    59ae:	50 e0       	ldi	r21, 0x00	; 0
    59b0:	64 e0       	ldi	r22, 0x04	; 4
    59b2:	19 95       	eicall
    59b4:	5d c0       	rjmp	.+186    	; 0x5a70 <__vector_39+0x154>
    59b6:	e0 91 a1 18 	lds	r30, 0x18A1	; 0x8018a1 <_index.1885>
    59ba:	81 e0       	ldi	r24, 0x01	; 1
    59bc:	8e 0f       	add	r24, r30
    59be:	80 93 a1 18 	sts	0x18A1, r24	; 0x8018a1 <_index.1885>
    59c2:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7c00bb>
    59c6:	f0 e0       	ldi	r31, 0x00	; 0
    59c8:	eb 55       	subi	r30, 0x5B	; 91
    59ca:	f7 4e       	sbci	r31, 0xE7	; 231
    59cc:	80 83       	st	Z, r24
    59ce:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7c00b9>
    59d2:	80 34       	cpi	r24, 0x40	; 64
    59d4:	11 f4       	brne	.+4      	; 0x59da <__vector_39+0xbe>
    59d6:	10 92 a1 18 	sts	0x18A1, r1	; 0x8018a1 <_index.1885>
    59da:	20 91 a1 18 	lds	r18, 0x18A1	; 0x8018a1 <_index.1885>
    59de:	30 e0       	ldi	r19, 0x00	; 0
    59e0:	80 91 a4 18 	lds	r24, 0x18A4	; 0x8018a4 <_twiMessageLen>
    59e4:	90 e0       	ldi	r25, 0x00	; 0
    59e6:	01 97       	sbiw	r24, 0x01	; 1
    59e8:	28 17       	cp	r18, r24
    59ea:	39 07       	cpc	r19, r25
    59ec:	24 f4       	brge	.+8      	; 0x59f6 <__vector_39+0xda>
    59ee:	85 ec       	ldi	r24, 0xC5	; 197
    59f0:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    59f4:	3d c0       	rjmp	.+122    	; 0x5a70 <__vector_39+0x154>
    59f6:	85 e8       	ldi	r24, 0x85	; 133
    59f8:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    59fc:	39 c0       	rjmp	.+114    	; 0x5a70 <__vector_39+0x154>
    59fe:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7c00bb>
    5a02:	e0 91 a1 18 	lds	r30, 0x18A1	; 0x8018a1 <_index.1885>
    5a06:	f0 e0       	ldi	r31, 0x00	; 0
    5a08:	eb 55       	subi	r30, 0x5B	; 91
    5a0a:	f7 4e       	sbci	r31, 0xE7	; 231
    5a0c:	80 83       	st	Z, r24
    5a0e:	84 e9       	ldi	r24, 0x94	; 148
    5a10:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    5a14:	80 91 a2 18 	lds	r24, 0x18A2	; 0x8018a2 <_twiCurrentHandler>
    5a18:	90 91 a3 18 	lds	r25, 0x18A3	; 0x8018a3 <_twiCurrentHandler+0x1>
    5a1c:	dc 01       	movw	r26, r24
    5a1e:	12 96       	adiw	r26, 0x02	; 2
    5a20:	ed 91       	ld	r30, X+
    5a22:	fc 91       	ld	r31, X
    5a24:	13 97       	sbiw	r26, 0x03	; 3
    5a26:	30 97       	sbiw	r30, 0x00	; 0
    5a28:	19 f1       	breq	.+70     	; 0x5a70 <__vector_39+0x154>
    5a2a:	20 91 a4 18 	lds	r18, 0x18A4	; 0x8018a4 <_twiMessageLen>
    5a2e:	45 ea       	ldi	r20, 0xA5	; 165
    5a30:	58 e1       	ldi	r21, 0x18	; 24
    5a32:	65 e0       	ldi	r22, 0x05	; 5
    5a34:	19 95       	eicall
    5a36:	1c c0       	rjmp	.+56     	; 0x5a70 <__vector_39+0x154>
    5a38:	85 ea       	ldi	r24, 0xA5	; 165
    5a3a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    5a3e:	18 c0       	rjmp	.+48     	; 0x5a70 <__vector_39+0x154>
    5a40:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7c00b9>
    5a44:	80 93 21 02 	sts	0x0221, r24	; 0x800221 <_twiCurrentState>
    5a48:	84 e0       	ldi	r24, 0x04	; 4
    5a4a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    5a4e:	80 91 a2 18 	lds	r24, 0x18A2	; 0x8018a2 <_twiCurrentHandler>
    5a52:	90 91 a3 18 	lds	r25, 0x18A3	; 0x8018a3 <_twiCurrentHandler+0x1>
    5a56:	dc 01       	movw	r26, r24
    5a58:	12 96       	adiw	r26, 0x02	; 2
    5a5a:	ed 91       	ld	r30, X+
    5a5c:	fc 91       	ld	r31, X
    5a5e:	13 97       	sbiw	r26, 0x03	; 3
    5a60:	30 97       	sbiw	r30, 0x00	; 0
    5a62:	31 f0       	breq	.+12     	; 0x5a70 <__vector_39+0x154>
    5a64:	20 e0       	ldi	r18, 0x00	; 0
    5a66:	40 e0       	ldi	r20, 0x00	; 0
    5a68:	50 e0       	ldi	r21, 0x00	; 0
    5a6a:	60 91 21 02 	lds	r22, 0x0221	; 0x800221 <_twiCurrentState>
    5a6e:	19 95       	eicall
    5a70:	ff 91       	pop	r31
    5a72:	ef 91       	pop	r30
    5a74:	bf 91       	pop	r27
    5a76:	af 91       	pop	r26
    5a78:	9f 91       	pop	r25
    5a7a:	8f 91       	pop	r24
    5a7c:	7f 91       	pop	r23
    5a7e:	6f 91       	pop	r22
    5a80:	5f 91       	pop	r21
    5a82:	4f 91       	pop	r20
    5a84:	3f 91       	pop	r19
    5a86:	2f 91       	pop	r18
    5a88:	0f 90       	pop	r0
    5a8a:	0b be       	out	0x3b, r0	; 59
    5a8c:	0f 90       	pop	r0
    5a8e:	0f be       	out	0x3f, r0	; 63
    5a90:	0f 90       	pop	r0
    5a92:	1f 90       	pop	r1
    5a94:	18 95       	reti

00005a96 <fifo_init>:
    5a96:	fc 01       	movw	r30, r24
    5a98:	41 11       	cpse	r20, r1
    5a9a:	01 c0       	rjmp	.+2      	; 0x5a9e <fifo_init+0x8>
    5a9c:	ca d2       	rcall	.+1428   	; 0x6032 <abort>
    5a9e:	84 2f       	mov	r24, r20
    5aa0:	90 e0       	ldi	r25, 0x00	; 0
    5aa2:	9c 01       	movw	r18, r24
    5aa4:	21 50       	subi	r18, 0x01	; 1
    5aa6:	31 09       	sbc	r19, r1
    5aa8:	82 23       	and	r24, r18
    5aaa:	93 23       	and	r25, r19
    5aac:	89 2b       	or	r24, r25
    5aae:	09 f0       	breq	.+2      	; 0x5ab2 <fifo_init+0x1c>
    5ab0:	c0 d2       	rcall	.+1408   	; 0x6032 <abort>
    5ab2:	41 38       	cpi	r20, 0x81	; 129
    5ab4:	08 f0       	brcs	.+2      	; 0x5ab8 <fifo_init+0x22>
    5ab6:	bd d2       	rcall	.+1402   	; 0x6032 <abort>
    5ab8:	12 82       	std	Z+2, r1	; 0x02
    5aba:	13 82       	std	Z+3, r1	; 0x03
    5abc:	44 83       	std	Z+4, r20	; 0x04
    5abe:	44 0f       	add	r20, r20
    5ac0:	41 50       	subi	r20, 0x01	; 1
    5ac2:	45 83       	std	Z+5, r20	; 0x05
    5ac4:	71 83       	std	Z+1, r23	; 0x01
    5ac6:	60 83       	st	Z, r22
    5ac8:	80 e0       	ldi	r24, 0x00	; 0
    5aca:	90 e0       	ldi	r25, 0x00	; 0
    5acc:	08 95       	ret

00005ace <__subsf3>:
    5ace:	50 58       	subi	r21, 0x80	; 128

00005ad0 <__addsf3>:
    5ad0:	bb 27       	eor	r27, r27
    5ad2:	aa 27       	eor	r26, r26
    5ad4:	0e d0       	rcall	.+28     	; 0x5af2 <__addsf3x>
    5ad6:	eb c0       	rjmp	.+470    	; 0x5cae <__fp_round>
    5ad8:	dc d0       	rcall	.+440    	; 0x5c92 <__fp_pscA>
    5ada:	30 f0       	brcs	.+12     	; 0x5ae8 <__addsf3+0x18>
    5adc:	e1 d0       	rcall	.+450    	; 0x5ca0 <__fp_pscB>
    5ade:	20 f0       	brcs	.+8      	; 0x5ae8 <__addsf3+0x18>
    5ae0:	31 f4       	brne	.+12     	; 0x5aee <__addsf3+0x1e>
    5ae2:	9f 3f       	cpi	r25, 0xFF	; 255
    5ae4:	11 f4       	brne	.+4      	; 0x5aea <__addsf3+0x1a>
    5ae6:	1e f4       	brtc	.+6      	; 0x5aee <__addsf3+0x1e>
    5ae8:	d1 c0       	rjmp	.+418    	; 0x5c8c <__fp_nan>
    5aea:	0e f4       	brtc	.+2      	; 0x5aee <__addsf3+0x1e>
    5aec:	e0 95       	com	r30
    5aee:	e7 fb       	bst	r30, 7
    5af0:	c7 c0       	rjmp	.+398    	; 0x5c80 <__fp_inf>

00005af2 <__addsf3x>:
    5af2:	e9 2f       	mov	r30, r25
    5af4:	0e 94 86 20 	call	0x410c	; 0x410c <__fp_split3>
    5af8:	78 f3       	brcs	.-34     	; 0x5ad8 <__addsf3+0x8>
    5afa:	ba 17       	cp	r27, r26
    5afc:	62 07       	cpc	r22, r18
    5afe:	73 07       	cpc	r23, r19
    5b00:	84 07       	cpc	r24, r20
    5b02:	95 07       	cpc	r25, r21
    5b04:	20 f0       	brcs	.+8      	; 0x5b0e <__addsf3x+0x1c>
    5b06:	79 f4       	brne	.+30     	; 0x5b26 <__addsf3x+0x34>
    5b08:	a6 f5       	brtc	.+104    	; 0x5b72 <__addsf3x+0x80>
    5b0a:	0c 94 a8 20 	jmp	0x4150	; 0x4150 <__fp_zero>
    5b0e:	0e f4       	brtc	.+2      	; 0x5b12 <__addsf3x+0x20>
    5b10:	e0 95       	com	r30
    5b12:	0b 2e       	mov	r0, r27
    5b14:	ba 2f       	mov	r27, r26
    5b16:	a0 2d       	mov	r26, r0
    5b18:	0b 01       	movw	r0, r22
    5b1a:	b9 01       	movw	r22, r18
    5b1c:	90 01       	movw	r18, r0
    5b1e:	0c 01       	movw	r0, r24
    5b20:	ca 01       	movw	r24, r20
    5b22:	a0 01       	movw	r20, r0
    5b24:	11 24       	eor	r1, r1
    5b26:	ff 27       	eor	r31, r31
    5b28:	59 1b       	sub	r21, r25
    5b2a:	99 f0       	breq	.+38     	; 0x5b52 <__addsf3x+0x60>
    5b2c:	59 3f       	cpi	r21, 0xF9	; 249
    5b2e:	50 f4       	brcc	.+20     	; 0x5b44 <__addsf3x+0x52>
    5b30:	50 3e       	cpi	r21, 0xE0	; 224
    5b32:	68 f1       	brcs	.+90     	; 0x5b8e <__addsf3x+0x9c>
    5b34:	1a 16       	cp	r1, r26
    5b36:	f0 40       	sbci	r31, 0x00	; 0
    5b38:	a2 2f       	mov	r26, r18
    5b3a:	23 2f       	mov	r18, r19
    5b3c:	34 2f       	mov	r19, r20
    5b3e:	44 27       	eor	r20, r20
    5b40:	58 5f       	subi	r21, 0xF8	; 248
    5b42:	f3 cf       	rjmp	.-26     	; 0x5b2a <__addsf3x+0x38>
    5b44:	46 95       	lsr	r20
    5b46:	37 95       	ror	r19
    5b48:	27 95       	ror	r18
    5b4a:	a7 95       	ror	r26
    5b4c:	f0 40       	sbci	r31, 0x00	; 0
    5b4e:	53 95       	inc	r21
    5b50:	c9 f7       	brne	.-14     	; 0x5b44 <__addsf3x+0x52>
    5b52:	7e f4       	brtc	.+30     	; 0x5b72 <__addsf3x+0x80>
    5b54:	1f 16       	cp	r1, r31
    5b56:	ba 0b       	sbc	r27, r26
    5b58:	62 0b       	sbc	r22, r18
    5b5a:	73 0b       	sbc	r23, r19
    5b5c:	84 0b       	sbc	r24, r20
    5b5e:	ba f0       	brmi	.+46     	; 0x5b8e <__addsf3x+0x9c>
    5b60:	91 50       	subi	r25, 0x01	; 1
    5b62:	a1 f0       	breq	.+40     	; 0x5b8c <__addsf3x+0x9a>
    5b64:	ff 0f       	add	r31, r31
    5b66:	bb 1f       	adc	r27, r27
    5b68:	66 1f       	adc	r22, r22
    5b6a:	77 1f       	adc	r23, r23
    5b6c:	88 1f       	adc	r24, r24
    5b6e:	c2 f7       	brpl	.-16     	; 0x5b60 <__addsf3x+0x6e>
    5b70:	0e c0       	rjmp	.+28     	; 0x5b8e <__addsf3x+0x9c>
    5b72:	ba 0f       	add	r27, r26
    5b74:	62 1f       	adc	r22, r18
    5b76:	73 1f       	adc	r23, r19
    5b78:	84 1f       	adc	r24, r20
    5b7a:	48 f4       	brcc	.+18     	; 0x5b8e <__addsf3x+0x9c>
    5b7c:	87 95       	ror	r24
    5b7e:	77 95       	ror	r23
    5b80:	67 95       	ror	r22
    5b82:	b7 95       	ror	r27
    5b84:	f7 95       	ror	r31
    5b86:	9e 3f       	cpi	r25, 0xFE	; 254
    5b88:	08 f0       	brcs	.+2      	; 0x5b8c <__addsf3x+0x9a>
    5b8a:	b1 cf       	rjmp	.-158    	; 0x5aee <__addsf3+0x1e>
    5b8c:	93 95       	inc	r25
    5b8e:	88 0f       	add	r24, r24
    5b90:	08 f0       	brcs	.+2      	; 0x5b94 <__addsf3x+0xa2>
    5b92:	99 27       	eor	r25, r25
    5b94:	ee 0f       	add	r30, r30
    5b96:	97 95       	ror	r25
    5b98:	87 95       	ror	r24
    5b9a:	08 95       	ret

00005b9c <__divsf3>:
    5b9c:	0d d0       	rcall	.+26     	; 0x5bb8 <__divsf3x>
    5b9e:	87 c0       	rjmp	.+270    	; 0x5cae <__fp_round>
    5ba0:	7f d0       	rcall	.+254    	; 0x5ca0 <__fp_pscB>
    5ba2:	48 f0       	brcs	.+18     	; 0x5bb6 <__divsf3+0x1a>
    5ba4:	76 d0       	rcall	.+236    	; 0x5c92 <__fp_pscA>
    5ba6:	38 f0       	brcs	.+14     	; 0x5bb6 <__divsf3+0x1a>
    5ba8:	21 f4       	brne	.+8      	; 0x5bb2 <__divsf3+0x16>
    5baa:	5f 3f       	cpi	r21, 0xFF	; 255
    5bac:	21 f0       	breq	.+8      	; 0x5bb6 <__divsf3+0x1a>
    5bae:	68 c0       	rjmp	.+208    	; 0x5c80 <__fp_inf>
    5bb0:	51 11       	cpse	r21, r1
    5bb2:	0c 94 a9 20 	jmp	0x4152	; 0x4152 <__fp_szero>
    5bb6:	6a c0       	rjmp	.+212    	; 0x5c8c <__fp_nan>

00005bb8 <__divsf3x>:
    5bb8:	0e 94 86 20 	call	0x410c	; 0x410c <__fp_split3>
    5bbc:	88 f3       	brcs	.-30     	; 0x5ba0 <__divsf3+0x4>

00005bbe <__divsf3_pse>:
    5bbe:	99 23       	and	r25, r25
    5bc0:	b9 f3       	breq	.-18     	; 0x5bb0 <__divsf3+0x14>
    5bc2:	55 23       	and	r21, r21
    5bc4:	a1 f3       	breq	.-24     	; 0x5bae <__divsf3+0x12>
    5bc6:	95 1b       	sub	r25, r21
    5bc8:	55 0b       	sbc	r21, r21
    5bca:	bb 27       	eor	r27, r27
    5bcc:	aa 27       	eor	r26, r26
    5bce:	62 17       	cp	r22, r18
    5bd0:	73 07       	cpc	r23, r19
    5bd2:	84 07       	cpc	r24, r20
    5bd4:	38 f0       	brcs	.+14     	; 0x5be4 <__divsf3_pse+0x26>
    5bd6:	9f 5f       	subi	r25, 0xFF	; 255
    5bd8:	5f 4f       	sbci	r21, 0xFF	; 255
    5bda:	22 0f       	add	r18, r18
    5bdc:	33 1f       	adc	r19, r19
    5bde:	44 1f       	adc	r20, r20
    5be0:	aa 1f       	adc	r26, r26
    5be2:	a9 f3       	breq	.-22     	; 0x5bce <__divsf3_pse+0x10>
    5be4:	34 d0       	rcall	.+104    	; 0x5c4e <__divsf3_pse+0x90>
    5be6:	0e 2e       	mov	r0, r30
    5be8:	3a f0       	brmi	.+14     	; 0x5bf8 <__divsf3_pse+0x3a>
    5bea:	e0 e8       	ldi	r30, 0x80	; 128
    5bec:	31 d0       	rcall	.+98     	; 0x5c50 <__divsf3_pse+0x92>
    5bee:	91 50       	subi	r25, 0x01	; 1
    5bf0:	50 40       	sbci	r21, 0x00	; 0
    5bf2:	e6 95       	lsr	r30
    5bf4:	00 1c       	adc	r0, r0
    5bf6:	ca f7       	brpl	.-14     	; 0x5bea <__divsf3_pse+0x2c>
    5bf8:	2a d0       	rcall	.+84     	; 0x5c4e <__divsf3_pse+0x90>
    5bfa:	fe 2f       	mov	r31, r30
    5bfc:	28 d0       	rcall	.+80     	; 0x5c4e <__divsf3_pse+0x90>
    5bfe:	66 0f       	add	r22, r22
    5c00:	77 1f       	adc	r23, r23
    5c02:	88 1f       	adc	r24, r24
    5c04:	bb 1f       	adc	r27, r27
    5c06:	26 17       	cp	r18, r22
    5c08:	37 07       	cpc	r19, r23
    5c0a:	48 07       	cpc	r20, r24
    5c0c:	ab 07       	cpc	r26, r27
    5c0e:	b0 e8       	ldi	r27, 0x80	; 128
    5c10:	09 f0       	breq	.+2      	; 0x5c14 <__divsf3_pse+0x56>
    5c12:	bb 0b       	sbc	r27, r27
    5c14:	80 2d       	mov	r24, r0
    5c16:	bf 01       	movw	r22, r30
    5c18:	ff 27       	eor	r31, r31
    5c1a:	93 58       	subi	r25, 0x83	; 131
    5c1c:	5f 4f       	sbci	r21, 0xFF	; 255
    5c1e:	32 f0       	brmi	.+12     	; 0x5c2c <__divsf3_pse+0x6e>
    5c20:	9e 3f       	cpi	r25, 0xFE	; 254
    5c22:	51 05       	cpc	r21, r1
    5c24:	70 f0       	brcs	.+28     	; 0x5c42 <__divsf3_pse+0x84>
    5c26:	2c c0       	rjmp	.+88     	; 0x5c80 <__fp_inf>
    5c28:	0c 94 a9 20 	jmp	0x4152	; 0x4152 <__fp_szero>
    5c2c:	5f 3f       	cpi	r21, 0xFF	; 255
    5c2e:	e4 f3       	brlt	.-8      	; 0x5c28 <__divsf3_pse+0x6a>
    5c30:	98 3e       	cpi	r25, 0xE8	; 232
    5c32:	d4 f3       	brlt	.-12     	; 0x5c28 <__divsf3_pse+0x6a>
    5c34:	86 95       	lsr	r24
    5c36:	77 95       	ror	r23
    5c38:	67 95       	ror	r22
    5c3a:	b7 95       	ror	r27
    5c3c:	f7 95       	ror	r31
    5c3e:	9f 5f       	subi	r25, 0xFF	; 255
    5c40:	c9 f7       	brne	.-14     	; 0x5c34 <__divsf3_pse+0x76>
    5c42:	88 0f       	add	r24, r24
    5c44:	91 1d       	adc	r25, r1
    5c46:	96 95       	lsr	r25
    5c48:	87 95       	ror	r24
    5c4a:	97 f9       	bld	r25, 7
    5c4c:	08 95       	ret
    5c4e:	e1 e0       	ldi	r30, 0x01	; 1
    5c50:	66 0f       	add	r22, r22
    5c52:	77 1f       	adc	r23, r23
    5c54:	88 1f       	adc	r24, r24
    5c56:	bb 1f       	adc	r27, r27
    5c58:	62 17       	cp	r22, r18
    5c5a:	73 07       	cpc	r23, r19
    5c5c:	84 07       	cpc	r24, r20
    5c5e:	ba 07       	cpc	r27, r26
    5c60:	20 f0       	brcs	.+8      	; 0x5c6a <__divsf3_pse+0xac>
    5c62:	62 1b       	sub	r22, r18
    5c64:	73 0b       	sbc	r23, r19
    5c66:	84 0b       	sbc	r24, r20
    5c68:	ba 0b       	sbc	r27, r26
    5c6a:	ee 1f       	adc	r30, r30
    5c6c:	88 f7       	brcc	.-30     	; 0x5c50 <__divsf3_pse+0x92>
    5c6e:	e0 95       	com	r30
    5c70:	08 95       	ret

00005c72 <__fixsfsi>:
    5c72:	0e 94 1d 20 	call	0x403a	; 0x403a <__fixunssfsi>
    5c76:	68 94       	set
    5c78:	b1 11       	cpse	r27, r1
    5c7a:	0c 94 a9 20 	jmp	0x4152	; 0x4152 <__fp_szero>
    5c7e:	08 95       	ret

00005c80 <__fp_inf>:
    5c80:	97 f9       	bld	r25, 7
    5c82:	9f 67       	ori	r25, 0x7F	; 127
    5c84:	80 e8       	ldi	r24, 0x80	; 128
    5c86:	70 e0       	ldi	r23, 0x00	; 0
    5c88:	60 e0       	ldi	r22, 0x00	; 0
    5c8a:	08 95       	ret

00005c8c <__fp_nan>:
    5c8c:	9f ef       	ldi	r25, 0xFF	; 255
    5c8e:	80 ec       	ldi	r24, 0xC0	; 192
    5c90:	08 95       	ret

00005c92 <__fp_pscA>:
    5c92:	00 24       	eor	r0, r0
    5c94:	0a 94       	dec	r0
    5c96:	16 16       	cp	r1, r22
    5c98:	17 06       	cpc	r1, r23
    5c9a:	18 06       	cpc	r1, r24
    5c9c:	09 06       	cpc	r0, r25
    5c9e:	08 95       	ret

00005ca0 <__fp_pscB>:
    5ca0:	00 24       	eor	r0, r0
    5ca2:	0a 94       	dec	r0
    5ca4:	12 16       	cp	r1, r18
    5ca6:	13 06       	cpc	r1, r19
    5ca8:	14 06       	cpc	r1, r20
    5caa:	05 06       	cpc	r0, r21
    5cac:	08 95       	ret

00005cae <__fp_round>:
    5cae:	09 2e       	mov	r0, r25
    5cb0:	03 94       	inc	r0
    5cb2:	00 0c       	add	r0, r0
    5cb4:	11 f4       	brne	.+4      	; 0x5cba <__fp_round+0xc>
    5cb6:	88 23       	and	r24, r24
    5cb8:	52 f0       	brmi	.+20     	; 0x5cce <__fp_round+0x20>
    5cba:	bb 0f       	add	r27, r27
    5cbc:	40 f4       	brcc	.+16     	; 0x5cce <__fp_round+0x20>
    5cbe:	bf 2b       	or	r27, r31
    5cc0:	11 f4       	brne	.+4      	; 0x5cc6 <__fp_round+0x18>
    5cc2:	60 ff       	sbrs	r22, 0
    5cc4:	04 c0       	rjmp	.+8      	; 0x5cce <__fp_round+0x20>
    5cc6:	6f 5f       	subi	r22, 0xFF	; 255
    5cc8:	7f 4f       	sbci	r23, 0xFF	; 255
    5cca:	8f 4f       	sbci	r24, 0xFF	; 255
    5ccc:	9f 4f       	sbci	r25, 0xFF	; 255
    5cce:	08 95       	ret

00005cd0 <__mulsf3>:
    5cd0:	0c d0       	rcall	.+24     	; 0x5cea <__mulsf3x>
    5cd2:	ed cf       	rjmp	.-38     	; 0x5cae <__fp_round>
    5cd4:	de df       	rcall	.-68     	; 0x5c92 <__fp_pscA>
    5cd6:	28 f0       	brcs	.+10     	; 0x5ce2 <__mulsf3+0x12>
    5cd8:	e3 df       	rcall	.-58     	; 0x5ca0 <__fp_pscB>
    5cda:	18 f0       	brcs	.+6      	; 0x5ce2 <__mulsf3+0x12>
    5cdc:	95 23       	and	r25, r21
    5cde:	09 f0       	breq	.+2      	; 0x5ce2 <__mulsf3+0x12>
    5ce0:	cf cf       	rjmp	.-98     	; 0x5c80 <__fp_inf>
    5ce2:	d4 cf       	rjmp	.-88     	; 0x5c8c <__fp_nan>
    5ce4:	11 24       	eor	r1, r1
    5ce6:	0c 94 a9 20 	jmp	0x4152	; 0x4152 <__fp_szero>

00005cea <__mulsf3x>:
    5cea:	0e 94 86 20 	call	0x410c	; 0x410c <__fp_split3>
    5cee:	90 f3       	brcs	.-28     	; 0x5cd4 <__mulsf3+0x4>

00005cf0 <__mulsf3_pse>:
    5cf0:	95 9f       	mul	r25, r21
    5cf2:	c1 f3       	breq	.-16     	; 0x5ce4 <__mulsf3+0x14>
    5cf4:	95 0f       	add	r25, r21
    5cf6:	50 e0       	ldi	r21, 0x00	; 0
    5cf8:	55 1f       	adc	r21, r21
    5cfa:	62 9f       	mul	r22, r18
    5cfc:	f0 01       	movw	r30, r0
    5cfe:	72 9f       	mul	r23, r18
    5d00:	bb 27       	eor	r27, r27
    5d02:	f0 0d       	add	r31, r0
    5d04:	b1 1d       	adc	r27, r1
    5d06:	63 9f       	mul	r22, r19
    5d08:	aa 27       	eor	r26, r26
    5d0a:	f0 0d       	add	r31, r0
    5d0c:	b1 1d       	adc	r27, r1
    5d0e:	aa 1f       	adc	r26, r26
    5d10:	64 9f       	mul	r22, r20
    5d12:	66 27       	eor	r22, r22
    5d14:	b0 0d       	add	r27, r0
    5d16:	a1 1d       	adc	r26, r1
    5d18:	66 1f       	adc	r22, r22
    5d1a:	82 9f       	mul	r24, r18
    5d1c:	22 27       	eor	r18, r18
    5d1e:	b0 0d       	add	r27, r0
    5d20:	a1 1d       	adc	r26, r1
    5d22:	62 1f       	adc	r22, r18
    5d24:	73 9f       	mul	r23, r19
    5d26:	b0 0d       	add	r27, r0
    5d28:	a1 1d       	adc	r26, r1
    5d2a:	62 1f       	adc	r22, r18
    5d2c:	83 9f       	mul	r24, r19
    5d2e:	a0 0d       	add	r26, r0
    5d30:	61 1d       	adc	r22, r1
    5d32:	22 1f       	adc	r18, r18
    5d34:	74 9f       	mul	r23, r20
    5d36:	33 27       	eor	r19, r19
    5d38:	a0 0d       	add	r26, r0
    5d3a:	61 1d       	adc	r22, r1
    5d3c:	23 1f       	adc	r18, r19
    5d3e:	84 9f       	mul	r24, r20
    5d40:	60 0d       	add	r22, r0
    5d42:	21 1d       	adc	r18, r1
    5d44:	82 2f       	mov	r24, r18
    5d46:	76 2f       	mov	r23, r22
    5d48:	6a 2f       	mov	r22, r26
    5d4a:	11 24       	eor	r1, r1
    5d4c:	9f 57       	subi	r25, 0x7F	; 127
    5d4e:	50 40       	sbci	r21, 0x00	; 0
    5d50:	92 f0       	brmi	.+36     	; 0x5d76 <__mulsf3_pse+0x86>
    5d52:	e9 f0       	breq	.+58     	; 0x5d8e <__mulsf3_pse+0x9e>
    5d54:	88 23       	and	r24, r24
    5d56:	4a f0       	brmi	.+18     	; 0x5d6a <__mulsf3_pse+0x7a>
    5d58:	ee 0f       	add	r30, r30
    5d5a:	ff 1f       	adc	r31, r31
    5d5c:	bb 1f       	adc	r27, r27
    5d5e:	66 1f       	adc	r22, r22
    5d60:	77 1f       	adc	r23, r23
    5d62:	88 1f       	adc	r24, r24
    5d64:	91 50       	subi	r25, 0x01	; 1
    5d66:	50 40       	sbci	r21, 0x00	; 0
    5d68:	a9 f7       	brne	.-22     	; 0x5d54 <__mulsf3_pse+0x64>
    5d6a:	9e 3f       	cpi	r25, 0xFE	; 254
    5d6c:	51 05       	cpc	r21, r1
    5d6e:	78 f0       	brcs	.+30     	; 0x5d8e <__mulsf3_pse+0x9e>
    5d70:	87 cf       	rjmp	.-242    	; 0x5c80 <__fp_inf>
    5d72:	0c 94 a9 20 	jmp	0x4152	; 0x4152 <__fp_szero>
    5d76:	5f 3f       	cpi	r21, 0xFF	; 255
    5d78:	e4 f3       	brlt	.-8      	; 0x5d72 <__mulsf3_pse+0x82>
    5d7a:	98 3e       	cpi	r25, 0xE8	; 232
    5d7c:	d4 f3       	brlt	.-12     	; 0x5d72 <__mulsf3_pse+0x82>
    5d7e:	86 95       	lsr	r24
    5d80:	77 95       	ror	r23
    5d82:	67 95       	ror	r22
    5d84:	b7 95       	ror	r27
    5d86:	f7 95       	ror	r31
    5d88:	e7 95       	ror	r30
    5d8a:	9f 5f       	subi	r25, 0xFF	; 255
    5d8c:	c1 f7       	brne	.-16     	; 0x5d7e <__mulsf3_pse+0x8e>
    5d8e:	fe 2b       	or	r31, r30
    5d90:	88 0f       	add	r24, r24
    5d92:	91 1d       	adc	r25, r1
    5d94:	96 95       	lsr	r25
    5d96:	87 95       	ror	r24
    5d98:	97 f9       	bld	r25, 7
    5d9a:	08 95       	ret

00005d9c <__udivmodsi4>:
    5d9c:	a1 e2       	ldi	r26, 0x21	; 33
    5d9e:	1a 2e       	mov	r1, r26
    5da0:	aa 1b       	sub	r26, r26
    5da2:	bb 1b       	sub	r27, r27
    5da4:	fd 01       	movw	r30, r26
    5da6:	0d c0       	rjmp	.+26     	; 0x5dc2 <__udivmodsi4_ep>

00005da8 <__udivmodsi4_loop>:
    5da8:	aa 1f       	adc	r26, r26
    5daa:	bb 1f       	adc	r27, r27
    5dac:	ee 1f       	adc	r30, r30
    5dae:	ff 1f       	adc	r31, r31
    5db0:	a2 17       	cp	r26, r18
    5db2:	b3 07       	cpc	r27, r19
    5db4:	e4 07       	cpc	r30, r20
    5db6:	f5 07       	cpc	r31, r21
    5db8:	20 f0       	brcs	.+8      	; 0x5dc2 <__udivmodsi4_ep>
    5dba:	a2 1b       	sub	r26, r18
    5dbc:	b3 0b       	sbc	r27, r19
    5dbe:	e4 0b       	sbc	r30, r20
    5dc0:	f5 0b       	sbc	r31, r21

00005dc2 <__udivmodsi4_ep>:
    5dc2:	66 1f       	adc	r22, r22
    5dc4:	77 1f       	adc	r23, r23
    5dc6:	88 1f       	adc	r24, r24
    5dc8:	99 1f       	adc	r25, r25
    5dca:	1a 94       	dec	r1
    5dcc:	69 f7       	brne	.-38     	; 0x5da8 <__udivmodsi4_loop>
    5dce:	60 95       	com	r22
    5dd0:	70 95       	com	r23
    5dd2:	80 95       	com	r24
    5dd4:	90 95       	com	r25
    5dd6:	9b 01       	movw	r18, r22
    5dd8:	ac 01       	movw	r20, r24
    5dda:	bd 01       	movw	r22, r26
    5ddc:	cf 01       	movw	r24, r30
    5dde:	08 95       	ret

00005de0 <__tablejump2__>:
    5de0:	ee 0f       	add	r30, r30
    5de2:	ff 1f       	adc	r31, r31
    5de4:	88 1f       	adc	r24, r24
    5de6:	8b bf       	out	0x3b, r24	; 59
    5de8:	07 90       	elpm	r0, Z+
    5dea:	f6 91       	elpm	r31, Z
    5dec:	e0 2d       	mov	r30, r0
    5dee:	19 94       	eijmp

00005df0 <malloc>:
    5df0:	0f 93       	push	r16
    5df2:	1f 93       	push	r17
    5df4:	cf 93       	push	r28
    5df6:	df 93       	push	r29
    5df8:	82 30       	cpi	r24, 0x02	; 2
    5dfa:	91 05       	cpc	r25, r1
    5dfc:	10 f4       	brcc	.+4      	; 0x5e02 <malloc+0x12>
    5dfe:	82 e0       	ldi	r24, 0x02	; 2
    5e00:	90 e0       	ldi	r25, 0x00	; 0
    5e02:	e0 91 0f 19 	lds	r30, 0x190F	; 0x80190f <__flp>
    5e06:	f0 91 10 19 	lds	r31, 0x1910	; 0x801910 <__flp+0x1>
    5e0a:	20 e0       	ldi	r18, 0x00	; 0
    5e0c:	30 e0       	ldi	r19, 0x00	; 0
    5e0e:	a0 e0       	ldi	r26, 0x00	; 0
    5e10:	b0 e0       	ldi	r27, 0x00	; 0
    5e12:	30 97       	sbiw	r30, 0x00	; 0
    5e14:	19 f1       	breq	.+70     	; 0x5e5c <malloc+0x6c>
    5e16:	40 81       	ld	r20, Z
    5e18:	51 81       	ldd	r21, Z+1	; 0x01
    5e1a:	02 81       	ldd	r16, Z+2	; 0x02
    5e1c:	13 81       	ldd	r17, Z+3	; 0x03
    5e1e:	48 17       	cp	r20, r24
    5e20:	59 07       	cpc	r21, r25
    5e22:	c8 f0       	brcs	.+50     	; 0x5e56 <malloc+0x66>
    5e24:	84 17       	cp	r24, r20
    5e26:	95 07       	cpc	r25, r21
    5e28:	69 f4       	brne	.+26     	; 0x5e44 <malloc+0x54>
    5e2a:	10 97       	sbiw	r26, 0x00	; 0
    5e2c:	31 f0       	breq	.+12     	; 0x5e3a <malloc+0x4a>
    5e2e:	12 96       	adiw	r26, 0x02	; 2
    5e30:	0c 93       	st	X, r16
    5e32:	12 97       	sbiw	r26, 0x02	; 2
    5e34:	13 96       	adiw	r26, 0x03	; 3
    5e36:	1c 93       	st	X, r17
    5e38:	27 c0       	rjmp	.+78     	; 0x5e88 <malloc+0x98>
    5e3a:	00 93 0f 19 	sts	0x190F, r16	; 0x80190f <__flp>
    5e3e:	10 93 10 19 	sts	0x1910, r17	; 0x801910 <__flp+0x1>
    5e42:	22 c0       	rjmp	.+68     	; 0x5e88 <malloc+0x98>
    5e44:	21 15       	cp	r18, r1
    5e46:	31 05       	cpc	r19, r1
    5e48:	19 f0       	breq	.+6      	; 0x5e50 <malloc+0x60>
    5e4a:	42 17       	cp	r20, r18
    5e4c:	53 07       	cpc	r21, r19
    5e4e:	18 f4       	brcc	.+6      	; 0x5e56 <malloc+0x66>
    5e50:	9a 01       	movw	r18, r20
    5e52:	bd 01       	movw	r22, r26
    5e54:	ef 01       	movw	r28, r30
    5e56:	df 01       	movw	r26, r30
    5e58:	f8 01       	movw	r30, r16
    5e5a:	db cf       	rjmp	.-74     	; 0x5e12 <malloc+0x22>
    5e5c:	21 15       	cp	r18, r1
    5e5e:	31 05       	cpc	r19, r1
    5e60:	f9 f0       	breq	.+62     	; 0x5ea0 <malloc+0xb0>
    5e62:	28 1b       	sub	r18, r24
    5e64:	39 0b       	sbc	r19, r25
    5e66:	24 30       	cpi	r18, 0x04	; 4
    5e68:	31 05       	cpc	r19, r1
    5e6a:	80 f4       	brcc	.+32     	; 0x5e8c <malloc+0x9c>
    5e6c:	8a 81       	ldd	r24, Y+2	; 0x02
    5e6e:	9b 81       	ldd	r25, Y+3	; 0x03
    5e70:	61 15       	cp	r22, r1
    5e72:	71 05       	cpc	r23, r1
    5e74:	21 f0       	breq	.+8      	; 0x5e7e <malloc+0x8e>
    5e76:	fb 01       	movw	r30, r22
    5e78:	93 83       	std	Z+3, r25	; 0x03
    5e7a:	82 83       	std	Z+2, r24	; 0x02
    5e7c:	04 c0       	rjmp	.+8      	; 0x5e86 <malloc+0x96>
    5e7e:	90 93 10 19 	sts	0x1910, r25	; 0x801910 <__flp+0x1>
    5e82:	80 93 0f 19 	sts	0x190F, r24	; 0x80190f <__flp>
    5e86:	fe 01       	movw	r30, r28
    5e88:	32 96       	adiw	r30, 0x02	; 2
    5e8a:	44 c0       	rjmp	.+136    	; 0x5f14 <malloc+0x124>
    5e8c:	fe 01       	movw	r30, r28
    5e8e:	e2 0f       	add	r30, r18
    5e90:	f3 1f       	adc	r31, r19
    5e92:	81 93       	st	Z+, r24
    5e94:	91 93       	st	Z+, r25
    5e96:	22 50       	subi	r18, 0x02	; 2
    5e98:	31 09       	sbc	r19, r1
    5e9a:	39 83       	std	Y+1, r19	; 0x01
    5e9c:	28 83       	st	Y, r18
    5e9e:	3a c0       	rjmp	.+116    	; 0x5f14 <malloc+0x124>
    5ea0:	20 91 0d 19 	lds	r18, 0x190D	; 0x80190d <__brkval>
    5ea4:	30 91 0e 19 	lds	r19, 0x190E	; 0x80190e <__brkval+0x1>
    5ea8:	23 2b       	or	r18, r19
    5eaa:	41 f4       	brne	.+16     	; 0x5ebc <malloc+0xcc>
    5eac:	20 91 02 02 	lds	r18, 0x0202	; 0x800202 <__malloc_heap_start>
    5eb0:	30 91 03 02 	lds	r19, 0x0203	; 0x800203 <__malloc_heap_start+0x1>
    5eb4:	30 93 0e 19 	sts	0x190E, r19	; 0x80190e <__brkval+0x1>
    5eb8:	20 93 0d 19 	sts	0x190D, r18	; 0x80190d <__brkval>
    5ebc:	20 91 00 02 	lds	r18, 0x0200	; 0x800200 <__DATA_REGION_ORIGIN__>
    5ec0:	30 91 01 02 	lds	r19, 0x0201	; 0x800201 <__DATA_REGION_ORIGIN__+0x1>
    5ec4:	21 15       	cp	r18, r1
    5ec6:	31 05       	cpc	r19, r1
    5ec8:	41 f4       	brne	.+16     	; 0x5eda <malloc+0xea>
    5eca:	2d b7       	in	r18, 0x3d	; 61
    5ecc:	3e b7       	in	r19, 0x3e	; 62
    5ece:	40 91 04 02 	lds	r20, 0x0204	; 0x800204 <__malloc_margin>
    5ed2:	50 91 05 02 	lds	r21, 0x0205	; 0x800205 <__malloc_margin+0x1>
    5ed6:	24 1b       	sub	r18, r20
    5ed8:	35 0b       	sbc	r19, r21
    5eda:	e0 91 0d 19 	lds	r30, 0x190D	; 0x80190d <__brkval>
    5ede:	f0 91 0e 19 	lds	r31, 0x190E	; 0x80190e <__brkval+0x1>
    5ee2:	e2 17       	cp	r30, r18
    5ee4:	f3 07       	cpc	r31, r19
    5ee6:	a0 f4       	brcc	.+40     	; 0x5f10 <malloc+0x120>
    5ee8:	2e 1b       	sub	r18, r30
    5eea:	3f 0b       	sbc	r19, r31
    5eec:	28 17       	cp	r18, r24
    5eee:	39 07       	cpc	r19, r25
    5ef0:	78 f0       	brcs	.+30     	; 0x5f10 <malloc+0x120>
    5ef2:	ac 01       	movw	r20, r24
    5ef4:	4e 5f       	subi	r20, 0xFE	; 254
    5ef6:	5f 4f       	sbci	r21, 0xFF	; 255
    5ef8:	24 17       	cp	r18, r20
    5efa:	35 07       	cpc	r19, r21
    5efc:	48 f0       	brcs	.+18     	; 0x5f10 <malloc+0x120>
    5efe:	4e 0f       	add	r20, r30
    5f00:	5f 1f       	adc	r21, r31
    5f02:	50 93 0e 19 	sts	0x190E, r21	; 0x80190e <__brkval+0x1>
    5f06:	40 93 0d 19 	sts	0x190D, r20	; 0x80190d <__brkval>
    5f0a:	81 93       	st	Z+, r24
    5f0c:	91 93       	st	Z+, r25
    5f0e:	02 c0       	rjmp	.+4      	; 0x5f14 <malloc+0x124>
    5f10:	e0 e0       	ldi	r30, 0x00	; 0
    5f12:	f0 e0       	ldi	r31, 0x00	; 0
    5f14:	cf 01       	movw	r24, r30
    5f16:	df 91       	pop	r29
    5f18:	cf 91       	pop	r28
    5f1a:	1f 91       	pop	r17
    5f1c:	0f 91       	pop	r16
    5f1e:	08 95       	ret

00005f20 <free>:
    5f20:	cf 93       	push	r28
    5f22:	df 93       	push	r29
    5f24:	00 97       	sbiw	r24, 0x00	; 0
    5f26:	09 f4       	brne	.+2      	; 0x5f2a <free+0xa>
    5f28:	81 c0       	rjmp	.+258    	; 0x602c <free+0x10c>
    5f2a:	fc 01       	movw	r30, r24
    5f2c:	32 97       	sbiw	r30, 0x02	; 2
    5f2e:	13 82       	std	Z+3, r1	; 0x03
    5f30:	12 82       	std	Z+2, r1	; 0x02
    5f32:	a0 91 0f 19 	lds	r26, 0x190F	; 0x80190f <__flp>
    5f36:	b0 91 10 19 	lds	r27, 0x1910	; 0x801910 <__flp+0x1>
    5f3a:	10 97       	sbiw	r26, 0x00	; 0
    5f3c:	81 f4       	brne	.+32     	; 0x5f5e <free+0x3e>
    5f3e:	20 81       	ld	r18, Z
    5f40:	31 81       	ldd	r19, Z+1	; 0x01
    5f42:	82 0f       	add	r24, r18
    5f44:	93 1f       	adc	r25, r19
    5f46:	20 91 0d 19 	lds	r18, 0x190D	; 0x80190d <__brkval>
    5f4a:	30 91 0e 19 	lds	r19, 0x190E	; 0x80190e <__brkval+0x1>
    5f4e:	28 17       	cp	r18, r24
    5f50:	39 07       	cpc	r19, r25
    5f52:	51 f5       	brne	.+84     	; 0x5fa8 <free+0x88>
    5f54:	f0 93 0e 19 	sts	0x190E, r31	; 0x80190e <__brkval+0x1>
    5f58:	e0 93 0d 19 	sts	0x190D, r30	; 0x80190d <__brkval>
    5f5c:	67 c0       	rjmp	.+206    	; 0x602c <free+0x10c>
    5f5e:	ed 01       	movw	r28, r26
    5f60:	20 e0       	ldi	r18, 0x00	; 0
    5f62:	30 e0       	ldi	r19, 0x00	; 0
    5f64:	ce 17       	cp	r28, r30
    5f66:	df 07       	cpc	r29, r31
    5f68:	40 f4       	brcc	.+16     	; 0x5f7a <free+0x5a>
    5f6a:	4a 81       	ldd	r20, Y+2	; 0x02
    5f6c:	5b 81       	ldd	r21, Y+3	; 0x03
    5f6e:	9e 01       	movw	r18, r28
    5f70:	41 15       	cp	r20, r1
    5f72:	51 05       	cpc	r21, r1
    5f74:	f1 f0       	breq	.+60     	; 0x5fb2 <free+0x92>
    5f76:	ea 01       	movw	r28, r20
    5f78:	f5 cf       	rjmp	.-22     	; 0x5f64 <free+0x44>
    5f7a:	d3 83       	std	Z+3, r29	; 0x03
    5f7c:	c2 83       	std	Z+2, r28	; 0x02
    5f7e:	40 81       	ld	r20, Z
    5f80:	51 81       	ldd	r21, Z+1	; 0x01
    5f82:	84 0f       	add	r24, r20
    5f84:	95 1f       	adc	r25, r21
    5f86:	c8 17       	cp	r28, r24
    5f88:	d9 07       	cpc	r29, r25
    5f8a:	59 f4       	brne	.+22     	; 0x5fa2 <free+0x82>
    5f8c:	88 81       	ld	r24, Y
    5f8e:	99 81       	ldd	r25, Y+1	; 0x01
    5f90:	84 0f       	add	r24, r20
    5f92:	95 1f       	adc	r25, r21
    5f94:	02 96       	adiw	r24, 0x02	; 2
    5f96:	91 83       	std	Z+1, r25	; 0x01
    5f98:	80 83       	st	Z, r24
    5f9a:	8a 81       	ldd	r24, Y+2	; 0x02
    5f9c:	9b 81       	ldd	r25, Y+3	; 0x03
    5f9e:	93 83       	std	Z+3, r25	; 0x03
    5fa0:	82 83       	std	Z+2, r24	; 0x02
    5fa2:	21 15       	cp	r18, r1
    5fa4:	31 05       	cpc	r19, r1
    5fa6:	29 f4       	brne	.+10     	; 0x5fb2 <free+0x92>
    5fa8:	f0 93 10 19 	sts	0x1910, r31	; 0x801910 <__flp+0x1>
    5fac:	e0 93 0f 19 	sts	0x190F, r30	; 0x80190f <__flp>
    5fb0:	3d c0       	rjmp	.+122    	; 0x602c <free+0x10c>
    5fb2:	e9 01       	movw	r28, r18
    5fb4:	fb 83       	std	Y+3, r31	; 0x03
    5fb6:	ea 83       	std	Y+2, r30	; 0x02
    5fb8:	49 91       	ld	r20, Y+
    5fba:	59 91       	ld	r21, Y+
    5fbc:	c4 0f       	add	r28, r20
    5fbe:	d5 1f       	adc	r29, r21
    5fc0:	ec 17       	cp	r30, r28
    5fc2:	fd 07       	cpc	r31, r29
    5fc4:	61 f4       	brne	.+24     	; 0x5fde <free+0xbe>
    5fc6:	80 81       	ld	r24, Z
    5fc8:	91 81       	ldd	r25, Z+1	; 0x01
    5fca:	84 0f       	add	r24, r20
    5fcc:	95 1f       	adc	r25, r21
    5fce:	02 96       	adiw	r24, 0x02	; 2
    5fd0:	e9 01       	movw	r28, r18
    5fd2:	99 83       	std	Y+1, r25	; 0x01
    5fd4:	88 83       	st	Y, r24
    5fd6:	82 81       	ldd	r24, Z+2	; 0x02
    5fd8:	93 81       	ldd	r25, Z+3	; 0x03
    5fda:	9b 83       	std	Y+3, r25	; 0x03
    5fdc:	8a 83       	std	Y+2, r24	; 0x02
    5fde:	e0 e0       	ldi	r30, 0x00	; 0
    5fe0:	f0 e0       	ldi	r31, 0x00	; 0
    5fe2:	12 96       	adiw	r26, 0x02	; 2
    5fe4:	8d 91       	ld	r24, X+
    5fe6:	9c 91       	ld	r25, X
    5fe8:	13 97       	sbiw	r26, 0x03	; 3
    5fea:	00 97       	sbiw	r24, 0x00	; 0
    5fec:	19 f0       	breq	.+6      	; 0x5ff4 <free+0xd4>
    5fee:	fd 01       	movw	r30, r26
    5ff0:	dc 01       	movw	r26, r24
    5ff2:	f7 cf       	rjmp	.-18     	; 0x5fe2 <free+0xc2>
    5ff4:	8d 91       	ld	r24, X+
    5ff6:	9c 91       	ld	r25, X
    5ff8:	11 97       	sbiw	r26, 0x01	; 1
    5ffa:	9d 01       	movw	r18, r26
    5ffc:	2e 5f       	subi	r18, 0xFE	; 254
    5ffe:	3f 4f       	sbci	r19, 0xFF	; 255
    6000:	82 0f       	add	r24, r18
    6002:	93 1f       	adc	r25, r19
    6004:	20 91 0d 19 	lds	r18, 0x190D	; 0x80190d <__brkval>
    6008:	30 91 0e 19 	lds	r19, 0x190E	; 0x80190e <__brkval+0x1>
    600c:	28 17       	cp	r18, r24
    600e:	39 07       	cpc	r19, r25
    6010:	69 f4       	brne	.+26     	; 0x602c <free+0x10c>
    6012:	30 97       	sbiw	r30, 0x00	; 0
    6014:	29 f4       	brne	.+10     	; 0x6020 <free+0x100>
    6016:	10 92 10 19 	sts	0x1910, r1	; 0x801910 <__flp+0x1>
    601a:	10 92 0f 19 	sts	0x190F, r1	; 0x80190f <__flp>
    601e:	02 c0       	rjmp	.+4      	; 0x6024 <free+0x104>
    6020:	13 82       	std	Z+3, r1	; 0x03
    6022:	12 82       	std	Z+2, r1	; 0x02
    6024:	b0 93 0e 19 	sts	0x190E, r27	; 0x80190e <__brkval+0x1>
    6028:	a0 93 0d 19 	sts	0x190D, r26	; 0x80190d <__brkval>
    602c:	df 91       	pop	r29
    602e:	cf 91       	pop	r28
    6030:	08 95       	ret

00006032 <abort>:
    6032:	81 e0       	ldi	r24, 0x01	; 1
    6034:	90 e0       	ldi	r25, 0x00	; 0
    6036:	f8 94       	cli
    6038:	7d c3       	rjmp	.+1786   	; 0x6734 <_exit>

0000603a <memcpy>:
    603a:	fb 01       	movw	r30, r22
    603c:	dc 01       	movw	r26, r24
    603e:	02 c0       	rjmp	.+4      	; 0x6044 <memcpy+0xa>
    6040:	01 90       	ld	r0, Z+
    6042:	0d 92       	st	X+, r0
    6044:	41 50       	subi	r20, 0x01	; 1
    6046:	50 40       	sbci	r21, 0x00	; 0
    6048:	d8 f7       	brcc	.-10     	; 0x6040 <memcpy+0x6>
    604a:	08 95       	ret

0000604c <memset>:
    604c:	dc 01       	movw	r26, r24
    604e:	01 c0       	rjmp	.+2      	; 0x6052 <memset+0x6>
    6050:	6d 93       	st	X+, r22
    6052:	41 50       	subi	r20, 0x01	; 1
    6054:	50 40       	sbci	r21, 0x00	; 0
    6056:	e0 f7       	brcc	.-8      	; 0x6050 <memset+0x4>
    6058:	08 95       	ret

0000605a <strcasestr>:
    605a:	fb 01       	movw	r30, r22
    605c:	51 91       	ld	r21, Z+
    605e:	55 23       	and	r21, r21
    6060:	b1 f0       	breq	.+44     	; 0x608e <strcasestr+0x34>
    6062:	bf 01       	movw	r22, r30
    6064:	dc 01       	movw	r26, r24
    6066:	05 2e       	mov	r0, r21
    6068:	4d 91       	ld	r20, X+
    606a:	44 23       	and	r20, r20
    606c:	69 f0       	breq	.+26     	; 0x6088 <strcasestr+0x2e>
    606e:	10 d0       	rcall	.+32     	; 0x6090 <strcasestr+0x36>
    6070:	d9 f7       	brne	.-10     	; 0x6068 <strcasestr+0xe>
    6072:	cd 01       	movw	r24, r26
    6074:	01 90       	ld	r0, Z+
    6076:	00 20       	and	r0, r0
    6078:	49 f0       	breq	.+18     	; 0x608c <strcasestr+0x32>
    607a:	4d 91       	ld	r20, X+
    607c:	41 11       	cpse	r20, r1
    607e:	08 d0       	rcall	.+16     	; 0x6090 <strcasestr+0x36>
    6080:	c9 f3       	breq	.-14     	; 0x6074 <strcasestr+0x1a>
    6082:	fb 01       	movw	r30, r22
    6084:	41 11       	cpse	r20, r1
    6086:	ee cf       	rjmp	.-36     	; 0x6064 <strcasestr+0xa>
    6088:	81 e0       	ldi	r24, 0x01	; 1
    608a:	90 e0       	ldi	r25, 0x00	; 0
    608c:	01 97       	sbiw	r24, 0x01	; 1
    608e:	08 95       	ret
    6090:	40 25       	eor	r20, r0
    6092:	39 f0       	breq	.+14     	; 0x60a2 <strcasestr+0x48>
    6094:	40 32       	cpi	r20, 0x20	; 32
    6096:	29 f4       	brne	.+10     	; 0x60a2 <strcasestr+0x48>
    6098:	40 29       	or	r20, r0
    609a:	4b 57       	subi	r20, 0x7B	; 123
    609c:	46 5e       	subi	r20, 0xE6	; 230
    609e:	08 f0       	brcs	.+2      	; 0x60a2 <strcasestr+0x48>
    60a0:	18 94       	sez
    60a2:	08 95       	ret

000060a4 <strcat>:
    60a4:	fb 01       	movw	r30, r22
    60a6:	dc 01       	movw	r26, r24
    60a8:	0d 90       	ld	r0, X+
    60aa:	00 20       	and	r0, r0
    60ac:	e9 f7       	brne	.-6      	; 0x60a8 <strcat+0x4>
    60ae:	11 97       	sbiw	r26, 0x01	; 1
    60b0:	01 90       	ld	r0, Z+
    60b2:	0d 92       	st	X+, r0
    60b4:	00 20       	and	r0, r0
    60b6:	e1 f7       	brne	.-8      	; 0x60b0 <strcat+0xc>
    60b8:	08 95       	ret

000060ba <strcpy>:
    60ba:	fb 01       	movw	r30, r22
    60bc:	dc 01       	movw	r26, r24
    60be:	01 90       	ld	r0, Z+
    60c0:	0d 92       	st	X+, r0
    60c2:	00 20       	and	r0, r0
    60c4:	e1 f7       	brne	.-8      	; 0x60be <strcpy+0x4>
    60c6:	08 95       	ret

000060c8 <strncasecmp>:
    60c8:	fb 01       	movw	r30, r22
    60ca:	dc 01       	movw	r26, r24
    60cc:	41 50       	subi	r20, 0x01	; 1
    60ce:	50 40       	sbci	r21, 0x00	; 0
    60d0:	88 f0       	brcs	.+34     	; 0x60f4 <strncasecmp+0x2c>
    60d2:	8d 91       	ld	r24, X+
    60d4:	81 34       	cpi	r24, 0x41	; 65
    60d6:	1c f0       	brlt	.+6      	; 0x60de <strncasecmp+0x16>
    60d8:	8b 35       	cpi	r24, 0x5B	; 91
    60da:	0c f4       	brge	.+2      	; 0x60de <strncasecmp+0x16>
    60dc:	80 5e       	subi	r24, 0xE0	; 224
    60de:	61 91       	ld	r22, Z+
    60e0:	61 34       	cpi	r22, 0x41	; 65
    60e2:	1c f0       	brlt	.+6      	; 0x60ea <strncasecmp+0x22>
    60e4:	6b 35       	cpi	r22, 0x5B	; 91
    60e6:	0c f4       	brge	.+2      	; 0x60ea <strncasecmp+0x22>
    60e8:	60 5e       	subi	r22, 0xE0	; 224
    60ea:	86 1b       	sub	r24, r22
    60ec:	61 11       	cpse	r22, r1
    60ee:	71 f3       	breq	.-36     	; 0x60cc <strncasecmp+0x4>
    60f0:	99 0b       	sbc	r25, r25
    60f2:	08 95       	ret
    60f4:	88 1b       	sub	r24, r24
    60f6:	fc cf       	rjmp	.-8      	; 0x60f0 <strncasecmp+0x28>

000060f8 <printf>:
    60f8:	cf 93       	push	r28
    60fa:	df 93       	push	r29
    60fc:	cd b7       	in	r28, 0x3d	; 61
    60fe:	de b7       	in	r29, 0x3e	; 62
    6100:	ae 01       	movw	r20, r28
    6102:	4a 5f       	subi	r20, 0xFA	; 250
    6104:	5f 4f       	sbci	r21, 0xFF	; 255
    6106:	fa 01       	movw	r30, r20
    6108:	61 91       	ld	r22, Z+
    610a:	71 91       	ld	r23, Z+
    610c:	af 01       	movw	r20, r30
    610e:	80 91 13 19 	lds	r24, 0x1913	; 0x801913 <__iob+0x2>
    6112:	90 91 14 19 	lds	r25, 0x1914	; 0x801914 <__iob+0x3>
    6116:	61 d0       	rcall	.+194    	; 0x61da <vfprintf>
    6118:	df 91       	pop	r29
    611a:	cf 91       	pop	r28
    611c:	08 95       	ret

0000611e <puts>:
    611e:	0f 93       	push	r16
    6120:	1f 93       	push	r17
    6122:	cf 93       	push	r28
    6124:	df 93       	push	r29
    6126:	e0 91 13 19 	lds	r30, 0x1913	; 0x801913 <__iob+0x2>
    612a:	f0 91 14 19 	lds	r31, 0x1914	; 0x801914 <__iob+0x3>
    612e:	23 81       	ldd	r18, Z+3	; 0x03
    6130:	21 ff       	sbrs	r18, 1
    6132:	1b c0       	rjmp	.+54     	; 0x616a <puts+0x4c>
    6134:	8c 01       	movw	r16, r24
    6136:	d0 e0       	ldi	r29, 0x00	; 0
    6138:	c0 e0       	ldi	r28, 0x00	; 0
    613a:	f8 01       	movw	r30, r16
    613c:	81 91       	ld	r24, Z+
    613e:	8f 01       	movw	r16, r30
    6140:	60 91 13 19 	lds	r22, 0x1913	; 0x801913 <__iob+0x2>
    6144:	70 91 14 19 	lds	r23, 0x1914	; 0x801914 <__iob+0x3>
    6148:	db 01       	movw	r26, r22
    614a:	18 96       	adiw	r26, 0x08	; 8
    614c:	ed 91       	ld	r30, X+
    614e:	fc 91       	ld	r31, X
    6150:	19 97       	sbiw	r26, 0x09	; 9
    6152:	88 23       	and	r24, r24
    6154:	31 f0       	breq	.+12     	; 0x6162 <puts+0x44>
    6156:	19 95       	eicall
    6158:	89 2b       	or	r24, r25
    615a:	79 f3       	breq	.-34     	; 0x613a <puts+0x1c>
    615c:	df ef       	ldi	r29, 0xFF	; 255
    615e:	cf ef       	ldi	r28, 0xFF	; 255
    6160:	ec cf       	rjmp	.-40     	; 0x613a <puts+0x1c>
    6162:	8a e0       	ldi	r24, 0x0A	; 10
    6164:	19 95       	eicall
    6166:	89 2b       	or	r24, r25
    6168:	19 f0       	breq	.+6      	; 0x6170 <puts+0x52>
    616a:	8f ef       	ldi	r24, 0xFF	; 255
    616c:	9f ef       	ldi	r25, 0xFF	; 255
    616e:	02 c0       	rjmp	.+4      	; 0x6174 <puts+0x56>
    6170:	8d 2f       	mov	r24, r29
    6172:	9c 2f       	mov	r25, r28
    6174:	df 91       	pop	r29
    6176:	cf 91       	pop	r28
    6178:	1f 91       	pop	r17
    617a:	0f 91       	pop	r16
    617c:	08 95       	ret

0000617e <sprintf>:
    617e:	0f 93       	push	r16
    6180:	1f 93       	push	r17
    6182:	cf 93       	push	r28
    6184:	df 93       	push	r29
    6186:	cd b7       	in	r28, 0x3d	; 61
    6188:	de b7       	in	r29, 0x3e	; 62
    618a:	2e 97       	sbiw	r28, 0x0e	; 14
    618c:	0f b6       	in	r0, 0x3f	; 63
    618e:	f8 94       	cli
    6190:	de bf       	out	0x3e, r29	; 62
    6192:	0f be       	out	0x3f, r0	; 63
    6194:	cd bf       	out	0x3d, r28	; 61
    6196:	0e 89       	ldd	r16, Y+22	; 0x16
    6198:	1f 89       	ldd	r17, Y+23	; 0x17
    619a:	86 e0       	ldi	r24, 0x06	; 6
    619c:	8c 83       	std	Y+4, r24	; 0x04
    619e:	1a 83       	std	Y+2, r17	; 0x02
    61a0:	09 83       	std	Y+1, r16	; 0x01
    61a2:	8f ef       	ldi	r24, 0xFF	; 255
    61a4:	9f e7       	ldi	r25, 0x7F	; 127
    61a6:	9e 83       	std	Y+6, r25	; 0x06
    61a8:	8d 83       	std	Y+5, r24	; 0x05
    61aa:	ae 01       	movw	r20, r28
    61ac:	46 5e       	subi	r20, 0xE6	; 230
    61ae:	5f 4f       	sbci	r21, 0xFF	; 255
    61b0:	68 8d       	ldd	r22, Y+24	; 0x18
    61b2:	79 8d       	ldd	r23, Y+25	; 0x19
    61b4:	ce 01       	movw	r24, r28
    61b6:	01 96       	adiw	r24, 0x01	; 1
    61b8:	10 d0       	rcall	.+32     	; 0x61da <vfprintf>
    61ba:	ef 81       	ldd	r30, Y+7	; 0x07
    61bc:	f8 85       	ldd	r31, Y+8	; 0x08
    61be:	e0 0f       	add	r30, r16
    61c0:	f1 1f       	adc	r31, r17
    61c2:	10 82       	st	Z, r1
    61c4:	2e 96       	adiw	r28, 0x0e	; 14
    61c6:	0f b6       	in	r0, 0x3f	; 63
    61c8:	f8 94       	cli
    61ca:	de bf       	out	0x3e, r29	; 62
    61cc:	0f be       	out	0x3f, r0	; 63
    61ce:	cd bf       	out	0x3d, r28	; 61
    61d0:	df 91       	pop	r29
    61d2:	cf 91       	pop	r28
    61d4:	1f 91       	pop	r17
    61d6:	0f 91       	pop	r16
    61d8:	08 95       	ret

000061da <vfprintf>:
    61da:	2f 92       	push	r2
    61dc:	3f 92       	push	r3
    61de:	4f 92       	push	r4
    61e0:	5f 92       	push	r5
    61e2:	6f 92       	push	r6
    61e4:	7f 92       	push	r7
    61e6:	8f 92       	push	r8
    61e8:	9f 92       	push	r9
    61ea:	af 92       	push	r10
    61ec:	bf 92       	push	r11
    61ee:	cf 92       	push	r12
    61f0:	df 92       	push	r13
    61f2:	ef 92       	push	r14
    61f4:	ff 92       	push	r15
    61f6:	0f 93       	push	r16
    61f8:	1f 93       	push	r17
    61fa:	cf 93       	push	r28
    61fc:	df 93       	push	r29
    61fe:	cd b7       	in	r28, 0x3d	; 61
    6200:	de b7       	in	r29, 0x3e	; 62
    6202:	2b 97       	sbiw	r28, 0x0b	; 11
    6204:	0f b6       	in	r0, 0x3f	; 63
    6206:	f8 94       	cli
    6208:	de bf       	out	0x3e, r29	; 62
    620a:	0f be       	out	0x3f, r0	; 63
    620c:	cd bf       	out	0x3d, r28	; 61
    620e:	6c 01       	movw	r12, r24
    6210:	7b 01       	movw	r14, r22
    6212:	8a 01       	movw	r16, r20
    6214:	fc 01       	movw	r30, r24
    6216:	17 82       	std	Z+7, r1	; 0x07
    6218:	16 82       	std	Z+6, r1	; 0x06
    621a:	83 81       	ldd	r24, Z+3	; 0x03
    621c:	81 ff       	sbrs	r24, 1
    621e:	bf c1       	rjmp	.+894    	; 0x659e <vfprintf+0x3c4>
    6220:	ce 01       	movw	r24, r28
    6222:	01 96       	adiw	r24, 0x01	; 1
    6224:	3c 01       	movw	r6, r24
    6226:	f6 01       	movw	r30, r12
    6228:	93 81       	ldd	r25, Z+3	; 0x03
    622a:	f7 01       	movw	r30, r14
    622c:	93 fd       	sbrc	r25, 3
    622e:	85 91       	lpm	r24, Z+
    6230:	93 ff       	sbrs	r25, 3
    6232:	81 91       	ld	r24, Z+
    6234:	7f 01       	movw	r14, r30
    6236:	88 23       	and	r24, r24
    6238:	09 f4       	brne	.+2      	; 0x623c <vfprintf+0x62>
    623a:	ad c1       	rjmp	.+858    	; 0x6596 <vfprintf+0x3bc>
    623c:	85 32       	cpi	r24, 0x25	; 37
    623e:	39 f4       	brne	.+14     	; 0x624e <vfprintf+0x74>
    6240:	93 fd       	sbrc	r25, 3
    6242:	85 91       	lpm	r24, Z+
    6244:	93 ff       	sbrs	r25, 3
    6246:	81 91       	ld	r24, Z+
    6248:	7f 01       	movw	r14, r30
    624a:	85 32       	cpi	r24, 0x25	; 37
    624c:	21 f4       	brne	.+8      	; 0x6256 <vfprintf+0x7c>
    624e:	b6 01       	movw	r22, r12
    6250:	90 e0       	ldi	r25, 0x00	; 0
    6252:	d6 d1       	rcall	.+940    	; 0x6600 <fputc>
    6254:	e8 cf       	rjmp	.-48     	; 0x6226 <vfprintf+0x4c>
    6256:	91 2c       	mov	r9, r1
    6258:	21 2c       	mov	r2, r1
    625a:	31 2c       	mov	r3, r1
    625c:	ff e1       	ldi	r31, 0x1F	; 31
    625e:	f3 15       	cp	r31, r3
    6260:	d8 f0       	brcs	.+54     	; 0x6298 <vfprintf+0xbe>
    6262:	8b 32       	cpi	r24, 0x2B	; 43
    6264:	79 f0       	breq	.+30     	; 0x6284 <vfprintf+0xaa>
    6266:	38 f4       	brcc	.+14     	; 0x6276 <vfprintf+0x9c>
    6268:	80 32       	cpi	r24, 0x20	; 32
    626a:	79 f0       	breq	.+30     	; 0x628a <vfprintf+0xb0>
    626c:	83 32       	cpi	r24, 0x23	; 35
    626e:	a1 f4       	brne	.+40     	; 0x6298 <vfprintf+0xbe>
    6270:	23 2d       	mov	r18, r3
    6272:	20 61       	ori	r18, 0x10	; 16
    6274:	1d c0       	rjmp	.+58     	; 0x62b0 <vfprintf+0xd6>
    6276:	8d 32       	cpi	r24, 0x2D	; 45
    6278:	61 f0       	breq	.+24     	; 0x6292 <vfprintf+0xb8>
    627a:	80 33       	cpi	r24, 0x30	; 48
    627c:	69 f4       	brne	.+26     	; 0x6298 <vfprintf+0xbe>
    627e:	23 2d       	mov	r18, r3
    6280:	21 60       	ori	r18, 0x01	; 1
    6282:	16 c0       	rjmp	.+44     	; 0x62b0 <vfprintf+0xd6>
    6284:	83 2d       	mov	r24, r3
    6286:	82 60       	ori	r24, 0x02	; 2
    6288:	38 2e       	mov	r3, r24
    628a:	e3 2d       	mov	r30, r3
    628c:	e4 60       	ori	r30, 0x04	; 4
    628e:	3e 2e       	mov	r3, r30
    6290:	2a c0       	rjmp	.+84     	; 0x62e6 <vfprintf+0x10c>
    6292:	f3 2d       	mov	r31, r3
    6294:	f8 60       	ori	r31, 0x08	; 8
    6296:	1d c0       	rjmp	.+58     	; 0x62d2 <vfprintf+0xf8>
    6298:	37 fc       	sbrc	r3, 7
    629a:	2d c0       	rjmp	.+90     	; 0x62f6 <vfprintf+0x11c>
    629c:	20 ed       	ldi	r18, 0xD0	; 208
    629e:	28 0f       	add	r18, r24
    62a0:	2a 30       	cpi	r18, 0x0A	; 10
    62a2:	40 f0       	brcs	.+16     	; 0x62b4 <vfprintf+0xda>
    62a4:	8e 32       	cpi	r24, 0x2E	; 46
    62a6:	b9 f4       	brne	.+46     	; 0x62d6 <vfprintf+0xfc>
    62a8:	36 fc       	sbrc	r3, 6
    62aa:	75 c1       	rjmp	.+746    	; 0x6596 <vfprintf+0x3bc>
    62ac:	23 2d       	mov	r18, r3
    62ae:	20 64       	ori	r18, 0x40	; 64
    62b0:	32 2e       	mov	r3, r18
    62b2:	19 c0       	rjmp	.+50     	; 0x62e6 <vfprintf+0x10c>
    62b4:	36 fe       	sbrs	r3, 6
    62b6:	06 c0       	rjmp	.+12     	; 0x62c4 <vfprintf+0xea>
    62b8:	8a e0       	ldi	r24, 0x0A	; 10
    62ba:	98 9e       	mul	r9, r24
    62bc:	20 0d       	add	r18, r0
    62be:	11 24       	eor	r1, r1
    62c0:	92 2e       	mov	r9, r18
    62c2:	11 c0       	rjmp	.+34     	; 0x62e6 <vfprintf+0x10c>
    62c4:	ea e0       	ldi	r30, 0x0A	; 10
    62c6:	2e 9e       	mul	r2, r30
    62c8:	20 0d       	add	r18, r0
    62ca:	11 24       	eor	r1, r1
    62cc:	22 2e       	mov	r2, r18
    62ce:	f3 2d       	mov	r31, r3
    62d0:	f0 62       	ori	r31, 0x20	; 32
    62d2:	3f 2e       	mov	r3, r31
    62d4:	08 c0       	rjmp	.+16     	; 0x62e6 <vfprintf+0x10c>
    62d6:	8c 36       	cpi	r24, 0x6C	; 108
    62d8:	21 f4       	brne	.+8      	; 0x62e2 <vfprintf+0x108>
    62da:	83 2d       	mov	r24, r3
    62dc:	80 68       	ori	r24, 0x80	; 128
    62de:	38 2e       	mov	r3, r24
    62e0:	02 c0       	rjmp	.+4      	; 0x62e6 <vfprintf+0x10c>
    62e2:	88 36       	cpi	r24, 0x68	; 104
    62e4:	41 f4       	brne	.+16     	; 0x62f6 <vfprintf+0x11c>
    62e6:	f7 01       	movw	r30, r14
    62e8:	93 fd       	sbrc	r25, 3
    62ea:	85 91       	lpm	r24, Z+
    62ec:	93 ff       	sbrs	r25, 3
    62ee:	81 91       	ld	r24, Z+
    62f0:	7f 01       	movw	r14, r30
    62f2:	81 11       	cpse	r24, r1
    62f4:	b3 cf       	rjmp	.-154    	; 0x625c <vfprintf+0x82>
    62f6:	98 2f       	mov	r25, r24
    62f8:	9f 7d       	andi	r25, 0xDF	; 223
    62fa:	95 54       	subi	r25, 0x45	; 69
    62fc:	93 30       	cpi	r25, 0x03	; 3
    62fe:	28 f4       	brcc	.+10     	; 0x630a <vfprintf+0x130>
    6300:	0c 5f       	subi	r16, 0xFC	; 252
    6302:	1f 4f       	sbci	r17, 0xFF	; 255
    6304:	9f e3       	ldi	r25, 0x3F	; 63
    6306:	99 83       	std	Y+1, r25	; 0x01
    6308:	0d c0       	rjmp	.+26     	; 0x6324 <vfprintf+0x14a>
    630a:	83 36       	cpi	r24, 0x63	; 99
    630c:	31 f0       	breq	.+12     	; 0x631a <vfprintf+0x140>
    630e:	83 37       	cpi	r24, 0x73	; 115
    6310:	71 f0       	breq	.+28     	; 0x632e <vfprintf+0x154>
    6312:	83 35       	cpi	r24, 0x53	; 83
    6314:	09 f0       	breq	.+2      	; 0x6318 <vfprintf+0x13e>
    6316:	55 c0       	rjmp	.+170    	; 0x63c2 <vfprintf+0x1e8>
    6318:	20 c0       	rjmp	.+64     	; 0x635a <vfprintf+0x180>
    631a:	f8 01       	movw	r30, r16
    631c:	80 81       	ld	r24, Z
    631e:	89 83       	std	Y+1, r24	; 0x01
    6320:	0e 5f       	subi	r16, 0xFE	; 254
    6322:	1f 4f       	sbci	r17, 0xFF	; 255
    6324:	88 24       	eor	r8, r8
    6326:	83 94       	inc	r8
    6328:	91 2c       	mov	r9, r1
    632a:	53 01       	movw	r10, r6
    632c:	12 c0       	rjmp	.+36     	; 0x6352 <vfprintf+0x178>
    632e:	28 01       	movw	r4, r16
    6330:	f2 e0       	ldi	r31, 0x02	; 2
    6332:	4f 0e       	add	r4, r31
    6334:	51 1c       	adc	r5, r1
    6336:	f8 01       	movw	r30, r16
    6338:	a0 80       	ld	r10, Z
    633a:	b1 80       	ldd	r11, Z+1	; 0x01
    633c:	36 fe       	sbrs	r3, 6
    633e:	03 c0       	rjmp	.+6      	; 0x6346 <vfprintf+0x16c>
    6340:	69 2d       	mov	r22, r9
    6342:	70 e0       	ldi	r23, 0x00	; 0
    6344:	02 c0       	rjmp	.+4      	; 0x634a <vfprintf+0x170>
    6346:	6f ef       	ldi	r22, 0xFF	; 255
    6348:	7f ef       	ldi	r23, 0xFF	; 255
    634a:	c5 01       	movw	r24, r10
    634c:	4e d1       	rcall	.+668    	; 0x65ea <strnlen>
    634e:	4c 01       	movw	r8, r24
    6350:	82 01       	movw	r16, r4
    6352:	f3 2d       	mov	r31, r3
    6354:	ff 77       	andi	r31, 0x7F	; 127
    6356:	3f 2e       	mov	r3, r31
    6358:	15 c0       	rjmp	.+42     	; 0x6384 <vfprintf+0x1aa>
    635a:	28 01       	movw	r4, r16
    635c:	22 e0       	ldi	r18, 0x02	; 2
    635e:	42 0e       	add	r4, r18
    6360:	51 1c       	adc	r5, r1
    6362:	f8 01       	movw	r30, r16
    6364:	a0 80       	ld	r10, Z
    6366:	b1 80       	ldd	r11, Z+1	; 0x01
    6368:	36 fe       	sbrs	r3, 6
    636a:	03 c0       	rjmp	.+6      	; 0x6372 <vfprintf+0x198>
    636c:	69 2d       	mov	r22, r9
    636e:	70 e0       	ldi	r23, 0x00	; 0
    6370:	02 c0       	rjmp	.+4      	; 0x6376 <vfprintf+0x19c>
    6372:	6f ef       	ldi	r22, 0xFF	; 255
    6374:	7f ef       	ldi	r23, 0xFF	; 255
    6376:	c5 01       	movw	r24, r10
    6378:	2d d1       	rcall	.+602    	; 0x65d4 <strnlen_P>
    637a:	4c 01       	movw	r8, r24
    637c:	f3 2d       	mov	r31, r3
    637e:	f0 68       	ori	r31, 0x80	; 128
    6380:	3f 2e       	mov	r3, r31
    6382:	82 01       	movw	r16, r4
    6384:	33 fc       	sbrc	r3, 3
    6386:	19 c0       	rjmp	.+50     	; 0x63ba <vfprintf+0x1e0>
    6388:	82 2d       	mov	r24, r2
    638a:	90 e0       	ldi	r25, 0x00	; 0
    638c:	88 16       	cp	r8, r24
    638e:	99 06       	cpc	r9, r25
    6390:	a0 f4       	brcc	.+40     	; 0x63ba <vfprintf+0x1e0>
    6392:	b6 01       	movw	r22, r12
    6394:	80 e2       	ldi	r24, 0x20	; 32
    6396:	90 e0       	ldi	r25, 0x00	; 0
    6398:	33 d1       	rcall	.+614    	; 0x6600 <fputc>
    639a:	2a 94       	dec	r2
    639c:	f5 cf       	rjmp	.-22     	; 0x6388 <vfprintf+0x1ae>
    639e:	f5 01       	movw	r30, r10
    63a0:	37 fc       	sbrc	r3, 7
    63a2:	85 91       	lpm	r24, Z+
    63a4:	37 fe       	sbrs	r3, 7
    63a6:	81 91       	ld	r24, Z+
    63a8:	5f 01       	movw	r10, r30
    63aa:	b6 01       	movw	r22, r12
    63ac:	90 e0       	ldi	r25, 0x00	; 0
    63ae:	28 d1       	rcall	.+592    	; 0x6600 <fputc>
    63b0:	21 10       	cpse	r2, r1
    63b2:	2a 94       	dec	r2
    63b4:	21 e0       	ldi	r18, 0x01	; 1
    63b6:	82 1a       	sub	r8, r18
    63b8:	91 08       	sbc	r9, r1
    63ba:	81 14       	cp	r8, r1
    63bc:	91 04       	cpc	r9, r1
    63be:	79 f7       	brne	.-34     	; 0x639e <vfprintf+0x1c4>
    63c0:	e1 c0       	rjmp	.+450    	; 0x6584 <vfprintf+0x3aa>
    63c2:	84 36       	cpi	r24, 0x64	; 100
    63c4:	11 f0       	breq	.+4      	; 0x63ca <vfprintf+0x1f0>
    63c6:	89 36       	cpi	r24, 0x69	; 105
    63c8:	39 f5       	brne	.+78     	; 0x6418 <vfprintf+0x23e>
    63ca:	f8 01       	movw	r30, r16
    63cc:	37 fe       	sbrs	r3, 7
    63ce:	07 c0       	rjmp	.+14     	; 0x63de <vfprintf+0x204>
    63d0:	60 81       	ld	r22, Z
    63d2:	71 81       	ldd	r23, Z+1	; 0x01
    63d4:	82 81       	ldd	r24, Z+2	; 0x02
    63d6:	93 81       	ldd	r25, Z+3	; 0x03
    63d8:	0c 5f       	subi	r16, 0xFC	; 252
    63da:	1f 4f       	sbci	r17, 0xFF	; 255
    63dc:	08 c0       	rjmp	.+16     	; 0x63ee <vfprintf+0x214>
    63de:	60 81       	ld	r22, Z
    63e0:	71 81       	ldd	r23, Z+1	; 0x01
    63e2:	07 2e       	mov	r0, r23
    63e4:	00 0c       	add	r0, r0
    63e6:	88 0b       	sbc	r24, r24
    63e8:	99 0b       	sbc	r25, r25
    63ea:	0e 5f       	subi	r16, 0xFE	; 254
    63ec:	1f 4f       	sbci	r17, 0xFF	; 255
    63ee:	f3 2d       	mov	r31, r3
    63f0:	ff 76       	andi	r31, 0x6F	; 111
    63f2:	3f 2e       	mov	r3, r31
    63f4:	97 ff       	sbrs	r25, 7
    63f6:	09 c0       	rjmp	.+18     	; 0x640a <vfprintf+0x230>
    63f8:	90 95       	com	r25
    63fa:	80 95       	com	r24
    63fc:	70 95       	com	r23
    63fe:	61 95       	neg	r22
    6400:	7f 4f       	sbci	r23, 0xFF	; 255
    6402:	8f 4f       	sbci	r24, 0xFF	; 255
    6404:	9f 4f       	sbci	r25, 0xFF	; 255
    6406:	f0 68       	ori	r31, 0x80	; 128
    6408:	3f 2e       	mov	r3, r31
    640a:	2a e0       	ldi	r18, 0x0A	; 10
    640c:	30 e0       	ldi	r19, 0x00	; 0
    640e:	a3 01       	movw	r20, r6
    6410:	33 d1       	rcall	.+614    	; 0x6678 <__ultoa_invert>
    6412:	88 2e       	mov	r8, r24
    6414:	86 18       	sub	r8, r6
    6416:	44 c0       	rjmp	.+136    	; 0x64a0 <vfprintf+0x2c6>
    6418:	85 37       	cpi	r24, 0x75	; 117
    641a:	31 f4       	brne	.+12     	; 0x6428 <vfprintf+0x24e>
    641c:	23 2d       	mov	r18, r3
    641e:	2f 7e       	andi	r18, 0xEF	; 239
    6420:	b2 2e       	mov	r11, r18
    6422:	2a e0       	ldi	r18, 0x0A	; 10
    6424:	30 e0       	ldi	r19, 0x00	; 0
    6426:	25 c0       	rjmp	.+74     	; 0x6472 <vfprintf+0x298>
    6428:	93 2d       	mov	r25, r3
    642a:	99 7f       	andi	r25, 0xF9	; 249
    642c:	b9 2e       	mov	r11, r25
    642e:	8f 36       	cpi	r24, 0x6F	; 111
    6430:	c1 f0       	breq	.+48     	; 0x6462 <vfprintf+0x288>
    6432:	18 f4       	brcc	.+6      	; 0x643a <vfprintf+0x260>
    6434:	88 35       	cpi	r24, 0x58	; 88
    6436:	79 f0       	breq	.+30     	; 0x6456 <vfprintf+0x27c>
    6438:	ae c0       	rjmp	.+348    	; 0x6596 <vfprintf+0x3bc>
    643a:	80 37       	cpi	r24, 0x70	; 112
    643c:	19 f0       	breq	.+6      	; 0x6444 <vfprintf+0x26a>
    643e:	88 37       	cpi	r24, 0x78	; 120
    6440:	21 f0       	breq	.+8      	; 0x644a <vfprintf+0x270>
    6442:	a9 c0       	rjmp	.+338    	; 0x6596 <vfprintf+0x3bc>
    6444:	e9 2f       	mov	r30, r25
    6446:	e0 61       	ori	r30, 0x10	; 16
    6448:	be 2e       	mov	r11, r30
    644a:	b4 fe       	sbrs	r11, 4
    644c:	0d c0       	rjmp	.+26     	; 0x6468 <vfprintf+0x28e>
    644e:	fb 2d       	mov	r31, r11
    6450:	f4 60       	ori	r31, 0x04	; 4
    6452:	bf 2e       	mov	r11, r31
    6454:	09 c0       	rjmp	.+18     	; 0x6468 <vfprintf+0x28e>
    6456:	34 fe       	sbrs	r3, 4
    6458:	0a c0       	rjmp	.+20     	; 0x646e <vfprintf+0x294>
    645a:	29 2f       	mov	r18, r25
    645c:	26 60       	ori	r18, 0x06	; 6
    645e:	b2 2e       	mov	r11, r18
    6460:	06 c0       	rjmp	.+12     	; 0x646e <vfprintf+0x294>
    6462:	28 e0       	ldi	r18, 0x08	; 8
    6464:	30 e0       	ldi	r19, 0x00	; 0
    6466:	05 c0       	rjmp	.+10     	; 0x6472 <vfprintf+0x298>
    6468:	20 e1       	ldi	r18, 0x10	; 16
    646a:	30 e0       	ldi	r19, 0x00	; 0
    646c:	02 c0       	rjmp	.+4      	; 0x6472 <vfprintf+0x298>
    646e:	20 e1       	ldi	r18, 0x10	; 16
    6470:	32 e0       	ldi	r19, 0x02	; 2
    6472:	f8 01       	movw	r30, r16
    6474:	b7 fe       	sbrs	r11, 7
    6476:	07 c0       	rjmp	.+14     	; 0x6486 <vfprintf+0x2ac>
    6478:	60 81       	ld	r22, Z
    647a:	71 81       	ldd	r23, Z+1	; 0x01
    647c:	82 81       	ldd	r24, Z+2	; 0x02
    647e:	93 81       	ldd	r25, Z+3	; 0x03
    6480:	0c 5f       	subi	r16, 0xFC	; 252
    6482:	1f 4f       	sbci	r17, 0xFF	; 255
    6484:	06 c0       	rjmp	.+12     	; 0x6492 <vfprintf+0x2b8>
    6486:	60 81       	ld	r22, Z
    6488:	71 81       	ldd	r23, Z+1	; 0x01
    648a:	80 e0       	ldi	r24, 0x00	; 0
    648c:	90 e0       	ldi	r25, 0x00	; 0
    648e:	0e 5f       	subi	r16, 0xFE	; 254
    6490:	1f 4f       	sbci	r17, 0xFF	; 255
    6492:	a3 01       	movw	r20, r6
    6494:	f1 d0       	rcall	.+482    	; 0x6678 <__ultoa_invert>
    6496:	88 2e       	mov	r8, r24
    6498:	86 18       	sub	r8, r6
    649a:	fb 2d       	mov	r31, r11
    649c:	ff 77       	andi	r31, 0x7F	; 127
    649e:	3f 2e       	mov	r3, r31
    64a0:	36 fe       	sbrs	r3, 6
    64a2:	0d c0       	rjmp	.+26     	; 0x64be <vfprintf+0x2e4>
    64a4:	23 2d       	mov	r18, r3
    64a6:	2e 7f       	andi	r18, 0xFE	; 254
    64a8:	a2 2e       	mov	r10, r18
    64aa:	89 14       	cp	r8, r9
    64ac:	58 f4       	brcc	.+22     	; 0x64c4 <vfprintf+0x2ea>
    64ae:	34 fe       	sbrs	r3, 4
    64b0:	0b c0       	rjmp	.+22     	; 0x64c8 <vfprintf+0x2ee>
    64b2:	32 fc       	sbrc	r3, 2
    64b4:	09 c0       	rjmp	.+18     	; 0x64c8 <vfprintf+0x2ee>
    64b6:	83 2d       	mov	r24, r3
    64b8:	8e 7e       	andi	r24, 0xEE	; 238
    64ba:	a8 2e       	mov	r10, r24
    64bc:	05 c0       	rjmp	.+10     	; 0x64c8 <vfprintf+0x2ee>
    64be:	b8 2c       	mov	r11, r8
    64c0:	a3 2c       	mov	r10, r3
    64c2:	03 c0       	rjmp	.+6      	; 0x64ca <vfprintf+0x2f0>
    64c4:	b8 2c       	mov	r11, r8
    64c6:	01 c0       	rjmp	.+2      	; 0x64ca <vfprintf+0x2f0>
    64c8:	b9 2c       	mov	r11, r9
    64ca:	a4 fe       	sbrs	r10, 4
    64cc:	0f c0       	rjmp	.+30     	; 0x64ec <vfprintf+0x312>
    64ce:	fe 01       	movw	r30, r28
    64d0:	e8 0d       	add	r30, r8
    64d2:	f1 1d       	adc	r31, r1
    64d4:	80 81       	ld	r24, Z
    64d6:	80 33       	cpi	r24, 0x30	; 48
    64d8:	21 f4       	brne	.+8      	; 0x64e2 <vfprintf+0x308>
    64da:	9a 2d       	mov	r25, r10
    64dc:	99 7e       	andi	r25, 0xE9	; 233
    64de:	a9 2e       	mov	r10, r25
    64e0:	09 c0       	rjmp	.+18     	; 0x64f4 <vfprintf+0x31a>
    64e2:	a2 fe       	sbrs	r10, 2
    64e4:	06 c0       	rjmp	.+12     	; 0x64f2 <vfprintf+0x318>
    64e6:	b3 94       	inc	r11
    64e8:	b3 94       	inc	r11
    64ea:	04 c0       	rjmp	.+8      	; 0x64f4 <vfprintf+0x31a>
    64ec:	8a 2d       	mov	r24, r10
    64ee:	86 78       	andi	r24, 0x86	; 134
    64f0:	09 f0       	breq	.+2      	; 0x64f4 <vfprintf+0x31a>
    64f2:	b3 94       	inc	r11
    64f4:	a3 fc       	sbrc	r10, 3
    64f6:	10 c0       	rjmp	.+32     	; 0x6518 <vfprintf+0x33e>
    64f8:	a0 fe       	sbrs	r10, 0
    64fa:	06 c0       	rjmp	.+12     	; 0x6508 <vfprintf+0x32e>
    64fc:	b2 14       	cp	r11, r2
    64fe:	80 f4       	brcc	.+32     	; 0x6520 <vfprintf+0x346>
    6500:	28 0c       	add	r2, r8
    6502:	92 2c       	mov	r9, r2
    6504:	9b 18       	sub	r9, r11
    6506:	0d c0       	rjmp	.+26     	; 0x6522 <vfprintf+0x348>
    6508:	b2 14       	cp	r11, r2
    650a:	58 f4       	brcc	.+22     	; 0x6522 <vfprintf+0x348>
    650c:	b6 01       	movw	r22, r12
    650e:	80 e2       	ldi	r24, 0x20	; 32
    6510:	90 e0       	ldi	r25, 0x00	; 0
    6512:	76 d0       	rcall	.+236    	; 0x6600 <fputc>
    6514:	b3 94       	inc	r11
    6516:	f8 cf       	rjmp	.-16     	; 0x6508 <vfprintf+0x32e>
    6518:	b2 14       	cp	r11, r2
    651a:	18 f4       	brcc	.+6      	; 0x6522 <vfprintf+0x348>
    651c:	2b 18       	sub	r2, r11
    651e:	02 c0       	rjmp	.+4      	; 0x6524 <vfprintf+0x34a>
    6520:	98 2c       	mov	r9, r8
    6522:	21 2c       	mov	r2, r1
    6524:	a4 fe       	sbrs	r10, 4
    6526:	0f c0       	rjmp	.+30     	; 0x6546 <vfprintf+0x36c>
    6528:	b6 01       	movw	r22, r12
    652a:	80 e3       	ldi	r24, 0x30	; 48
    652c:	90 e0       	ldi	r25, 0x00	; 0
    652e:	68 d0       	rcall	.+208    	; 0x6600 <fputc>
    6530:	a2 fe       	sbrs	r10, 2
    6532:	16 c0       	rjmp	.+44     	; 0x6560 <vfprintf+0x386>
    6534:	a1 fc       	sbrc	r10, 1
    6536:	03 c0       	rjmp	.+6      	; 0x653e <vfprintf+0x364>
    6538:	88 e7       	ldi	r24, 0x78	; 120
    653a:	90 e0       	ldi	r25, 0x00	; 0
    653c:	02 c0       	rjmp	.+4      	; 0x6542 <vfprintf+0x368>
    653e:	88 e5       	ldi	r24, 0x58	; 88
    6540:	90 e0       	ldi	r25, 0x00	; 0
    6542:	b6 01       	movw	r22, r12
    6544:	0c c0       	rjmp	.+24     	; 0x655e <vfprintf+0x384>
    6546:	8a 2d       	mov	r24, r10
    6548:	86 78       	andi	r24, 0x86	; 134
    654a:	51 f0       	breq	.+20     	; 0x6560 <vfprintf+0x386>
    654c:	a1 fe       	sbrs	r10, 1
    654e:	02 c0       	rjmp	.+4      	; 0x6554 <vfprintf+0x37a>
    6550:	8b e2       	ldi	r24, 0x2B	; 43
    6552:	01 c0       	rjmp	.+2      	; 0x6556 <vfprintf+0x37c>
    6554:	80 e2       	ldi	r24, 0x20	; 32
    6556:	a7 fc       	sbrc	r10, 7
    6558:	8d e2       	ldi	r24, 0x2D	; 45
    655a:	b6 01       	movw	r22, r12
    655c:	90 e0       	ldi	r25, 0x00	; 0
    655e:	50 d0       	rcall	.+160    	; 0x6600 <fputc>
    6560:	89 14       	cp	r8, r9
    6562:	30 f4       	brcc	.+12     	; 0x6570 <vfprintf+0x396>
    6564:	b6 01       	movw	r22, r12
    6566:	80 e3       	ldi	r24, 0x30	; 48
    6568:	90 e0       	ldi	r25, 0x00	; 0
    656a:	4a d0       	rcall	.+148    	; 0x6600 <fputc>
    656c:	9a 94       	dec	r9
    656e:	f8 cf       	rjmp	.-16     	; 0x6560 <vfprintf+0x386>
    6570:	8a 94       	dec	r8
    6572:	f3 01       	movw	r30, r6
    6574:	e8 0d       	add	r30, r8
    6576:	f1 1d       	adc	r31, r1
    6578:	80 81       	ld	r24, Z
    657a:	b6 01       	movw	r22, r12
    657c:	90 e0       	ldi	r25, 0x00	; 0
    657e:	40 d0       	rcall	.+128    	; 0x6600 <fputc>
    6580:	81 10       	cpse	r8, r1
    6582:	f6 cf       	rjmp	.-20     	; 0x6570 <vfprintf+0x396>
    6584:	22 20       	and	r2, r2
    6586:	09 f4       	brne	.+2      	; 0x658a <vfprintf+0x3b0>
    6588:	4e ce       	rjmp	.-868    	; 0x6226 <vfprintf+0x4c>
    658a:	b6 01       	movw	r22, r12
    658c:	80 e2       	ldi	r24, 0x20	; 32
    658e:	90 e0       	ldi	r25, 0x00	; 0
    6590:	37 d0       	rcall	.+110    	; 0x6600 <fputc>
    6592:	2a 94       	dec	r2
    6594:	f7 cf       	rjmp	.-18     	; 0x6584 <vfprintf+0x3aa>
    6596:	f6 01       	movw	r30, r12
    6598:	86 81       	ldd	r24, Z+6	; 0x06
    659a:	97 81       	ldd	r25, Z+7	; 0x07
    659c:	02 c0       	rjmp	.+4      	; 0x65a2 <vfprintf+0x3c8>
    659e:	8f ef       	ldi	r24, 0xFF	; 255
    65a0:	9f ef       	ldi	r25, 0xFF	; 255
    65a2:	2b 96       	adiw	r28, 0x0b	; 11
    65a4:	0f b6       	in	r0, 0x3f	; 63
    65a6:	f8 94       	cli
    65a8:	de bf       	out	0x3e, r29	; 62
    65aa:	0f be       	out	0x3f, r0	; 63
    65ac:	cd bf       	out	0x3d, r28	; 61
    65ae:	df 91       	pop	r29
    65b0:	cf 91       	pop	r28
    65b2:	1f 91       	pop	r17
    65b4:	0f 91       	pop	r16
    65b6:	ff 90       	pop	r15
    65b8:	ef 90       	pop	r14
    65ba:	df 90       	pop	r13
    65bc:	cf 90       	pop	r12
    65be:	bf 90       	pop	r11
    65c0:	af 90       	pop	r10
    65c2:	9f 90       	pop	r9
    65c4:	8f 90       	pop	r8
    65c6:	7f 90       	pop	r7
    65c8:	6f 90       	pop	r6
    65ca:	5f 90       	pop	r5
    65cc:	4f 90       	pop	r4
    65ce:	3f 90       	pop	r3
    65d0:	2f 90       	pop	r2
    65d2:	08 95       	ret

000065d4 <strnlen_P>:
    65d4:	fc 01       	movw	r30, r24
    65d6:	05 90       	lpm	r0, Z+
    65d8:	61 50       	subi	r22, 0x01	; 1
    65da:	70 40       	sbci	r23, 0x00	; 0
    65dc:	01 10       	cpse	r0, r1
    65de:	d8 f7       	brcc	.-10     	; 0x65d6 <strnlen_P+0x2>
    65e0:	80 95       	com	r24
    65e2:	90 95       	com	r25
    65e4:	8e 0f       	add	r24, r30
    65e6:	9f 1f       	adc	r25, r31
    65e8:	08 95       	ret

000065ea <strnlen>:
    65ea:	fc 01       	movw	r30, r24
    65ec:	61 50       	subi	r22, 0x01	; 1
    65ee:	70 40       	sbci	r23, 0x00	; 0
    65f0:	01 90       	ld	r0, Z+
    65f2:	01 10       	cpse	r0, r1
    65f4:	d8 f7       	brcc	.-10     	; 0x65ec <strnlen+0x2>
    65f6:	80 95       	com	r24
    65f8:	90 95       	com	r25
    65fa:	8e 0f       	add	r24, r30
    65fc:	9f 1f       	adc	r25, r31
    65fe:	08 95       	ret

00006600 <fputc>:
    6600:	0f 93       	push	r16
    6602:	1f 93       	push	r17
    6604:	cf 93       	push	r28
    6606:	df 93       	push	r29
    6608:	fb 01       	movw	r30, r22
    660a:	23 81       	ldd	r18, Z+3	; 0x03
    660c:	21 fd       	sbrc	r18, 1
    660e:	03 c0       	rjmp	.+6      	; 0x6616 <fputc+0x16>
    6610:	8f ef       	ldi	r24, 0xFF	; 255
    6612:	9f ef       	ldi	r25, 0xFF	; 255
    6614:	2c c0       	rjmp	.+88     	; 0x666e <fputc+0x6e>
    6616:	22 ff       	sbrs	r18, 2
    6618:	16 c0       	rjmp	.+44     	; 0x6646 <fputc+0x46>
    661a:	46 81       	ldd	r20, Z+6	; 0x06
    661c:	57 81       	ldd	r21, Z+7	; 0x07
    661e:	24 81       	ldd	r18, Z+4	; 0x04
    6620:	35 81       	ldd	r19, Z+5	; 0x05
    6622:	42 17       	cp	r20, r18
    6624:	53 07       	cpc	r21, r19
    6626:	44 f4       	brge	.+16     	; 0x6638 <fputc+0x38>
    6628:	a0 81       	ld	r26, Z
    662a:	b1 81       	ldd	r27, Z+1	; 0x01
    662c:	9d 01       	movw	r18, r26
    662e:	2f 5f       	subi	r18, 0xFF	; 255
    6630:	3f 4f       	sbci	r19, 0xFF	; 255
    6632:	31 83       	std	Z+1, r19	; 0x01
    6634:	20 83       	st	Z, r18
    6636:	8c 93       	st	X, r24
    6638:	26 81       	ldd	r18, Z+6	; 0x06
    663a:	37 81       	ldd	r19, Z+7	; 0x07
    663c:	2f 5f       	subi	r18, 0xFF	; 255
    663e:	3f 4f       	sbci	r19, 0xFF	; 255
    6640:	37 83       	std	Z+7, r19	; 0x07
    6642:	26 83       	std	Z+6, r18	; 0x06
    6644:	14 c0       	rjmp	.+40     	; 0x666e <fputc+0x6e>
    6646:	8b 01       	movw	r16, r22
    6648:	ec 01       	movw	r28, r24
    664a:	fb 01       	movw	r30, r22
    664c:	00 84       	ldd	r0, Z+8	; 0x08
    664e:	f1 85       	ldd	r31, Z+9	; 0x09
    6650:	e0 2d       	mov	r30, r0
    6652:	19 95       	eicall
    6654:	89 2b       	or	r24, r25
    6656:	e1 f6       	brne	.-72     	; 0x6610 <fputc+0x10>
    6658:	d8 01       	movw	r26, r16
    665a:	16 96       	adiw	r26, 0x06	; 6
    665c:	8d 91       	ld	r24, X+
    665e:	9c 91       	ld	r25, X
    6660:	17 97       	sbiw	r26, 0x07	; 7
    6662:	01 96       	adiw	r24, 0x01	; 1
    6664:	17 96       	adiw	r26, 0x07	; 7
    6666:	9c 93       	st	X, r25
    6668:	8e 93       	st	-X, r24
    666a:	16 97       	sbiw	r26, 0x06	; 6
    666c:	ce 01       	movw	r24, r28
    666e:	df 91       	pop	r29
    6670:	cf 91       	pop	r28
    6672:	1f 91       	pop	r17
    6674:	0f 91       	pop	r16
    6676:	08 95       	ret

00006678 <__ultoa_invert>:
    6678:	fa 01       	movw	r30, r20
    667a:	aa 27       	eor	r26, r26
    667c:	28 30       	cpi	r18, 0x08	; 8
    667e:	51 f1       	breq	.+84     	; 0x66d4 <__ultoa_invert+0x5c>
    6680:	20 31       	cpi	r18, 0x10	; 16
    6682:	81 f1       	breq	.+96     	; 0x66e4 <__ultoa_invert+0x6c>
    6684:	e8 94       	clt
    6686:	6f 93       	push	r22
    6688:	6e 7f       	andi	r22, 0xFE	; 254
    668a:	6e 5f       	subi	r22, 0xFE	; 254
    668c:	7f 4f       	sbci	r23, 0xFF	; 255
    668e:	8f 4f       	sbci	r24, 0xFF	; 255
    6690:	9f 4f       	sbci	r25, 0xFF	; 255
    6692:	af 4f       	sbci	r26, 0xFF	; 255
    6694:	b1 e0       	ldi	r27, 0x01	; 1
    6696:	3e d0       	rcall	.+124    	; 0x6714 <__ultoa_invert+0x9c>
    6698:	b4 e0       	ldi	r27, 0x04	; 4
    669a:	3c d0       	rcall	.+120    	; 0x6714 <__ultoa_invert+0x9c>
    669c:	67 0f       	add	r22, r23
    669e:	78 1f       	adc	r23, r24
    66a0:	89 1f       	adc	r24, r25
    66a2:	9a 1f       	adc	r25, r26
    66a4:	a1 1d       	adc	r26, r1
    66a6:	68 0f       	add	r22, r24
    66a8:	79 1f       	adc	r23, r25
    66aa:	8a 1f       	adc	r24, r26
    66ac:	91 1d       	adc	r25, r1
    66ae:	a1 1d       	adc	r26, r1
    66b0:	6a 0f       	add	r22, r26
    66b2:	71 1d       	adc	r23, r1
    66b4:	81 1d       	adc	r24, r1
    66b6:	91 1d       	adc	r25, r1
    66b8:	a1 1d       	adc	r26, r1
    66ba:	20 d0       	rcall	.+64     	; 0x66fc <__ultoa_invert+0x84>
    66bc:	09 f4       	brne	.+2      	; 0x66c0 <__ultoa_invert+0x48>
    66be:	68 94       	set
    66c0:	3f 91       	pop	r19
    66c2:	2a e0       	ldi	r18, 0x0A	; 10
    66c4:	26 9f       	mul	r18, r22
    66c6:	11 24       	eor	r1, r1
    66c8:	30 19       	sub	r19, r0
    66ca:	30 5d       	subi	r19, 0xD0	; 208
    66cc:	31 93       	st	Z+, r19
    66ce:	de f6       	brtc	.-74     	; 0x6686 <__ultoa_invert+0xe>
    66d0:	cf 01       	movw	r24, r30
    66d2:	08 95       	ret
    66d4:	46 2f       	mov	r20, r22
    66d6:	47 70       	andi	r20, 0x07	; 7
    66d8:	40 5d       	subi	r20, 0xD0	; 208
    66da:	41 93       	st	Z+, r20
    66dc:	b3 e0       	ldi	r27, 0x03	; 3
    66de:	0f d0       	rcall	.+30     	; 0x66fe <__ultoa_invert+0x86>
    66e0:	c9 f7       	brne	.-14     	; 0x66d4 <__ultoa_invert+0x5c>
    66e2:	f6 cf       	rjmp	.-20     	; 0x66d0 <__ultoa_invert+0x58>
    66e4:	46 2f       	mov	r20, r22
    66e6:	4f 70       	andi	r20, 0x0F	; 15
    66e8:	40 5d       	subi	r20, 0xD0	; 208
    66ea:	4a 33       	cpi	r20, 0x3A	; 58
    66ec:	18 f0       	brcs	.+6      	; 0x66f4 <__ultoa_invert+0x7c>
    66ee:	49 5d       	subi	r20, 0xD9	; 217
    66f0:	31 fd       	sbrc	r19, 1
    66f2:	40 52       	subi	r20, 0x20	; 32
    66f4:	41 93       	st	Z+, r20
    66f6:	02 d0       	rcall	.+4      	; 0x66fc <__ultoa_invert+0x84>
    66f8:	a9 f7       	brne	.-22     	; 0x66e4 <__ultoa_invert+0x6c>
    66fa:	ea cf       	rjmp	.-44     	; 0x66d0 <__ultoa_invert+0x58>
    66fc:	b4 e0       	ldi	r27, 0x04	; 4
    66fe:	a6 95       	lsr	r26
    6700:	97 95       	ror	r25
    6702:	87 95       	ror	r24
    6704:	77 95       	ror	r23
    6706:	67 95       	ror	r22
    6708:	ba 95       	dec	r27
    670a:	c9 f7       	brne	.-14     	; 0x66fe <__ultoa_invert+0x86>
    670c:	00 97       	sbiw	r24, 0x00	; 0
    670e:	61 05       	cpc	r22, r1
    6710:	71 05       	cpc	r23, r1
    6712:	08 95       	ret
    6714:	9b 01       	movw	r18, r22
    6716:	ac 01       	movw	r20, r24
    6718:	0a 2e       	mov	r0, r26
    671a:	06 94       	lsr	r0
    671c:	57 95       	ror	r21
    671e:	47 95       	ror	r20
    6720:	37 95       	ror	r19
    6722:	27 95       	ror	r18
    6724:	ba 95       	dec	r27
    6726:	c9 f7       	brne	.-14     	; 0x671a <__ultoa_invert+0xa2>
    6728:	62 0f       	add	r22, r18
    672a:	73 1f       	adc	r23, r19
    672c:	84 1f       	adc	r24, r20
    672e:	95 1f       	adc	r25, r21
    6730:	a0 1d       	adc	r26, r0
    6732:	08 95       	ret

00006734 <_exit>:
    6734:	f8 94       	cli

00006736 <__stop_program>:
    6736:	ff cf       	rjmp	.-2      	; 0x6736 <__stop_program>
