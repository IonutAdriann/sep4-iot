
SEP4-Group3.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000069a  00800200  000066be  00006752  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000066be  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000103a  0080089a  0080089a  00006dec  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00006dec  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00006e48  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000bf0  00000000  00000000  00006e88  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000e920  00000000  00000000  00007a78  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00003b05  00000000  00000000  00016398  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00007440  00000000  00000000  00019e9d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000028e8  00000000  00000000  000212e0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000044fa  00000000  00000000  00023bc8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000c526  00000000  00000000  000280c2  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000af0  00000000  00000000  000345e8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	e5 c0       	rjmp	.+458    	; 0x1cc <__ctors_end>
       2:	00 00       	nop
       4:	04 c1       	rjmp	.+520    	; 0x20e <__bad_interrupt>
       6:	00 00       	nop
       8:	02 c1       	rjmp	.+516    	; 0x20e <__bad_interrupt>
       a:	00 00       	nop
       c:	00 c1       	rjmp	.+512    	; 0x20e <__bad_interrupt>
       e:	00 00       	nop
      10:	fe c0       	rjmp	.+508    	; 0x20e <__bad_interrupt>
      12:	00 00       	nop
      14:	fc c0       	rjmp	.+504    	; 0x20e <__bad_interrupt>
      16:	00 00       	nop
      18:	fa c0       	rjmp	.+500    	; 0x20e <__bad_interrupt>
      1a:	00 00       	nop
      1c:	f8 c0       	rjmp	.+496    	; 0x20e <__bad_interrupt>
      1e:	00 00       	nop
      20:	f6 c0       	rjmp	.+492    	; 0x20e <__bad_interrupt>
      22:	00 00       	nop
      24:	f4 c0       	rjmp	.+488    	; 0x20e <__bad_interrupt>
      26:	00 00       	nop
      28:	f2 c0       	rjmp	.+484    	; 0x20e <__bad_interrupt>
      2a:	00 00       	nop
      2c:	f0 c0       	rjmp	.+480    	; 0x20e <__bad_interrupt>
      2e:	00 00       	nop
      30:	3e c5       	rjmp	.+2684   	; 0xaae <__vector_12>
      32:	00 00       	nop
      34:	ec c0       	rjmp	.+472    	; 0x20e <__bad_interrupt>
      36:	00 00       	nop
      38:	ea c0       	rjmp	.+468    	; 0x20e <__bad_interrupt>
      3a:	00 00       	nop
      3c:	e8 c0       	rjmp	.+464    	; 0x20e <__bad_interrupt>
      3e:	00 00       	nop
      40:	e6 c0       	rjmp	.+460    	; 0x20e <__bad_interrupt>
      42:	00 00       	nop
      44:	e4 c0       	rjmp	.+456    	; 0x20e <__bad_interrupt>
      46:	00 00       	nop
      48:	e2 c0       	rjmp	.+452    	; 0x20e <__bad_interrupt>
      4a:	00 00       	nop
      4c:	e0 c0       	rjmp	.+448    	; 0x20e <__bad_interrupt>
      4e:	00 00       	nop
      50:	de c0       	rjmp	.+444    	; 0x20e <__bad_interrupt>
      52:	00 00       	nop
      54:	dc c0       	rjmp	.+440    	; 0x20e <__bad_interrupt>
      56:	00 00       	nop
      58:	da c0       	rjmp	.+436    	; 0x20e <__bad_interrupt>
      5a:	00 00       	nop
      5c:	d8 c0       	rjmp	.+432    	; 0x20e <__bad_interrupt>
      5e:	00 00       	nop
      60:	d6 c0       	rjmp	.+428    	; 0x20e <__bad_interrupt>
      62:	00 00       	nop
      64:	0c 94 7c 27 	jmp	0x4ef8	; 0x4ef8 <__vector_25>
      68:	0c 94 ce 27 	jmp	0x4f9c	; 0x4f9c <__vector_26>
      6c:	d0 c0       	rjmp	.+416    	; 0x20e <__bad_interrupt>
      6e:	00 00       	nop
      70:	ce c0       	rjmp	.+412    	; 0x20e <__bad_interrupt>
      72:	00 00       	nop
      74:	cc c0       	rjmp	.+408    	; 0x20e <__bad_interrupt>
      76:	00 00       	nop
      78:	ca c0       	rjmp	.+404    	; 0x20e <__bad_interrupt>
      7a:	00 00       	nop
      7c:	c8 c0       	rjmp	.+400    	; 0x20e <__bad_interrupt>
      7e:	00 00       	nop
      80:	c6 c0       	rjmp	.+396    	; 0x20e <__bad_interrupt>
      82:	00 00       	nop
      84:	c4 c0       	rjmp	.+392    	; 0x20e <__bad_interrupt>
      86:	00 00       	nop
      88:	c2 c0       	rjmp	.+388    	; 0x20e <__bad_interrupt>
      8a:	00 00       	nop
      8c:	c0 c0       	rjmp	.+384    	; 0x20e <__bad_interrupt>
      8e:	00 00       	nop
      90:	0c 94 12 28 	jmp	0x5024	; 0x5024 <__vector_36>
      94:	0c 94 64 28 	jmp	0x50c8	; 0x50c8 <__vector_37>
      98:	ba c0       	rjmp	.+372    	; 0x20e <__bad_interrupt>
      9a:	00 00       	nop
      9c:	0c 94 1b 2c 	jmp	0x5836	; 0x5836 <__vector_39>
      a0:	b6 c0       	rjmp	.+364    	; 0x20e <__bad_interrupt>
      a2:	00 00       	nop
      a4:	b4 c0       	rjmp	.+360    	; 0x20e <__bad_interrupt>
      a6:	00 00       	nop
      a8:	b2 c0       	rjmp	.+356    	; 0x20e <__bad_interrupt>
      aa:	00 00       	nop
      ac:	b0 c0       	rjmp	.+352    	; 0x20e <__bad_interrupt>
      ae:	00 00       	nop
      b0:	ae c0       	rjmp	.+348    	; 0x20e <__bad_interrupt>
      b2:	00 00       	nop
      b4:	ac c0       	rjmp	.+344    	; 0x20e <__bad_interrupt>
      b6:	00 00       	nop
      b8:	aa c0       	rjmp	.+340    	; 0x20e <__bad_interrupt>
      ba:	00 00       	nop
      bc:	a8 c0       	rjmp	.+336    	; 0x20e <__bad_interrupt>
      be:	00 00       	nop
      c0:	a6 c0       	rjmp	.+332    	; 0x20e <__bad_interrupt>
      c2:	00 00       	nop
      c4:	a4 c0       	rjmp	.+328    	; 0x20e <__bad_interrupt>
      c6:	00 00       	nop
      c8:	a2 c0       	rjmp	.+324    	; 0x20e <__bad_interrupt>
      ca:	00 00       	nop
      cc:	0c 94 a8 28 	jmp	0x5150	; 0x5150 <__vector_51>
      d0:	0c 94 fa 28 	jmp	0x51f4	; 0x51f4 <__vector_52>
      d4:	9c c0       	rjmp	.+312    	; 0x20e <__bad_interrupt>
      d6:	00 00       	nop
      d8:	0c 94 3e 29 	jmp	0x527c	; 0x527c <__vector_54>
      dc:	0c 94 90 29 	jmp	0x5320	; 0x5320 <__vector_55>
      e0:	96 c0       	rjmp	.+300    	; 0x20e <__bad_interrupt>
      e2:	00 00       	nop
      e4:	13 1b       	sub	r17, r19
      e6:	13 1b       	sub	r17, r19
      e8:	13 1b       	sub	r17, r19
      ea:	4a 1b       	sub	r20, r26
      ec:	52 1b       	sub	r21, r18
      ee:	67 1b       	sub	r22, r23
      f0:	13 1b       	sub	r17, r19
      f2:	13 1b       	sub	r17, r19
      f4:	4a 1b       	sub	r20, r26
      f6:	52 1b       	sub	r21, r18
      f8:	3d 2c       	mov	r3, r13
      fa:	ad 2c       	mov	r10, r13
      fc:	ad 2c       	mov	r10, r13
      fe:	ad 2c       	mov	r10, r13
     100:	ad 2c       	mov	r10, r13
     102:	ad 2c       	mov	r10, r13
     104:	ad 2c       	mov	r10, r13
     106:	ad 2c       	mov	r10, r13
     108:	3d 2c       	mov	r3, r13
     10a:	ad 2c       	mov	r10, r13
     10c:	ad 2c       	mov	r10, r13
     10e:	ad 2c       	mov	r10, r13
     110:	ad 2c       	mov	r10, r13
     112:	ad 2c       	mov	r10, r13
     114:	ad 2c       	mov	r10, r13
     116:	ad 2c       	mov	r10, r13
     118:	3f 2c       	mov	r3, r15
     11a:	ad 2c       	mov	r10, r13
     11c:	ad 2c       	mov	r10, r13
     11e:	ad 2c       	mov	r10, r13
     120:	ad 2c       	mov	r10, r13
     122:	ad 2c       	mov	r10, r13
     124:	ad 2c       	mov	r10, r13
     126:	ad 2c       	mov	r10, r13
     128:	ad 2c       	mov	r10, r13
     12a:	ad 2c       	mov	r10, r13
     12c:	ad 2c       	mov	r10, r13
     12e:	ad 2c       	mov	r10, r13
     130:	ad 2c       	mov	r10, r13
     132:	ad 2c       	mov	r10, r13
     134:	ad 2c       	mov	r10, r13
     136:	ad 2c       	mov	r10, r13
     138:	3f 2c       	mov	r3, r15
     13a:	ad 2c       	mov	r10, r13
     13c:	ad 2c       	mov	r10, r13
     13e:	ad 2c       	mov	r10, r13
     140:	ad 2c       	mov	r10, r13
     142:	ad 2c       	mov	r10, r13
     144:	ad 2c       	mov	r10, r13
     146:	ad 2c       	mov	r10, r13
     148:	ad 2c       	mov	r10, r13
     14a:	ad 2c       	mov	r10, r13
     14c:	ad 2c       	mov	r10, r13
     14e:	ad 2c       	mov	r10, r13
     150:	ad 2c       	mov	r10, r13
     152:	ad 2c       	mov	r10, r13
     154:	ad 2c       	mov	r10, r13
     156:	ad 2c       	mov	r10, r13
     158:	a9 2c       	mov	r10, r9
     15a:	ad 2c       	mov	r10, r13
     15c:	ad 2c       	mov	r10, r13
     15e:	ad 2c       	mov	r10, r13
     160:	ad 2c       	mov	r10, r13
     162:	ad 2c       	mov	r10, r13
     164:	ad 2c       	mov	r10, r13
     166:	ad 2c       	mov	r10, r13
     168:	74 2c       	mov	r7, r4
     16a:	ad 2c       	mov	r10, r13
     16c:	ad 2c       	mov	r10, r13
     16e:	ad 2c       	mov	r10, r13
     170:	ad 2c       	mov	r10, r13
     172:	ad 2c       	mov	r10, r13
     174:	ad 2c       	mov	r10, r13
     176:	ad 2c       	mov	r10, r13
     178:	ad 2c       	mov	r10, r13
     17a:	ad 2c       	mov	r10, r13
     17c:	ad 2c       	mov	r10, r13
     17e:	ad 2c       	mov	r10, r13
     180:	ad 2c       	mov	r10, r13
     182:	ad 2c       	mov	r10, r13
     184:	ad 2c       	mov	r10, r13
     186:	ad 2c       	mov	r10, r13
     188:	68 2c       	mov	r6, r8
     18a:	ad 2c       	mov	r10, r13
     18c:	ad 2c       	mov	r10, r13
     18e:	ad 2c       	mov	r10, r13
     190:	ad 2c       	mov	r10, r13
     192:	ad 2c       	mov	r10, r13
     194:	ad 2c       	mov	r10, r13
     196:	ad 2c       	mov	r10, r13
     198:	8c 2c       	mov	r8, r12

0000019a <prvIdleTask>:
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
    }
     19a:	0e 94 54 0d 	call	0x1aa8	; 0x1aa8 <prvCheckTasksWaitingTermination>
     19e:	80 91 a7 16 	lds	r24, 0x16A7	; 0x8016a7 <pxReadyTasksLists>
     1a2:	82 30       	cpi	r24, 0x02	; 2
     1a4:	08 f0       	brcs	.+2      	; 0x1a8 <prvIdleTask+0xe>
     1a6:	bd d3       	rcall	.+1914   	; 0x922 <vPortYield>
     1a8:	0e 94 90 1b 	call	0x3720	; 0x3720 <vApplicationIdleHook>
     1ac:	f6 cf       	rjmp	.-20     	; 0x19a <prvIdleTask>

000001ae <prvTimerTask>:
                pxNewTimer->ucStatus = 0x00;
                prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
            }

            return pxNewTimer;
        }
     1ae:	cf 93       	push	r28
     1b0:	df 93       	push	r29
     1b2:	1f 92       	push	r1
     1b4:	cd b7       	in	r28, 0x3d	; 61
     1b6:	de b7       	in	r29, 0x3e	; 62
     1b8:	ce 01       	movw	r24, r28
     1ba:	01 96       	adiw	r24, 0x01	; 1
     1bc:	0e 94 90 18 	call	0x3120	; 0x3120 <prvGetNextExpireTime>
     1c0:	49 81       	ldd	r20, Y+1	; 0x01
     1c2:	0e 94 85 1a 	call	0x350a	; 0x350a <prvProcessTimerOrBlockTask>
     1c6:	0e 94 dc 1a 	call	0x35b8	; 0x35b8 <prvProcessReceivedCommands>
     1ca:	f6 cf       	rjmp	.-20     	; 0x1b8 <prvTimerTask+0xa>

000001cc <__ctors_end>:
     1cc:	11 24       	eor	r1, r1
     1ce:	1f be       	out	0x3f, r1	; 63
     1d0:	cf ef       	ldi	r28, 0xFF	; 255
     1d2:	d1 e2       	ldi	r29, 0x21	; 33
     1d4:	de bf       	out	0x3e, r29	; 62
     1d6:	cd bf       	out	0x3d, r28	; 61
     1d8:	00 e0       	ldi	r16, 0x00	; 0
     1da:	0c bf       	out	0x3c, r16	; 60

000001dc <__do_copy_data>:
     1dc:	18 e0       	ldi	r17, 0x08	; 8
     1de:	a0 e0       	ldi	r26, 0x00	; 0
     1e0:	b2 e0       	ldi	r27, 0x02	; 2
     1e2:	ee eb       	ldi	r30, 0xBE	; 190
     1e4:	f6 e6       	ldi	r31, 0x66	; 102
     1e6:	00 e0       	ldi	r16, 0x00	; 0
     1e8:	0b bf       	out	0x3b, r16	; 59
     1ea:	02 c0       	rjmp	.+4      	; 0x1f0 <__do_copy_data+0x14>
     1ec:	07 90       	elpm	r0, Z+
     1ee:	0d 92       	st	X+, r0
     1f0:	aa 39       	cpi	r26, 0x9A	; 154
     1f2:	b1 07       	cpc	r27, r17
     1f4:	d9 f7       	brne	.-10     	; 0x1ec <__do_copy_data+0x10>

000001f6 <__do_clear_bss>:
     1f6:	28 e1       	ldi	r18, 0x18	; 24
     1f8:	aa e9       	ldi	r26, 0x9A	; 154
     1fa:	b8 e0       	ldi	r27, 0x08	; 8
     1fc:	01 c0       	rjmp	.+2      	; 0x200 <.do_clear_bss_start>

000001fe <.do_clear_bss_loop>:
     1fe:	1d 92       	st	X+, r1

00000200 <.do_clear_bss_start>:
     200:	a4 3d       	cpi	r26, 0xD4	; 212
     202:	b2 07       	cpc	r27, r18
     204:	e1 f7       	brne	.-8      	; 0x1fe <.do_clear_bss_loop>
     206:	0e 94 f0 1f 	call	0x3fe0	; 0x3fe0 <main>
     20a:	0c 94 5d 33 	jmp	0x66ba	; 0x66ba <_exit>

0000020e <__bad_interrupt>:
     20e:	f8 ce       	rjmp	.-528    	; 0x0 <__vectors>

00000210 <prvTestWaitCondition>:
        uxReturn = pxEventBits->uxEventBits;
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return uxReturn;
} /*lint !e818 EventGroupHandle_t is a typedef used in other functions to so can't be pointer to const. */
     210:	0f 93       	push	r16
     212:	01 11       	cpse	r16, r1
     214:	0c c0       	rjmp	.+24     	; 0x22e <prvTestWaitCondition+0x1e>
     216:	dc 01       	movw	r26, r24
     218:	cb 01       	movw	r24, r22
     21a:	82 23       	and	r24, r18
     21c:	93 23       	and	r25, r19
     21e:	a4 23       	and	r26, r20
     220:	b5 23       	and	r27, r21
     222:	89 2b       	or	r24, r25
     224:	8a 2b       	or	r24, r26
     226:	8b 2b       	or	r24, r27
     228:	79 f4       	brne	.+30     	; 0x248 <prvTestWaitCondition+0x38>
     22a:	80 e0       	ldi	r24, 0x00	; 0
     22c:	10 c0       	rjmp	.+32     	; 0x24e <prvTestWaitCondition+0x3e>
     22e:	dc 01       	movw	r26, r24
     230:	cb 01       	movw	r24, r22
     232:	82 23       	and	r24, r18
     234:	93 23       	and	r25, r19
     236:	a4 23       	and	r26, r20
     238:	b5 23       	and	r27, r21
     23a:	28 17       	cp	r18, r24
     23c:	39 07       	cpc	r19, r25
     23e:	4a 07       	cpc	r20, r26
     240:	5b 07       	cpc	r21, r27
     242:	21 f0       	breq	.+8      	; 0x24c <prvTestWaitCondition+0x3c>
     244:	80 e0       	ldi	r24, 0x00	; 0
     246:	03 c0       	rjmp	.+6      	; 0x24e <prvTestWaitCondition+0x3e>
     248:	81 e0       	ldi	r24, 0x01	; 1
     24a:	01 c0       	rjmp	.+2      	; 0x24e <prvTestWaitCondition+0x3e>
     24c:	81 e0       	ldi	r24, 0x01	; 1
     24e:	0f 91       	pop	r16
     250:	08 95       	ret

00000252 <xEventGroupCreate>:
     252:	cf 93       	push	r28
     254:	df 93       	push	r29
     256:	8f e0       	ldi	r24, 0x0F	; 15
     258:	90 e0       	ldi	r25, 0x00	; 0
     25a:	af d1       	rcall	.+862    	; 0x5ba <pvPortMalloc>
     25c:	ec 01       	movw	r28, r24
     25e:	00 97       	sbiw	r24, 0x00	; 0
     260:	39 f0       	breq	.+14     	; 0x270 <xEventGroupCreate+0x1e>
     262:	fc 01       	movw	r30, r24
     264:	11 92       	st	Z+, r1
     266:	11 92       	st	Z+, r1
     268:	11 92       	st	Z+, r1
     26a:	11 92       	st	Z+, r1
     26c:	cf 01       	movw	r24, r30
     26e:	8b d2       	rcall	.+1302   	; 0x786 <vListInitialise>
     270:	ce 01       	movw	r24, r28
     272:	df 91       	pop	r29
     274:	cf 91       	pop	r28
     276:	08 95       	ret

00000278 <xEventGroupWaitBits>:
     278:	2f 92       	push	r2
     27a:	3f 92       	push	r3
     27c:	4f 92       	push	r4
     27e:	5f 92       	push	r5
     280:	6f 92       	push	r6
     282:	7f 92       	push	r7
     284:	8f 92       	push	r8
     286:	9f 92       	push	r9
     288:	af 92       	push	r10
     28a:	bf 92       	push	r11
     28c:	cf 92       	push	r12
     28e:	df 92       	push	r13
     290:	ef 92       	push	r14
     292:	ff 92       	push	r15
     294:	0f 93       	push	r16
     296:	1f 93       	push	r17
     298:	cf 93       	push	r28
     29a:	df 93       	push	r29
     29c:	ec 01       	movw	r28, r24
     29e:	4a 01       	movw	r8, r20
     2a0:	5b 01       	movw	r10, r22
     2a2:	62 2e       	mov	r6, r18
     2a4:	70 2e       	mov	r7, r16
     2a6:	0e 94 9f 0e 	call	0x1d3e	; 0x1d3e <vTaskSuspendAll>
     2aa:	28 80       	ld	r2, Y
     2ac:	39 80       	ldd	r3, Y+1	; 0x01
     2ae:	4a 80       	ldd	r4, Y+2	; 0x02
     2b0:	5b 80       	ldd	r5, Y+3	; 0x03
     2b2:	a5 01       	movw	r20, r10
     2b4:	94 01       	movw	r18, r8
     2b6:	c2 01       	movw	r24, r4
     2b8:	b1 01       	movw	r22, r2
     2ba:	aa df       	rcall	.-172    	; 0x210 <prvTestWaitCondition>
     2bc:	88 23       	and	r24, r24
     2be:	a1 f0       	breq	.+40     	; 0x2e8 <xEventGroupWaitBits+0x70>
     2c0:	66 20       	and	r6, r6
     2c2:	89 f1       	breq	.+98     	; 0x326 <xEventGroupWaitBits+0xae>
     2c4:	d5 01       	movw	r26, r10
     2c6:	c4 01       	movw	r24, r8
     2c8:	80 95       	com	r24
     2ca:	90 95       	com	r25
     2cc:	a0 95       	com	r26
     2ce:	b0 95       	com	r27
     2d0:	82 21       	and	r24, r2
     2d2:	93 21       	and	r25, r3
     2d4:	a4 21       	and	r26, r4
     2d6:	b5 21       	and	r27, r5
     2d8:	88 83       	st	Y, r24
     2da:	99 83       	std	Y+1, r25	; 0x01
     2dc:	aa 83       	std	Y+2, r26	; 0x02
     2de:	bb 83       	std	Y+3, r27	; 0x03
     2e0:	c1 2c       	mov	r12, r1
     2e2:	d1 2c       	mov	r13, r1
     2e4:	76 01       	movw	r14, r12
     2e6:	22 c0       	rjmp	.+68     	; 0x32c <xEventGroupWaitBits+0xb4>
     2e8:	c1 14       	cp	r12, r1
     2ea:	d1 04       	cpc	r13, r1
     2ec:	e1 04       	cpc	r14, r1
     2ee:	f1 04       	cpc	r15, r1
     2f0:	e9 f0       	breq	.+58     	; 0x32c <xEventGroupWaitBits+0xb4>
     2f2:	61 10       	cpse	r6, r1
     2f4:	04 c0       	rjmp	.+8      	; 0x2fe <xEventGroupWaitBits+0x86>
     2f6:	40 e0       	ldi	r20, 0x00	; 0
     2f8:	50 e0       	ldi	r21, 0x00	; 0
     2fa:	ba 01       	movw	r22, r20
     2fc:	04 c0       	rjmp	.+8      	; 0x306 <xEventGroupWaitBits+0x8e>
     2fe:	40 e0       	ldi	r20, 0x00	; 0
     300:	50 e0       	ldi	r21, 0x00	; 0
     302:	60 e0       	ldi	r22, 0x00	; 0
     304:	71 e0       	ldi	r23, 0x01	; 1
     306:	71 10       	cpse	r7, r1
     308:	74 60       	ori	r23, 0x04	; 4
     30a:	48 29       	or	r20, r8
     30c:	59 29       	or	r21, r9
     30e:	6a 29       	or	r22, r10
     310:	7b 29       	or	r23, r11
     312:	97 01       	movw	r18, r14
     314:	86 01       	movw	r16, r12
     316:	ce 01       	movw	r24, r28
     318:	04 96       	adiw	r24, 0x04	; 4
     31a:	0e 94 b7 11 	call	0x236e	; 0x236e <vTaskPlaceOnUnorderedEventList>
     31e:	21 2c       	mov	r2, r1
     320:	31 2c       	mov	r3, r1
     322:	21 01       	movw	r4, r2
     324:	03 c0       	rjmp	.+6      	; 0x32c <xEventGroupWaitBits+0xb4>
     326:	c1 2c       	mov	r12, r1
     328:	d1 2c       	mov	r13, r1
     32a:	76 01       	movw	r14, r12
     32c:	0e 94 df 0f 	call	0x1fbe	; 0x1fbe <xTaskResumeAll>
     330:	cd 28       	or	r12, r13
     332:	ce 28       	or	r12, r14
     334:	cf 28       	or	r12, r15
     336:	59 f1       	breq	.+86     	; 0x38e <xEventGroupWaitBits+0x116>
     338:	81 11       	cpse	r24, r1
     33a:	01 c0       	rjmp	.+2      	; 0x33e <xEventGroupWaitBits+0xc6>
     33c:	f2 d2       	rcall	.+1508   	; 0x922 <vPortYield>
     33e:	0e 94 79 15 	call	0x2af2	; 0x2af2 <uxTaskResetEventItemValue>
     342:	6b 01       	movw	r12, r22
     344:	7c 01       	movw	r14, r24
     346:	91 fd       	sbrc	r25, 1
     348:	1f c0       	rjmp	.+62     	; 0x388 <xEventGroupWaitBits+0x110>
     34a:	0f b6       	in	r0, 0x3f	; 63
     34c:	f8 94       	cli
     34e:	0f 92       	push	r0
     350:	c8 80       	ld	r12, Y
     352:	d9 80       	ldd	r13, Y+1	; 0x01
     354:	ea 80       	ldd	r14, Y+2	; 0x02
     356:	fb 80       	ldd	r15, Y+3	; 0x03
     358:	07 2d       	mov	r16, r7
     35a:	a5 01       	movw	r20, r10
     35c:	94 01       	movw	r18, r8
     35e:	c7 01       	movw	r24, r14
     360:	b6 01       	movw	r22, r12
     362:	56 df       	rcall	.-340    	; 0x210 <prvTestWaitCondition>
     364:	88 23       	and	r24, r24
     366:	71 f0       	breq	.+28     	; 0x384 <xEventGroupWaitBits+0x10c>
     368:	66 20       	and	r6, r6
     36a:	61 f0       	breq	.+24     	; 0x384 <xEventGroupWaitBits+0x10c>
     36c:	80 94       	com	r8
     36e:	90 94       	com	r9
     370:	a0 94       	com	r10
     372:	b0 94       	com	r11
     374:	8c 20       	and	r8, r12
     376:	9d 20       	and	r9, r13
     378:	ae 20       	and	r10, r14
     37a:	bf 20       	and	r11, r15
     37c:	88 82       	st	Y, r8
     37e:	99 82       	std	Y+1, r9	; 0x01
     380:	aa 82       	std	Y+2, r10	; 0x02
     382:	bb 82       	std	Y+3, r11	; 0x03
     384:	0f 90       	pop	r0
     386:	0f be       	out	0x3f, r0	; 63
     388:	16 01       	movw	r2, r12
     38a:	27 01       	movw	r4, r14
     38c:	55 24       	eor	r5, r5
     38e:	c2 01       	movw	r24, r4
     390:	b1 01       	movw	r22, r2
     392:	df 91       	pop	r29
     394:	cf 91       	pop	r28
     396:	1f 91       	pop	r17
     398:	0f 91       	pop	r16
     39a:	ff 90       	pop	r15
     39c:	ef 90       	pop	r14
     39e:	df 90       	pop	r13
     3a0:	cf 90       	pop	r12
     3a2:	bf 90       	pop	r11
     3a4:	af 90       	pop	r10
     3a6:	9f 90       	pop	r9
     3a8:	8f 90       	pop	r8
     3aa:	7f 90       	pop	r7
     3ac:	6f 90       	pop	r6
     3ae:	5f 90       	pop	r5
     3b0:	4f 90       	pop	r4
     3b2:	3f 90       	pop	r3
     3b4:	2f 90       	pop	r2
     3b6:	08 95       	ret

000003b8 <xEventGroupSetBits>:
/*-----------------------------------------------------------*/

EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup,
                                const EventBits_t uxBitsToSet )
{
     3b8:	4f 92       	push	r4
     3ba:	5f 92       	push	r5
     3bc:	6f 92       	push	r6
     3be:	7f 92       	push	r7
     3c0:	af 92       	push	r10
     3c2:	bf 92       	push	r11
     3c4:	cf 92       	push	r12
     3c6:	df 92       	push	r13
     3c8:	ef 92       	push	r14
     3ca:	ff 92       	push	r15
     3cc:	0f 93       	push	r16
     3ce:	1f 93       	push	r17
     3d0:	cf 93       	push	r28
     3d2:	df 93       	push	r29
     3d4:	ec 01       	movw	r28, r24
     3d6:	6a 01       	movw	r12, r20
     3d8:	7b 01       	movw	r14, r22
     * itself. */
    configASSERT( xEventGroup );
    configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );

    pxList = &( pxEventBits->xTasksWaitingForBits );
    pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
     3da:	8c 01       	movw	r16, r24
     3dc:	09 5f       	subi	r16, 0xF9	; 249
     3de:	1f 4f       	sbci	r17, 0xFF	; 255
    vTaskSuspendAll();
     3e0:	0e 94 9f 0e 	call	0x1d3e	; 0x1d3e <vTaskSuspendAll>
    {
        traceEVENT_GROUP_SET_BITS( xEventGroup, uxBitsToSet );

        pxListItem = listGET_HEAD_ENTRY( pxList );
     3e4:	eb 85       	ldd	r30, Y+11	; 0x0b
     3e6:	fc 85       	ldd	r31, Y+12	; 0x0c

        /* Set the bits. */
        pxEventBits->uxEventBits |= uxBitsToSet;
     3e8:	88 81       	ld	r24, Y
     3ea:	99 81       	ldd	r25, Y+1	; 0x01
     3ec:	aa 81       	ldd	r26, Y+2	; 0x02
     3ee:	bb 81       	ldd	r27, Y+3	; 0x03
     3f0:	c8 2a       	or	r12, r24
     3f2:	d9 2a       	or	r13, r25
     3f4:	ea 2a       	or	r14, r26
     3f6:	fb 2a       	or	r15, r27
     3f8:	c8 82       	st	Y, r12
     3fa:	d9 82       	std	Y+1, r13	; 0x01
     3fc:	ea 82       	std	Y+2, r14	; 0x02
     3fe:	fb 82       	std	Y+3, r15	; 0x03
                                const EventBits_t uxBitsToSet )
{
    ListItem_t * pxListItem, * pxNext;
    ListItem_t const * pxListEnd;
    List_t const * pxList;
    EventBits_t uxBitsToClear = 0, uxBitsWaitedFor, uxControlBits;
     400:	c1 2c       	mov	r12, r1
     402:	d1 2c       	mov	r13, r1
     404:	76 01       	movw	r14, r12

        /* Set the bits. */
        pxEventBits->uxEventBits |= uxBitsToSet;

        /* See if the new bit value should unblock any tasks. */
        while( pxListItem != pxListEnd )
     406:	3d c0       	rjmp	.+122    	; 0x482 <__LOCK_REGION_LENGTH__+0x82>
        {
            pxNext = listGET_NEXT( pxListItem );
     408:	a4 80       	ldd	r10, Z+4	; 0x04
     40a:	b5 80       	ldd	r11, Z+5	; 0x05
            uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
     40c:	80 81       	ld	r24, Z
     40e:	91 81       	ldd	r25, Z+1	; 0x01
     410:	a2 81       	ldd	r26, Z+2	; 0x02
     412:	b3 81       	ldd	r27, Z+3	; 0x03
            xMatchFound = pdFALSE;

            /* Split the bits waited for from the control bits. */
            uxControlBits = uxBitsWaitedFor & eventEVENT_BITS_CONTROL_BYTES;
            uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
     414:	ac 01       	movw	r20, r24
     416:	bd 01       	movw	r22, r26
     418:	77 27       	eor	r23, r23

            if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
     41a:	b2 fd       	sbrc	r27, 2
     41c:	0e c0       	rjmp	.+28     	; 0x43a <__LOCK_REGION_LENGTH__+0x3a>
            {
                /* Just looking for single bit being set. */
                if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
     41e:	48 80       	ld	r4, Y
     420:	59 80       	ldd	r5, Y+1	; 0x01
     422:	6a 80       	ldd	r6, Y+2	; 0x02
     424:	7b 80       	ldd	r7, Y+3	; 0x03
     426:	44 22       	and	r4, r20
     428:	55 22       	and	r5, r21
     42a:	66 22       	and	r6, r22
     42c:	77 22       	and	r7, r23
     42e:	45 28       	or	r4, r5
     430:	46 28       	or	r4, r6
     432:	47 28       	or	r4, r7
     434:	89 f4       	brne	.+34     	; 0x458 <__LOCK_REGION_LENGTH__+0x58>
        /* See if the new bit value should unblock any tasks. */
        while( pxListItem != pxListEnd )
        {
            pxNext = listGET_NEXT( pxListItem );
            uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
            xMatchFound = pdFALSE;
     436:	20 e0       	ldi	r18, 0x00	; 0
     438:	12 c0       	rjmp	.+36     	; 0x45e <__LOCK_REGION_LENGTH__+0x5e>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }
            }
            else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
     43a:	48 80       	ld	r4, Y
     43c:	59 80       	ldd	r5, Y+1	; 0x01
     43e:	6a 80       	ldd	r6, Y+2	; 0x02
     440:	7b 80       	ldd	r7, Y+3	; 0x03
     442:	44 22       	and	r4, r20
     444:	55 22       	and	r5, r21
     446:	66 22       	and	r6, r22
     448:	77 22       	and	r7, r23
     44a:	44 15       	cp	r20, r4
     44c:	55 05       	cpc	r21, r5
     44e:	66 05       	cpc	r22, r6
     450:	77 05       	cpc	r23, r7
     452:	21 f0       	breq	.+8      	; 0x45c <__LOCK_REGION_LENGTH__+0x5c>
        /* See if the new bit value should unblock any tasks. */
        while( pxListItem != pxListEnd )
        {
            pxNext = listGET_NEXT( pxListItem );
            uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
            xMatchFound = pdFALSE;
     454:	20 e0       	ldi	r18, 0x00	; 0
     456:	03 c0       	rjmp	.+6      	; 0x45e <__LOCK_REGION_LENGTH__+0x5e>
            if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
            {
                /* Just looking for single bit being set. */
                if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
                {
                    xMatchFound = pdTRUE;
     458:	21 e0       	ldi	r18, 0x01	; 1
     45a:	01 c0       	rjmp	.+2      	; 0x45e <__LOCK_REGION_LENGTH__+0x5e>
                }
            }
            else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
            {
                /* All bits are set. */
                xMatchFound = pdTRUE;
     45c:	21 e0       	ldi	r18, 0x01	; 1
            else
            {
                /* Need all bits to be set, but not all the bits were set. */
            }

            if( xMatchFound != pdFALSE )
     45e:	22 23       	and	r18, r18
     460:	71 f0       	breq	.+28     	; 0x47e <__LOCK_REGION_LENGTH__+0x7e>
            {
                /* The bits match.  Should the bits be cleared on exit? */
                if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
     462:	b0 ff       	sbrs	r27, 0
     464:	04 c0       	rjmp	.+8      	; 0x46e <__LOCK_REGION_LENGTH__+0x6e>
                {
                    uxBitsToClear |= uxBitsWaitedFor;
     466:	c4 2a       	or	r12, r20
     468:	d5 2a       	or	r13, r21
     46a:	e6 2a       	or	r14, r22
     46c:	f7 2a       	or	r15, r23
                /* Store the actual event flag value in the task's event list
                 * item before removing the task from the event list.  The
                 * eventUNBLOCKED_DUE_TO_BIT_SET bit is set so the task knows
                 * that is was unblocked due to its required bits matching, rather
                 * than because it timed out. */
                vTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
     46e:	48 81       	ld	r20, Y
     470:	59 81       	ldd	r21, Y+1	; 0x01
     472:	6a 81       	ldd	r22, Y+2	; 0x02
     474:	7b 81       	ldd	r23, Y+3	; 0x03
     476:	72 60       	ori	r23, 0x02	; 2
     478:	cf 01       	movw	r24, r30
     47a:	0e 94 f2 12 	call	0x25e4	; 0x25e4 <vTaskRemoveFromUnorderedEventList>
        /* See if the new bit value should unblock any tasks. */
        while( pxListItem != pxListEnd )
        {
            pxNext = listGET_NEXT( pxListItem );
            uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
            xMatchFound = pdFALSE;
     47e:	ea 2d       	mov	r30, r10
     480:	fb 2d       	mov	r31, r11

        /* Set the bits. */
        pxEventBits->uxEventBits |= uxBitsToSet;

        /* See if the new bit value should unblock any tasks. */
        while( pxListItem != pxListEnd )
     482:	e0 17       	cp	r30, r16
     484:	f1 07       	cpc	r31, r17
     486:	09 f0       	breq	.+2      	; 0x48a <__LOCK_REGION_LENGTH__+0x8a>
     488:	bf cf       	rjmp	.-130    	; 0x408 <__LOCK_REGION_LENGTH__+0x8>
            pxListItem = pxNext;
        }

        /* Clear any bits that matched when the eventCLEAR_EVENTS_ON_EXIT_BIT
         * bit was set in the control word. */
        pxEventBits->uxEventBits &= ~uxBitsToClear;
     48a:	c0 94       	com	r12
     48c:	d0 94       	com	r13
     48e:	e0 94       	com	r14
     490:	f0 94       	com	r15
     492:	88 81       	ld	r24, Y
     494:	99 81       	ldd	r25, Y+1	; 0x01
     496:	aa 81       	ldd	r26, Y+2	; 0x02
     498:	bb 81       	ldd	r27, Y+3	; 0x03
     49a:	c8 22       	and	r12, r24
     49c:	d9 22       	and	r13, r25
     49e:	ea 22       	and	r14, r26
     4a0:	fb 22       	and	r15, r27
     4a2:	c8 82       	st	Y, r12
     4a4:	d9 82       	std	Y+1, r13	; 0x01
     4a6:	ea 82       	std	Y+2, r14	; 0x02
     4a8:	fb 82       	std	Y+3, r15	; 0x03
    }
    ( void ) xTaskResumeAll();
     4aa:	0e 94 df 0f 	call	0x1fbe	; 0x1fbe <xTaskResumeAll>

    return pxEventBits->uxEventBits;
     4ae:	68 81       	ld	r22, Y
     4b0:	79 81       	ldd	r23, Y+1	; 0x01
     4b2:	8a 81       	ldd	r24, Y+2	; 0x02
     4b4:	9b 81       	ldd	r25, Y+3	; 0x03
}
     4b6:	df 91       	pop	r29
     4b8:	cf 91       	pop	r28
     4ba:	1f 91       	pop	r17
     4bc:	0f 91       	pop	r16
     4be:	ff 90       	pop	r15
     4c0:	ef 90       	pop	r14
     4c2:	df 90       	pop	r13
     4c4:	cf 90       	pop	r12
     4c6:	bf 90       	pop	r11
     4c8:	af 90       	pop	r10
     4ca:	7f 90       	pop	r7
     4cc:	6f 90       	pop	r6
     4ce:	5f 90       	pop	r5
     4d0:	4f 90       	pop	r4
     4d2:	08 95       	ret

000004d4 <prvHeapInit>:

    pucAlignedHeap = ( uint8_t * ) uxAddress;

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
     4d4:	e6 ea       	ldi	r30, 0xA6	; 166
     4d6:	f8 e0       	ldi	r31, 0x08	; 8
     4d8:	aa ea       	ldi	r26, 0xAA	; 170
     4da:	b8 e0       	ldi	r27, 0x08	; 8
     4dc:	b1 83       	std	Z+1, r27	; 0x01
     4de:	a0 83       	st	Z, r26
    xStart.xBlockSize = ( size_t ) 0;
     4e0:	13 82       	std	Z+3, r1	; 0x03
     4e2:	12 82       	std	Z+2, r1	; 0x02

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
    uxAddress -= xHeapStructSize;
     4e4:	e2 e5       	ldi	r30, 0x52	; 82
     4e6:	f6 e1       	ldi	r31, 0x16	; 22
    uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
    pxEnd = ( void * ) uxAddress;
     4e8:	f0 93 a5 08 	sts	0x08A5, r31	; 0x8008a5 <pxEnd+0x1>
     4ec:	e0 93 a4 08 	sts	0x08A4, r30	; 0x8008a4 <pxEnd>
    pxEnd->xBlockSize = 0;
     4f0:	13 82       	std	Z+3, r1	; 0x03
     4f2:	12 82       	std	Z+2, r1	; 0x02
    pxEnd->pxNextFreeBlock = NULL;
     4f4:	11 82       	std	Z+1, r1	; 0x01
     4f6:	10 82       	st	Z, r1

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( void * ) pucAlignedHeap;
    pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
     4f8:	88 ea       	ldi	r24, 0xA8	; 168
     4fa:	9d e0       	ldi	r25, 0x0D	; 13
     4fc:	13 96       	adiw	r26, 0x03	; 3
     4fe:	9c 93       	st	X, r25
     500:	8e 93       	st	-X, r24
     502:	12 97       	sbiw	r26, 0x02	; 2
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
     504:	ed 93       	st	X+, r30
     506:	fc 93       	st	X, r31

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
     508:	90 93 a1 08 	sts	0x08A1, r25	; 0x8008a1 <xMinimumEverFreeBytesRemaining+0x1>
     50c:	80 93 a0 08 	sts	0x08A0, r24	; 0x8008a0 <xMinimumEverFreeBytesRemaining>
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
     510:	90 93 a3 08 	sts	0x08A3, r25	; 0x8008a3 <xFreeBytesRemaining+0x1>
     514:	80 93 a2 08 	sts	0x08A2, r24	; 0x8008a2 <xFreeBytesRemaining>

    /* Work out the position of the top bit in a size_t variable. */
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
     518:	80 e0       	ldi	r24, 0x00	; 0
     51a:	90 e8       	ldi	r25, 0x80	; 128
     51c:	90 93 9b 08 	sts	0x089B, r25	; 0x80089b <__data_end+0x1>
     520:	80 93 9a 08 	sts	0x089A, r24	; 0x80089a <__data_end>
     524:	08 95       	ret

00000526 <prvInsertBlockIntoFreeList>:
}
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
     526:	cf 93       	push	r28
     528:	df 93       	push	r29
     52a:	ec 01       	movw	r28, r24
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
     52c:	a6 ea       	ldi	r26, 0xA6	; 166
     52e:	b8 e0       	ldi	r27, 0x08	; 8
     530:	01 c0       	rjmp	.+2      	; 0x534 <prvInsertBlockIntoFreeList+0xe>
     532:	df 01       	movw	r26, r30
     534:	ed 91       	ld	r30, X+
     536:	fc 91       	ld	r31, X
     538:	11 97       	sbiw	r26, 0x01	; 1
     53a:	ec 17       	cp	r30, r28
     53c:	fd 07       	cpc	r31, r29
     53e:	c8 f3       	brcs	.-14     	; 0x532 <prvInsertBlockIntoFreeList+0xc>

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
     540:	12 96       	adiw	r26, 0x02	; 2
     542:	8d 91       	ld	r24, X+
     544:	9c 91       	ld	r25, X
     546:	13 97       	sbiw	r26, 0x03	; 3
     548:	9d 01       	movw	r18, r26
     54a:	28 0f       	add	r18, r24
     54c:	39 1f       	adc	r19, r25
     54e:	c2 17       	cp	r28, r18
     550:	d3 07       	cpc	r29, r19
     552:	49 f4       	brne	.+18     	; 0x566 <prvInsertBlockIntoFreeList+0x40>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
     554:	2a 81       	ldd	r18, Y+2	; 0x02
     556:	3b 81       	ldd	r19, Y+3	; 0x03
     558:	82 0f       	add	r24, r18
     55a:	93 1f       	adc	r25, r19
     55c:	13 96       	adiw	r26, 0x03	; 3
     55e:	9c 93       	st	X, r25
     560:	8e 93       	st	-X, r24
     562:	12 97       	sbiw	r26, 0x02	; 2
        pxBlockToInsert = pxIterator;
     564:	ed 01       	movw	r28, r26

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
     566:	8a 81       	ldd	r24, Y+2	; 0x02
     568:	9b 81       	ldd	r25, Y+3	; 0x03
     56a:	9e 01       	movw	r18, r28
     56c:	28 0f       	add	r18, r24
     56e:	39 1f       	adc	r19, r25
     570:	e2 17       	cp	r30, r18
     572:	f3 07       	cpc	r31, r19
     574:	c1 f4       	brne	.+48     	; 0x5a6 <prvInsertBlockIntoFreeList+0x80>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
     576:	20 91 a4 08 	lds	r18, 0x08A4	; 0x8008a4 <pxEnd>
     57a:	30 91 a5 08 	lds	r19, 0x08A5	; 0x8008a5 <pxEnd+0x1>
     57e:	e2 17       	cp	r30, r18
     580:	f3 07       	cpc	r31, r19
     582:	71 f0       	breq	.+28     	; 0x5a0 <prvInsertBlockIntoFreeList+0x7a>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
     584:	22 81       	ldd	r18, Z+2	; 0x02
     586:	33 81       	ldd	r19, Z+3	; 0x03
     588:	82 0f       	add	r24, r18
     58a:	93 1f       	adc	r25, r19
     58c:	9b 83       	std	Y+3, r25	; 0x03
     58e:	8a 83       	std	Y+2, r24	; 0x02
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
     590:	ed 91       	ld	r30, X+
     592:	fc 91       	ld	r31, X
     594:	11 97       	sbiw	r26, 0x01	; 1
     596:	80 81       	ld	r24, Z
     598:	91 81       	ldd	r25, Z+1	; 0x01
     59a:	99 83       	std	Y+1, r25	; 0x01
     59c:	88 83       	st	Y, r24
     59e:	05 c0       	rjmp	.+10     	; 0x5aa <prvInsertBlockIntoFreeList+0x84>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
     5a0:	39 83       	std	Y+1, r19	; 0x01
     5a2:	28 83       	st	Y, r18
     5a4:	02 c0       	rjmp	.+4      	; 0x5aa <prvInsertBlockIntoFreeList+0x84>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
     5a6:	f9 83       	std	Y+1, r31	; 0x01
     5a8:	e8 83       	st	Y, r30

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
     5aa:	ca 17       	cp	r28, r26
     5ac:	db 07       	cpc	r29, r27
     5ae:	11 f0       	breq	.+4      	; 0x5b4 <prvInsertBlockIntoFreeList+0x8e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
     5b0:	cd 93       	st	X+, r28
     5b2:	dc 93       	st	X, r29
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
     5b4:	df 91       	pop	r29
     5b6:	cf 91       	pop	r28
     5b8:	08 95       	ret

000005ba <pvPortMalloc>:
PRIVILEGED_DATA static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
     5ba:	ef 92       	push	r14
     5bc:	ff 92       	push	r15
     5be:	0f 93       	push	r16
     5c0:	1f 93       	push	r17
     5c2:	cf 93       	push	r28
     5c4:	df 93       	push	r29
     5c6:	8c 01       	movw	r16, r24
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;

    vTaskSuspendAll();
     5c8:	0e 94 9f 0e 	call	0x1d3e	; 0x1d3e <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
     5cc:	80 91 a4 08 	lds	r24, 0x08A4	; 0x8008a4 <pxEnd>
     5d0:	90 91 a5 08 	lds	r25, 0x08A5	; 0x8008a5 <pxEnd+0x1>
     5d4:	89 2b       	or	r24, r25
     5d6:	09 f4       	brne	.+2      	; 0x5da <pvPortMalloc+0x20>
        {
            prvHeapInit();
     5d8:	7d df       	rcall	.-262    	; 0x4d4 <prvHeapInit>

        /* Check the requested block size is not so large that the top bit is
         * set.  The top bit of the block size member of the BlockLink_t structure
         * is used to determine who owns the block - the application or the
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
     5da:	80 91 9a 08 	lds	r24, 0x089A	; 0x80089a <__data_end>
     5de:	90 91 9b 08 	lds	r25, 0x089B	; 0x80089b <__data_end+0x1>
     5e2:	80 23       	and	r24, r16
     5e4:	91 23       	and	r25, r17
     5e6:	89 2b       	or	r24, r25
     5e8:	09 f0       	breq	.+2      	; 0x5ec <pvPortMalloc+0x32>
     5ea:	76 c0       	rjmp	.+236    	; 0x6d8 <pvPortMalloc+0x11e>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
     5ec:	01 15       	cp	r16, r1
     5ee:	11 05       	cpc	r17, r1
     5f0:	49 f0       	breq	.+18     	; 0x604 <pvPortMalloc+0x4a>
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
     5f2:	c8 01       	movw	r24, r16
     5f4:	04 96       	adiw	r24, 0x04	; 4
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
     5f6:	08 17       	cp	r16, r24
     5f8:	19 07       	cpc	r17, r25
     5fa:	18 f0       	brcs	.+6      	; 0x602 <pvPortMalloc+0x48>
                    mtCOVERAGE_TEST_MARKER();
                }
            } 
            else 
            {
                xWantedSize = 0;
     5fc:	00 e0       	ldi	r16, 0x00	; 0
     5fe:	10 e0       	ldi	r17, 0x00	; 0
     600:	01 c0       	rjmp	.+2      	; 0x604 <pvPortMalloc+0x4a>
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
            {
                xWantedSize += xHeapStructSize;
     602:	8c 01       	movw	r16, r24
            else 
            {
                xWantedSize = 0;
            }

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
     604:	01 15       	cp	r16, r1
     606:	11 05       	cpc	r17, r1
     608:	09 f4       	brne	.+2      	; 0x60c <pvPortMalloc+0x52>
     60a:	69 c0       	rjmp	.+210    	; 0x6de <pvPortMalloc+0x124>
     60c:	80 91 a2 08 	lds	r24, 0x08A2	; 0x8008a2 <xFreeBytesRemaining>
     610:	90 91 a3 08 	lds	r25, 0x08A3	; 0x8008a3 <xFreeBytesRemaining+0x1>
     614:	80 17       	cp	r24, r16
     616:	91 07       	cpc	r25, r17
     618:	08 f4       	brcc	.+2      	; 0x61c <pvPortMalloc+0x62>
     61a:	64 c0       	rjmp	.+200    	; 0x6e4 <pvPortMalloc+0x12a>
            {
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
                pxBlock = xStart.pxNextFreeBlock;
     61c:	c0 91 a6 08 	lds	r28, 0x08A6	; 0x8008a6 <xStart>
     620:	d0 91 a7 08 	lds	r29, 0x08A7	; 0x8008a7 <xStart+0x1>

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
            {
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
     624:	e6 ea       	ldi	r30, 0xA6	; 166
     626:	f8 e0       	ldi	r31, 0x08	; 8
                pxBlock = xStart.pxNextFreeBlock;

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
     628:	02 c0       	rjmp	.+4      	; 0x62e <pvPortMalloc+0x74>
                {
                    pxPreviousBlock = pxBlock;
     62a:	fe 01       	movw	r30, r28
                    pxBlock = pxBlock->pxNextFreeBlock;
     62c:	ec 01       	movw	r28, r24
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
                pxBlock = xStart.pxNextFreeBlock;

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
     62e:	8a 81       	ldd	r24, Y+2	; 0x02
     630:	9b 81       	ldd	r25, Y+3	; 0x03
     632:	80 17       	cp	r24, r16
     634:	91 07       	cpc	r25, r17
     636:	20 f4       	brcc	.+8      	; 0x640 <pvPortMalloc+0x86>
     638:	88 81       	ld	r24, Y
     63a:	99 81       	ldd	r25, Y+1	; 0x01
     63c:	00 97       	sbiw	r24, 0x00	; 0
     63e:	a9 f7       	brne	.-22     	; 0x62a <pvPortMalloc+0x70>
                    pxBlock = pxBlock->pxNextFreeBlock;
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
     640:	80 91 a4 08 	lds	r24, 0x08A4	; 0x8008a4 <pxEnd>
     644:	90 91 a5 08 	lds	r25, 0x08A5	; 0x8008a5 <pxEnd+0x1>
     648:	c8 17       	cp	r28, r24
     64a:	d9 07       	cpc	r29, r25
     64c:	09 f4       	brne	.+2      	; 0x650 <pvPortMalloc+0x96>
     64e:	4d c0       	rjmp	.+154    	; 0x6ea <pvPortMalloc+0x130>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
     650:	e0 80       	ld	r14, Z
     652:	f1 80       	ldd	r15, Z+1	; 0x01
     654:	84 e0       	ldi	r24, 0x04	; 4
     656:	e8 0e       	add	r14, r24
     658:	f1 1c       	adc	r15, r1

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
     65a:	88 81       	ld	r24, Y
     65c:	99 81       	ldd	r25, Y+1	; 0x01
     65e:	91 83       	std	Z+1, r25	; 0x01
     660:	80 83       	st	Z, r24

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
     662:	2a 81       	ldd	r18, Y+2	; 0x02
     664:	3b 81       	ldd	r19, Y+3	; 0x03
     666:	20 1b       	sub	r18, r16
     668:	31 0b       	sbc	r19, r17
     66a:	29 30       	cpi	r18, 0x09	; 9
     66c:	31 05       	cpc	r19, r1
     66e:	48 f0       	brcs	.+18     	; 0x682 <pvPortMalloc+0xc8>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
     670:	ce 01       	movw	r24, r28
     672:	80 0f       	add	r24, r16
     674:	91 1f       	adc	r25, r17
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
     676:	fc 01       	movw	r30, r24
     678:	33 83       	std	Z+3, r19	; 0x03
     67a:	22 83       	std	Z+2, r18	; 0x02
                        pxBlock->xBlockSize = xWantedSize;
     67c:	1b 83       	std	Y+3, r17	; 0x03

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
     67e:	0a 83       	std	Y+2, r16	; 0x02
     680:	52 df       	rcall	.-348    	; 0x526 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
     682:	2a 81       	ldd	r18, Y+2	; 0x02
     684:	3b 81       	ldd	r19, Y+3	; 0x03
     686:	80 91 a2 08 	lds	r24, 0x08A2	; 0x8008a2 <xFreeBytesRemaining>
     68a:	90 91 a3 08 	lds	r25, 0x08A3	; 0x8008a3 <xFreeBytesRemaining+0x1>
     68e:	82 1b       	sub	r24, r18
     690:	93 0b       	sbc	r25, r19
     692:	90 93 a3 08 	sts	0x08A3, r25	; 0x8008a3 <xFreeBytesRemaining+0x1>
     696:	80 93 a2 08 	sts	0x08A2, r24	; 0x8008a2 <xFreeBytesRemaining>

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
     69a:	40 91 a0 08 	lds	r20, 0x08A0	; 0x8008a0 <xMinimumEverFreeBytesRemaining>
     69e:	50 91 a1 08 	lds	r21, 0x08A1	; 0x8008a1 <xMinimumEverFreeBytesRemaining+0x1>
     6a2:	84 17       	cp	r24, r20
     6a4:	95 07       	cpc	r25, r21
     6a6:	20 f4       	brcc	.+8      	; 0x6b0 <pvPortMalloc+0xf6>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
     6a8:	90 93 a1 08 	sts	0x08A1, r25	; 0x8008a1 <xMinimumEverFreeBytesRemaining+0x1>
     6ac:	80 93 a0 08 	sts	0x08A0, r24	; 0x8008a0 <xMinimumEverFreeBytesRemaining>
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    pxBlock->xBlockSize |= xBlockAllocatedBit;
     6b0:	80 91 9a 08 	lds	r24, 0x089A	; 0x80089a <__data_end>
     6b4:	90 91 9b 08 	lds	r25, 0x089B	; 0x80089b <__data_end+0x1>
     6b8:	28 2b       	or	r18, r24
     6ba:	39 2b       	or	r19, r25
     6bc:	3b 83       	std	Y+3, r19	; 0x03
     6be:	2a 83       	std	Y+2, r18	; 0x02
                    pxBlock->pxNextFreeBlock = NULL;
     6c0:	19 82       	std	Y+1, r1	; 0x01
     6c2:	18 82       	st	Y, r1
                    xNumberOfSuccessfulAllocations++;
     6c4:	80 91 9e 08 	lds	r24, 0x089E	; 0x80089e <xNumberOfSuccessfulAllocations>
     6c8:	90 91 9f 08 	lds	r25, 0x089F	; 0x80089f <xNumberOfSuccessfulAllocations+0x1>
     6cc:	01 96       	adiw	r24, 0x01	; 1
     6ce:	90 93 9f 08 	sts	0x089F, r25	; 0x80089f <xNumberOfSuccessfulAllocations+0x1>
     6d2:	80 93 9e 08 	sts	0x089E, r24	; 0x80089e <xNumberOfSuccessfulAllocations>
     6d6:	0b c0       	rjmp	.+22     	; 0x6ee <pvPortMalloc+0x134>
/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;
     6d8:	e1 2c       	mov	r14, r1
     6da:	f1 2c       	mov	r15, r1
     6dc:	08 c0       	rjmp	.+16     	; 0x6ee <pvPortMalloc+0x134>
     6de:	e1 2c       	mov	r14, r1
     6e0:	f1 2c       	mov	r15, r1
     6e2:	05 c0       	rjmp	.+10     	; 0x6ee <pvPortMalloc+0x134>
     6e4:	e1 2c       	mov	r14, r1
     6e6:	f1 2c       	mov	r15, r1
     6e8:	02 c0       	rjmp	.+4      	; 0x6ee <pvPortMalloc+0x134>
     6ea:	e1 2c       	mov	r14, r1
     6ec:	f1 2c       	mov	r15, r1
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
     6ee:	0e 94 df 0f 	call	0x1fbe	; 0x1fbe <xTaskResumeAll>

    #if ( configUSE_MALLOC_FAILED_HOOK == 1 )
        {
            if( pvReturn == NULL )
     6f2:	e1 14       	cp	r14, r1
     6f4:	f1 04       	cpc	r15, r1
     6f6:	11 f4       	brne	.+4      	; 0x6fc <pvPortMalloc+0x142>
            {
                extern void vApplicationMallocFailedHook( void );
                vApplicationMallocFailedHook();
     6f8:	0e 94 9c 1b 	call	0x3738	; 0x3738 <vApplicationMallocFailedHook>
        }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
    return pvReturn;
}
     6fc:	c7 01       	movw	r24, r14
     6fe:	df 91       	pop	r29
     700:	cf 91       	pop	r28
     702:	1f 91       	pop	r17
     704:	0f 91       	pop	r16
     706:	ff 90       	pop	r15
     708:	ef 90       	pop	r14
     70a:	08 95       	ret

0000070c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
     70c:	0f 93       	push	r16
     70e:	1f 93       	push	r17
     710:	cf 93       	push	r28
     712:	df 93       	push	r29
    uint8_t * puc = ( uint8_t * ) pv;
    BlockLink_t * pxLink;

    if( pv != NULL )
     714:	00 97       	sbiw	r24, 0x00	; 0
     716:	91 f1       	breq	.+100    	; 0x77c <vPortFree+0x70>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
     718:	ec 01       	movw	r28, r24
     71a:	24 97       	sbiw	r28, 0x04	; 4

        /* Check the block is actually allocated. */
        configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
        configASSERT( pxLink->pxNextFreeBlock == NULL );

        if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
     71c:	4a 81       	ldd	r20, Y+2	; 0x02
     71e:	5b 81       	ldd	r21, Y+3	; 0x03
     720:	20 91 9a 08 	lds	r18, 0x089A	; 0x80089a <__data_end>
     724:	30 91 9b 08 	lds	r19, 0x089B	; 0x80089b <__data_end+0x1>
     728:	ba 01       	movw	r22, r20
     72a:	62 23       	and	r22, r18
     72c:	73 23       	and	r23, r19
     72e:	67 2b       	or	r22, r23
     730:	29 f1       	breq	.+74     	; 0x77c <vPortFree+0x70>
        {
            if( pxLink->pxNextFreeBlock == NULL )
     732:	68 81       	ld	r22, Y
     734:	79 81       	ldd	r23, Y+1	; 0x01
     736:	67 2b       	or	r22, r23
     738:	09 f5       	brne	.+66     	; 0x77c <vPortFree+0x70>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                pxLink->xBlockSize &= ~xBlockAllocatedBit;
     73a:	20 95       	com	r18
     73c:	30 95       	com	r19
     73e:	24 23       	and	r18, r20
     740:	35 23       	and	r19, r21
     742:	3b 83       	std	Y+3, r19	; 0x03
     744:	2a 83       	std	Y+2, r18	; 0x02

                vTaskSuspendAll();
     746:	0e 94 9f 0e 	call	0x1d3e	; 0x1d3e <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
     74a:	8a 81       	ldd	r24, Y+2	; 0x02
     74c:	9b 81       	ldd	r25, Y+3	; 0x03
     74e:	20 91 a2 08 	lds	r18, 0x08A2	; 0x8008a2 <xFreeBytesRemaining>
     752:	30 91 a3 08 	lds	r19, 0x08A3	; 0x8008a3 <xFreeBytesRemaining+0x1>
     756:	82 0f       	add	r24, r18
     758:	93 1f       	adc	r25, r19
     75a:	90 93 a3 08 	sts	0x08A3, r25	; 0x8008a3 <xFreeBytesRemaining+0x1>
     75e:	80 93 a2 08 	sts	0x08A2, r24	; 0x8008a2 <xFreeBytesRemaining>
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
     762:	ce 01       	movw	r24, r28
     764:	e0 de       	rcall	.-576    	; 0x526 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
     766:	80 91 9c 08 	lds	r24, 0x089C	; 0x80089c <xNumberOfSuccessfulFrees>
     76a:	90 91 9d 08 	lds	r25, 0x089D	; 0x80089d <xNumberOfSuccessfulFrees+0x1>
     76e:	01 96       	adiw	r24, 0x01	; 1
     770:	90 93 9d 08 	sts	0x089D, r25	; 0x80089d <xNumberOfSuccessfulFrees+0x1>
     774:	80 93 9c 08 	sts	0x089C, r24	; 0x80089c <xNumberOfSuccessfulFrees>
                }
                ( void ) xTaskResumeAll();
     778:	0e 94 df 0f 	call	0x1fbe	; 0x1fbe <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
     77c:	df 91       	pop	r29
     77e:	cf 91       	pop	r28
     780:	1f 91       	pop	r17
     782:	0f 91       	pop	r16
     784:	08 95       	ret

00000786 <vListInitialise>:

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;

    ( pxList->uxNumberOfItems )++;
}
     786:	fc 01       	movw	r30, r24
     788:	03 96       	adiw	r24, 0x03	; 3
     78a:	92 83       	std	Z+2, r25	; 0x02
     78c:	81 83       	std	Z+1, r24	; 0x01
     78e:	4f ef       	ldi	r20, 0xFF	; 255
     790:	5f ef       	ldi	r21, 0xFF	; 255
     792:	ba 01       	movw	r22, r20
     794:	43 83       	std	Z+3, r20	; 0x03
     796:	54 83       	std	Z+4, r21	; 0x04
     798:	65 83       	std	Z+5, r22	; 0x05
     79a:	76 83       	std	Z+6, r23	; 0x06
     79c:	90 87       	std	Z+8, r25	; 0x08
     79e:	87 83       	std	Z+7, r24	; 0x07
     7a0:	92 87       	std	Z+10, r25	; 0x0a
     7a2:	81 87       	std	Z+9, r24	; 0x09
     7a4:	10 82       	st	Z, r1
     7a6:	08 95       	ret

000007a8 <vListInitialiseItem>:
     7a8:	fc 01       	movw	r30, r24
     7aa:	13 86       	std	Z+11, r1	; 0x0b
     7ac:	12 86       	std	Z+10, r1	; 0x0a
     7ae:	08 95       	ret

000007b0 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
     7b0:	0f 93       	push	r16
     7b2:	1f 93       	push	r17
     7b4:	cf 93       	push	r28
     7b6:	df 93       	push	r29
     7b8:	eb 01       	movw	r28, r22
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
     7ba:	08 81       	ld	r16, Y
     7bc:	19 81       	ldd	r17, Y+1	; 0x01
     7be:	2a 81       	ldd	r18, Y+2	; 0x02
     7c0:	3b 81       	ldd	r19, Y+3	; 0x03
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
     7c2:	0f 3f       	cpi	r16, 0xFF	; 255
     7c4:	4f ef       	ldi	r20, 0xFF	; 255
     7c6:	14 07       	cpc	r17, r20
     7c8:	24 07       	cpc	r18, r20
     7ca:	34 07       	cpc	r19, r20
     7cc:	21 f4       	brne	.+8      	; 0x7d6 <vListInsert+0x26>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
     7ce:	fc 01       	movw	r30, r24
     7d0:	a1 85       	ldd	r26, Z+9	; 0x09
     7d2:	b2 85       	ldd	r27, Z+10	; 0x0a
     7d4:	11 c0       	rjmp	.+34     	; 0x7f8 <vListInsert+0x48>
        *   4) Using a queue or semaphore before it has been initialised or
        *      before the scheduler has been started (are interrupts firing
        *      before vTaskStartScheduler() has been called?).
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
     7d6:	dc 01       	movw	r26, r24
     7d8:	13 96       	adiw	r26, 0x03	; 3
     7da:	01 c0       	rjmp	.+2      	; 0x7de <vListInsert+0x2e>
     7dc:	df 01       	movw	r26, r30
     7de:	14 96       	adiw	r26, 0x04	; 4
     7e0:	ed 91       	ld	r30, X+
     7e2:	fc 91       	ld	r31, X
     7e4:	15 97       	sbiw	r26, 0x05	; 5
     7e6:	40 81       	ld	r20, Z
     7e8:	51 81       	ldd	r21, Z+1	; 0x01
     7ea:	62 81       	ldd	r22, Z+2	; 0x02
     7ec:	73 81       	ldd	r23, Z+3	; 0x03
     7ee:	04 17       	cp	r16, r20
     7f0:	15 07       	cpc	r17, r21
     7f2:	26 07       	cpc	r18, r22
     7f4:	37 07       	cpc	r19, r23
     7f6:	90 f7       	brcc	.-28     	; 0x7dc <vListInsert+0x2c>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
     7f8:	14 96       	adiw	r26, 0x04	; 4
     7fa:	ed 91       	ld	r30, X+
     7fc:	fc 91       	ld	r31, X
     7fe:	15 97       	sbiw	r26, 0x05	; 5
     800:	fd 83       	std	Y+5, r31	; 0x05
     802:	ec 83       	std	Y+4, r30	; 0x04
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
     804:	d7 83       	std	Z+7, r29	; 0x07
     806:	c6 83       	std	Z+6, r28	; 0x06
    pxNewListItem->pxPrevious = pxIterator;
     808:	bf 83       	std	Y+7, r27	; 0x07
     80a:	ae 83       	std	Y+6, r26	; 0x06
    pxIterator->pxNext = pxNewListItem;
     80c:	15 96       	adiw	r26, 0x05	; 5
     80e:	dc 93       	st	X, r29
     810:	ce 93       	st	-X, r28
     812:	14 97       	sbiw	r26, 0x04	; 4

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
     814:	9b 87       	std	Y+11, r25	; 0x0b
     816:	8a 87       	std	Y+10, r24	; 0x0a

    ( pxList->uxNumberOfItems )++;
     818:	fc 01       	movw	r30, r24
     81a:	20 81       	ld	r18, Z
     81c:	2f 5f       	subi	r18, 0xFF	; 255
     81e:	20 83       	st	Z, r18
}
     820:	df 91       	pop	r29
     822:	cf 91       	pop	r28
     824:	1f 91       	pop	r17
     826:	0f 91       	pop	r16
     828:	08 95       	ret

0000082a <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
     82a:	cf 93       	push	r28
     82c:	df 93       	push	r29
     82e:	fc 01       	movw	r30, r24
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
     830:	a2 85       	ldd	r26, Z+10	; 0x0a
     832:	b3 85       	ldd	r27, Z+11	; 0x0b

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
     834:	c4 81       	ldd	r28, Z+4	; 0x04
     836:	d5 81       	ldd	r29, Z+5	; 0x05
     838:	86 81       	ldd	r24, Z+6	; 0x06
     83a:	97 81       	ldd	r25, Z+7	; 0x07
     83c:	9f 83       	std	Y+7, r25	; 0x07
     83e:	8e 83       	std	Y+6, r24	; 0x06
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
     840:	c6 81       	ldd	r28, Z+6	; 0x06
     842:	d7 81       	ldd	r29, Z+7	; 0x07
     844:	84 81       	ldd	r24, Z+4	; 0x04
     846:	95 81       	ldd	r25, Z+5	; 0x05
     848:	9d 83       	std	Y+5, r25	; 0x05
     84a:	8c 83       	std	Y+4, r24	; 0x04

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
     84c:	11 96       	adiw	r26, 0x01	; 1
     84e:	8d 91       	ld	r24, X+
     850:	9c 91       	ld	r25, X
     852:	12 97       	sbiw	r26, 0x02	; 2
     854:	e8 17       	cp	r30, r24
     856:	f9 07       	cpc	r31, r25
     858:	31 f4       	brne	.+12     	; 0x866 <uxListRemove+0x3c>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
     85a:	86 81       	ldd	r24, Z+6	; 0x06
     85c:	97 81       	ldd	r25, Z+7	; 0x07
     85e:	12 96       	adiw	r26, 0x02	; 2
     860:	9c 93       	st	X, r25
     862:	8e 93       	st	-X, r24
     864:	11 97       	sbiw	r26, 0x01	; 1
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
     866:	13 86       	std	Z+11, r1	; 0x0b
     868:	12 86       	std	Z+10, r1	; 0x0a
    ( pxList->uxNumberOfItems )--;
     86a:	8c 91       	ld	r24, X
     86c:	81 50       	subi	r24, 0x01	; 1
     86e:	8c 93       	st	X, r24

    return pxList->uxNumberOfItems;
     870:	8c 91       	ld	r24, X
}
     872:	df 91       	pop	r29
     874:	cf 91       	pop	r28
     876:	08 95       	ret

00000878 <prvSetupTimerInterrupt>:
{
    portSAVE_CONTEXT();
    vTaskSwitchContext();
    portRESTORE_CONTEXT();

    __asm__ __volatile__ ( "reti" );
     878:	a8 95       	wdr
     87a:	90 ec       	ldi	r25, 0xC0	; 192
     87c:	88 e1       	ldi	r24, 0x18	; 24
     87e:	0f b6       	in	r0, 0x3f	; 63
     880:	f8 94       	cli
     882:	a8 95       	wdr
     884:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7c0060>
     888:	0f be       	out	0x3f, r0	; 63
     88a:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__TEXT_REGION_LENGTH__+0x7c0060>
     88e:	08 95       	ret

00000890 <pxPortInitialiseStack>:
     890:	fc 01       	movw	r30, r24
     892:	60 83       	st	Z, r22
     894:	31 97       	sbiw	r30, 0x01	; 1
     896:	70 83       	st	Z, r23
     898:	31 97       	sbiw	r30, 0x01	; 1
     89a:	10 82       	st	Z, r1
     89c:	31 97       	sbiw	r30, 0x01	; 1
     89e:	10 82       	st	Z, r1
     8a0:	31 97       	sbiw	r30, 0x01	; 1
     8a2:	20 e8       	ldi	r18, 0x80	; 128
     8a4:	20 83       	st	Z, r18
     8a6:	31 97       	sbiw	r30, 0x01	; 1
     8a8:	10 82       	st	Z, r1
     8aa:	31 97       	sbiw	r30, 0x01	; 1
     8ac:	10 82       	st	Z, r1
     8ae:	31 97       	sbiw	r30, 0x01	; 1
     8b0:	10 82       	st	Z, r1
     8b2:	77 97       	sbiw	r30, 0x17	; 23
     8b4:	40 83       	st	Z, r20
     8b6:	31 97       	sbiw	r30, 0x01	; 1
     8b8:	50 83       	st	Z, r21
     8ba:	86 97       	sbiw	r24, 0x26	; 38
     8bc:	08 95       	ret

000008be <xPortStartScheduler>:
     8be:	dc df       	rcall	.-72     	; 0x878 <prvSetupTimerInterrupt>
     8c0:	a0 91 15 17 	lds	r26, 0x1715	; 0x801715 <pxCurrentTCB>
     8c4:	b0 91 16 17 	lds	r27, 0x1716	; 0x801716 <pxCurrentTCB+0x1>
     8c8:	cd 91       	ld	r28, X+
     8ca:	cd bf       	out	0x3d, r28	; 61
     8cc:	dd 91       	ld	r29, X+
     8ce:	de bf       	out	0x3e, r29	; 62
     8d0:	ff 91       	pop	r31
     8d2:	ef 91       	pop	r30
     8d4:	df 91       	pop	r29
     8d6:	cf 91       	pop	r28
     8d8:	bf 91       	pop	r27
     8da:	af 91       	pop	r26
     8dc:	9f 91       	pop	r25
     8de:	8f 91       	pop	r24
     8e0:	7f 91       	pop	r23
     8e2:	6f 91       	pop	r22
     8e4:	5f 91       	pop	r21
     8e6:	4f 91       	pop	r20
     8e8:	3f 91       	pop	r19
     8ea:	2f 91       	pop	r18
     8ec:	1f 91       	pop	r17
     8ee:	0f 91       	pop	r16
     8f0:	ff 90       	pop	r15
     8f2:	ef 90       	pop	r14
     8f4:	df 90       	pop	r13
     8f6:	cf 90       	pop	r12
     8f8:	bf 90       	pop	r11
     8fa:	af 90       	pop	r10
     8fc:	9f 90       	pop	r9
     8fe:	8f 90       	pop	r8
     900:	7f 90       	pop	r7
     902:	6f 90       	pop	r6
     904:	5f 90       	pop	r5
     906:	4f 90       	pop	r4
     908:	3f 90       	pop	r3
     90a:	2f 90       	pop	r2
     90c:	1f 90       	pop	r1
     90e:	0f 90       	pop	r0
     910:	0c be       	out	0x3c, r0	; 60
     912:	0f 90       	pop	r0
     914:	0b be       	out	0x3b, r0	; 59
     916:	0f 90       	pop	r0
     918:	0f be       	out	0x3f, r0	; 63
     91a:	0f 90       	pop	r0
     91c:	08 95       	ret
     91e:	81 e0       	ldi	r24, 0x01	; 1
     920:	08 95       	ret

00000922 <vPortYield>:
     922:	0f 92       	push	r0
     924:	0f b6       	in	r0, 0x3f	; 63
     926:	f8 94       	cli
     928:	0f 92       	push	r0
     92a:	0b b6       	in	r0, 0x3b	; 59
     92c:	0f 92       	push	r0
     92e:	0c b6       	in	r0, 0x3c	; 60
     930:	0f 92       	push	r0
     932:	1f 92       	push	r1
     934:	11 24       	eor	r1, r1
     936:	2f 92       	push	r2
     938:	3f 92       	push	r3
     93a:	4f 92       	push	r4
     93c:	5f 92       	push	r5
     93e:	6f 92       	push	r6
     940:	7f 92       	push	r7
     942:	8f 92       	push	r8
     944:	9f 92       	push	r9
     946:	af 92       	push	r10
     948:	bf 92       	push	r11
     94a:	cf 92       	push	r12
     94c:	df 92       	push	r13
     94e:	ef 92       	push	r14
     950:	ff 92       	push	r15
     952:	0f 93       	push	r16
     954:	1f 93       	push	r17
     956:	2f 93       	push	r18
     958:	3f 93       	push	r19
     95a:	4f 93       	push	r20
     95c:	5f 93       	push	r21
     95e:	6f 93       	push	r22
     960:	7f 93       	push	r23
     962:	8f 93       	push	r24
     964:	9f 93       	push	r25
     966:	af 93       	push	r26
     968:	bf 93       	push	r27
     96a:	cf 93       	push	r28
     96c:	df 93       	push	r29
     96e:	ef 93       	push	r30
     970:	ff 93       	push	r31
     972:	a0 91 15 17 	lds	r26, 0x1715	; 0x801715 <pxCurrentTCB>
     976:	b0 91 16 17 	lds	r27, 0x1716	; 0x801716 <pxCurrentTCB+0x1>
     97a:	0d b6       	in	r0, 0x3d	; 61
     97c:	0d 92       	st	X+, r0
     97e:	0e b6       	in	r0, 0x3e	; 62
     980:	0d 92       	st	X+, r0
     982:	0e 94 3b 11 	call	0x2276	; 0x2276 <vTaskSwitchContext>
     986:	a0 91 15 17 	lds	r26, 0x1715	; 0x801715 <pxCurrentTCB>
     98a:	b0 91 16 17 	lds	r27, 0x1716	; 0x801716 <pxCurrentTCB+0x1>
     98e:	cd 91       	ld	r28, X+
     990:	cd bf       	out	0x3d, r28	; 61
     992:	dd 91       	ld	r29, X+
     994:	de bf       	out	0x3e, r29	; 62
     996:	ff 91       	pop	r31
     998:	ef 91       	pop	r30
     99a:	df 91       	pop	r29
     99c:	cf 91       	pop	r28
     99e:	bf 91       	pop	r27
     9a0:	af 91       	pop	r26
     9a2:	9f 91       	pop	r25
     9a4:	8f 91       	pop	r24
     9a6:	7f 91       	pop	r23
     9a8:	6f 91       	pop	r22
     9aa:	5f 91       	pop	r21
     9ac:	4f 91       	pop	r20
     9ae:	3f 91       	pop	r19
     9b0:	2f 91       	pop	r18
     9b2:	1f 91       	pop	r17
     9b4:	0f 91       	pop	r16
     9b6:	ff 90       	pop	r15
     9b8:	ef 90       	pop	r14
     9ba:	df 90       	pop	r13
     9bc:	cf 90       	pop	r12
     9be:	bf 90       	pop	r11
     9c0:	af 90       	pop	r10
     9c2:	9f 90       	pop	r9
     9c4:	8f 90       	pop	r8
     9c6:	7f 90       	pop	r7
     9c8:	6f 90       	pop	r6
     9ca:	5f 90       	pop	r5
     9cc:	4f 90       	pop	r4
     9ce:	3f 90       	pop	r3
     9d0:	2f 90       	pop	r2
     9d2:	1f 90       	pop	r1
     9d4:	0f 90       	pop	r0
     9d6:	0c be       	out	0x3c, r0	; 60
     9d8:	0f 90       	pop	r0
     9da:	0b be       	out	0x3b, r0	; 59
     9dc:	0f 90       	pop	r0
     9de:	0f be       	out	0x3f, r0	; 63
     9e0:	0f 90       	pop	r0
     9e2:	08 95       	ret

000009e4 <vPortYieldFromTick>:
 * call comes from the tick ISR.
 */
void vPortYieldFromTick( void ) __attribute__ ( ( hot, flatten, naked ) );
void vPortYieldFromTick( void )
{
    portSAVE_CONTEXT();
     9e4:	0f 92       	push	r0
     9e6:	0f b6       	in	r0, 0x3f	; 63
     9e8:	f8 94       	cli
     9ea:	0f 92       	push	r0
     9ec:	0b b6       	in	r0, 0x3b	; 59
     9ee:	0f 92       	push	r0
     9f0:	0c b6       	in	r0, 0x3c	; 60
     9f2:	0f 92       	push	r0
     9f4:	1f 92       	push	r1
     9f6:	11 24       	eor	r1, r1
     9f8:	2f 92       	push	r2
     9fa:	3f 92       	push	r3
     9fc:	4f 92       	push	r4
     9fe:	5f 92       	push	r5
     a00:	6f 92       	push	r6
     a02:	7f 92       	push	r7
     a04:	8f 92       	push	r8
     a06:	9f 92       	push	r9
     a08:	af 92       	push	r10
     a0a:	bf 92       	push	r11
     a0c:	cf 92       	push	r12
     a0e:	df 92       	push	r13
     a10:	ef 92       	push	r14
     a12:	ff 92       	push	r15
     a14:	0f 93       	push	r16
     a16:	1f 93       	push	r17
     a18:	2f 93       	push	r18
     a1a:	3f 93       	push	r19
     a1c:	4f 93       	push	r20
     a1e:	5f 93       	push	r21
     a20:	6f 93       	push	r22
     a22:	7f 93       	push	r23
     a24:	8f 93       	push	r24
     a26:	9f 93       	push	r25
     a28:	af 93       	push	r26
     a2a:	bf 93       	push	r27
     a2c:	cf 93       	push	r28
     a2e:	df 93       	push	r29
     a30:	ef 93       	push	r30
     a32:	ff 93       	push	r31
     a34:	a0 91 15 17 	lds	r26, 0x1715	; 0x801715 <pxCurrentTCB>
     a38:	b0 91 16 17 	lds	r27, 0x1716	; 0x801716 <pxCurrentTCB+0x1>
     a3c:	0d b6       	in	r0, 0x3d	; 61
     a3e:	0d 92       	st	X+, r0
     a40:	0e b6       	in	r0, 0x3e	; 62
     a42:	0d 92       	st	X+, r0
    sleep_reset();        /* reset the sleep_mode() faster than sleep_disable(); */
     a44:	13 be       	out	0x33, r1	; 51
    if( xTaskIncrementTick() != pdFALSE )
     a46:	0e 94 b3 0e 	call	0x1d66	; 0x1d66 <xTaskIncrementTick>
     a4a:	81 11       	cpse	r24, r1
    {
        vTaskSwitchContext();
     a4c:	0e 94 3b 11 	call	0x2276	; 0x2276 <vTaskSwitchContext>
    }
    portRESTORE_CONTEXT();
     a50:	a0 91 15 17 	lds	r26, 0x1715	; 0x801715 <pxCurrentTCB>
     a54:	b0 91 16 17 	lds	r27, 0x1716	; 0x801716 <pxCurrentTCB+0x1>
     a58:	cd 91       	ld	r28, X+
     a5a:	cd bf       	out	0x3d, r28	; 61
     a5c:	dd 91       	ld	r29, X+
     a5e:	de bf       	out	0x3e, r29	; 62
     a60:	ff 91       	pop	r31
     a62:	ef 91       	pop	r30
     a64:	df 91       	pop	r29
     a66:	cf 91       	pop	r28
     a68:	bf 91       	pop	r27
     a6a:	af 91       	pop	r26
     a6c:	9f 91       	pop	r25
     a6e:	8f 91       	pop	r24
     a70:	7f 91       	pop	r23
     a72:	6f 91       	pop	r22
     a74:	5f 91       	pop	r21
     a76:	4f 91       	pop	r20
     a78:	3f 91       	pop	r19
     a7a:	2f 91       	pop	r18
     a7c:	1f 91       	pop	r17
     a7e:	0f 91       	pop	r16
     a80:	ff 90       	pop	r15
     a82:	ef 90       	pop	r14
     a84:	df 90       	pop	r13
     a86:	cf 90       	pop	r12
     a88:	bf 90       	pop	r11
     a8a:	af 90       	pop	r10
     a8c:	9f 90       	pop	r9
     a8e:	8f 90       	pop	r8
     a90:	7f 90       	pop	r7
     a92:	6f 90       	pop	r6
     a94:	5f 90       	pop	r5
     a96:	4f 90       	pop	r4
     a98:	3f 90       	pop	r3
     a9a:	2f 90       	pop	r2
     a9c:	1f 90       	pop	r1
     a9e:	0f 90       	pop	r0
     aa0:	0c be       	out	0x3c, r0	; 60
     aa2:	0f 90       	pop	r0
     aa4:	0b be       	out	0x3b, r0	; 59
     aa6:	0f 90       	pop	r0
     aa8:	0f be       	out	0x3f, r0	; 63
     aaa:	0f 90       	pop	r0

    __asm__ __volatile__ ( "ret" );
     aac:	08 95       	ret

00000aae <__vector_12>:
    ISR(portSCHEDULER_ISR, ISR_NAKED) __attribute__ ((hot, flatten));
/*  ISR(portSCHEDULER_ISR, ISR_NAKED ISR_NOBLOCK) __attribute__ ((hot, flatten));
 */
    ISR(portSCHEDULER_ISR)
    {
        vPortYieldFromTick();
     aae:	9a df       	rcall	.-204    	; 0x9e4 <vPortYieldFromTick>
        __asm__ __volatile__ ( "reti" );
     ab0:	18 95       	reti

00000ab2 <prvGetDisinheritPriorityAfterTimeout>:
    {
        xReturn = pdFALSE;
    }

    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
     ab2:	dc 01       	movw	r26, r24
     ab4:	53 96       	adiw	r26, 0x13	; 19
     ab6:	2c 91       	ld	r18, X
     ab8:	53 97       	sbiw	r26, 0x13	; 19
     aba:	22 23       	and	r18, r18
     abc:	41 f0       	breq	.+16     	; 0xace <prvGetDisinheritPriorityAfterTimeout+0x1c>
     abe:	5a 96       	adiw	r26, 0x1a	; 26
     ac0:	ed 91       	ld	r30, X+
     ac2:	fc 91       	ld	r31, X
     ac4:	5b 97       	sbiw	r26, 0x1b	; 27
     ac6:	90 81       	ld	r25, Z
     ac8:	8a e0       	ldi	r24, 0x0A	; 10
     aca:	89 1b       	sub	r24, r25
     acc:	08 95       	ret
     ace:	80 e0       	ldi	r24, 0x00	; 0
     ad0:	08 95       	ret

00000ad2 <prvIsQueueEmpty>:
     ad2:	0f b6       	in	r0, 0x3f	; 63
     ad4:	f8 94       	cli
     ad6:	0f 92       	push	r0
     ad8:	fc 01       	movw	r30, r24
     ada:	86 8d       	ldd	r24, Z+30	; 0x1e
     adc:	81 11       	cpse	r24, r1
     ade:	02 c0       	rjmp	.+4      	; 0xae4 <prvIsQueueEmpty+0x12>
     ae0:	81 e0       	ldi	r24, 0x01	; 1
     ae2:	01 c0       	rjmp	.+2      	; 0xae6 <prvIsQueueEmpty+0x14>
     ae4:	80 e0       	ldi	r24, 0x00	; 0
     ae6:	0f 90       	pop	r0
     ae8:	0f be       	out	0x3f, r0	; 63
     aea:	08 95       	ret

00000aec <prvIsQueueFull>:
     aec:	0f b6       	in	r0, 0x3f	; 63
     aee:	f8 94       	cli
     af0:	0f 92       	push	r0
     af2:	fc 01       	movw	r30, r24
     af4:	26 8d       	ldd	r18, Z+30	; 0x1e
     af6:	87 8d       	ldd	r24, Z+31	; 0x1f
     af8:	28 13       	cpse	r18, r24
     afa:	02 c0       	rjmp	.+4      	; 0xb00 <prvIsQueueFull+0x14>
     afc:	81 e0       	ldi	r24, 0x01	; 1
     afe:	01 c0       	rjmp	.+2      	; 0xb02 <prvIsQueueFull+0x16>
     b00:	80 e0       	ldi	r24, 0x00	; 0
     b02:	0f 90       	pop	r0
     b04:	0f be       	out	0x3f, r0	; 63
     b06:	08 95       	ret

00000b08 <prvCopyDataToQueue>:
     b08:	0f 93       	push	r16
     b0a:	1f 93       	push	r17
     b0c:	cf 93       	push	r28
     b0e:	df 93       	push	r29
     b10:	ec 01       	movw	r28, r24
     b12:	04 2f       	mov	r16, r20
     b14:	1e 8d       	ldd	r17, Y+30	; 0x1e
     b16:	48 a1       	ldd	r20, Y+32	; 0x20
     b18:	41 11       	cpse	r20, r1
     b1a:	0c c0       	rjmp	.+24     	; 0xb34 <prvCopyDataToQueue+0x2c>
     b1c:	88 81       	ld	r24, Y
     b1e:	99 81       	ldd	r25, Y+1	; 0x01
     b20:	89 2b       	or	r24, r25
     b22:	09 f0       	breq	.+2      	; 0xb26 <prvCopyDataToQueue+0x1e>
     b24:	42 c0       	rjmp	.+132    	; 0xbaa <prvCopyDataToQueue+0xa2>
     b26:	8c 81       	ldd	r24, Y+4	; 0x04
     b28:	9d 81       	ldd	r25, Y+5	; 0x05
     b2a:	0e 94 b7 14 	call	0x296e	; 0x296e <xTaskPriorityDisinherit>
     b2e:	1d 82       	std	Y+5, r1	; 0x05
     b30:	1c 82       	std	Y+4, r1	; 0x04
     b32:	42 c0       	rjmp	.+132    	; 0xbb8 <prvCopyDataToQueue+0xb0>
     b34:	01 11       	cpse	r16, r1
     b36:	17 c0       	rjmp	.+46     	; 0xb66 <prvCopyDataToQueue+0x5e>
     b38:	50 e0       	ldi	r21, 0x00	; 0
     b3a:	8a 81       	ldd	r24, Y+2	; 0x02
     b3c:	9b 81       	ldd	r25, Y+3	; 0x03
     b3e:	0e 94 e0 2f 	call	0x5fc0	; 0x5fc0 <memcpy>
     b42:	28 a1       	ldd	r18, Y+32	; 0x20
     b44:	8a 81       	ldd	r24, Y+2	; 0x02
     b46:	9b 81       	ldd	r25, Y+3	; 0x03
     b48:	82 0f       	add	r24, r18
     b4a:	91 1d       	adc	r25, r1
     b4c:	9b 83       	std	Y+3, r25	; 0x03
     b4e:	8a 83       	std	Y+2, r24	; 0x02
     b50:	2c 81       	ldd	r18, Y+4	; 0x04
     b52:	3d 81       	ldd	r19, Y+5	; 0x05
     b54:	82 17       	cp	r24, r18
     b56:	93 07       	cpc	r25, r19
     b58:	50 f1       	brcs	.+84     	; 0xbae <prvCopyDataToQueue+0xa6>
     b5a:	88 81       	ld	r24, Y
     b5c:	99 81       	ldd	r25, Y+1	; 0x01
     b5e:	9b 83       	std	Y+3, r25	; 0x03
     b60:	8a 83       	std	Y+2, r24	; 0x02
     b62:	80 e0       	ldi	r24, 0x00	; 0
     b64:	29 c0       	rjmp	.+82     	; 0xbb8 <prvCopyDataToQueue+0xb0>
     b66:	50 e0       	ldi	r21, 0x00	; 0
     b68:	8e 81       	ldd	r24, Y+6	; 0x06
     b6a:	9f 81       	ldd	r25, Y+7	; 0x07
     b6c:	0e 94 e0 2f 	call	0x5fc0	; 0x5fc0 <memcpy>
     b70:	88 a1       	ldd	r24, Y+32	; 0x20
     b72:	90 e0       	ldi	r25, 0x00	; 0
     b74:	91 95       	neg	r25
     b76:	81 95       	neg	r24
     b78:	91 09       	sbc	r25, r1
     b7a:	2e 81       	ldd	r18, Y+6	; 0x06
     b7c:	3f 81       	ldd	r19, Y+7	; 0x07
     b7e:	28 0f       	add	r18, r24
     b80:	39 1f       	adc	r19, r25
     b82:	3f 83       	std	Y+7, r19	; 0x07
     b84:	2e 83       	std	Y+6, r18	; 0x06
     b86:	48 81       	ld	r20, Y
     b88:	59 81       	ldd	r21, Y+1	; 0x01
     b8a:	24 17       	cp	r18, r20
     b8c:	35 07       	cpc	r19, r21
     b8e:	30 f4       	brcc	.+12     	; 0xb9c <prvCopyDataToQueue+0x94>
     b90:	2c 81       	ldd	r18, Y+4	; 0x04
     b92:	3d 81       	ldd	r19, Y+5	; 0x05
     b94:	82 0f       	add	r24, r18
     b96:	93 1f       	adc	r25, r19
     b98:	9f 83       	std	Y+7, r25	; 0x07
     b9a:	8e 83       	std	Y+6, r24	; 0x06
     b9c:	02 30       	cpi	r16, 0x02	; 2
     b9e:	49 f4       	brne	.+18     	; 0xbb2 <prvCopyDataToQueue+0xaa>
     ba0:	11 23       	and	r17, r17
     ba2:	49 f0       	breq	.+18     	; 0xbb6 <prvCopyDataToQueue+0xae>
     ba4:	11 50       	subi	r17, 0x01	; 1
     ba6:	80 e0       	ldi	r24, 0x00	; 0
     ba8:	07 c0       	rjmp	.+14     	; 0xbb8 <prvCopyDataToQueue+0xb0>
     baa:	80 e0       	ldi	r24, 0x00	; 0
     bac:	05 c0       	rjmp	.+10     	; 0xbb8 <prvCopyDataToQueue+0xb0>
     bae:	80 e0       	ldi	r24, 0x00	; 0
     bb0:	03 c0       	rjmp	.+6      	; 0xbb8 <prvCopyDataToQueue+0xb0>
     bb2:	80 e0       	ldi	r24, 0x00	; 0
     bb4:	01 c0       	rjmp	.+2      	; 0xbb8 <prvCopyDataToQueue+0xb0>
     bb6:	80 e0       	ldi	r24, 0x00	; 0
     bb8:	1f 5f       	subi	r17, 0xFF	; 255
     bba:	1e 8f       	std	Y+30, r17	; 0x1e
     bbc:	df 91       	pop	r29
     bbe:	cf 91       	pop	r28
     bc0:	1f 91       	pop	r17
     bc2:	0f 91       	pop	r16
     bc4:	08 95       	ret

00000bc6 <prvCopyDataFromQueue>:
     bc6:	fc 01       	movw	r30, r24
     bc8:	40 a1       	ldd	r20, Z+32	; 0x20
     bca:	44 23       	and	r20, r20
     bcc:	a9 f0       	breq	.+42     	; 0xbf8 <prvCopyDataFromQueue+0x32>
     bce:	50 e0       	ldi	r21, 0x00	; 0
     bd0:	26 81       	ldd	r18, Z+6	; 0x06
     bd2:	37 81       	ldd	r19, Z+7	; 0x07
     bd4:	24 0f       	add	r18, r20
     bd6:	35 1f       	adc	r19, r21
     bd8:	37 83       	std	Z+7, r19	; 0x07
     bda:	26 83       	std	Z+6, r18	; 0x06
     bdc:	84 81       	ldd	r24, Z+4	; 0x04
     bde:	95 81       	ldd	r25, Z+5	; 0x05
     be0:	28 17       	cp	r18, r24
     be2:	39 07       	cpc	r19, r25
     be4:	20 f0       	brcs	.+8      	; 0xbee <prvCopyDataFromQueue+0x28>
     be6:	80 81       	ld	r24, Z
     be8:	91 81       	ldd	r25, Z+1	; 0x01
     bea:	97 83       	std	Z+7, r25	; 0x07
     bec:	86 83       	std	Z+6, r24	; 0x06
     bee:	cb 01       	movw	r24, r22
     bf0:	66 81       	ldd	r22, Z+6	; 0x06
     bf2:	77 81       	ldd	r23, Z+7	; 0x07
     bf4:	0c 94 e0 2f 	jmp	0x5fc0	; 0x5fc0 <memcpy>
     bf8:	08 95       	ret

00000bfa <prvUnlockQueue>:
     bfa:	1f 93       	push	r17
     bfc:	cf 93       	push	r28
     bfe:	df 93       	push	r29
     c00:	ec 01       	movw	r28, r24
     c02:	0f b6       	in	r0, 0x3f	; 63
     c04:	f8 94       	cli
     c06:	0f 92       	push	r0
     c08:	1a a1       	ldd	r17, Y+34	; 0x22
     c0a:	0b c0       	rjmp	.+22     	; 0xc22 <prvUnlockQueue+0x28>
     c0c:	8b 89       	ldd	r24, Y+19	; 0x13
     c0e:	88 23       	and	r24, r24
     c10:	51 f0       	breq	.+20     	; 0xc26 <prvUnlockQueue+0x2c>
     c12:	ce 01       	movw	r24, r28
     c14:	43 96       	adiw	r24, 0x13	; 19
     c16:	0e 94 43 12 	call	0x2486	; 0x2486 <xTaskRemoveFromEventList>
     c1a:	81 11       	cpse	r24, r1
     c1c:	0e 94 19 14 	call	0x2832	; 0x2832 <vTaskMissedYield>
     c20:	11 50       	subi	r17, 0x01	; 1
     c22:	11 16       	cp	r1, r17
     c24:	9c f3       	brlt	.-26     	; 0xc0c <prvUnlockQueue+0x12>
     c26:	8f ef       	ldi	r24, 0xFF	; 255
     c28:	8a a3       	std	Y+34, r24	; 0x22
     c2a:	0f 90       	pop	r0
     c2c:	0f be       	out	0x3f, r0	; 63
     c2e:	0f b6       	in	r0, 0x3f	; 63
     c30:	f8 94       	cli
     c32:	0f 92       	push	r0
     c34:	19 a1       	ldd	r17, Y+33	; 0x21
     c36:	0b c0       	rjmp	.+22     	; 0xc4e <prvUnlockQueue+0x54>
     c38:	88 85       	ldd	r24, Y+8	; 0x08
     c3a:	88 23       	and	r24, r24
     c3c:	51 f0       	breq	.+20     	; 0xc52 <prvUnlockQueue+0x58>
     c3e:	ce 01       	movw	r24, r28
     c40:	08 96       	adiw	r24, 0x08	; 8
     c42:	0e 94 43 12 	call	0x2486	; 0x2486 <xTaskRemoveFromEventList>
     c46:	81 11       	cpse	r24, r1
     c48:	0e 94 19 14 	call	0x2832	; 0x2832 <vTaskMissedYield>
     c4c:	11 50       	subi	r17, 0x01	; 1
     c4e:	11 16       	cp	r1, r17
     c50:	9c f3       	brlt	.-26     	; 0xc38 <prvUnlockQueue+0x3e>
     c52:	8f ef       	ldi	r24, 0xFF	; 255
     c54:	89 a3       	std	Y+33, r24	; 0x21
     c56:	0f 90       	pop	r0
     c58:	0f be       	out	0x3f, r0	; 63
     c5a:	df 91       	pop	r29
     c5c:	cf 91       	pop	r28
     c5e:	1f 91       	pop	r17
     c60:	08 95       	ret

00000c62 <xQueueGenericReset>:
     c62:	cf 93       	push	r28
     c64:	df 93       	push	r29
     c66:	ec 01       	movw	r28, r24
     c68:	0f b6       	in	r0, 0x3f	; 63
     c6a:	f8 94       	cli
     c6c:	0f 92       	push	r0
     c6e:	e8 81       	ld	r30, Y
     c70:	f9 81       	ldd	r31, Y+1	; 0x01
     c72:	8f 8d       	ldd	r24, Y+31	; 0x1f
     c74:	28 a1       	ldd	r18, Y+32	; 0x20
     c76:	90 e0       	ldi	r25, 0x00	; 0
     c78:	30 e0       	ldi	r19, 0x00	; 0
     c7a:	82 9f       	mul	r24, r18
     c7c:	a0 01       	movw	r20, r0
     c7e:	83 9f       	mul	r24, r19
     c80:	50 0d       	add	r21, r0
     c82:	92 9f       	mul	r25, r18
     c84:	50 0d       	add	r21, r0
     c86:	11 24       	eor	r1, r1
     c88:	4e 0f       	add	r20, r30
     c8a:	5f 1f       	adc	r21, r31
     c8c:	5d 83       	std	Y+5, r21	; 0x05
     c8e:	4c 83       	std	Y+4, r20	; 0x04
     c90:	1e 8e       	std	Y+30, r1	; 0x1e
     c92:	fb 83       	std	Y+3, r31	; 0x03
     c94:	ea 83       	std	Y+2, r30	; 0x02
     c96:	01 97       	sbiw	r24, 0x01	; 1
     c98:	28 9f       	mul	r18, r24
     c9a:	a0 01       	movw	r20, r0
     c9c:	29 9f       	mul	r18, r25
     c9e:	50 0d       	add	r21, r0
     ca0:	38 9f       	mul	r19, r24
     ca2:	50 0d       	add	r21, r0
     ca4:	11 24       	eor	r1, r1
     ca6:	cf 01       	movw	r24, r30
     ca8:	84 0f       	add	r24, r20
     caa:	95 1f       	adc	r25, r21
     cac:	9f 83       	std	Y+7, r25	; 0x07
     cae:	8e 83       	std	Y+6, r24	; 0x06
     cb0:	8f ef       	ldi	r24, 0xFF	; 255
     cb2:	89 a3       	std	Y+33, r24	; 0x21
     cb4:	8a a3       	std	Y+34, r24	; 0x22
     cb6:	61 11       	cpse	r22, r1
     cb8:	0b c0       	rjmp	.+22     	; 0xcd0 <xQueueGenericReset+0x6e>
     cba:	88 85       	ldd	r24, Y+8	; 0x08
     cbc:	88 23       	and	r24, r24
     cbe:	71 f0       	breq	.+28     	; 0xcdc <xQueueGenericReset+0x7a>
     cc0:	ce 01       	movw	r24, r28
     cc2:	08 96       	adiw	r24, 0x08	; 8
     cc4:	0e 94 43 12 	call	0x2486	; 0x2486 <xTaskRemoveFromEventList>
     cc8:	88 23       	and	r24, r24
     cca:	41 f0       	breq	.+16     	; 0xcdc <xQueueGenericReset+0x7a>
     ccc:	2a de       	rcall	.-940    	; 0x922 <vPortYield>
     cce:	06 c0       	rjmp	.+12     	; 0xcdc <xQueueGenericReset+0x7a>
     cd0:	ce 01       	movw	r24, r28
     cd2:	08 96       	adiw	r24, 0x08	; 8
     cd4:	58 dd       	rcall	.-1360   	; 0x786 <vListInitialise>
     cd6:	ce 01       	movw	r24, r28
     cd8:	43 96       	adiw	r24, 0x13	; 19
     cda:	55 dd       	rcall	.-1366   	; 0x786 <vListInitialise>
     cdc:	0f 90       	pop	r0
     cde:	0f be       	out	0x3f, r0	; 63
     ce0:	81 e0       	ldi	r24, 0x01	; 1
     ce2:	df 91       	pop	r29
     ce4:	cf 91       	pop	r28
     ce6:	08 95       	ret

00000ce8 <prvInitialiseNewQueue>:
     ce8:	0f 93       	push	r16
     cea:	1f 93       	push	r17
     cec:	f8 01       	movw	r30, r16
     cee:	61 11       	cpse	r22, r1
     cf0:	03 c0       	rjmp	.+6      	; 0xcf8 <prvInitialiseNewQueue+0x10>
     cf2:	11 83       	std	Z+1, r17	; 0x01
     cf4:	00 83       	st	Z, r16
     cf6:	02 c0       	rjmp	.+4      	; 0xcfc <prvInitialiseNewQueue+0x14>
     cf8:	51 83       	std	Z+1, r21	; 0x01
     cfa:	40 83       	st	Z, r20
     cfc:	87 8f       	std	Z+31, r24	; 0x1f
     cfe:	60 a3       	std	Z+32, r22	; 0x20
     d00:	61 e0       	ldi	r22, 0x01	; 1
     d02:	cf 01       	movw	r24, r30
     d04:	ae df       	rcall	.-164    	; 0xc62 <xQueueGenericReset>
     d06:	1f 91       	pop	r17
     d08:	0f 91       	pop	r16
     d0a:	08 95       	ret

00000d0c <xQueueGenericCreate>:
     d0c:	df 92       	push	r13
     d0e:	ef 92       	push	r14
     d10:	ff 92       	push	r15
     d12:	0f 93       	push	r16
     d14:	1f 93       	push	r17
     d16:	cf 93       	push	r28
     d18:	df 93       	push	r29
     d1a:	f8 2e       	mov	r15, r24
     d1c:	e6 2e       	mov	r14, r22
     d1e:	d4 2e       	mov	r13, r20
     d20:	86 9f       	mul	r24, r22
     d22:	c0 01       	movw	r24, r0
     d24:	11 24       	eor	r1, r1
     d26:	83 96       	adiw	r24, 0x23	; 35
     d28:	48 dc       	rcall	.-1904   	; 0x5ba <pvPortMalloc>
     d2a:	ec 01       	movw	r28, r24
     d2c:	00 97       	sbiw	r24, 0x00	; 0
     d2e:	41 f0       	breq	.+16     	; 0xd40 <xQueueGenericCreate+0x34>
     d30:	8c 01       	movw	r16, r24
     d32:	2d 2d       	mov	r18, r13
     d34:	ac 01       	movw	r20, r24
     d36:	4d 5d       	subi	r20, 0xDD	; 221
     d38:	5f 4f       	sbci	r21, 0xFF	; 255
     d3a:	6e 2d       	mov	r22, r14
     d3c:	8f 2d       	mov	r24, r15
     d3e:	d4 df       	rcall	.-88     	; 0xce8 <prvInitialiseNewQueue>
     d40:	ce 01       	movw	r24, r28
     d42:	df 91       	pop	r29
     d44:	cf 91       	pop	r28
     d46:	1f 91       	pop	r17
     d48:	0f 91       	pop	r16
     d4a:	ff 90       	pop	r15
     d4c:	ef 90       	pop	r14
     d4e:	df 90       	pop	r13
     d50:	08 95       	ret

00000d52 <xQueueGenericSend>:
     d52:	cf 92       	push	r12
     d54:	df 92       	push	r13
     d56:	ef 92       	push	r14
     d58:	ff 92       	push	r15
     d5a:	0f 93       	push	r16
     d5c:	1f 93       	push	r17
     d5e:	cf 93       	push	r28
     d60:	df 93       	push	r29
     d62:	cd b7       	in	r28, 0x3d	; 61
     d64:	de b7       	in	r29, 0x3e	; 62
     d66:	29 97       	sbiw	r28, 0x09	; 9
     d68:	0f b6       	in	r0, 0x3f	; 63
     d6a:	f8 94       	cli
     d6c:	de bf       	out	0x3e, r29	; 62
     d6e:	0f be       	out	0x3f, r0	; 63
     d70:	cd bf       	out	0x3d, r28	; 61
     d72:	7c 01       	movw	r14, r24
     d74:	6b 01       	movw	r12, r22
     d76:	2e 83       	std	Y+6, r18	; 0x06
     d78:	3f 83       	std	Y+7, r19	; 0x07
     d7a:	48 87       	std	Y+8, r20	; 0x08
     d7c:	59 87       	std	Y+9, r21	; 0x09
     d7e:	10 e0       	ldi	r17, 0x00	; 0
     d80:	0f b6       	in	r0, 0x3f	; 63
     d82:	f8 94       	cli
     d84:	0f 92       	push	r0
     d86:	f7 01       	movw	r30, r14
     d88:	96 8d       	ldd	r25, Z+30	; 0x1e
     d8a:	87 8d       	ldd	r24, Z+31	; 0x1f
     d8c:	98 17       	cp	r25, r24
     d8e:	10 f0       	brcs	.+4      	; 0xd94 <xQueueGenericSend+0x42>
     d90:	02 30       	cpi	r16, 0x02	; 2
     d92:	b1 f4       	brne	.+44     	; 0xdc0 <xQueueGenericSend+0x6e>
     d94:	40 2f       	mov	r20, r16
     d96:	b6 01       	movw	r22, r12
     d98:	c7 01       	movw	r24, r14
     d9a:	b6 de       	rcall	.-660    	; 0xb08 <prvCopyDataToQueue>
     d9c:	f7 01       	movw	r30, r14
     d9e:	93 89       	ldd	r25, Z+19	; 0x13
     da0:	99 23       	and	r25, r25
     da2:	41 f0       	breq	.+16     	; 0xdb4 <xQueueGenericSend+0x62>
     da4:	c7 01       	movw	r24, r14
     da6:	43 96       	adiw	r24, 0x13	; 19
     da8:	0e 94 43 12 	call	0x2486	; 0x2486 <xTaskRemoveFromEventList>
     dac:	88 23       	and	r24, r24
     dae:	21 f0       	breq	.+8      	; 0xdb8 <xQueueGenericSend+0x66>
     db0:	b8 dd       	rcall	.-1168   	; 0x922 <vPortYield>
     db2:	02 c0       	rjmp	.+4      	; 0xdb8 <xQueueGenericSend+0x66>
     db4:	81 11       	cpse	r24, r1
     db6:	b5 dd       	rcall	.-1174   	; 0x922 <vPortYield>
     db8:	0f 90       	pop	r0
     dba:	0f be       	out	0x3f, r0	; 63
     dbc:	81 e0       	ldi	r24, 0x01	; 1
     dbe:	4c c0       	rjmp	.+152    	; 0xe58 <xQueueGenericSend+0x106>
     dc0:	8e 81       	ldd	r24, Y+6	; 0x06
     dc2:	9f 81       	ldd	r25, Y+7	; 0x07
     dc4:	a8 85       	ldd	r26, Y+8	; 0x08
     dc6:	b9 85       	ldd	r27, Y+9	; 0x09
     dc8:	89 2b       	or	r24, r25
     dca:	8a 2b       	or	r24, r26
     dcc:	8b 2b       	or	r24, r27
     dce:	21 f4       	brne	.+8      	; 0xdd8 <xQueueGenericSend+0x86>
     dd0:	0f 90       	pop	r0
     dd2:	0f be       	out	0x3f, r0	; 63
     dd4:	80 e0       	ldi	r24, 0x00	; 0
     dd6:	40 c0       	rjmp	.+128    	; 0xe58 <xQueueGenericSend+0x106>
     dd8:	11 11       	cpse	r17, r1
     dda:	05 c0       	rjmp	.+10     	; 0xde6 <xQueueGenericSend+0x94>
     ddc:	ce 01       	movw	r24, r28
     dde:	01 96       	adiw	r24, 0x01	; 1
     de0:	0e 94 a2 13 	call	0x2744	; 0x2744 <vTaskInternalSetTimeOutState>
     de4:	11 e0       	ldi	r17, 0x01	; 1
     de6:	0f 90       	pop	r0
     de8:	0f be       	out	0x3f, r0	; 63
     dea:	a9 d7       	rcall	.+3922   	; 0x1d3e <vTaskSuspendAll>
     dec:	0f b6       	in	r0, 0x3f	; 63
     dee:	f8 94       	cli
     df0:	0f 92       	push	r0
     df2:	f7 01       	movw	r30, r14
     df4:	81 a1       	ldd	r24, Z+33	; 0x21
     df6:	8f 3f       	cpi	r24, 0xFF	; 255
     df8:	09 f4       	brne	.+2      	; 0xdfc <xQueueGenericSend+0xaa>
     dfa:	11 a2       	std	Z+33, r1	; 0x21
     dfc:	f7 01       	movw	r30, r14
     dfe:	82 a1       	ldd	r24, Z+34	; 0x22
     e00:	8f 3f       	cpi	r24, 0xFF	; 255
     e02:	09 f4       	brne	.+2      	; 0xe06 <xQueueGenericSend+0xb4>
     e04:	12 a2       	std	Z+34, r1	; 0x22
     e06:	0f 90       	pop	r0
     e08:	0f be       	out	0x3f, r0	; 63
     e0a:	be 01       	movw	r22, r28
     e0c:	6a 5f       	subi	r22, 0xFA	; 250
     e0e:	7f 4f       	sbci	r23, 0xFF	; 255
     e10:	ce 01       	movw	r24, r28
     e12:	01 96       	adiw	r24, 0x01	; 1
     e14:	0e 94 b3 13 	call	0x2766	; 0x2766 <xTaskCheckForTimeOut>
     e18:	81 11       	cpse	r24, r1
     e1a:	19 c0       	rjmp	.+50     	; 0xe4e <xQueueGenericSend+0xfc>
     e1c:	c7 01       	movw	r24, r14
     e1e:	66 de       	rcall	.-820    	; 0xaec <prvIsQueueFull>
     e20:	88 23       	and	r24, r24
     e22:	81 f0       	breq	.+32     	; 0xe44 <xQueueGenericSend+0xf2>
     e24:	4e 81       	ldd	r20, Y+6	; 0x06
     e26:	5f 81       	ldd	r21, Y+7	; 0x07
     e28:	68 85       	ldd	r22, Y+8	; 0x08
     e2a:	79 85       	ldd	r23, Y+9	; 0x09
     e2c:	c7 01       	movw	r24, r14
     e2e:	08 96       	adiw	r24, 0x08	; 8
     e30:	0e 94 a0 11 	call	0x2340	; 0x2340 <vTaskPlaceOnEventList>
     e34:	c7 01       	movw	r24, r14
     e36:	e1 de       	rcall	.-574    	; 0xbfa <prvUnlockQueue>
     e38:	0e 94 df 0f 	call	0x1fbe	; 0x1fbe <xTaskResumeAll>
     e3c:	81 11       	cpse	r24, r1
     e3e:	a0 cf       	rjmp	.-192    	; 0xd80 <xQueueGenericSend+0x2e>
     e40:	70 dd       	rcall	.-1312   	; 0x922 <vPortYield>
     e42:	9e cf       	rjmp	.-196    	; 0xd80 <xQueueGenericSend+0x2e>
     e44:	c7 01       	movw	r24, r14
     e46:	d9 de       	rcall	.-590    	; 0xbfa <prvUnlockQueue>
     e48:	0e 94 df 0f 	call	0x1fbe	; 0x1fbe <xTaskResumeAll>
     e4c:	99 cf       	rjmp	.-206    	; 0xd80 <xQueueGenericSend+0x2e>
     e4e:	c7 01       	movw	r24, r14
     e50:	d4 de       	rcall	.-600    	; 0xbfa <prvUnlockQueue>
     e52:	0e 94 df 0f 	call	0x1fbe	; 0x1fbe <xTaskResumeAll>
     e56:	80 e0       	ldi	r24, 0x00	; 0
     e58:	29 96       	adiw	r28, 0x09	; 9
     e5a:	0f b6       	in	r0, 0x3f	; 63
     e5c:	f8 94       	cli
     e5e:	de bf       	out	0x3e, r29	; 62
     e60:	0f be       	out	0x3f, r0	; 63
     e62:	cd bf       	out	0x3d, r28	; 61
     e64:	df 91       	pop	r29
     e66:	cf 91       	pop	r28
     e68:	1f 91       	pop	r17
     e6a:	0f 91       	pop	r16
     e6c:	ff 90       	pop	r15
     e6e:	ef 90       	pop	r14
     e70:	df 90       	pop	r13
     e72:	cf 90       	pop	r12
     e74:	08 95       	ret

00000e76 <xQueueGenericSendFromISR>:
     e76:	ef 92       	push	r14
     e78:	ff 92       	push	r15
     e7a:	0f 93       	push	r16
     e7c:	1f 93       	push	r17
     e7e:	cf 93       	push	r28
     e80:	df 93       	push	r29
     e82:	8a 01       	movw	r16, r20
     e84:	fc 01       	movw	r30, r24
     e86:	56 8d       	ldd	r21, Z+30	; 0x1e
     e88:	37 8d       	ldd	r19, Z+31	; 0x1f
     e8a:	53 17       	cp	r21, r19
     e8c:	10 f0       	brcs	.+4      	; 0xe92 <xQueueGenericSendFromISR+0x1c>
     e8e:	22 30       	cpi	r18, 0x02	; 2
     e90:	f9 f4       	brne	.+62     	; 0xed0 <xQueueGenericSendFromISR+0x5a>
     e92:	42 2f       	mov	r20, r18
     e94:	78 01       	movw	r14, r16
     e96:	ec 01       	movw	r28, r24
     e98:	1a a1       	ldd	r17, Y+34	; 0x22
     e9a:	8e 8d       	ldd	r24, Y+30	; 0x1e
     e9c:	ce 01       	movw	r24, r28
     e9e:	34 de       	rcall	.-920    	; 0xb08 <prvCopyDataToQueue>
     ea0:	1f 3f       	cpi	r17, 0xFF	; 255
     ea2:	81 f4       	brne	.+32     	; 0xec4 <xQueueGenericSendFromISR+0x4e>
     ea4:	8b 89       	ldd	r24, Y+19	; 0x13
     ea6:	88 23       	and	r24, r24
     ea8:	a9 f0       	breq	.+42     	; 0xed4 <xQueueGenericSendFromISR+0x5e>
     eaa:	ce 01       	movw	r24, r28
     eac:	43 96       	adiw	r24, 0x13	; 19
     eae:	0e 94 43 12 	call	0x2486	; 0x2486 <xTaskRemoveFromEventList>
     eb2:	88 23       	and	r24, r24
     eb4:	89 f0       	breq	.+34     	; 0xed8 <xQueueGenericSendFromISR+0x62>
     eb6:	e1 14       	cp	r14, r1
     eb8:	f1 04       	cpc	r15, r1
     eba:	81 f0       	breq	.+32     	; 0xedc <xQueueGenericSendFromISR+0x66>
     ebc:	81 e0       	ldi	r24, 0x01	; 1
     ebe:	f7 01       	movw	r30, r14
     ec0:	80 83       	st	Z, r24
     ec2:	0d c0       	rjmp	.+26     	; 0xede <xQueueGenericSendFromISR+0x68>
     ec4:	ff 24       	eor	r15, r15
     ec6:	f3 94       	inc	r15
     ec8:	f1 0e       	add	r15, r17
     eca:	fa a2       	std	Y+34, r15	; 0x22
     ecc:	81 e0       	ldi	r24, 0x01	; 1
     ece:	07 c0       	rjmp	.+14     	; 0xede <xQueueGenericSendFromISR+0x68>
     ed0:	80 e0       	ldi	r24, 0x00	; 0
     ed2:	05 c0       	rjmp	.+10     	; 0xede <xQueueGenericSendFromISR+0x68>
     ed4:	81 e0       	ldi	r24, 0x01	; 1
     ed6:	03 c0       	rjmp	.+6      	; 0xede <xQueueGenericSendFromISR+0x68>
     ed8:	81 e0       	ldi	r24, 0x01	; 1
     eda:	01 c0       	rjmp	.+2      	; 0xede <xQueueGenericSendFromISR+0x68>
     edc:	81 e0       	ldi	r24, 0x01	; 1
     ede:	df 91       	pop	r29
     ee0:	cf 91       	pop	r28
     ee2:	1f 91       	pop	r17
     ee4:	0f 91       	pop	r16
     ee6:	ff 90       	pop	r15
     ee8:	ef 90       	pop	r14
     eea:	08 95       	ret

00000eec <xQueueReceive>:
     eec:	cf 92       	push	r12
     eee:	df 92       	push	r13
     ef0:	ef 92       	push	r14
     ef2:	ff 92       	push	r15
     ef4:	0f 93       	push	r16
     ef6:	1f 93       	push	r17
     ef8:	cf 93       	push	r28
     efa:	df 93       	push	r29
     efc:	cd b7       	in	r28, 0x3d	; 61
     efe:	de b7       	in	r29, 0x3e	; 62
     f00:	29 97       	sbiw	r28, 0x09	; 9
     f02:	0f b6       	in	r0, 0x3f	; 63
     f04:	f8 94       	cli
     f06:	de bf       	out	0x3e, r29	; 62
     f08:	0f be       	out	0x3f, r0	; 63
     f0a:	cd bf       	out	0x3d, r28	; 61
     f0c:	8c 01       	movw	r16, r24
     f0e:	6b 01       	movw	r12, r22
     f10:	2e 83       	std	Y+6, r18	; 0x06
     f12:	3f 83       	std	Y+7, r19	; 0x07
     f14:	48 87       	std	Y+8, r20	; 0x08
     f16:	59 87       	std	Y+9, r21	; 0x09
     f18:	e1 2c       	mov	r14, r1
     f1a:	0f b6       	in	r0, 0x3f	; 63
     f1c:	f8 94       	cli
     f1e:	0f 92       	push	r0
     f20:	f8 01       	movw	r30, r16
     f22:	f6 8c       	ldd	r15, Z+30	; 0x1e
     f24:	ff 20       	and	r15, r15
     f26:	99 f0       	breq	.+38     	; 0xf4e <xQueueReceive+0x62>
     f28:	b6 01       	movw	r22, r12
     f2a:	c8 01       	movw	r24, r16
     f2c:	4c de       	rcall	.-872    	; 0xbc6 <prvCopyDataFromQueue>
     f2e:	fa 94       	dec	r15
     f30:	f8 01       	movw	r30, r16
     f32:	f6 8e       	std	Z+30, r15	; 0x1e
     f34:	80 85       	ldd	r24, Z+8	; 0x08
     f36:	88 23       	and	r24, r24
     f38:	31 f0       	breq	.+12     	; 0xf46 <xQueueReceive+0x5a>
     f3a:	c8 01       	movw	r24, r16
     f3c:	08 96       	adiw	r24, 0x08	; 8
     f3e:	0e 94 43 12 	call	0x2486	; 0x2486 <xTaskRemoveFromEventList>
     f42:	81 11       	cpse	r24, r1
     f44:	ee dc       	rcall	.-1572   	; 0x922 <vPortYield>
     f46:	0f 90       	pop	r0
     f48:	0f be       	out	0x3f, r0	; 63
     f4a:	81 e0       	ldi	r24, 0x01	; 1
     f4c:	4f c0       	rjmp	.+158    	; 0xfec <xQueueReceive+0x100>
     f4e:	8e 81       	ldd	r24, Y+6	; 0x06
     f50:	9f 81       	ldd	r25, Y+7	; 0x07
     f52:	a8 85       	ldd	r26, Y+8	; 0x08
     f54:	b9 85       	ldd	r27, Y+9	; 0x09
     f56:	89 2b       	or	r24, r25
     f58:	8a 2b       	or	r24, r26
     f5a:	8b 2b       	or	r24, r27
     f5c:	21 f4       	brne	.+8      	; 0xf66 <xQueueReceive+0x7a>
     f5e:	0f 90       	pop	r0
     f60:	0f be       	out	0x3f, r0	; 63
     f62:	80 e0       	ldi	r24, 0x00	; 0
     f64:	43 c0       	rjmp	.+134    	; 0xfec <xQueueReceive+0x100>
     f66:	e1 10       	cpse	r14, r1
     f68:	06 c0       	rjmp	.+12     	; 0xf76 <xQueueReceive+0x8a>
     f6a:	ce 01       	movw	r24, r28
     f6c:	01 96       	adiw	r24, 0x01	; 1
     f6e:	0e 94 a2 13 	call	0x2744	; 0x2744 <vTaskInternalSetTimeOutState>
     f72:	ee 24       	eor	r14, r14
     f74:	e3 94       	inc	r14
     f76:	0f 90       	pop	r0
     f78:	0f be       	out	0x3f, r0	; 63
     f7a:	e1 d6       	rcall	.+3522   	; 0x1d3e <vTaskSuspendAll>
     f7c:	0f b6       	in	r0, 0x3f	; 63
     f7e:	f8 94       	cli
     f80:	0f 92       	push	r0
     f82:	f8 01       	movw	r30, r16
     f84:	81 a1       	ldd	r24, Z+33	; 0x21
     f86:	8f 3f       	cpi	r24, 0xFF	; 255
     f88:	09 f4       	brne	.+2      	; 0xf8c <xQueueReceive+0xa0>
     f8a:	11 a2       	std	Z+33, r1	; 0x21
     f8c:	f8 01       	movw	r30, r16
     f8e:	82 a1       	ldd	r24, Z+34	; 0x22
     f90:	8f 3f       	cpi	r24, 0xFF	; 255
     f92:	09 f4       	brne	.+2      	; 0xf96 <xQueueReceive+0xaa>
     f94:	12 a2       	std	Z+34, r1	; 0x22
     f96:	0f 90       	pop	r0
     f98:	0f be       	out	0x3f, r0	; 63
     f9a:	be 01       	movw	r22, r28
     f9c:	6a 5f       	subi	r22, 0xFA	; 250
     f9e:	7f 4f       	sbci	r23, 0xFF	; 255
     fa0:	ce 01       	movw	r24, r28
     fa2:	01 96       	adiw	r24, 0x01	; 1
     fa4:	0e 94 b3 13 	call	0x2766	; 0x2766 <xTaskCheckForTimeOut>
     fa8:	81 11       	cpse	r24, r1
     faa:	17 c0       	rjmp	.+46     	; 0xfda <xQueueReceive+0xee>
     fac:	c8 01       	movw	r24, r16
     fae:	91 dd       	rcall	.-1246   	; 0xad2 <prvIsQueueEmpty>
     fb0:	88 23       	and	r24, r24
     fb2:	79 f0       	breq	.+30     	; 0xfd2 <xQueueReceive+0xe6>
     fb4:	4e 81       	ldd	r20, Y+6	; 0x06
     fb6:	5f 81       	ldd	r21, Y+7	; 0x07
     fb8:	68 85       	ldd	r22, Y+8	; 0x08
     fba:	79 85       	ldd	r23, Y+9	; 0x09
     fbc:	c8 01       	movw	r24, r16
     fbe:	43 96       	adiw	r24, 0x13	; 19
     fc0:	0e 94 a0 11 	call	0x2340	; 0x2340 <vTaskPlaceOnEventList>
     fc4:	c8 01       	movw	r24, r16
     fc6:	19 de       	rcall	.-974    	; 0xbfa <prvUnlockQueue>
     fc8:	fa d7       	rcall	.+4084   	; 0x1fbe <xTaskResumeAll>
     fca:	81 11       	cpse	r24, r1
     fcc:	a6 cf       	rjmp	.-180    	; 0xf1a <xQueueReceive+0x2e>
     fce:	a9 dc       	rcall	.-1710   	; 0x922 <vPortYield>
     fd0:	a4 cf       	rjmp	.-184    	; 0xf1a <xQueueReceive+0x2e>
     fd2:	c8 01       	movw	r24, r16
     fd4:	12 de       	rcall	.-988    	; 0xbfa <prvUnlockQueue>
     fd6:	f3 d7       	rcall	.+4070   	; 0x1fbe <xTaskResumeAll>
     fd8:	a0 cf       	rjmp	.-192    	; 0xf1a <xQueueReceive+0x2e>
     fda:	c8 01       	movw	r24, r16
     fdc:	0e de       	rcall	.-996    	; 0xbfa <prvUnlockQueue>
     fde:	ef d7       	rcall	.+4062   	; 0x1fbe <xTaskResumeAll>
     fe0:	c8 01       	movw	r24, r16
     fe2:	77 dd       	rcall	.-1298   	; 0xad2 <prvIsQueueEmpty>
     fe4:	88 23       	and	r24, r24
     fe6:	09 f4       	brne	.+2      	; 0xfea <xQueueReceive+0xfe>
     fe8:	98 cf       	rjmp	.-208    	; 0xf1a <xQueueReceive+0x2e>
     fea:	80 e0       	ldi	r24, 0x00	; 0
     fec:	29 96       	adiw	r28, 0x09	; 9
     fee:	0f b6       	in	r0, 0x3f	; 63
     ff0:	f8 94       	cli
     ff2:	de bf       	out	0x3e, r29	; 62
     ff4:	0f be       	out	0x3f, r0	; 63
     ff6:	cd bf       	out	0x3d, r28	; 61
     ff8:	df 91       	pop	r29
     ffa:	cf 91       	pop	r28
     ffc:	1f 91       	pop	r17
     ffe:	0f 91       	pop	r16
    1000:	ff 90       	pop	r15
    1002:	ef 90       	pop	r14
    1004:	df 90       	pop	r13
    1006:	cf 90       	pop	r12
    1008:	08 95       	ret

0000100a <xQueueSemaphoreTake>:
    100a:	ef 92       	push	r14
    100c:	ff 92       	push	r15
    100e:	0f 93       	push	r16
    1010:	1f 93       	push	r17
    1012:	cf 93       	push	r28
    1014:	df 93       	push	r29
    1016:	cd b7       	in	r28, 0x3d	; 61
    1018:	de b7       	in	r29, 0x3e	; 62
    101a:	29 97       	sbiw	r28, 0x09	; 9
    101c:	0f b6       	in	r0, 0x3f	; 63
    101e:	f8 94       	cli
    1020:	de bf       	out	0x3e, r29	; 62
    1022:	0f be       	out	0x3f, r0	; 63
    1024:	cd bf       	out	0x3d, r28	; 61
    1026:	8c 01       	movw	r16, r24
    1028:	4e 83       	std	Y+6, r20	; 0x06
    102a:	5f 83       	std	Y+7, r21	; 0x07
    102c:	68 87       	std	Y+8, r22	; 0x08
    102e:	79 87       	std	Y+9, r23	; 0x09
    1030:	e1 2c       	mov	r14, r1
    1032:	f1 2c       	mov	r15, r1
    1034:	0f b6       	in	r0, 0x3f	; 63
    1036:	f8 94       	cli
    1038:	0f 92       	push	r0
    103a:	f8 01       	movw	r30, r16
    103c:	86 8d       	ldd	r24, Z+30	; 0x1e
    103e:	88 23       	and	r24, r24
    1040:	c9 f0       	breq	.+50     	; 0x1074 <xQueueSemaphoreTake+0x6a>
    1042:	81 50       	subi	r24, 0x01	; 1
    1044:	86 8f       	std	Z+30, r24	; 0x1e
    1046:	80 81       	ld	r24, Z
    1048:	91 81       	ldd	r25, Z+1	; 0x01
    104a:	89 2b       	or	r24, r25
    104c:	29 f4       	brne	.+10     	; 0x1058 <xQueueSemaphoreTake+0x4e>
    104e:	0e 94 a3 15 	call	0x2b46	; 0x2b46 <pvTaskIncrementMutexHeldCount>
    1052:	f8 01       	movw	r30, r16
    1054:	95 83       	std	Z+5, r25	; 0x05
    1056:	84 83       	std	Z+4, r24	; 0x04
    1058:	f8 01       	movw	r30, r16
    105a:	80 85       	ldd	r24, Z+8	; 0x08
    105c:	88 23       	and	r24, r24
    105e:	31 f0       	breq	.+12     	; 0x106c <xQueueSemaphoreTake+0x62>
    1060:	c8 01       	movw	r24, r16
    1062:	08 96       	adiw	r24, 0x08	; 8
    1064:	0e 94 43 12 	call	0x2486	; 0x2486 <xTaskRemoveFromEventList>
    1068:	81 11       	cpse	r24, r1
    106a:	5b dc       	rcall	.-1866   	; 0x922 <vPortYield>
    106c:	0f 90       	pop	r0
    106e:	0f be       	out	0x3f, r0	; 63
    1070:	81 e0       	ldi	r24, 0x01	; 1
    1072:	6f c0       	rjmp	.+222    	; 0x1152 <xQueueSemaphoreTake+0x148>
    1074:	8e 81       	ldd	r24, Y+6	; 0x06
    1076:	9f 81       	ldd	r25, Y+7	; 0x07
    1078:	a8 85       	ldd	r26, Y+8	; 0x08
    107a:	b9 85       	ldd	r27, Y+9	; 0x09
    107c:	89 2b       	or	r24, r25
    107e:	8a 2b       	or	r24, r26
    1080:	8b 2b       	or	r24, r27
    1082:	21 f4       	brne	.+8      	; 0x108c <xQueueSemaphoreTake+0x82>
    1084:	0f 90       	pop	r0
    1086:	0f be       	out	0x3f, r0	; 63
    1088:	80 e0       	ldi	r24, 0x00	; 0
    108a:	63 c0       	rjmp	.+198    	; 0x1152 <xQueueSemaphoreTake+0x148>
    108c:	f1 10       	cpse	r15, r1
    108e:	06 c0       	rjmp	.+12     	; 0x109c <xQueueSemaphoreTake+0x92>
    1090:	ce 01       	movw	r24, r28
    1092:	01 96       	adiw	r24, 0x01	; 1
    1094:	0e 94 a2 13 	call	0x2744	; 0x2744 <vTaskInternalSetTimeOutState>
    1098:	ff 24       	eor	r15, r15
    109a:	f3 94       	inc	r15
    109c:	0f 90       	pop	r0
    109e:	0f be       	out	0x3f, r0	; 63
    10a0:	4e d6       	rcall	.+3228   	; 0x1d3e <vTaskSuspendAll>
    10a2:	0f b6       	in	r0, 0x3f	; 63
    10a4:	f8 94       	cli
    10a6:	0f 92       	push	r0
    10a8:	f8 01       	movw	r30, r16
    10aa:	81 a1       	ldd	r24, Z+33	; 0x21
    10ac:	8f 3f       	cpi	r24, 0xFF	; 255
    10ae:	09 f4       	brne	.+2      	; 0x10b2 <xQueueSemaphoreTake+0xa8>
    10b0:	11 a2       	std	Z+33, r1	; 0x21
    10b2:	f8 01       	movw	r30, r16
    10b4:	82 a1       	ldd	r24, Z+34	; 0x22
    10b6:	8f 3f       	cpi	r24, 0xFF	; 255
    10b8:	09 f4       	brne	.+2      	; 0x10bc <xQueueSemaphoreTake+0xb2>
    10ba:	12 a2       	std	Z+34, r1	; 0x22
    10bc:	0f 90       	pop	r0
    10be:	0f be       	out	0x3f, r0	; 63
    10c0:	be 01       	movw	r22, r28
    10c2:	6a 5f       	subi	r22, 0xFA	; 250
    10c4:	7f 4f       	sbci	r23, 0xFF	; 255
    10c6:	ce 01       	movw	r24, r28
    10c8:	01 96       	adiw	r24, 0x01	; 1
    10ca:	0e 94 b3 13 	call	0x2766	; 0x2766 <xTaskCheckForTimeOut>
    10ce:	81 11       	cpse	r24, r1
    10d0:	26 c0       	rjmp	.+76     	; 0x111e <xQueueSemaphoreTake+0x114>
    10d2:	c8 01       	movw	r24, r16
    10d4:	fe dc       	rcall	.-1540   	; 0xad2 <prvIsQueueEmpty>
    10d6:	88 23       	and	r24, r24
    10d8:	f1 f0       	breq	.+60     	; 0x1116 <xQueueSemaphoreTake+0x10c>
    10da:	f8 01       	movw	r30, r16
    10dc:	80 81       	ld	r24, Z
    10de:	91 81       	ldd	r25, Z+1	; 0x01
    10e0:	89 2b       	or	r24, r25
    10e2:	51 f4       	brne	.+20     	; 0x10f8 <xQueueSemaphoreTake+0xee>
    10e4:	0f b6       	in	r0, 0x3f	; 63
    10e6:	f8 94       	cli
    10e8:	0f 92       	push	r0
    10ea:	84 81       	ldd	r24, Z+4	; 0x04
    10ec:	95 81       	ldd	r25, Z+5	; 0x05
    10ee:	0e 94 30 14 	call	0x2860	; 0x2860 <xTaskPriorityInherit>
    10f2:	e8 2e       	mov	r14, r24
    10f4:	0f 90       	pop	r0
    10f6:	0f be       	out	0x3f, r0	; 63
    10f8:	4e 81       	ldd	r20, Y+6	; 0x06
    10fa:	5f 81       	ldd	r21, Y+7	; 0x07
    10fc:	68 85       	ldd	r22, Y+8	; 0x08
    10fe:	79 85       	ldd	r23, Y+9	; 0x09
    1100:	c8 01       	movw	r24, r16
    1102:	43 96       	adiw	r24, 0x13	; 19
    1104:	0e 94 a0 11 	call	0x2340	; 0x2340 <vTaskPlaceOnEventList>
    1108:	c8 01       	movw	r24, r16
    110a:	77 dd       	rcall	.-1298   	; 0xbfa <prvUnlockQueue>
    110c:	58 d7       	rcall	.+3760   	; 0x1fbe <xTaskResumeAll>
    110e:	81 11       	cpse	r24, r1
    1110:	91 cf       	rjmp	.-222    	; 0x1034 <xQueueSemaphoreTake+0x2a>
    1112:	07 dc       	rcall	.-2034   	; 0x922 <vPortYield>
    1114:	8f cf       	rjmp	.-226    	; 0x1034 <xQueueSemaphoreTake+0x2a>
    1116:	c8 01       	movw	r24, r16
    1118:	70 dd       	rcall	.-1312   	; 0xbfa <prvUnlockQueue>
    111a:	51 d7       	rcall	.+3746   	; 0x1fbe <xTaskResumeAll>
    111c:	8b cf       	rjmp	.-234    	; 0x1034 <xQueueSemaphoreTake+0x2a>
    111e:	c8 01       	movw	r24, r16
    1120:	6c dd       	rcall	.-1320   	; 0xbfa <prvUnlockQueue>
    1122:	4d d7       	rcall	.+3738   	; 0x1fbe <xTaskResumeAll>
    1124:	c8 01       	movw	r24, r16
    1126:	d5 dc       	rcall	.-1622   	; 0xad2 <prvIsQueueEmpty>
    1128:	88 23       	and	r24, r24
    112a:	09 f4       	brne	.+2      	; 0x112e <xQueueSemaphoreTake+0x124>
    112c:	83 cf       	rjmp	.-250    	; 0x1034 <xQueueSemaphoreTake+0x2a>
    112e:	ee 20       	and	r14, r14
    1130:	79 f0       	breq	.+30     	; 0x1150 <xQueueSemaphoreTake+0x146>
    1132:	0f b6       	in	r0, 0x3f	; 63
    1134:	f8 94       	cli
    1136:	0f 92       	push	r0
    1138:	c8 01       	movw	r24, r16
    113a:	bb dc       	rcall	.-1674   	; 0xab2 <prvGetDisinheritPriorityAfterTimeout>
    113c:	68 2f       	mov	r22, r24
    113e:	f8 01       	movw	r30, r16
    1140:	84 81       	ldd	r24, Z+4	; 0x04
    1142:	95 81       	ldd	r25, Z+5	; 0x05
    1144:	0e 94 12 15 	call	0x2a24	; 0x2a24 <vTaskPriorityDisinheritAfterTimeout>
    1148:	0f 90       	pop	r0
    114a:	0f be       	out	0x3f, r0	; 63
    114c:	80 e0       	ldi	r24, 0x00	; 0
    114e:	01 c0       	rjmp	.+2      	; 0x1152 <xQueueSemaphoreTake+0x148>
    1150:	80 e0       	ldi	r24, 0x00	; 0
    1152:	29 96       	adiw	r28, 0x09	; 9
    1154:	0f b6       	in	r0, 0x3f	; 63
    1156:	f8 94       	cli
    1158:	de bf       	out	0x3e, r29	; 62
    115a:	0f be       	out	0x3f, r0	; 63
    115c:	cd bf       	out	0x3d, r28	; 61
    115e:	df 91       	pop	r29
    1160:	cf 91       	pop	r28
    1162:	1f 91       	pop	r17
    1164:	0f 91       	pop	r16
    1166:	ff 90       	pop	r15
    1168:	ef 90       	pop	r14
    116a:	08 95       	ret

0000116c <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
    116c:	cf 93       	push	r28
    116e:	df 93       	push	r29
    1170:	ec 01       	movw	r28, r24
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
    1172:	0f b6       	in	r0, 0x3f	; 63
    1174:	f8 94       	cli
    1176:	0f 92       	push	r0
    1178:	89 a1       	ldd	r24, Y+33	; 0x21
    117a:	8f 3f       	cpi	r24, 0xFF	; 255
    117c:	09 f4       	brne	.+2      	; 0x1180 <vQueueWaitForMessageRestricted+0x14>
    117e:	19 a2       	std	Y+33, r1	; 0x21
    1180:	8a a1       	ldd	r24, Y+34	; 0x22
    1182:	8f 3f       	cpi	r24, 0xFF	; 255
    1184:	09 f4       	brne	.+2      	; 0x1188 <vQueueWaitForMessageRestricted+0x1c>
    1186:	1a a2       	std	Y+34, r1	; 0x22
    1188:	0f 90       	pop	r0
    118a:	0f be       	out	0x3f, r0	; 63

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
    118c:	8e 8d       	ldd	r24, Y+30	; 0x1e
    118e:	81 11       	cpse	r24, r1
    1190:	04 c0       	rjmp	.+8      	; 0x119a <vQueueWaitForMessageRestricted+0x2e>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
    1192:	ce 01       	movw	r24, r28
    1194:	43 96       	adiw	r24, 0x13	; 19
    1196:	0e 94 01 12 	call	0x2402	; 0x2402 <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
    119a:	ce 01       	movw	r24, r28
    119c:	2e dd       	rcall	.-1444   	; 0xbfa <prvUnlockQueue>
    }
    119e:	df 91       	pop	r29
    11a0:	cf 91       	pop	r28
    11a2:	08 95       	ret

000011a4 <prvBytesInBuffer>:

    configASSERT( pxStreamBuffer );

    xReturn = prvBytesInBuffer( pxStreamBuffer );
    return xReturn;
}
    11a4:	fc 01       	movw	r30, r24
    11a6:	44 81       	ldd	r20, Z+4	; 0x04
    11a8:	55 81       	ldd	r21, Z+5	; 0x05
    11aa:	22 81       	ldd	r18, Z+2	; 0x02
    11ac:	33 81       	ldd	r19, Z+3	; 0x03
    11ae:	24 0f       	add	r18, r20
    11b0:	35 1f       	adc	r19, r21
    11b2:	80 81       	ld	r24, Z
    11b4:	91 81       	ldd	r25, Z+1	; 0x01
    11b6:	b9 01       	movw	r22, r18
    11b8:	68 1b       	sub	r22, r24
    11ba:	79 0b       	sbc	r23, r25
    11bc:	cb 01       	movw	r24, r22
    11be:	64 17       	cp	r22, r20
    11c0:	75 07       	cpc	r23, r21
    11c2:	10 f0       	brcs	.+4      	; 0x11c8 <prvBytesInBuffer+0x24>
    11c4:	84 1b       	sub	r24, r20
    11c6:	95 0b       	sbc	r25, r21
    11c8:	08 95       	ret

000011ca <prvInitialiseNewStreamBuffer>:
    11ca:	0f 93       	push	r16
    11cc:	fc 01       	movw	r30, r24
    11ce:	8f e0       	ldi	r24, 0x0F	; 15
    11d0:	df 01       	movw	r26, r30
    11d2:	1d 92       	st	X+, r1
    11d4:	8a 95       	dec	r24
    11d6:	e9 f7       	brne	.-6      	; 0x11d2 <prvInitialiseNewStreamBuffer+0x8>
    11d8:	75 87       	std	Z+13, r23	; 0x0d
    11da:	64 87       	std	Z+12, r22	; 0x0c
    11dc:	55 83       	std	Z+5, r21	; 0x05
    11de:	44 83       	std	Z+4, r20	; 0x04
    11e0:	37 83       	std	Z+7, r19	; 0x07
    11e2:	26 83       	std	Z+6, r18	; 0x06
    11e4:	06 87       	std	Z+14, r16	; 0x0e
    11e6:	0f 91       	pop	r16
    11e8:	08 95       	ret

000011ea <prvWriteBytesToBuffer>:
    11ea:	af 92       	push	r10
    11ec:	bf 92       	push	r11
    11ee:	cf 92       	push	r12
    11f0:	df 92       	push	r13
    11f2:	ef 92       	push	r14
    11f4:	ff 92       	push	r15
    11f6:	0f 93       	push	r16
    11f8:	1f 93       	push	r17
    11fa:	cf 93       	push	r28
    11fc:	df 93       	push	r29
    11fe:	6c 01       	movw	r12, r24
    1200:	5b 01       	movw	r10, r22
    1202:	7a 01       	movw	r14, r20
    1204:	fc 01       	movw	r30, r24
    1206:	c2 81       	ldd	r28, Z+2	; 0x02
    1208:	d3 81       	ldd	r29, Z+3	; 0x03
    120a:	04 81       	ldd	r16, Z+4	; 0x04
    120c:	15 81       	ldd	r17, Z+5	; 0x05
    120e:	0c 1b       	sub	r16, r28
    1210:	1d 0b       	sbc	r17, r29
    1212:	40 17       	cp	r20, r16
    1214:	51 07       	cpc	r21, r17
    1216:	08 f4       	brcc	.+2      	; 0x121a <prvWriteBytesToBuffer+0x30>
    1218:	8a 01       	movw	r16, r20
    121a:	f6 01       	movw	r30, r12
    121c:	84 85       	ldd	r24, Z+12	; 0x0c
    121e:	95 85       	ldd	r25, Z+13	; 0x0d
    1220:	a8 01       	movw	r20, r16
    1222:	b5 01       	movw	r22, r10
    1224:	8c 0f       	add	r24, r28
    1226:	9d 1f       	adc	r25, r29
    1228:	0e 94 e0 2f 	call	0x5fc0	; 0x5fc0 <memcpy>
    122c:	0e 15       	cp	r16, r14
    122e:	1f 05       	cpc	r17, r15
    1230:	58 f4       	brcc	.+22     	; 0x1248 <prvWriteBytesToBuffer+0x5e>
    1232:	a7 01       	movw	r20, r14
    1234:	40 1b       	sub	r20, r16
    1236:	51 0b       	sbc	r21, r17
    1238:	b5 01       	movw	r22, r10
    123a:	60 0f       	add	r22, r16
    123c:	71 1f       	adc	r23, r17
    123e:	f6 01       	movw	r30, r12
    1240:	84 85       	ldd	r24, Z+12	; 0x0c
    1242:	95 85       	ldd	r25, Z+13	; 0x0d
    1244:	0e 94 e0 2f 	call	0x5fc0	; 0x5fc0 <memcpy>
    1248:	ce 01       	movw	r24, r28
    124a:	8e 0d       	add	r24, r14
    124c:	9f 1d       	adc	r25, r15
    124e:	f6 01       	movw	r30, r12
    1250:	24 81       	ldd	r18, Z+4	; 0x04
    1252:	35 81       	ldd	r19, Z+5	; 0x05
    1254:	82 17       	cp	r24, r18
    1256:	93 07       	cpc	r25, r19
    1258:	10 f0       	brcs	.+4      	; 0x125e <prvWriteBytesToBuffer+0x74>
    125a:	82 1b       	sub	r24, r18
    125c:	93 0b       	sbc	r25, r19
    125e:	f6 01       	movw	r30, r12
    1260:	93 83       	std	Z+3, r25	; 0x03
    1262:	82 83       	std	Z+2, r24	; 0x02
    1264:	c7 01       	movw	r24, r14
    1266:	df 91       	pop	r29
    1268:	cf 91       	pop	r28
    126a:	1f 91       	pop	r17
    126c:	0f 91       	pop	r16
    126e:	ff 90       	pop	r15
    1270:	ef 90       	pop	r14
    1272:	df 90       	pop	r13
    1274:	cf 90       	pop	r12
    1276:	bf 90       	pop	r11
    1278:	af 90       	pop	r10
    127a:	08 95       	ret

0000127c <prvWriteMessageToBuffer>:
    127c:	cf 92       	push	r12
    127e:	df 92       	push	r13
    1280:	ef 92       	push	r14
    1282:	ff 92       	push	r15
    1284:	0f 93       	push	r16
    1286:	1f 93       	push	r17
    1288:	cf 93       	push	r28
    128a:	df 93       	push	r29
    128c:	1f 92       	push	r1
    128e:	1f 92       	push	r1
    1290:	cd b7       	in	r28, 0x3d	; 61
    1292:	de b7       	in	r29, 0x3e	; 62
    1294:	7c 01       	movw	r14, r24
    1296:	6b 01       	movw	r12, r22
    1298:	5a 83       	std	Y+2, r21	; 0x02
    129a:	49 83       	std	Y+1, r20	; 0x01
    129c:	21 15       	cp	r18, r1
    129e:	31 05       	cpc	r19, r1
    12a0:	c1 f0       	breq	.+48     	; 0x12d2 <prvWriteMessageToBuffer+0x56>
    12a2:	fc 01       	movw	r30, r24
    12a4:	86 85       	ldd	r24, Z+14	; 0x0e
    12a6:	80 fd       	sbrc	r24, 0
    12a8:	08 c0       	rjmp	.+16     	; 0x12ba <prvWriteMessageToBuffer+0x3e>
    12aa:	42 17       	cp	r20, r18
    12ac:	53 07       	cpc	r21, r19
    12ae:	08 f4       	brcc	.+2      	; 0x12b2 <prvWriteMessageToBuffer+0x36>
    12b0:	9a 01       	movw	r18, r20
    12b2:	3a 83       	std	Y+2, r19	; 0x02
    12b4:	29 83       	std	Y+1, r18	; 0x01
    12b6:	81 e0       	ldi	r24, 0x01	; 1
    12b8:	0f c0       	rjmp	.+30     	; 0x12d8 <prvWriteMessageToBuffer+0x5c>
    12ba:	20 17       	cp	r18, r16
    12bc:	31 07       	cpc	r19, r17
    12be:	58 f0       	brcs	.+22     	; 0x12d6 <prvWriteMessageToBuffer+0x5a>
    12c0:	42 e0       	ldi	r20, 0x02	; 2
    12c2:	50 e0       	ldi	r21, 0x00	; 0
    12c4:	be 01       	movw	r22, r28
    12c6:	6f 5f       	subi	r22, 0xFF	; 255
    12c8:	7f 4f       	sbci	r23, 0xFF	; 255
    12ca:	c7 01       	movw	r24, r14
    12cc:	8e df       	rcall	.-228    	; 0x11ea <prvWriteBytesToBuffer>
    12ce:	81 e0       	ldi	r24, 0x01	; 1
    12d0:	03 c0       	rjmp	.+6      	; 0x12d8 <prvWriteMessageToBuffer+0x5c>
    12d2:	80 e0       	ldi	r24, 0x00	; 0
    12d4:	01 c0       	rjmp	.+2      	; 0x12d8 <prvWriteMessageToBuffer+0x5c>
    12d6:	80 e0       	ldi	r24, 0x00	; 0
    12d8:	88 23       	and	r24, r24
    12da:	31 f0       	breq	.+12     	; 0x12e8 <prvWriteMessageToBuffer+0x6c>
    12dc:	49 81       	ldd	r20, Y+1	; 0x01
    12de:	5a 81       	ldd	r21, Y+2	; 0x02
    12e0:	b6 01       	movw	r22, r12
    12e2:	c7 01       	movw	r24, r14
    12e4:	82 df       	rcall	.-252    	; 0x11ea <prvWriteBytesToBuffer>
    12e6:	02 c0       	rjmp	.+4      	; 0x12ec <prvWriteMessageToBuffer+0x70>
    12e8:	80 e0       	ldi	r24, 0x00	; 0
    12ea:	90 e0       	ldi	r25, 0x00	; 0
    12ec:	0f 90       	pop	r0
    12ee:	0f 90       	pop	r0
    12f0:	df 91       	pop	r29
    12f2:	cf 91       	pop	r28
    12f4:	1f 91       	pop	r17
    12f6:	0f 91       	pop	r16
    12f8:	ff 90       	pop	r15
    12fa:	ef 90       	pop	r14
    12fc:	df 90       	pop	r13
    12fe:	cf 90       	pop	r12
    1300:	08 95       	ret

00001302 <prvReadBytesFromBuffer>:
    1302:	af 92       	push	r10
    1304:	bf 92       	push	r11
    1306:	cf 92       	push	r12
    1308:	df 92       	push	r13
    130a:	ef 92       	push	r14
    130c:	ff 92       	push	r15
    130e:	0f 93       	push	r16
    1310:	1f 93       	push	r17
    1312:	cf 93       	push	r28
    1314:	df 93       	push	r29
    1316:	7c 01       	movw	r14, r24
    1318:	5b 01       	movw	r10, r22
    131a:	e9 01       	movw	r28, r18
    131c:	42 17       	cp	r20, r18
    131e:	53 07       	cpc	r21, r19
    1320:	08 f4       	brcc	.+2      	; 0x1324 <prvReadBytesFromBuffer+0x22>
    1322:	ea 01       	movw	r28, r20
    1324:	20 97       	sbiw	r28, 0x00	; 0
    1326:	81 f1       	breq	.+96     	; 0x1388 <prvReadBytesFromBuffer+0x86>
    1328:	f7 01       	movw	r30, r14
    132a:	00 81       	ld	r16, Z
    132c:	11 81       	ldd	r17, Z+1	; 0x01
    132e:	84 81       	ldd	r24, Z+4	; 0x04
    1330:	95 81       	ldd	r25, Z+5	; 0x05
    1332:	80 1b       	sub	r24, r16
    1334:	91 0b       	sbc	r25, r17
    1336:	6e 01       	movw	r12, r28
    1338:	8c 17       	cp	r24, r28
    133a:	9d 07       	cpc	r25, r29
    133c:	08 f4       	brcc	.+2      	; 0x1340 <prvReadBytesFromBuffer+0x3e>
    133e:	6c 01       	movw	r12, r24
    1340:	f7 01       	movw	r30, r14
    1342:	64 85       	ldd	r22, Z+12	; 0x0c
    1344:	75 85       	ldd	r23, Z+13	; 0x0d
    1346:	60 0f       	add	r22, r16
    1348:	71 1f       	adc	r23, r17
    134a:	a6 01       	movw	r20, r12
    134c:	c5 01       	movw	r24, r10
    134e:	0e 94 e0 2f 	call	0x5fc0	; 0x5fc0 <memcpy>
    1352:	cc 16       	cp	r12, r28
    1354:	dd 06       	cpc	r13, r29
    1356:	58 f4       	brcc	.+22     	; 0x136e <prvReadBytesFromBuffer+0x6c>
    1358:	ae 01       	movw	r20, r28
    135a:	4c 19       	sub	r20, r12
    135c:	5d 09       	sbc	r21, r13
    135e:	f7 01       	movw	r30, r14
    1360:	64 85       	ldd	r22, Z+12	; 0x0c
    1362:	75 85       	ldd	r23, Z+13	; 0x0d
    1364:	c5 01       	movw	r24, r10
    1366:	8c 0d       	add	r24, r12
    1368:	9d 1d       	adc	r25, r13
    136a:	0e 94 e0 2f 	call	0x5fc0	; 0x5fc0 <memcpy>
    136e:	0c 0f       	add	r16, r28
    1370:	1d 1f       	adc	r17, r29
    1372:	f7 01       	movw	r30, r14
    1374:	84 81       	ldd	r24, Z+4	; 0x04
    1376:	95 81       	ldd	r25, Z+5	; 0x05
    1378:	08 17       	cp	r16, r24
    137a:	19 07       	cpc	r17, r25
    137c:	10 f0       	brcs	.+4      	; 0x1382 <prvReadBytesFromBuffer+0x80>
    137e:	08 1b       	sub	r16, r24
    1380:	19 0b       	sbc	r17, r25
    1382:	f7 01       	movw	r30, r14
    1384:	11 83       	std	Z+1, r17	; 0x01
    1386:	00 83       	st	Z, r16
    1388:	ce 01       	movw	r24, r28
    138a:	df 91       	pop	r29
    138c:	cf 91       	pop	r28
    138e:	1f 91       	pop	r17
    1390:	0f 91       	pop	r16
    1392:	ff 90       	pop	r15
    1394:	ef 90       	pop	r14
    1396:	df 90       	pop	r13
    1398:	cf 90       	pop	r12
    139a:	bf 90       	pop	r11
    139c:	af 90       	pop	r10
    139e:	08 95       	ret

000013a0 <prvReadMessageFromBuffer>:
    13a0:	6f 92       	push	r6
    13a2:	7f 92       	push	r7
    13a4:	8f 92       	push	r8
    13a6:	9f 92       	push	r9
    13a8:	af 92       	push	r10
    13aa:	bf 92       	push	r11
    13ac:	cf 92       	push	r12
    13ae:	df 92       	push	r13
    13b0:	ef 92       	push	r14
    13b2:	ff 92       	push	r15
    13b4:	0f 93       	push	r16
    13b6:	1f 93       	push	r17
    13b8:	cf 93       	push	r28
    13ba:	df 93       	push	r29
    13bc:	1f 92       	push	r1
    13be:	1f 92       	push	r1
    13c0:	cd b7       	in	r28, 0x3d	; 61
    13c2:	de b7       	in	r29, 0x3e	; 62
    13c4:	6c 01       	movw	r12, r24
    13c6:	4b 01       	movw	r8, r22
    13c8:	5a 01       	movw	r10, r20
    13ca:	79 01       	movw	r14, r18
    13cc:	01 15       	cp	r16, r1
    13ce:	11 05       	cpc	r17, r1
    13d0:	b1 f0       	breq	.+44     	; 0x13fe <prvReadMessageFromBuffer+0x5e>
    13d2:	fc 01       	movw	r30, r24
    13d4:	60 80       	ld	r6, Z
    13d6:	71 80       	ldd	r7, Z+1	; 0x01
    13d8:	a8 01       	movw	r20, r16
    13da:	be 01       	movw	r22, r28
    13dc:	6f 5f       	subi	r22, 0xFF	; 255
    13de:	7f 4f       	sbci	r23, 0xFF	; 255
    13e0:	90 df       	rcall	.-224    	; 0x1302 <prvReadBytesFromBuffer>
    13e2:	89 81       	ldd	r24, Y+1	; 0x01
    13e4:	9a 81       	ldd	r25, Y+2	; 0x02
    13e6:	e0 1a       	sub	r14, r16
    13e8:	f1 0a       	sbc	r15, r17
    13ea:	a8 16       	cp	r10, r24
    13ec:	b9 06       	cpc	r11, r25
    13ee:	30 f4       	brcc	.+12     	; 0x13fc <prvReadMessageFromBuffer+0x5c>
    13f0:	f6 01       	movw	r30, r12
    13f2:	71 82       	std	Z+1, r7	; 0x01
    13f4:	60 82       	st	Z, r6
    13f6:	a1 2c       	mov	r10, r1
    13f8:	b1 2c       	mov	r11, r1
    13fa:	01 c0       	rjmp	.+2      	; 0x13fe <prvReadMessageFromBuffer+0x5e>
    13fc:	5c 01       	movw	r10, r24
    13fe:	97 01       	movw	r18, r14
    1400:	a5 01       	movw	r20, r10
    1402:	b4 01       	movw	r22, r8
    1404:	c6 01       	movw	r24, r12
    1406:	7d df       	rcall	.-262    	; 0x1302 <prvReadBytesFromBuffer>
    1408:	0f 90       	pop	r0
    140a:	0f 90       	pop	r0
    140c:	df 91       	pop	r29
    140e:	cf 91       	pop	r28
    1410:	1f 91       	pop	r17
    1412:	0f 91       	pop	r16
    1414:	ff 90       	pop	r15
    1416:	ef 90       	pop	r14
    1418:	df 90       	pop	r13
    141a:	cf 90       	pop	r12
    141c:	bf 90       	pop	r11
    141e:	af 90       	pop	r10
    1420:	9f 90       	pop	r9
    1422:	8f 90       	pop	r8
    1424:	7f 90       	pop	r7
    1426:	6f 90       	pop	r6
    1428:	08 95       	ret

0000142a <xStreamBufferGenericCreate>:
    142a:	cf 92       	push	r12
    142c:	df 92       	push	r13
    142e:	ef 92       	push	r14
    1430:	ff 92       	push	r15
    1432:	0f 93       	push	r16
    1434:	cf 93       	push	r28
    1436:	df 93       	push	r29
    1438:	ec 01       	movw	r28, r24
    143a:	6b 01       	movw	r12, r22
    143c:	41 30       	cpi	r20, 0x01	; 1
    143e:	11 f4       	brne	.+4      	; 0x1444 <xStreamBufferGenericCreate+0x1a>
    1440:	01 e0       	ldi	r16, 0x01	; 1
    1442:	01 c0       	rjmp	.+2      	; 0x1446 <xStreamBufferGenericCreate+0x1c>
    1444:	00 e0       	ldi	r16, 0x00	; 0
    1446:	c1 14       	cp	r12, r1
    1448:	d1 04       	cpc	r13, r1
    144a:	19 f4       	brne	.+6      	; 0x1452 <xStreamBufferGenericCreate+0x28>
    144c:	cc 24       	eor	r12, r12
    144e:	c3 94       	inc	r12
    1450:	d1 2c       	mov	r13, r1
    1452:	ce 01       	movw	r24, r28
    1454:	40 96       	adiw	r24, 0x10	; 16
    1456:	c8 17       	cp	r28, r24
    1458:	d9 07       	cpc	r29, r25
    145a:	20 f4       	brcc	.+8      	; 0x1464 <xStreamBufferGenericCreate+0x3a>
    145c:	21 96       	adiw	r28, 0x01	; 1
    145e:	ad d8       	rcall	.-3750   	; 0x5ba <pvPortMalloc>
    1460:	7c 01       	movw	r14, r24
    1462:	02 c0       	rjmp	.+4      	; 0x1468 <xStreamBufferGenericCreate+0x3e>
    1464:	e1 2c       	mov	r14, r1
    1466:	f1 2c       	mov	r15, r1
    1468:	e1 14       	cp	r14, r1
    146a:	f1 04       	cpc	r15, r1
    146c:	39 f0       	breq	.+14     	; 0x147c <xStreamBufferGenericCreate+0x52>
    146e:	96 01       	movw	r18, r12
    1470:	ae 01       	movw	r20, r28
    1472:	b7 01       	movw	r22, r14
    1474:	61 5f       	subi	r22, 0xF1	; 241
    1476:	7f 4f       	sbci	r23, 0xFF	; 255
    1478:	c7 01       	movw	r24, r14
    147a:	a7 de       	rcall	.-690    	; 0x11ca <prvInitialiseNewStreamBuffer>
    147c:	c7 01       	movw	r24, r14
    147e:	df 91       	pop	r29
    1480:	cf 91       	pop	r28
    1482:	0f 91       	pop	r16
    1484:	ff 90       	pop	r15
    1486:	ef 90       	pop	r14
    1488:	df 90       	pop	r13
    148a:	cf 90       	pop	r12
    148c:	08 95       	ret

0000148e <xStreamBufferReset>:
    148e:	0f 93       	push	r16
    1490:	0f b6       	in	r0, 0x3f	; 63
    1492:	f8 94       	cli
    1494:	0f 92       	push	r0
    1496:	fc 01       	movw	r30, r24
    1498:	20 85       	ldd	r18, Z+8	; 0x08
    149a:	31 85       	ldd	r19, Z+9	; 0x09
    149c:	23 2b       	or	r18, r19
    149e:	71 f4       	brne	.+28     	; 0x14bc <xStreamBufferReset+0x2e>
    14a0:	22 85       	ldd	r18, Z+10	; 0x0a
    14a2:	33 85       	ldd	r19, Z+11	; 0x0b
    14a4:	23 2b       	or	r18, r19
    14a6:	61 f4       	brne	.+24     	; 0x14c0 <xStreamBufferReset+0x32>
    14a8:	26 81       	ldd	r18, Z+6	; 0x06
    14aa:	37 81       	ldd	r19, Z+7	; 0x07
    14ac:	44 81       	ldd	r20, Z+4	; 0x04
    14ae:	55 81       	ldd	r21, Z+5	; 0x05
    14b0:	64 85       	ldd	r22, Z+12	; 0x0c
    14b2:	75 85       	ldd	r23, Z+13	; 0x0d
    14b4:	06 85       	ldd	r16, Z+14	; 0x0e
    14b6:	89 de       	rcall	.-750    	; 0x11ca <prvInitialiseNewStreamBuffer>
    14b8:	81 e0       	ldi	r24, 0x01	; 1
    14ba:	03 c0       	rjmp	.+6      	; 0x14c2 <xStreamBufferReset+0x34>
    14bc:	80 e0       	ldi	r24, 0x00	; 0
    14be:	01 c0       	rjmp	.+2      	; 0x14c2 <xStreamBufferReset+0x34>
    14c0:	80 e0       	ldi	r24, 0x00	; 0
    14c2:	0f 90       	pop	r0
    14c4:	0f be       	out	0x3f, r0	; 63
    14c6:	0f 91       	pop	r16
    14c8:	08 95       	ret

000014ca <xStreamBufferSpacesAvailable>:
    14ca:	fc 01       	movw	r30, r24
    14cc:	24 81       	ldd	r18, Z+4	; 0x04
    14ce:	35 81       	ldd	r19, Z+5	; 0x05
    14d0:	80 81       	ld	r24, Z
    14d2:	91 81       	ldd	r25, Z+1	; 0x01
    14d4:	82 0f       	add	r24, r18
    14d6:	93 1f       	adc	r25, r19
    14d8:	42 81       	ldd	r20, Z+2	; 0x02
    14da:	53 81       	ldd	r21, Z+3	; 0x03
    14dc:	84 1b       	sub	r24, r20
    14de:	95 0b       	sbc	r25, r21
    14e0:	01 97       	sbiw	r24, 0x01	; 1
    14e2:	82 17       	cp	r24, r18
    14e4:	93 07       	cpc	r25, r19
    14e6:	10 f0       	brcs	.+4      	; 0x14ec <xStreamBufferSpacesAvailable+0x22>
    14e8:	82 1b       	sub	r24, r18
    14ea:	93 0b       	sbc	r25, r19
    14ec:	08 95       	ret

000014ee <xStreamBufferSend>:

size_t xStreamBufferSend( StreamBufferHandle_t xStreamBuffer,
                          const void * pvTxData,
                          size_t xDataLengthBytes,
                          TickType_t xTicksToWait )
{
    14ee:	2f 92       	push	r2
    14f0:	3f 92       	push	r3
    14f2:	4f 92       	push	r4
    14f4:	5f 92       	push	r5
    14f6:	6f 92       	push	r6
    14f8:	7f 92       	push	r7
    14fa:	8f 92       	push	r8
    14fc:	9f 92       	push	r9
    14fe:	af 92       	push	r10
    1500:	bf 92       	push	r11
    1502:	cf 92       	push	r12
    1504:	df 92       	push	r13
    1506:	ef 92       	push	r14
    1508:	ff 92       	push	r15
    150a:	0f 93       	push	r16
    150c:	1f 93       	push	r17
    150e:	cf 93       	push	r28
    1510:	df 93       	push	r29
    1512:	cd b7       	in	r28, 0x3d	; 61
    1514:	de b7       	in	r29, 0x3e	; 62
    1516:	2b 97       	sbiw	r28, 0x0b	; 11
    1518:	0f b6       	in	r0, 0x3f	; 63
    151a:	f8 94       	cli
    151c:	de bf       	out	0x3e, r29	; 62
    151e:	0f be       	out	0x3f, r0	; 63
    1520:	cd bf       	out	0x3d, r28	; 61
    1522:	4c 01       	movw	r8, r24
    1524:	7b 87       	std	Y+11, r23	; 0x0b
    1526:	6a 87       	std	Y+10, r22	; 0x0a
    1528:	1a 01       	movw	r2, r20
    152a:	0e 83       	std	Y+6, r16	; 0x06
    152c:	1f 83       	std	Y+7, r17	; 0x07
    152e:	28 87       	std	Y+8, r18	; 0x08
    1530:	39 87       	std	Y+9, r19	; 0x09
    size_t xRequiredSpace = xDataLengthBytes;
    TimeOut_t xTimeOut;

    /* The maximum amount of space a stream buffer will ever report is its length
     * minus 1. */
    const size_t xMaxReportedSpace = pxStreamBuffer->xLength - ( size_t ) 1;
    1532:	fc 01       	movw	r30, r24
    1534:	84 81       	ldd	r24, Z+4	; 0x04
    1536:	95 81       	ldd	r25, Z+5	; 0x05
    1538:	01 97       	sbiw	r24, 0x01	; 1

    /* This send function is used to write to both message buffers and stream
     * buffers.  If this is a message buffer then the space needed must be
     * increased by the amount of bytes needed to store the length of the
     * message. */
    if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
    153a:	26 85       	ldd	r18, Z+14	; 0x0e
    153c:	20 ff       	sbrs	r18, 0
    153e:	0c c0       	rjmp	.+24     	; 0x1558 <xStreamBufferSend+0x6a>
    {
        xRequiredSpace += sbBYTES_TO_STORE_MESSAGE_LENGTH;
    1540:	2a 01       	movw	r4, r20
    1542:	f2 e0       	ldi	r31, 0x02	; 2
    1544:	4f 0e       	add	r4, r31
    1546:	51 1c       	adc	r5, r1
        /* Overflow? */
        configASSERT( xRequiredSpace > xDataLengthBytes );

        /* If this is a message buffer then it must be possible to write the
         * whole message. */
        if( xRequiredSpace > xMaxReportedSpace )
    1548:	84 15       	cp	r24, r4
    154a:	95 05       	cpc	r25, r5
    154c:	58 f4       	brcc	.+22     	; 0x1564 <xStreamBufferSend+0x76>
        {
            /* The message would not fit even if the entire buffer was empty,
             * so don't wait for space. */
            xTicksToWait = ( TickType_t ) 0;
    154e:	1e 82       	std	Y+6, r1	; 0x06
    1550:	1f 82       	std	Y+7, r1	; 0x07
    1552:	18 86       	std	Y+8, r1	; 0x08
    1554:	19 86       	std	Y+9, r1	; 0x09
    1556:	06 c0       	rjmp	.+12     	; 0x1564 <xStreamBufferSend+0x76>
    else
    {
        /* If this is a stream buffer then it is acceptable to write only part
         * of the message to the buffer.  Cap the length to the total length of
         * the buffer. */
        if( xRequiredSpace > xMaxReportedSpace )
    1558:	84 17       	cp	r24, r20
    155a:	95 07       	cpc	r25, r21
    155c:	10 f0       	brcs	.+4      	; 0x1562 <xStreamBufferSend+0x74>
                          size_t xDataLengthBytes,
                          TickType_t xTicksToWait )
{
    StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
    size_t xReturn, xSpace = 0;
    size_t xRequiredSpace = xDataLengthBytes;
    155e:	2a 01       	movw	r4, r20
    1560:	01 c0       	rjmp	.+2      	; 0x1564 <xStreamBufferSend+0x76>
        /* If this is a stream buffer then it is acceptable to write only part
         * of the message to the buffer.  Cap the length to the total length of
         * the buffer. */
        if( xRequiredSpace > xMaxReportedSpace )
        {
            xRequiredSpace = xMaxReportedSpace;
    1562:	2c 01       	movw	r4, r24
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    if( xTicksToWait != ( TickType_t ) 0 )
    1564:	8e 81       	ldd	r24, Y+6	; 0x06
    1566:	9f 81       	ldd	r25, Y+7	; 0x07
    1568:	a8 85       	ldd	r26, Y+8	; 0x08
    156a:	b9 85       	ldd	r27, Y+9	; 0x09
    156c:	89 2b       	or	r24, r25
    156e:	8a 2b       	or	r24, r26
    1570:	8b 2b       	or	r24, r27
    1572:	09 f4       	brne	.+2      	; 0x1576 <xStreamBufferSend+0x88>
    1574:	38 c0       	rjmp	.+112    	; 0x15e6 <xStreamBufferSend+0xf8>
    {
        vTaskSetTimeOutState( &xTimeOut );
    1576:	ce 01       	movw	r24, r28
    1578:	01 96       	adiw	r24, 0x01	; 1
    157a:	0e 94 8c 13 	call	0x2718	; 0x2718 <vTaskSetTimeOutState>

        do
        {
            /* Wait until the required number of bytes are free in the message
             * buffer. */
            taskENTER_CRITICAL();
    157e:	0f b6       	in	r0, 0x3f	; 63
    1580:	f8 94       	cli
    1582:	0f 92       	push	r0
            {
                xSpace = xStreamBufferSpacesAvailable( pxStreamBuffer );
    1584:	c4 01       	movw	r24, r8
    1586:	a1 df       	rcall	.-190    	; 0x14ca <xStreamBufferSpacesAvailable>
    1588:	3c 01       	movw	r6, r24

                if( xSpace < xRequiredSpace )
    158a:	84 15       	cp	r24, r4
    158c:	95 05       	cpc	r25, r5
    158e:	40 f5       	brcc	.+80     	; 0x15e0 <xStreamBufferSend+0xf2>
                {
                    /* Clear notification state as going to wait for space. */
                    ( void ) xTaskNotifyStateClear( NULL );
    1590:	60 e0       	ldi	r22, 0x00	; 0
    1592:	80 e0       	ldi	r24, 0x00	; 0
    1594:	90 e0       	ldi	r25, 0x00	; 0
    1596:	0e 94 76 18 	call	0x30ec	; 0x30ec <xTaskGenericNotifyStateClear>

                    /* Should only be one writer. */
                    configASSERT( pxStreamBuffer->xTaskWaitingToSend == NULL );
                    pxStreamBuffer->xTaskWaitingToSend = xTaskGetCurrentTaskHandle();
    159a:	0e 94 1d 14 	call	0x283a	; 0x283a <xTaskGetCurrentTaskHandle>
    159e:	f4 01       	movw	r30, r8
    15a0:	93 87       	std	Z+11, r25	; 0x0b
    15a2:	82 87       	std	Z+10, r24	; 0x0a
                {
                    taskEXIT_CRITICAL();
                    break;
                }
            }
            taskEXIT_CRITICAL();
    15a4:	0f 90       	pop	r0
    15a6:	0f be       	out	0x3f, r0	; 63

            traceBLOCKING_ON_STREAM_BUFFER_SEND( xStreamBuffer );
            ( void ) xTaskNotifyWait( ( uint32_t ) 0, ( uint32_t ) 0, NULL, xTicksToWait );
    15a8:	ae 80       	ldd	r10, Y+6	; 0x06
    15aa:	bf 80       	ldd	r11, Y+7	; 0x07
    15ac:	c8 84       	ldd	r12, Y+8	; 0x08
    15ae:	d9 84       	ldd	r13, Y+9	; 0x09
    15b0:	e1 2c       	mov	r14, r1
    15b2:	f1 2c       	mov	r15, r1
    15b4:	00 e0       	ldi	r16, 0x00	; 0
    15b6:	10 e0       	ldi	r17, 0x00	; 0
    15b8:	98 01       	movw	r18, r16
    15ba:	40 e0       	ldi	r20, 0x00	; 0
    15bc:	50 e0       	ldi	r21, 0x00	; 0
    15be:	ba 01       	movw	r22, r20
    15c0:	80 e0       	ldi	r24, 0x00	; 0
    15c2:	0e 94 b5 15 	call	0x2b6a	; 0x2b6a <xTaskGenericNotifyWait>
            pxStreamBuffer->xTaskWaitingToSend = NULL;
    15c6:	f4 01       	movw	r30, r8
    15c8:	13 86       	std	Z+11, r1	; 0x0b
    15ca:	12 86       	std	Z+10, r1	; 0x0a
        } while( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE );
    15cc:	be 01       	movw	r22, r28
    15ce:	6a 5f       	subi	r22, 0xFA	; 250
    15d0:	7f 4f       	sbci	r23, 0xFF	; 255
    15d2:	ce 01       	movw	r24, r28
    15d4:	01 96       	adiw	r24, 0x01	; 1
    15d6:	0e 94 b3 13 	call	0x2766	; 0x2766 <xTaskCheckForTimeOut>
    15da:	88 23       	and	r24, r24
    15dc:	81 f2       	breq	.-96     	; 0x157e <xStreamBufferSend+0x90>
    15de:	05 c0       	rjmp	.+10     	; 0x15ea <xStreamBufferSend+0xfc>
                    configASSERT( pxStreamBuffer->xTaskWaitingToSend == NULL );
                    pxStreamBuffer->xTaskWaitingToSend = xTaskGetCurrentTaskHandle();
                }
                else
                {
                    taskEXIT_CRITICAL();
    15e0:	0f 90       	pop	r0
    15e2:	0f be       	out	0x3f, r0	; 63
                    break;
    15e4:	02 c0       	rjmp	.+4      	; 0x15ea <xStreamBufferSend+0xfc>
                          const void * pvTxData,
                          size_t xDataLengthBytes,
                          TickType_t xTicksToWait )
{
    StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
    size_t xReturn, xSpace = 0;
    15e6:	61 2c       	mov	r6, r1
    15e8:	71 2c       	mov	r7, r1
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    if( xSpace == ( size_t ) 0 )
    15ea:	61 14       	cp	r6, r1
    15ec:	71 04       	cpc	r7, r1
    15ee:	19 f4       	brne	.+6      	; 0x15f6 <xStreamBufferSend+0x108>
    {
        xSpace = xStreamBufferSpacesAvailable( pxStreamBuffer );
    15f0:	c4 01       	movw	r24, r8
    15f2:	6b df       	rcall	.-298    	; 0x14ca <xStreamBufferSpacesAvailable>
    15f4:	3c 01       	movw	r6, r24
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    xReturn = prvWriteMessageToBuffer( pxStreamBuffer, pvTxData, xDataLengthBytes, xSpace, xRequiredSpace );
    15f6:	82 01       	movw	r16, r4
    15f8:	93 01       	movw	r18, r6
    15fa:	a1 01       	movw	r20, r2
    15fc:	6a 85       	ldd	r22, Y+10	; 0x0a
    15fe:	7b 85       	ldd	r23, Y+11	; 0x0b
    1600:	c4 01       	movw	r24, r8
    1602:	3c de       	rcall	.-904    	; 0x127c <prvWriteMessageToBuffer>
    1604:	6c 01       	movw	r12, r24

    if( xReturn > ( size_t ) 0 )
    1606:	89 2b       	or	r24, r25
    {
        traceSTREAM_BUFFER_SEND( xStreamBuffer, xReturn );

        /* Was a task waiting for the data? */
        if( prvBytesInBuffer( pxStreamBuffer ) >= pxStreamBuffer->xTriggerLevelBytes )
    1608:	e9 f0       	breq	.+58     	; 0x1644 <xStreamBufferSend+0x156>
    160a:	c4 01       	movw	r24, r8
    160c:	cb dd       	rcall	.-1130   	; 0x11a4 <prvBytesInBuffer>
    160e:	f4 01       	movw	r30, r8
    1610:	26 81       	ldd	r18, Z+6	; 0x06
    1612:	37 81       	ldd	r19, Z+7	; 0x07
    1614:	82 17       	cp	r24, r18
    1616:	93 07       	cpc	r25, r19
        {
            sbSEND_COMPLETED( pxStreamBuffer );
    1618:	a8 f0       	brcs	.+42     	; 0x1644 <xStreamBufferSend+0x156>
    161a:	91 d3       	rcall	.+1826   	; 0x1d3e <vTaskSuspendAll>
    161c:	f4 01       	movw	r30, r8
    161e:	80 85       	ldd	r24, Z+8	; 0x08
    1620:	91 85       	ldd	r25, Z+9	; 0x09
    1622:	89 2b       	or	r24, r25
    1624:	71 f0       	breq	.+28     	; 0x1642 <xStreamBufferSend+0x154>
    1626:	80 85       	ldd	r24, Z+8	; 0x08
    1628:	91 85       	ldd	r25, Z+9	; 0x09
    162a:	e1 2c       	mov	r14, r1
    162c:	f1 2c       	mov	r15, r1
    162e:	00 e0       	ldi	r16, 0x00	; 0
    1630:	20 e0       	ldi	r18, 0x00	; 0
    1632:	30 e0       	ldi	r19, 0x00	; 0
    1634:	a9 01       	movw	r20, r18
    1636:	60 e0       	ldi	r22, 0x00	; 0
    1638:	0e 94 5d 16 	call	0x2cba	; 0x2cba <xTaskGenericNotify>
    163c:	f4 01       	movw	r30, r8
    163e:	11 86       	std	Z+9, r1	; 0x09
    1640:	10 86       	std	Z+8, r1	; 0x08
    1642:	bd d4       	rcall	.+2426   	; 0x1fbe <xTaskResumeAll>
        mtCOVERAGE_TEST_MARKER();
        traceSTREAM_BUFFER_SEND_FAILED( xStreamBuffer );
    }

    return xReturn;
}
    1644:	c6 01       	movw	r24, r12
    1646:	2b 96       	adiw	r28, 0x0b	; 11
    1648:	0f b6       	in	r0, 0x3f	; 63
    164a:	f8 94       	cli
    164c:	de bf       	out	0x3e, r29	; 62
    164e:	0f be       	out	0x3f, r0	; 63
    1650:	cd bf       	out	0x3d, r28	; 61
    1652:	df 91       	pop	r29
    1654:	cf 91       	pop	r28
    1656:	1f 91       	pop	r17
    1658:	0f 91       	pop	r16
    165a:	ff 90       	pop	r15
    165c:	ef 90       	pop	r14
    165e:	df 90       	pop	r13
    1660:	cf 90       	pop	r12
    1662:	bf 90       	pop	r11
    1664:	af 90       	pop	r10
    1666:	9f 90       	pop	r9
    1668:	8f 90       	pop	r8
    166a:	7f 90       	pop	r7
    166c:	6f 90       	pop	r6
    166e:	5f 90       	pop	r5
    1670:	4f 90       	pop	r4
    1672:	3f 90       	pop	r3
    1674:	2f 90       	pop	r2
    1676:	08 95       	ret

00001678 <xStreamBufferSendFromISR>:

size_t xStreamBufferSendFromISR( StreamBufferHandle_t xStreamBuffer,
                                 const void * pvTxData,
                                 size_t xDataLengthBytes,
                                 BaseType_t * const pxHigherPriorityTaskWoken )
{
    1678:	af 92       	push	r10
    167a:	bf 92       	push	r11
    167c:	cf 92       	push	r12
    167e:	df 92       	push	r13
    1680:	ef 92       	push	r14
    1682:	ff 92       	push	r15
    1684:	0f 93       	push	r16
    1686:	1f 93       	push	r17
    1688:	cf 93       	push	r28
    168a:	df 93       	push	r29
    168c:	ec 01       	movw	r28, r24
    168e:	7b 01       	movw	r14, r22
    1690:	5a 01       	movw	r10, r20
    1692:	69 01       	movw	r12, r18

    /* This send function is used to write to both message buffers and stream
     * buffers.  If this is a message buffer then the space needed must be
     * increased by the amount of bytes needed to store the length of the
     * message. */
    if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
    1694:	8e 85       	ldd	r24, Y+14	; 0x0e
    1696:	80 ff       	sbrs	r24, 0
    1698:	04 c0       	rjmp	.+8      	; 0x16a2 <xStreamBufferSendFromISR+0x2a>
    {
        xRequiredSpace += sbBYTES_TO_STORE_MESSAGE_LENGTH;
    169a:	8a 01       	movw	r16, r20
    169c:	0e 5f       	subi	r16, 0xFE	; 254
    169e:	1f 4f       	sbci	r17, 0xFF	; 255
    16a0:	01 c0       	rjmp	.+2      	; 0x16a4 <xStreamBufferSendFromISR+0x2c>
                                 size_t xDataLengthBytes,
                                 BaseType_t * const pxHigherPriorityTaskWoken )
{
    StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
    size_t xReturn, xSpace;
    size_t xRequiredSpace = xDataLengthBytes;
    16a2:	8a 01       	movw	r16, r20
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    xSpace = xStreamBufferSpacesAvailable( pxStreamBuffer );
    16a4:	ce 01       	movw	r24, r28
    16a6:	11 df       	rcall	.-478    	; 0x14ca <xStreamBufferSpacesAvailable>
    xReturn = prvWriteMessageToBuffer( pxStreamBuffer, pvTxData, xDataLengthBytes, xSpace, xRequiredSpace );
    16a8:	9c 01       	movw	r18, r24
    16aa:	a5 01       	movw	r20, r10
    16ac:	b7 01       	movw	r22, r14
    16ae:	ce 01       	movw	r24, r28
    16b0:	e5 dd       	rcall	.-1078   	; 0x127c <prvWriteMessageToBuffer>
    16b2:	5c 01       	movw	r10, r24

    if( xReturn > ( size_t ) 0 )
    16b4:	89 2b       	or	r24, r25
    {
        /* Was a task waiting for the data? */
        if( prvBytesInBuffer( pxStreamBuffer ) >= pxStreamBuffer->xTriggerLevelBytes )
    16b6:	c1 f0       	breq	.+48     	; 0x16e8 <xStreamBufferSendFromISR+0x70>
    16b8:	ce 01       	movw	r24, r28
    16ba:	74 dd       	rcall	.-1304   	; 0x11a4 <prvBytesInBuffer>
    16bc:	2e 81       	ldd	r18, Y+6	; 0x06
    16be:	3f 81       	ldd	r19, Y+7	; 0x07
    16c0:	82 17       	cp	r24, r18
    16c2:	93 07       	cpc	r25, r19
    16c4:	88 f0       	brcs	.+34     	; 0x16e8 <xStreamBufferSendFromISR+0x70>
        {
            sbSEND_COMPLETE_FROM_ISR( pxStreamBuffer, pxHigherPriorityTaskWoken );
    16c6:	88 85       	ldd	r24, Y+8	; 0x08
    16c8:	99 85       	ldd	r25, Y+9	; 0x09
    16ca:	89 2b       	or	r24, r25
    16cc:	69 f0       	breq	.+26     	; 0x16e8 <xStreamBufferSendFromISR+0x70>
    16ce:	88 85       	ldd	r24, Y+8	; 0x08
    16d0:	99 85       	ldd	r25, Y+9	; 0x09
    16d2:	e1 2c       	mov	r14, r1
    16d4:	f1 2c       	mov	r15, r1
    16d6:	00 e0       	ldi	r16, 0x00	; 0
    16d8:	20 e0       	ldi	r18, 0x00	; 0
    16da:	30 e0       	ldi	r19, 0x00	; 0
    16dc:	a9 01       	movw	r20, r18
    16de:	60 e0       	ldi	r22, 0x00	; 0
    16e0:	0e 94 54 17 	call	0x2ea8	; 0x2ea8 <xTaskGenericNotifyFromISR>
    16e4:	19 86       	std	Y+9, r1	; 0x09
    16e6:	18 86       	std	Y+8, r1	; 0x08
    }

    traceSTREAM_BUFFER_SEND_FROM_ISR( xStreamBuffer, xReturn );

    return xReturn;
}
    16e8:	c5 01       	movw	r24, r10
    16ea:	df 91       	pop	r29
    16ec:	cf 91       	pop	r28
    16ee:	1f 91       	pop	r17
    16f0:	0f 91       	pop	r16
    16f2:	ff 90       	pop	r15
    16f4:	ef 90       	pop	r14
    16f6:	df 90       	pop	r13
    16f8:	cf 90       	pop	r12
    16fa:	bf 90       	pop	r11
    16fc:	af 90       	pop	r10
    16fe:	08 95       	ret

00001700 <xStreamBufferReceive>:

size_t xStreamBufferReceive( StreamBufferHandle_t xStreamBuffer,
                             void * pvRxData,
                             size_t xBufferLengthBytes,
                             TickType_t xTicksToWait )
{
    1700:	4f 92       	push	r4
    1702:	5f 92       	push	r5
    1704:	6f 92       	push	r6
    1706:	7f 92       	push	r7
    1708:	8f 92       	push	r8
    170a:	9f 92       	push	r9
    170c:	af 92       	push	r10
    170e:	bf 92       	push	r11
    1710:	cf 92       	push	r12
    1712:	df 92       	push	r13
    1714:	ef 92       	push	r14
    1716:	ff 92       	push	r15
    1718:	0f 93       	push	r16
    171a:	1f 93       	push	r17
    171c:	cf 93       	push	r28
    171e:	df 93       	push	r29
    1720:	ec 01       	movw	r28, r24
    1722:	2b 01       	movw	r4, r22
    1724:	3a 01       	movw	r6, r20
    1726:	58 01       	movw	r10, r16
    1728:	69 01       	movw	r12, r18
    /* This receive function is used by both message buffers, which store
     * discrete messages, and stream buffers, which store a continuous stream of
     * bytes.  Discrete messages include an additional
     * sbBYTES_TO_STORE_MESSAGE_LENGTH bytes that hold the length of the
     * message. */
    if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
    172a:	8e 85       	ldd	r24, Y+14	; 0x0e
    172c:	80 ff       	sbrs	r24, 0
    172e:	05 c0       	rjmp	.+10     	; 0x173a <xStreamBufferReceive+0x3a>
    {
        xBytesToStoreMessageLength = sbBYTES_TO_STORE_MESSAGE_LENGTH;
    1730:	68 94       	set
    1732:	88 24       	eor	r8, r8
    1734:	81 f8       	bld	r8, 1
    1736:	91 2c       	mov	r9, r1
    1738:	02 c0       	rjmp	.+4      	; 0x173e <xStreamBufferReceive+0x3e>
    }
    else
    {
        xBytesToStoreMessageLength = 0;
    173a:	81 2c       	mov	r8, r1
    173c:	91 2c       	mov	r9, r1
    }

    if( xTicksToWait != ( TickType_t ) 0 )
    173e:	a1 14       	cp	r10, r1
    1740:	b1 04       	cpc	r11, r1
    1742:	c1 04       	cpc	r12, r1
    1744:	d1 04       	cpc	r13, r1
    1746:	41 f1       	breq	.+80     	; 0x1798 <xStreamBufferReceive+0x98>
    {
        /* Checking if there is data and clearing the notification state must be
         * performed atomically. */
        taskENTER_CRITICAL();
    1748:	0f b6       	in	r0, 0x3f	; 63
    174a:	f8 94       	cli
    174c:	0f 92       	push	r0
        {
            xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
    174e:	ce 01       	movw	r24, r28
    1750:	29 dd       	rcall	.-1454   	; 0x11a4 <prvBytesInBuffer>
    1752:	7c 01       	movw	r14, r24
            /* If this function was invoked by a message buffer read then
             * xBytesToStoreMessageLength holds the number of bytes used to hold
             * the length of the next discrete message.  If this function was
             * invoked by a stream buffer read then xBytesToStoreMessageLength will
             * be 0. */
            if( xBytesAvailable <= xBytesToStoreMessageLength )
    1754:	88 16       	cp	r8, r24
    1756:	99 06       	cpc	r9, r25
    1758:	48 f0       	brcs	.+18     	; 0x176c <xStreamBufferReceive+0x6c>
            {
                /* Clear notification state as going to wait for data. */
                ( void ) xTaskNotifyStateClear( NULL );
    175a:	60 e0       	ldi	r22, 0x00	; 0
    175c:	80 e0       	ldi	r24, 0x00	; 0
    175e:	90 e0       	ldi	r25, 0x00	; 0
    1760:	0e 94 76 18 	call	0x30ec	; 0x30ec <xTaskGenericNotifyStateClear>

                /* Should only be one reader. */
                configASSERT( pxStreamBuffer->xTaskWaitingToReceive == NULL );
                pxStreamBuffer->xTaskWaitingToReceive = xTaskGetCurrentTaskHandle();
    1764:	0e 94 1d 14 	call	0x283a	; 0x283a <xTaskGetCurrentTaskHandle>
    1768:	99 87       	std	Y+9, r25	; 0x09
    176a:	88 87       	std	Y+8, r24	; 0x08
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
    176c:	0f 90       	pop	r0
    176e:	0f be       	out	0x3f, r0	; 63

        if( xBytesAvailable <= xBytesToStoreMessageLength )
    1770:	8e 14       	cp	r8, r14
    1772:	9f 04       	cpc	r9, r15
    1774:	a0 f0       	brcs	.+40     	; 0x179e <xStreamBufferReceive+0x9e>
        {
            /* Wait for data to be available. */
            traceBLOCKING_ON_STREAM_BUFFER_RECEIVE( xStreamBuffer );
            ( void ) xTaskNotifyWait( ( uint32_t ) 0, ( uint32_t ) 0, NULL, xTicksToWait );
    1776:	e1 2c       	mov	r14, r1
    1778:	f1 2c       	mov	r15, r1
    177a:	00 e0       	ldi	r16, 0x00	; 0
    177c:	10 e0       	ldi	r17, 0x00	; 0
    177e:	98 01       	movw	r18, r16
    1780:	40 e0       	ldi	r20, 0x00	; 0
    1782:	50 e0       	ldi	r21, 0x00	; 0
    1784:	ba 01       	movw	r22, r20
    1786:	80 e0       	ldi	r24, 0x00	; 0
    1788:	0e 94 b5 15 	call	0x2b6a	; 0x2b6a <xTaskGenericNotifyWait>
            pxStreamBuffer->xTaskWaitingToReceive = NULL;
    178c:	19 86       	std	Y+9, r1	; 0x09
    178e:	18 86       	std	Y+8, r1	; 0x08

            /* Recheck the data available after blocking. */
            xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
    1790:	ce 01       	movw	r24, r28
    1792:	08 dd       	rcall	.-1520   	; 0x11a4 <prvBytesInBuffer>
    1794:	7c 01       	movw	r14, r24
    1796:	03 c0       	rjmp	.+6      	; 0x179e <xStreamBufferReceive+0x9e>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
    1798:	ce 01       	movw	r24, r28
    179a:	04 dd       	rcall	.-1528   	; 0x11a4 <prvBytesInBuffer>
    179c:	7c 01       	movw	r14, r24
    179e:	8e 14       	cp	r8, r14
    /* Whether receiving a discrete message (where xBytesToStoreMessageLength
     * holds the number of bytes used to store the message length) or a stream of
     * bytes (where xBytesToStoreMessageLength is zero), the number of bytes
     * available must be greater than xBytesToStoreMessageLength to be able to
     * read bytes from the buffer. */
    if( xBytesAvailable > xBytesToStoreMessageLength )
    17a0:	9f 04       	cpc	r9, r15
    17a2:	e8 f4       	brcc	.+58     	; 0x17de <xStreamBufferReceive+0xde>
    17a4:	84 01       	movw	r16, r8
    {
        xReceivedLength = prvReadMessageFromBuffer( pxStreamBuffer, pvRxData, xBufferLengthBytes, xBytesAvailable, xBytesToStoreMessageLength );
    17a6:	97 01       	movw	r18, r14
    17a8:	a3 01       	movw	r20, r6
    17aa:	b2 01       	movw	r22, r4
    17ac:	ce 01       	movw	r24, r28
    17ae:	f8 dd       	rcall	.-1040   	; 0x13a0 <prvReadMessageFromBuffer>
    17b0:	6c 01       	movw	r12, r24

        /* Was a task waiting for space in the buffer? */
        if( xReceivedLength != ( size_t ) 0 )
    17b2:	89 2b       	or	r24, r25
    17b4:	b1 f0       	breq	.+44     	; 0x17e2 <xStreamBufferReceive+0xe2>
        {
            traceSTREAM_BUFFER_RECEIVE( xStreamBuffer, xReceivedLength );
            sbRECEIVE_COMPLETED( pxStreamBuffer );
    17b6:	c3 d2       	rcall	.+1414   	; 0x1d3e <vTaskSuspendAll>
    17b8:	8a 85       	ldd	r24, Y+10	; 0x0a
    17ba:	9b 85       	ldd	r25, Y+11	; 0x0b
    17bc:	89 2b       	or	r24, r25
    17be:	69 f0       	breq	.+26     	; 0x17da <xStreamBufferReceive+0xda>
    17c0:	8a 85       	ldd	r24, Y+10	; 0x0a
    17c2:	9b 85       	ldd	r25, Y+11	; 0x0b
    17c4:	e1 2c       	mov	r14, r1
    17c6:	f1 2c       	mov	r15, r1
    17c8:	00 e0       	ldi	r16, 0x00	; 0
    17ca:	20 e0       	ldi	r18, 0x00	; 0
    17cc:	30 e0       	ldi	r19, 0x00	; 0
    17ce:	a9 01       	movw	r20, r18
    17d0:	60 e0       	ldi	r22, 0x00	; 0
    17d2:	0e 94 5d 16 	call	0x2cba	; 0x2cba <xTaskGenericNotify>
    17d6:	1b 86       	std	Y+11, r1	; 0x0b
    17d8:	1a 86       	std	Y+10, r1	; 0x0a
    17da:	f1 d3       	rcall	.+2018   	; 0x1fbe <xTaskResumeAll>
    17dc:	02 c0       	rjmp	.+4      	; 0x17e2 <xStreamBufferReceive+0xe2>
    17de:	c1 2c       	mov	r12, r1
                             void * pvRxData,
                             size_t xBufferLengthBytes,
                             TickType_t xTicksToWait )
{
    StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
    size_t xReceivedLength = 0, xBytesAvailable, xBytesToStoreMessageLength;
    17e0:	d1 2c       	mov	r13, r1
    17e2:	c6 01       	movw	r24, r12
        traceSTREAM_BUFFER_RECEIVE_FAILED( xStreamBuffer );
        mtCOVERAGE_TEST_MARKER();
    }

    return xReceivedLength;
}
    17e4:	df 91       	pop	r29
    17e6:	cf 91       	pop	r28
    17e8:	1f 91       	pop	r17
    17ea:	0f 91       	pop	r16
    17ec:	ff 90       	pop	r15
    17ee:	ef 90       	pop	r14
    17f0:	df 90       	pop	r13
    17f2:	cf 90       	pop	r12
    17f4:	bf 90       	pop	r11
    17f6:	af 90       	pop	r10
    17f8:	9f 90       	pop	r9
    17fa:	8f 90       	pop	r8
    17fc:	7f 90       	pop	r7
    17fe:	6f 90       	pop	r6
    1800:	5f 90       	pop	r5
    1802:	4f 90       	pop	r4
    1804:	08 95       	ret

00001806 <prvResetNextTaskUnblockTime>:
    1806:	e0 91 8f 16 	lds	r30, 0x168F	; 0x80168f <pxDelayedTaskList>
    180a:	f0 91 90 16 	lds	r31, 0x1690	; 0x801690 <pxDelayedTaskList+0x1>
    180e:	80 81       	ld	r24, Z
    1810:	81 11       	cpse	r24, r1
    1812:	0c c0       	rjmp	.+24     	; 0x182c <prvResetNextTaskUnblockTime+0x26>
    1814:	8f ef       	ldi	r24, 0xFF	; 255
    1816:	9f ef       	ldi	r25, 0xFF	; 255
    1818:	dc 01       	movw	r26, r24
    181a:	80 93 59 16 	sts	0x1659, r24	; 0x801659 <xNextTaskUnblockTime>
    181e:	90 93 5a 16 	sts	0x165A, r25	; 0x80165a <xNextTaskUnblockTime+0x1>
    1822:	a0 93 5b 16 	sts	0x165B, r26	; 0x80165b <xNextTaskUnblockTime+0x2>
    1826:	b0 93 5c 16 	sts	0x165C, r27	; 0x80165c <xNextTaskUnblockTime+0x3>
    182a:	08 95       	ret
    182c:	e0 91 8f 16 	lds	r30, 0x168F	; 0x80168f <pxDelayedTaskList>
    1830:	f0 91 90 16 	lds	r31, 0x1690	; 0x801690 <pxDelayedTaskList+0x1>
    1834:	07 80       	ldd	r0, Z+7	; 0x07
    1836:	f0 85       	ldd	r31, Z+8	; 0x08
    1838:	e0 2d       	mov	r30, r0
    183a:	80 81       	ld	r24, Z
    183c:	91 81       	ldd	r25, Z+1	; 0x01
    183e:	a2 81       	ldd	r26, Z+2	; 0x02
    1840:	b3 81       	ldd	r27, Z+3	; 0x03
    1842:	80 93 59 16 	sts	0x1659, r24	; 0x801659 <xNextTaskUnblockTime>
    1846:	90 93 5a 16 	sts	0x165A, r25	; 0x80165a <xNextTaskUnblockTime+0x1>
    184a:	a0 93 5b 16 	sts	0x165B, r26	; 0x80165b <xNextTaskUnblockTime+0x2>
    184e:	b0 93 5c 16 	sts	0x165C, r27	; 0x80165c <xNextTaskUnblockTime+0x3>
    1852:	08 95       	ret

00001854 <prvDeleteTCB>:
    1854:	cf 93       	push	r28
    1856:	df 93       	push	r29
    1858:	ec 01       	movw	r28, r24
    185a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    185c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    185e:	0e 94 86 03 	call	0x70c	; 0x70c <vPortFree>
    1862:	ce 01       	movw	r24, r28
    1864:	0e 94 86 03 	call	0x70c	; 0x70c <vPortFree>
    1868:	df 91       	pop	r29
    186a:	cf 91       	pop	r28
    186c:	08 95       	ret

0000186e <prvInitialiseNewTask>:
    186e:	4f 92       	push	r4
    1870:	5f 92       	push	r5
    1872:	6f 92       	push	r6
    1874:	7f 92       	push	r7
    1876:	8f 92       	push	r8
    1878:	9f 92       	push	r9
    187a:	af 92       	push	r10
    187c:	bf 92       	push	r11
    187e:	cf 92       	push	r12
    1880:	df 92       	push	r13
    1882:	ef 92       	push	r14
    1884:	ff 92       	push	r15
    1886:	0f 93       	push	r16
    1888:	cf 93       	push	r28
    188a:	df 93       	push	r29
    188c:	2c 01       	movw	r4, r24
    188e:	5b 01       	movw	r10, r22
    1890:	4a 01       	movw	r8, r20
    1892:	39 01       	movw	r6, r18
    1894:	e6 01       	movw	r28, r12
    1896:	65 ea       	ldi	r22, 0xA5	; 165
    1898:	70 e0       	ldi	r23, 0x00	; 0
    189a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    189c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    189e:	0e 94 e9 2f 	call	0x5fd2	; 0x5fd2 <memset>
    18a2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    18a4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    18a6:	21 e0       	ldi	r18, 0x01	; 1
    18a8:	82 1a       	sub	r8, r18
    18aa:	91 08       	sbc	r9, r1
    18ac:	88 0e       	add	r8, r24
    18ae:	99 1e       	adc	r9, r25
    18b0:	a1 14       	cp	r10, r1
    18b2:	b1 04       	cpc	r11, r1
    18b4:	89 f4       	brne	.+34     	; 0x18d8 <prvInitialiseNewTask+0x6a>
    18b6:	15 c0       	rjmp	.+42     	; 0x18e2 <prvInitialiseNewTask+0x74>
    18b8:	82 2f       	mov	r24, r18
    18ba:	90 e0       	ldi	r25, 0x00	; 0
    18bc:	f5 01       	movw	r30, r10
    18be:	e8 0f       	add	r30, r24
    18c0:	f9 1f       	adc	r31, r25
    18c2:	30 81       	ld	r19, Z
    18c4:	de 01       	movw	r26, r28
    18c6:	a8 0f       	add	r26, r24
    18c8:	b9 1f       	adc	r27, r25
    18ca:	5d 96       	adiw	r26, 0x1d	; 29
    18cc:	3c 93       	st	X, r19
    18ce:	80 81       	ld	r24, Z
    18d0:	88 23       	and	r24, r24
    18d2:	29 f0       	breq	.+10     	; 0x18de <prvInitialiseNewTask+0x70>
    18d4:	2f 5f       	subi	r18, 0xFF	; 255
    18d6:	01 c0       	rjmp	.+2      	; 0x18da <prvInitialiseNewTask+0x6c>
    18d8:	20 e0       	ldi	r18, 0x00	; 0
    18da:	20 31       	cpi	r18, 0x10	; 16
    18dc:	68 f3       	brcs	.-38     	; 0x18b8 <prvInitialiseNewTask+0x4a>
    18de:	1c a6       	std	Y+44, r1	; 0x2c
    18e0:	01 c0       	rjmp	.+2      	; 0x18e4 <prvInitialiseNewTask+0x76>
    18e2:	1d 8e       	std	Y+29, r1	; 0x1d
    18e4:	0a 30       	cpi	r16, 0x0A	; 10
    18e6:	08 f0       	brcs	.+2      	; 0x18ea <prvInitialiseNewTask+0x7c>
    18e8:	09 e0       	ldi	r16, 0x09	; 9
    18ea:	0a 8f       	std	Y+26, r16	; 0x1a
    18ec:	0d a7       	std	Y+45, r16	; 0x2d
    18ee:	1e a6       	std	Y+46, r1	; 0x2e
    18f0:	ce 01       	movw	r24, r28
    18f2:	02 96       	adiw	r24, 0x02	; 2
    18f4:	0e 94 d4 03 	call	0x7a8	; 0x7a8 <vListInitialiseItem>
    18f8:	ce 01       	movw	r24, r28
    18fa:	0e 96       	adiw	r24, 0x0e	; 14
    18fc:	0e 94 d4 03 	call	0x7a8	; 0x7a8 <vListInitialiseItem>
    1900:	db 87       	std	Y+11, r29	; 0x0b
    1902:	ca 87       	std	Y+10, r28	; 0x0a
    1904:	8a e0       	ldi	r24, 0x0A	; 10
    1906:	90 e0       	ldi	r25, 0x00	; 0
    1908:	a0 e0       	ldi	r26, 0x00	; 0
    190a:	b0 e0       	ldi	r27, 0x00	; 0
    190c:	80 1b       	sub	r24, r16
    190e:	91 09       	sbc	r25, r1
    1910:	a1 09       	sbc	r26, r1
    1912:	b1 09       	sbc	r27, r1
    1914:	8e 87       	std	Y+14, r24	; 0x0e
    1916:	9f 87       	std	Y+15, r25	; 0x0f
    1918:	a8 8b       	std	Y+16, r26	; 0x10
    191a:	b9 8b       	std	Y+17, r27	; 0x11
    191c:	df 8b       	std	Y+23, r29	; 0x17
    191e:	ce 8b       	std	Y+22, r28	; 0x16
    1920:	84 e0       	ldi	r24, 0x04	; 4
    1922:	fe 01       	movw	r30, r28
    1924:	bf 96       	adiw	r30, 0x2f	; 47
    1926:	df 01       	movw	r26, r30
    1928:	1d 92       	st	X+, r1
    192a:	8a 95       	dec	r24
    192c:	e9 f7       	brne	.-6      	; 0x1928 <prvInitialiseNewTask+0xba>
    192e:	1b aa       	std	Y+51, r1	; 0x33
    1930:	a3 01       	movw	r20, r6
    1932:	b2 01       	movw	r22, r4
    1934:	c4 01       	movw	r24, r8
    1936:	0e 94 48 04 	call	0x890	; 0x890 <pxPortInitialiseStack>
    193a:	99 83       	std	Y+1, r25	; 0x01
    193c:	88 83       	st	Y, r24
    193e:	e1 14       	cp	r14, r1
    1940:	f1 04       	cpc	r15, r1
    1942:	19 f0       	breq	.+6      	; 0x194a <prvInitialiseNewTask+0xdc>
    1944:	f7 01       	movw	r30, r14
    1946:	d1 83       	std	Z+1, r29	; 0x01
    1948:	c0 83       	st	Z, r28
    194a:	df 91       	pop	r29
    194c:	cf 91       	pop	r28
    194e:	0f 91       	pop	r16
    1950:	ff 90       	pop	r15
    1952:	ef 90       	pop	r14
    1954:	df 90       	pop	r13
    1956:	cf 90       	pop	r12
    1958:	bf 90       	pop	r11
    195a:	af 90       	pop	r10
    195c:	9f 90       	pop	r9
    195e:	8f 90       	pop	r8
    1960:	7f 90       	pop	r7
    1962:	6f 90       	pop	r6
    1964:	5f 90       	pop	r5
    1966:	4f 90       	pop	r4
    1968:	08 95       	ret

0000196a <prvInitialiseTaskLists>:
    196a:	cf 93       	push	r28
    196c:	c0 e0       	ldi	r28, 0x00	; 0
    196e:	09 c0       	rjmp	.+18     	; 0x1982 <prvInitialiseTaskLists+0x18>
    1970:	2b e0       	ldi	r18, 0x0B	; 11
    1972:	c2 9f       	mul	r28, r18
    1974:	c0 01       	movw	r24, r0
    1976:	11 24       	eor	r1, r1
    1978:	89 55       	subi	r24, 0x59	; 89
    197a:	99 4e       	sbci	r25, 0xE9	; 233
    197c:	0e 94 c3 03 	call	0x786	; 0x786 <vListInitialise>
    1980:	cf 5f       	subi	r28, 0xFF	; 255
    1982:	ca 30       	cpi	r28, 0x0A	; 10
    1984:	a8 f3       	brcs	.-22     	; 0x1970 <prvInitialiseTaskLists+0x6>
    1986:	8c e9       	ldi	r24, 0x9C	; 156
    1988:	96 e1       	ldi	r25, 0x16	; 22
    198a:	0e 94 c3 03 	call	0x786	; 0x786 <vListInitialise>
    198e:	81 e9       	ldi	r24, 0x91	; 145
    1990:	96 e1       	ldi	r25, 0x16	; 22
    1992:	0e 94 c3 03 	call	0x786	; 0x786 <vListInitialise>
    1996:	82 e8       	ldi	r24, 0x82	; 130
    1998:	96 e1       	ldi	r25, 0x16	; 22
    199a:	0e 94 c3 03 	call	0x786	; 0x786 <vListInitialise>
    199e:	87 e7       	ldi	r24, 0x77	; 119
    19a0:	96 e1       	ldi	r25, 0x16	; 22
    19a2:	0e 94 c3 03 	call	0x786	; 0x786 <vListInitialise>
    19a6:	8b e6       	ldi	r24, 0x6B	; 107
    19a8:	96 e1       	ldi	r25, 0x16	; 22
    19aa:	0e 94 c3 03 	call	0x786	; 0x786 <vListInitialise>
    19ae:	8c e9       	ldi	r24, 0x9C	; 156
    19b0:	96 e1       	ldi	r25, 0x16	; 22
    19b2:	90 93 90 16 	sts	0x1690, r25	; 0x801690 <pxDelayedTaskList+0x1>
    19b6:	80 93 8f 16 	sts	0x168F, r24	; 0x80168f <pxDelayedTaskList>
    19ba:	81 e9       	ldi	r24, 0x91	; 145
    19bc:	96 e1       	ldi	r25, 0x16	; 22
    19be:	90 93 8e 16 	sts	0x168E, r25	; 0x80168e <pxOverflowDelayedTaskList+0x1>
    19c2:	80 93 8d 16 	sts	0x168D, r24	; 0x80168d <pxOverflowDelayedTaskList>
    19c6:	cf 91       	pop	r28
    19c8:	08 95       	ret

000019ca <prvAddNewTaskToReadyList>:
    19ca:	cf 93       	push	r28
    19cc:	df 93       	push	r29
    19ce:	ec 01       	movw	r28, r24
    19d0:	0f b6       	in	r0, 0x3f	; 63
    19d2:	f8 94       	cli
    19d4:	0f 92       	push	r0
    19d6:	80 91 6a 16 	lds	r24, 0x166A	; 0x80166a <uxCurrentNumberOfTasks>
    19da:	8f 5f       	subi	r24, 0xFF	; 255
    19dc:	80 93 6a 16 	sts	0x166A, r24	; 0x80166a <uxCurrentNumberOfTasks>
    19e0:	80 91 15 17 	lds	r24, 0x1715	; 0x801715 <pxCurrentTCB>
    19e4:	90 91 16 17 	lds	r25, 0x1716	; 0x801716 <pxCurrentTCB+0x1>
    19e8:	89 2b       	or	r24, r25
    19ea:	51 f4       	brne	.+20     	; 0x1a00 <prvAddNewTaskToReadyList+0x36>
    19ec:	d0 93 16 17 	sts	0x1716, r29	; 0x801716 <pxCurrentTCB+0x1>
    19f0:	c0 93 15 17 	sts	0x1715, r28	; 0x801715 <pxCurrentTCB>
    19f4:	80 91 6a 16 	lds	r24, 0x166A	; 0x80166a <uxCurrentNumberOfTasks>
    19f8:	81 30       	cpi	r24, 0x01	; 1
    19fa:	91 f4       	brne	.+36     	; 0x1a20 <prvAddNewTaskToReadyList+0x56>
    19fc:	b6 df       	rcall	.-148    	; 0x196a <prvInitialiseTaskLists>
    19fe:	10 c0       	rjmp	.+32     	; 0x1a20 <prvAddNewTaskToReadyList+0x56>
    1a00:	80 91 64 16 	lds	r24, 0x1664	; 0x801664 <xSchedulerRunning>
    1a04:	81 11       	cpse	r24, r1
    1a06:	0c c0       	rjmp	.+24     	; 0x1a20 <prvAddNewTaskToReadyList+0x56>
    1a08:	e0 91 15 17 	lds	r30, 0x1715	; 0x801715 <pxCurrentTCB>
    1a0c:	f0 91 16 17 	lds	r31, 0x1716	; 0x801716 <pxCurrentTCB+0x1>
    1a10:	92 8d       	ldd	r25, Z+26	; 0x1a
    1a12:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1a14:	89 17       	cp	r24, r25
    1a16:	20 f0       	brcs	.+8      	; 0x1a20 <prvAddNewTaskToReadyList+0x56>
    1a18:	d0 93 16 17 	sts	0x1716, r29	; 0x801716 <pxCurrentTCB+0x1>
    1a1c:	c0 93 15 17 	sts	0x1715, r28	; 0x801715 <pxCurrentTCB>
    1a20:	80 91 5d 16 	lds	r24, 0x165D	; 0x80165d <uxTaskNumber>
    1a24:	8f 5f       	subi	r24, 0xFF	; 255
    1a26:	80 93 5d 16 	sts	0x165D, r24	; 0x80165d <uxTaskNumber>
    1a2a:	ea 8d       	ldd	r30, Y+26	; 0x1a
    1a2c:	80 91 65 16 	lds	r24, 0x1665	; 0x801665 <uxTopReadyPriority>
    1a30:	8e 17       	cp	r24, r30
    1a32:	10 f4       	brcc	.+4      	; 0x1a38 <prvAddNewTaskToReadyList+0x6e>
    1a34:	e0 93 65 16 	sts	0x1665, r30	; 0x801665 <uxTopReadyPriority>
    1a38:	8b e0       	ldi	r24, 0x0B	; 11
    1a3a:	8e 9f       	mul	r24, r30
    1a3c:	f0 01       	movw	r30, r0
    1a3e:	11 24       	eor	r1, r1
    1a40:	e9 55       	subi	r30, 0x59	; 89
    1a42:	f9 4e       	sbci	r31, 0xE9	; 233
    1a44:	01 80       	ldd	r0, Z+1	; 0x01
    1a46:	f2 81       	ldd	r31, Z+2	; 0x02
    1a48:	e0 2d       	mov	r30, r0
    1a4a:	ff 83       	std	Y+7, r31	; 0x07
    1a4c:	ee 83       	std	Y+6, r30	; 0x06
    1a4e:	26 81       	ldd	r18, Z+6	; 0x06
    1a50:	37 81       	ldd	r19, Z+7	; 0x07
    1a52:	39 87       	std	Y+9, r19	; 0x09
    1a54:	28 87       	std	Y+8, r18	; 0x08
    1a56:	a6 81       	ldd	r26, Z+6	; 0x06
    1a58:	b7 81       	ldd	r27, Z+7	; 0x07
    1a5a:	9e 01       	movw	r18, r28
    1a5c:	2e 5f       	subi	r18, 0xFE	; 254
    1a5e:	3f 4f       	sbci	r19, 0xFF	; 255
    1a60:	15 96       	adiw	r26, 0x05	; 5
    1a62:	3c 93       	st	X, r19
    1a64:	2e 93       	st	-X, r18
    1a66:	14 97       	sbiw	r26, 0x04	; 4
    1a68:	37 83       	std	Z+7, r19	; 0x07
    1a6a:	26 83       	std	Z+6, r18	; 0x06
    1a6c:	ea 8d       	ldd	r30, Y+26	; 0x1a
    1a6e:	8e 9f       	mul	r24, r30
    1a70:	f0 01       	movw	r30, r0
    1a72:	11 24       	eor	r1, r1
    1a74:	e9 55       	subi	r30, 0x59	; 89
    1a76:	f9 4e       	sbci	r31, 0xE9	; 233
    1a78:	fd 87       	std	Y+13, r31	; 0x0d
    1a7a:	ec 87       	std	Y+12, r30	; 0x0c
    1a7c:	80 81       	ld	r24, Z
    1a7e:	8f 5f       	subi	r24, 0xFF	; 255
    1a80:	80 83       	st	Z, r24
    1a82:	0f 90       	pop	r0
    1a84:	0f be       	out	0x3f, r0	; 63
    1a86:	80 91 64 16 	lds	r24, 0x1664	; 0x801664 <xSchedulerRunning>
    1a8a:	88 23       	and	r24, r24
    1a8c:	51 f0       	breq	.+20     	; 0x1aa2 <prvAddNewTaskToReadyList+0xd8>
    1a8e:	e0 91 15 17 	lds	r30, 0x1715	; 0x801715 <pxCurrentTCB>
    1a92:	f0 91 16 17 	lds	r31, 0x1716	; 0x801716 <pxCurrentTCB+0x1>
    1a96:	92 8d       	ldd	r25, Z+26	; 0x1a
    1a98:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1a9a:	98 17       	cp	r25, r24
    1a9c:	10 f4       	brcc	.+4      	; 0x1aa2 <prvAddNewTaskToReadyList+0xd8>
    1a9e:	0e 94 91 04 	call	0x922	; 0x922 <vPortYield>
    1aa2:	df 91       	pop	r29
    1aa4:	cf 91       	pop	r28
    1aa6:	08 95       	ret

00001aa8 <prvCheckTasksWaitingTermination>:
    1aa8:	cf 93       	push	r28
    1aaa:	df 93       	push	r29
    1aac:	1b c0       	rjmp	.+54     	; 0x1ae4 <prvCheckTasksWaitingTermination+0x3c>
    1aae:	0f b6       	in	r0, 0x3f	; 63
    1ab0:	f8 94       	cli
    1ab2:	0f 92       	push	r0
    1ab4:	e0 91 7e 16 	lds	r30, 0x167E	; 0x80167e <xTasksWaitingTermination+0x7>
    1ab8:	f0 91 7f 16 	lds	r31, 0x167F	; 0x80167f <xTasksWaitingTermination+0x8>
    1abc:	c0 85       	ldd	r28, Z+8	; 0x08
    1abe:	d1 85       	ldd	r29, Z+9	; 0x09
    1ac0:	ce 01       	movw	r24, r28
    1ac2:	02 96       	adiw	r24, 0x02	; 2
    1ac4:	0e 94 15 04 	call	0x82a	; 0x82a <uxListRemove>
    1ac8:	80 91 6a 16 	lds	r24, 0x166A	; 0x80166a <uxCurrentNumberOfTasks>
    1acc:	81 50       	subi	r24, 0x01	; 1
    1ace:	80 93 6a 16 	sts	0x166A, r24	; 0x80166a <uxCurrentNumberOfTasks>
    1ad2:	80 91 76 16 	lds	r24, 0x1676	; 0x801676 <uxDeletedTasksWaitingCleanUp>
    1ad6:	81 50       	subi	r24, 0x01	; 1
    1ad8:	80 93 76 16 	sts	0x1676, r24	; 0x801676 <uxDeletedTasksWaitingCleanUp>
    1adc:	0f 90       	pop	r0
    1ade:	0f be       	out	0x3f, r0	; 63
    1ae0:	ce 01       	movw	r24, r28
    1ae2:	b8 de       	rcall	.-656    	; 0x1854 <prvDeleteTCB>
    1ae4:	80 91 76 16 	lds	r24, 0x1676	; 0x801676 <uxDeletedTasksWaitingCleanUp>
    1ae8:	81 11       	cpse	r24, r1
    1aea:	e1 cf       	rjmp	.-62     	; 0x1aae <prvCheckTasksWaitingTermination+0x6>
    1aec:	df 91       	pop	r29
    1aee:	cf 91       	pop	r28
    1af0:	08 95       	ret

00001af2 <prvAddCurrentTaskToDelayedList>:
    1af2:	8f 92       	push	r8
    1af4:	9f 92       	push	r9
    1af6:	af 92       	push	r10
    1af8:	bf 92       	push	r11
    1afa:	cf 92       	push	r12
    1afc:	df 92       	push	r13
    1afe:	ef 92       	push	r14
    1b00:	ff 92       	push	r15
    1b02:	cf 93       	push	r28
    1b04:	df 93       	push	r29
    1b06:	6b 01       	movw	r12, r22
    1b08:	7c 01       	movw	r14, r24
    1b0a:	c4 2f       	mov	r28, r20
    1b0c:	80 90 66 16 	lds	r8, 0x1666	; 0x801666 <xTickCount>
    1b10:	90 90 67 16 	lds	r9, 0x1667	; 0x801667 <xTickCount+0x1>
    1b14:	a0 90 68 16 	lds	r10, 0x1668	; 0x801668 <xTickCount+0x2>
    1b18:	b0 90 69 16 	lds	r11, 0x1669	; 0x801669 <xTickCount+0x3>
    1b1c:	80 91 15 17 	lds	r24, 0x1715	; 0x801715 <pxCurrentTCB>
    1b20:	90 91 16 17 	lds	r25, 0x1716	; 0x801716 <pxCurrentTCB+0x1>
    1b24:	02 96       	adiw	r24, 0x02	; 2
    1b26:	0e 94 15 04 	call	0x82a	; 0x82a <uxListRemove>
    1b2a:	8f ef       	ldi	r24, 0xFF	; 255
    1b2c:	c8 16       	cp	r12, r24
    1b2e:	d8 06       	cpc	r13, r24
    1b30:	e8 06       	cpc	r14, r24
    1b32:	f8 06       	cpc	r15, r24
    1b34:	b1 f5       	brne	.+108    	; 0x1ba2 <prvAddCurrentTaskToDelayedList+0xb0>
    1b36:	cc 23       	and	r28, r28
    1b38:	a1 f1       	breq	.+104    	; 0x1ba2 <prvAddCurrentTaskToDelayedList+0xb0>
    1b3a:	eb e6       	ldi	r30, 0x6B	; 107
    1b3c:	f6 e1       	ldi	r31, 0x16	; 22
    1b3e:	a1 81       	ldd	r26, Z+1	; 0x01
    1b40:	b2 81       	ldd	r27, Z+2	; 0x02
    1b42:	c0 91 15 17 	lds	r28, 0x1715	; 0x801715 <pxCurrentTCB>
    1b46:	d0 91 16 17 	lds	r29, 0x1716	; 0x801716 <pxCurrentTCB+0x1>
    1b4a:	bf 83       	std	Y+7, r27	; 0x07
    1b4c:	ae 83       	std	Y+6, r26	; 0x06
    1b4e:	c0 91 15 17 	lds	r28, 0x1715	; 0x801715 <pxCurrentTCB>
    1b52:	d0 91 16 17 	lds	r29, 0x1716	; 0x801716 <pxCurrentTCB+0x1>
    1b56:	16 96       	adiw	r26, 0x06	; 6
    1b58:	8d 91       	ld	r24, X+
    1b5a:	9c 91       	ld	r25, X
    1b5c:	17 97       	sbiw	r26, 0x07	; 7
    1b5e:	99 87       	std	Y+9, r25	; 0x09
    1b60:	88 87       	std	Y+8, r24	; 0x08
    1b62:	16 96       	adiw	r26, 0x06	; 6
    1b64:	cd 91       	ld	r28, X+
    1b66:	dc 91       	ld	r29, X
    1b68:	17 97       	sbiw	r26, 0x07	; 7
    1b6a:	80 91 15 17 	lds	r24, 0x1715	; 0x801715 <pxCurrentTCB>
    1b6e:	90 91 16 17 	lds	r25, 0x1716	; 0x801716 <pxCurrentTCB+0x1>
    1b72:	02 96       	adiw	r24, 0x02	; 2
    1b74:	9d 83       	std	Y+5, r25	; 0x05
    1b76:	8c 83       	std	Y+4, r24	; 0x04
    1b78:	80 91 15 17 	lds	r24, 0x1715	; 0x801715 <pxCurrentTCB>
    1b7c:	90 91 16 17 	lds	r25, 0x1716	; 0x801716 <pxCurrentTCB+0x1>
    1b80:	02 96       	adiw	r24, 0x02	; 2
    1b82:	17 96       	adiw	r26, 0x07	; 7
    1b84:	9c 93       	st	X, r25
    1b86:	8e 93       	st	-X, r24
    1b88:	16 97       	sbiw	r26, 0x06	; 6
    1b8a:	a0 91 15 17 	lds	r26, 0x1715	; 0x801715 <pxCurrentTCB>
    1b8e:	b0 91 16 17 	lds	r27, 0x1716	; 0x801716 <pxCurrentTCB+0x1>
    1b92:	1d 96       	adiw	r26, 0x0d	; 13
    1b94:	fc 93       	st	X, r31
    1b96:	ee 93       	st	-X, r30
    1b98:	1c 97       	sbiw	r26, 0x0c	; 12
    1b9a:	80 81       	ld	r24, Z
    1b9c:	8f 5f       	subi	r24, 0xFF	; 255
    1b9e:	80 83       	st	Z, r24
    1ba0:	3f c0       	rjmp	.+126    	; 0x1c20 <prvAddCurrentTaskToDelayedList+0x12e>
    1ba2:	c8 0c       	add	r12, r8
    1ba4:	d9 1c       	adc	r13, r9
    1ba6:	ea 1c       	adc	r14, r10
    1ba8:	fb 1c       	adc	r15, r11
    1baa:	e0 91 15 17 	lds	r30, 0x1715	; 0x801715 <pxCurrentTCB>
    1bae:	f0 91 16 17 	lds	r31, 0x1716	; 0x801716 <pxCurrentTCB+0x1>
    1bb2:	c2 82       	std	Z+2, r12	; 0x02
    1bb4:	d3 82       	std	Z+3, r13	; 0x03
    1bb6:	e4 82       	std	Z+4, r14	; 0x04
    1bb8:	f5 82       	std	Z+5, r15	; 0x05
    1bba:	c8 14       	cp	r12, r8
    1bbc:	d9 04       	cpc	r13, r9
    1bbe:	ea 04       	cpc	r14, r10
    1bc0:	fb 04       	cpc	r15, r11
    1bc2:	68 f4       	brcc	.+26     	; 0x1bde <prvAddCurrentTaskToDelayedList+0xec>
    1bc4:	60 91 15 17 	lds	r22, 0x1715	; 0x801715 <pxCurrentTCB>
    1bc8:	70 91 16 17 	lds	r23, 0x1716	; 0x801716 <pxCurrentTCB+0x1>
    1bcc:	80 91 8d 16 	lds	r24, 0x168D	; 0x80168d <pxOverflowDelayedTaskList>
    1bd0:	90 91 8e 16 	lds	r25, 0x168E	; 0x80168e <pxOverflowDelayedTaskList+0x1>
    1bd4:	6e 5f       	subi	r22, 0xFE	; 254
    1bd6:	7f 4f       	sbci	r23, 0xFF	; 255
    1bd8:	0e 94 d8 03 	call	0x7b0	; 0x7b0 <vListInsert>
    1bdc:	21 c0       	rjmp	.+66     	; 0x1c20 <prvAddCurrentTaskToDelayedList+0x12e>
    1bde:	60 91 15 17 	lds	r22, 0x1715	; 0x801715 <pxCurrentTCB>
    1be2:	70 91 16 17 	lds	r23, 0x1716	; 0x801716 <pxCurrentTCB+0x1>
    1be6:	80 91 8f 16 	lds	r24, 0x168F	; 0x80168f <pxDelayedTaskList>
    1bea:	90 91 90 16 	lds	r25, 0x1690	; 0x801690 <pxDelayedTaskList+0x1>
    1bee:	6e 5f       	subi	r22, 0xFE	; 254
    1bf0:	7f 4f       	sbci	r23, 0xFF	; 255
    1bf2:	0e 94 d8 03 	call	0x7b0	; 0x7b0 <vListInsert>
    1bf6:	80 91 59 16 	lds	r24, 0x1659	; 0x801659 <xNextTaskUnblockTime>
    1bfa:	90 91 5a 16 	lds	r25, 0x165A	; 0x80165a <xNextTaskUnblockTime+0x1>
    1bfe:	a0 91 5b 16 	lds	r26, 0x165B	; 0x80165b <xNextTaskUnblockTime+0x2>
    1c02:	b0 91 5c 16 	lds	r27, 0x165C	; 0x80165c <xNextTaskUnblockTime+0x3>
    1c06:	c8 16       	cp	r12, r24
    1c08:	d9 06       	cpc	r13, r25
    1c0a:	ea 06       	cpc	r14, r26
    1c0c:	fb 06       	cpc	r15, r27
    1c0e:	40 f4       	brcc	.+16     	; 0x1c20 <prvAddCurrentTaskToDelayedList+0x12e>
    1c10:	c0 92 59 16 	sts	0x1659, r12	; 0x801659 <xNextTaskUnblockTime>
    1c14:	d0 92 5a 16 	sts	0x165A, r13	; 0x80165a <xNextTaskUnblockTime+0x1>
    1c18:	e0 92 5b 16 	sts	0x165B, r14	; 0x80165b <xNextTaskUnblockTime+0x2>
    1c1c:	f0 92 5c 16 	sts	0x165C, r15	; 0x80165c <xNextTaskUnblockTime+0x3>
    1c20:	df 91       	pop	r29
    1c22:	cf 91       	pop	r28
    1c24:	ff 90       	pop	r15
    1c26:	ef 90       	pop	r14
    1c28:	df 90       	pop	r13
    1c2a:	cf 90       	pop	r12
    1c2c:	bf 90       	pop	r11
    1c2e:	af 90       	pop	r10
    1c30:	9f 90       	pop	r9
    1c32:	8f 90       	pop	r8
    1c34:	08 95       	ret

00001c36 <xTaskCreate>:
    1c36:	2f 92       	push	r2
    1c38:	3f 92       	push	r3
    1c3a:	4f 92       	push	r4
    1c3c:	5f 92       	push	r5
    1c3e:	6f 92       	push	r6
    1c40:	7f 92       	push	r7
    1c42:	8f 92       	push	r8
    1c44:	9f 92       	push	r9
    1c46:	af 92       	push	r10
    1c48:	bf 92       	push	r11
    1c4a:	cf 92       	push	r12
    1c4c:	df 92       	push	r13
    1c4e:	ef 92       	push	r14
    1c50:	ff 92       	push	r15
    1c52:	0f 93       	push	r16
    1c54:	cf 93       	push	r28
    1c56:	df 93       	push	r29
    1c58:	3c 01       	movw	r6, r24
    1c5a:	1b 01       	movw	r2, r22
    1c5c:	4a 01       	movw	r8, r20
    1c5e:	29 01       	movw	r4, r18
    1c60:	ca 01       	movw	r24, r20
    1c62:	0e 94 dd 02 	call	0x5ba	; 0x5ba <pvPortMalloc>
    1c66:	6c 01       	movw	r12, r24
    1c68:	89 2b       	or	r24, r25
    1c6a:	71 f0       	breq	.+28     	; 0x1c88 <xTaskCreate+0x52>
    1c6c:	84 e3       	ldi	r24, 0x34	; 52
    1c6e:	90 e0       	ldi	r25, 0x00	; 0
    1c70:	0e 94 dd 02 	call	0x5ba	; 0x5ba <pvPortMalloc>
    1c74:	ec 01       	movw	r28, r24
    1c76:	89 2b       	or	r24, r25
    1c78:	19 f0       	breq	.+6      	; 0x1c80 <xTaskCreate+0x4a>
    1c7a:	dc 8e       	std	Y+28, r13	; 0x1c
    1c7c:	cb 8e       	std	Y+27, r12	; 0x1b
    1c7e:	06 c0       	rjmp	.+12     	; 0x1c8c <xTaskCreate+0x56>
    1c80:	c6 01       	movw	r24, r12
    1c82:	0e 94 86 03 	call	0x70c	; 0x70c <vPortFree>
    1c86:	02 c0       	rjmp	.+4      	; 0x1c8c <xTaskCreate+0x56>
    1c88:	c0 e0       	ldi	r28, 0x00	; 0
    1c8a:	d0 e0       	ldi	r29, 0x00	; 0
    1c8c:	20 97       	sbiw	r28, 0x00	; 0
    1c8e:	61 f0       	breq	.+24     	; 0x1ca8 <xTaskCreate+0x72>
    1c90:	a1 2c       	mov	r10, r1
    1c92:	b1 2c       	mov	r11, r1
    1c94:	6e 01       	movw	r12, r28
    1c96:	92 01       	movw	r18, r4
    1c98:	a4 01       	movw	r20, r8
    1c9a:	b1 01       	movw	r22, r2
    1c9c:	c3 01       	movw	r24, r6
    1c9e:	e7 dd       	rcall	.-1074   	; 0x186e <prvInitialiseNewTask>
    1ca0:	ce 01       	movw	r24, r28
    1ca2:	93 de       	rcall	.-730    	; 0x19ca <prvAddNewTaskToReadyList>
    1ca4:	81 e0       	ldi	r24, 0x01	; 1
    1ca6:	01 c0       	rjmp	.+2      	; 0x1caa <xTaskCreate+0x74>
    1ca8:	8f ef       	ldi	r24, 0xFF	; 255
    1caa:	df 91       	pop	r29
    1cac:	cf 91       	pop	r28
    1cae:	0f 91       	pop	r16
    1cb0:	ff 90       	pop	r15
    1cb2:	ef 90       	pop	r14
    1cb4:	df 90       	pop	r13
    1cb6:	cf 90       	pop	r12
    1cb8:	bf 90       	pop	r11
    1cba:	af 90       	pop	r10
    1cbc:	9f 90       	pop	r9
    1cbe:	8f 90       	pop	r8
    1cc0:	7f 90       	pop	r7
    1cc2:	6f 90       	pop	r6
    1cc4:	5f 90       	pop	r5
    1cc6:	4f 90       	pop	r4
    1cc8:	3f 90       	pop	r3
    1cca:	2f 90       	pop	r2
    1ccc:	08 95       	ret

00001cce <vTaskStartScheduler>:
    1cce:	ef 92       	push	r14
    1cd0:	ff 92       	push	r15
    1cd2:	0f 93       	push	r16
    1cd4:	0f 2e       	mov	r0, r31
    1cd6:	f7 e5       	ldi	r31, 0x57	; 87
    1cd8:	ef 2e       	mov	r14, r31
    1cda:	f6 e1       	ldi	r31, 0x16	; 22
    1cdc:	ff 2e       	mov	r15, r31
    1cde:	f0 2d       	mov	r31, r0
    1ce0:	00 e0       	ldi	r16, 0x00	; 0
    1ce2:	20 e0       	ldi	r18, 0x00	; 0
    1ce4:	30 e0       	ldi	r19, 0x00	; 0
    1ce6:	40 ec       	ldi	r20, 0xC0	; 192
    1ce8:	50 e0       	ldi	r21, 0x00	; 0
    1cea:	6f e6       	ldi	r22, 0x6F	; 111
    1cec:	72 e0       	ldi	r23, 0x02	; 2
    1cee:	8d ec       	ldi	r24, 0xCD	; 205
    1cf0:	90 e0       	ldi	r25, 0x00	; 0
    1cf2:	a1 df       	rcall	.-190    	; 0x1c36 <xTaskCreate>
    1cf4:	81 30       	cpi	r24, 0x01	; 1
    1cf6:	11 f4       	brne	.+4      	; 0x1cfc <vTaskStartScheduler+0x2e>
    1cf8:	0e 94 1a 19 	call	0x3234	; 0x3234 <xTimerCreateTimerTask>
    1cfc:	81 30       	cpi	r24, 0x01	; 1
    1cfe:	c9 f4       	brne	.+50     	; 0x1d32 <vTaskStartScheduler+0x64>
    1d00:	f8 94       	cli
    1d02:	8f ef       	ldi	r24, 0xFF	; 255
    1d04:	9f ef       	ldi	r25, 0xFF	; 255
    1d06:	dc 01       	movw	r26, r24
    1d08:	80 93 59 16 	sts	0x1659, r24	; 0x801659 <xNextTaskUnblockTime>
    1d0c:	90 93 5a 16 	sts	0x165A, r25	; 0x80165a <xNextTaskUnblockTime+0x1>
    1d10:	a0 93 5b 16 	sts	0x165B, r26	; 0x80165b <xNextTaskUnblockTime+0x2>
    1d14:	b0 93 5c 16 	sts	0x165C, r27	; 0x80165c <xNextTaskUnblockTime+0x3>
    1d18:	81 e0       	ldi	r24, 0x01	; 1
    1d1a:	80 93 64 16 	sts	0x1664, r24	; 0x801664 <xSchedulerRunning>
    1d1e:	10 92 66 16 	sts	0x1666, r1	; 0x801666 <xTickCount>
    1d22:	10 92 67 16 	sts	0x1667, r1	; 0x801667 <xTickCount+0x1>
    1d26:	10 92 68 16 	sts	0x1668, r1	; 0x801668 <xTickCount+0x2>
    1d2a:	10 92 69 16 	sts	0x1669, r1	; 0x801669 <xTickCount+0x3>
    1d2e:	0e 94 5f 04 	call	0x8be	; 0x8be <xPortStartScheduler>
    1d32:	80 91 06 02 	lds	r24, 0x0206	; 0x800206 <uxTopUsedPriority>
    1d36:	0f 91       	pop	r16
    1d38:	ff 90       	pop	r15
    1d3a:	ef 90       	pop	r14
    1d3c:	08 95       	ret

00001d3e <vTaskSuspendAll>:
    1d3e:	80 91 56 16 	lds	r24, 0x1656	; 0x801656 <uxSchedulerSuspended>
    1d42:	8f 5f       	subi	r24, 0xFF	; 255
    1d44:	80 93 56 16 	sts	0x1656, r24	; 0x801656 <uxSchedulerSuspended>
    1d48:	08 95       	ret

00001d4a <xTaskGetTickCount>:
    1d4a:	0f b6       	in	r0, 0x3f	; 63
    1d4c:	f8 94       	cli
    1d4e:	0f 92       	push	r0
    1d50:	60 91 66 16 	lds	r22, 0x1666	; 0x801666 <xTickCount>
    1d54:	70 91 67 16 	lds	r23, 0x1667	; 0x801667 <xTickCount+0x1>
    1d58:	80 91 68 16 	lds	r24, 0x1668	; 0x801668 <xTickCount+0x2>
    1d5c:	90 91 69 16 	lds	r25, 0x1669	; 0x801669 <xTickCount+0x3>
    1d60:	0f 90       	pop	r0
    1d62:	0f be       	out	0x3f, r0	; 63
    1d64:	08 95       	ret

00001d66 <xTaskIncrementTick>:
    1d66:	cf 92       	push	r12
    1d68:	df 92       	push	r13
    1d6a:	ef 92       	push	r14
    1d6c:	ff 92       	push	r15
    1d6e:	cf 93       	push	r28
    1d70:	df 93       	push	r29
    1d72:	80 91 56 16 	lds	r24, 0x1656	; 0x801656 <uxSchedulerSuspended>
    1d76:	81 11       	cpse	r24, r1
    1d78:	05 c1       	rjmp	.+522    	; 0x1f84 <xTaskIncrementTick+0x21e>
    1d7a:	c0 90 66 16 	lds	r12, 0x1666	; 0x801666 <xTickCount>
    1d7e:	d0 90 67 16 	lds	r13, 0x1667	; 0x801667 <xTickCount+0x1>
    1d82:	e0 90 68 16 	lds	r14, 0x1668	; 0x801668 <xTickCount+0x2>
    1d86:	f0 90 69 16 	lds	r15, 0x1669	; 0x801669 <xTickCount+0x3>
    1d8a:	8f ef       	ldi	r24, 0xFF	; 255
    1d8c:	c8 1a       	sub	r12, r24
    1d8e:	d8 0a       	sbc	r13, r24
    1d90:	e8 0a       	sbc	r14, r24
    1d92:	f8 0a       	sbc	r15, r24
    1d94:	c0 92 66 16 	sts	0x1666, r12	; 0x801666 <xTickCount>
    1d98:	d0 92 67 16 	sts	0x1667, r13	; 0x801667 <xTickCount+0x1>
    1d9c:	e0 92 68 16 	sts	0x1668, r14	; 0x801668 <xTickCount+0x2>
    1da0:	f0 92 69 16 	sts	0x1669, r15	; 0x801669 <xTickCount+0x3>
    1da4:	c1 14       	cp	r12, r1
    1da6:	d1 04       	cpc	r13, r1
    1da8:	e1 04       	cpc	r14, r1
    1daa:	f1 04       	cpc	r15, r1
    1dac:	b1 f4       	brne	.+44     	; 0x1dda <xTaskIncrementTick+0x74>
    1dae:	80 91 8f 16 	lds	r24, 0x168F	; 0x80168f <pxDelayedTaskList>
    1db2:	90 91 90 16 	lds	r25, 0x1690	; 0x801690 <pxDelayedTaskList+0x1>
    1db6:	20 91 8d 16 	lds	r18, 0x168D	; 0x80168d <pxOverflowDelayedTaskList>
    1dba:	30 91 8e 16 	lds	r19, 0x168E	; 0x80168e <pxOverflowDelayedTaskList+0x1>
    1dbe:	30 93 90 16 	sts	0x1690, r19	; 0x801690 <pxDelayedTaskList+0x1>
    1dc2:	20 93 8f 16 	sts	0x168F, r18	; 0x80168f <pxDelayedTaskList>
    1dc6:	90 93 8e 16 	sts	0x168E, r25	; 0x80168e <pxOverflowDelayedTaskList+0x1>
    1dca:	80 93 8d 16 	sts	0x168D, r24	; 0x80168d <pxOverflowDelayedTaskList>
    1dce:	80 91 5e 16 	lds	r24, 0x165E	; 0x80165e <xNumOfOverflows>
    1dd2:	8f 5f       	subi	r24, 0xFF	; 255
    1dd4:	80 93 5e 16 	sts	0x165E, r24	; 0x80165e <xNumOfOverflows>
    1dd8:	16 dd       	rcall	.-1492   	; 0x1806 <prvResetNextTaskUnblockTime>
    1dda:	80 91 59 16 	lds	r24, 0x1659	; 0x801659 <xNextTaskUnblockTime>
    1dde:	90 91 5a 16 	lds	r25, 0x165A	; 0x80165a <xNextTaskUnblockTime+0x1>
    1de2:	a0 91 5b 16 	lds	r26, 0x165B	; 0x80165b <xNextTaskUnblockTime+0x2>
    1de6:	b0 91 5c 16 	lds	r27, 0x165C	; 0x80165c <xNextTaskUnblockTime+0x3>
    1dea:	c8 16       	cp	r12, r24
    1dec:	d9 06       	cpc	r13, r25
    1dee:	ea 06       	cpc	r14, r26
    1df0:	fb 06       	cpc	r15, r27
    1df2:	20 f4       	brcc	.+8      	; 0x1dfc <xTaskIncrementTick+0x96>
    1df4:	80 e0       	ldi	r24, 0x00	; 0
    1df6:	b2 c0       	rjmp	.+356    	; 0x1f5c <xTaskIncrementTick+0x1f6>
    1df8:	81 e0       	ldi	r24, 0x01	; 1
    1dfa:	01 c0       	rjmp	.+2      	; 0x1dfe <xTaskIncrementTick+0x98>
    1dfc:	80 e0       	ldi	r24, 0x00	; 0
    1dfe:	e0 91 8f 16 	lds	r30, 0x168F	; 0x80168f <pxDelayedTaskList>
    1e02:	f0 91 90 16 	lds	r31, 0x1690	; 0x801690 <pxDelayedTaskList+0x1>
    1e06:	90 81       	ld	r25, Z
    1e08:	91 11       	cpse	r25, r1
    1e0a:	0c c0       	rjmp	.+24     	; 0x1e24 <xTaskIncrementTick+0xbe>
    1e0c:	4f ef       	ldi	r20, 0xFF	; 255
    1e0e:	5f ef       	ldi	r21, 0xFF	; 255
    1e10:	ba 01       	movw	r22, r20
    1e12:	40 93 59 16 	sts	0x1659, r20	; 0x801659 <xNextTaskUnblockTime>
    1e16:	50 93 5a 16 	sts	0x165A, r21	; 0x80165a <xNextTaskUnblockTime+0x1>
    1e1a:	60 93 5b 16 	sts	0x165B, r22	; 0x80165b <xNextTaskUnblockTime+0x2>
    1e1e:	70 93 5c 16 	sts	0x165C, r23	; 0x80165c <xNextTaskUnblockTime+0x3>
    1e22:	9c c0       	rjmp	.+312    	; 0x1f5c <xTaskIncrementTick+0x1f6>
    1e24:	e0 91 8f 16 	lds	r30, 0x168F	; 0x80168f <pxDelayedTaskList>
    1e28:	f0 91 90 16 	lds	r31, 0x1690	; 0x801690 <pxDelayedTaskList+0x1>
    1e2c:	07 80       	ldd	r0, Z+7	; 0x07
    1e2e:	f0 85       	ldd	r31, Z+8	; 0x08
    1e30:	e0 2d       	mov	r30, r0
    1e32:	00 84       	ldd	r0, Z+8	; 0x08
    1e34:	f1 85       	ldd	r31, Z+9	; 0x09
    1e36:	e0 2d       	mov	r30, r0
    1e38:	42 81       	ldd	r20, Z+2	; 0x02
    1e3a:	53 81       	ldd	r21, Z+3	; 0x03
    1e3c:	64 81       	ldd	r22, Z+4	; 0x04
    1e3e:	75 81       	ldd	r23, Z+5	; 0x05
    1e40:	c4 16       	cp	r12, r20
    1e42:	d5 06       	cpc	r13, r21
    1e44:	e6 06       	cpc	r14, r22
    1e46:	f7 06       	cpc	r15, r23
    1e48:	48 f4       	brcc	.+18     	; 0x1e5c <xTaskIncrementTick+0xf6>
    1e4a:	40 93 59 16 	sts	0x1659, r20	; 0x801659 <xNextTaskUnblockTime>
    1e4e:	50 93 5a 16 	sts	0x165A, r21	; 0x80165a <xNextTaskUnblockTime+0x1>
    1e52:	60 93 5b 16 	sts	0x165B, r22	; 0x80165b <xNextTaskUnblockTime+0x2>
    1e56:	70 93 5c 16 	sts	0x165C, r23	; 0x80165c <xNextTaskUnblockTime+0x3>
    1e5a:	80 c0       	rjmp	.+256    	; 0x1f5c <xTaskIncrementTick+0x1f6>
    1e5c:	a4 85       	ldd	r26, Z+12	; 0x0c
    1e5e:	b5 85       	ldd	r27, Z+13	; 0x0d
    1e60:	c6 81       	ldd	r28, Z+6	; 0x06
    1e62:	d7 81       	ldd	r29, Z+7	; 0x07
    1e64:	20 85       	ldd	r18, Z+8	; 0x08
    1e66:	31 85       	ldd	r19, Z+9	; 0x09
    1e68:	3f 83       	std	Y+7, r19	; 0x07
    1e6a:	2e 83       	std	Y+6, r18	; 0x06
    1e6c:	c0 85       	ldd	r28, Z+8	; 0x08
    1e6e:	d1 85       	ldd	r29, Z+9	; 0x09
    1e70:	26 81       	ldd	r18, Z+6	; 0x06
    1e72:	37 81       	ldd	r19, Z+7	; 0x07
    1e74:	3d 83       	std	Y+5, r19	; 0x05
    1e76:	2c 83       	std	Y+4, r18	; 0x04
    1e78:	11 96       	adiw	r26, 0x01	; 1
    1e7a:	4d 91       	ld	r20, X+
    1e7c:	5c 91       	ld	r21, X
    1e7e:	12 97       	sbiw	r26, 0x02	; 2
    1e80:	9f 01       	movw	r18, r30
    1e82:	2e 5f       	subi	r18, 0xFE	; 254
    1e84:	3f 4f       	sbci	r19, 0xFF	; 255
    1e86:	42 17       	cp	r20, r18
    1e88:	53 07       	cpc	r21, r19
    1e8a:	31 f4       	brne	.+12     	; 0x1e98 <xTaskIncrementTick+0x132>
    1e8c:	40 85       	ldd	r20, Z+8	; 0x08
    1e8e:	51 85       	ldd	r21, Z+9	; 0x09
    1e90:	12 96       	adiw	r26, 0x02	; 2
    1e92:	5c 93       	st	X, r21
    1e94:	4e 93       	st	-X, r20
    1e96:	11 97       	sbiw	r26, 0x01	; 1
    1e98:	15 86       	std	Z+13, r1	; 0x0d
    1e9a:	14 86       	std	Z+12, r1	; 0x0c
    1e9c:	9c 91       	ld	r25, X
    1e9e:	91 50       	subi	r25, 0x01	; 1
    1ea0:	9c 93       	st	X, r25
    1ea2:	a0 8d       	ldd	r26, Z+24	; 0x18
    1ea4:	b1 8d       	ldd	r27, Z+25	; 0x19
    1ea6:	10 97       	sbiw	r26, 0x00	; 0
    1ea8:	09 f1       	breq	.+66     	; 0x1eec <xTaskIncrementTick+0x186>
    1eaa:	c2 89       	ldd	r28, Z+18	; 0x12
    1eac:	d3 89       	ldd	r29, Z+19	; 0x13
    1eae:	44 89       	ldd	r20, Z+20	; 0x14
    1eb0:	55 89       	ldd	r21, Z+21	; 0x15
    1eb2:	5f 83       	std	Y+7, r21	; 0x07
    1eb4:	4e 83       	std	Y+6, r20	; 0x06
    1eb6:	c4 89       	ldd	r28, Z+20	; 0x14
    1eb8:	d5 89       	ldd	r29, Z+21	; 0x15
    1eba:	42 89       	ldd	r20, Z+18	; 0x12
    1ebc:	53 89       	ldd	r21, Z+19	; 0x13
    1ebe:	5d 83       	std	Y+5, r21	; 0x05
    1ec0:	4c 83       	std	Y+4, r20	; 0x04
    1ec2:	11 96       	adiw	r26, 0x01	; 1
    1ec4:	6d 91       	ld	r22, X+
    1ec6:	7c 91       	ld	r23, X
    1ec8:	12 97       	sbiw	r26, 0x02	; 2
    1eca:	af 01       	movw	r20, r30
    1ecc:	42 5f       	subi	r20, 0xF2	; 242
    1ece:	5f 4f       	sbci	r21, 0xFF	; 255
    1ed0:	64 17       	cp	r22, r20
    1ed2:	75 07       	cpc	r23, r21
    1ed4:	31 f4       	brne	.+12     	; 0x1ee2 <xTaskIncrementTick+0x17c>
    1ed6:	44 89       	ldd	r20, Z+20	; 0x14
    1ed8:	55 89       	ldd	r21, Z+21	; 0x15
    1eda:	12 96       	adiw	r26, 0x02	; 2
    1edc:	5c 93       	st	X, r21
    1ede:	4e 93       	st	-X, r20
    1ee0:	11 97       	sbiw	r26, 0x01	; 1
    1ee2:	11 8e       	std	Z+25, r1	; 0x19
    1ee4:	10 8e       	std	Z+24, r1	; 0x18
    1ee6:	9c 91       	ld	r25, X
    1ee8:	91 50       	subi	r25, 0x01	; 1
    1eea:	9c 93       	st	X, r25
    1eec:	a2 8d       	ldd	r26, Z+26	; 0x1a
    1eee:	90 91 65 16 	lds	r25, 0x1665	; 0x801665 <uxTopReadyPriority>
    1ef2:	9a 17       	cp	r25, r26
    1ef4:	10 f4       	brcc	.+4      	; 0x1efa <xTaskIncrementTick+0x194>
    1ef6:	a0 93 65 16 	sts	0x1665, r26	; 0x801665 <uxTopReadyPriority>
    1efa:	9b e0       	ldi	r25, 0x0B	; 11
    1efc:	9a 9f       	mul	r25, r26
    1efe:	d0 01       	movw	r26, r0
    1f00:	11 24       	eor	r1, r1
    1f02:	a9 55       	subi	r26, 0x59	; 89
    1f04:	b9 4e       	sbci	r27, 0xE9	; 233
    1f06:	11 96       	adiw	r26, 0x01	; 1
    1f08:	0d 90       	ld	r0, X+
    1f0a:	bc 91       	ld	r27, X
    1f0c:	a0 2d       	mov	r26, r0
    1f0e:	b7 83       	std	Z+7, r27	; 0x07
    1f10:	a6 83       	std	Z+6, r26	; 0x06
    1f12:	16 96       	adiw	r26, 0x06	; 6
    1f14:	4d 91       	ld	r20, X+
    1f16:	5c 91       	ld	r21, X
    1f18:	17 97       	sbiw	r26, 0x07	; 7
    1f1a:	51 87       	std	Z+9, r21	; 0x09
    1f1c:	40 87       	std	Z+8, r20	; 0x08
    1f1e:	16 96       	adiw	r26, 0x06	; 6
    1f20:	cd 91       	ld	r28, X+
    1f22:	dc 91       	ld	r29, X
    1f24:	17 97       	sbiw	r26, 0x07	; 7
    1f26:	3d 83       	std	Y+5, r19	; 0x05
    1f28:	2c 83       	std	Y+4, r18	; 0x04
    1f2a:	17 96       	adiw	r26, 0x07	; 7
    1f2c:	3c 93       	st	X, r19
    1f2e:	2e 93       	st	-X, r18
    1f30:	16 97       	sbiw	r26, 0x06	; 6
    1f32:	a2 8d       	ldd	r26, Z+26	; 0x1a
    1f34:	9a 9f       	mul	r25, r26
    1f36:	d0 01       	movw	r26, r0
    1f38:	11 24       	eor	r1, r1
    1f3a:	a9 55       	subi	r26, 0x59	; 89
    1f3c:	b9 4e       	sbci	r27, 0xE9	; 233
    1f3e:	b5 87       	std	Z+13, r27	; 0x0d
    1f40:	a4 87       	std	Z+12, r26	; 0x0c
    1f42:	9c 91       	ld	r25, X
    1f44:	9f 5f       	subi	r25, 0xFF	; 255
    1f46:	9c 93       	st	X, r25
    1f48:	22 8d       	ldd	r18, Z+26	; 0x1a
    1f4a:	e0 91 15 17 	lds	r30, 0x1715	; 0x801715 <pxCurrentTCB>
    1f4e:	f0 91 16 17 	lds	r31, 0x1716	; 0x801716 <pxCurrentTCB+0x1>
    1f52:	92 8d       	ldd	r25, Z+26	; 0x1a
    1f54:	29 17       	cp	r18, r25
    1f56:	08 f0       	brcs	.+2      	; 0x1f5a <xTaskIncrementTick+0x1f4>
    1f58:	4f cf       	rjmp	.-354    	; 0x1df8 <xTaskIncrementTick+0x92>
    1f5a:	51 cf       	rjmp	.-350    	; 0x1dfe <xTaskIncrementTick+0x98>
    1f5c:	e0 91 15 17 	lds	r30, 0x1715	; 0x801715 <pxCurrentTCB>
    1f60:	f0 91 16 17 	lds	r31, 0x1716	; 0x801716 <pxCurrentTCB+0x1>
    1f64:	e2 8d       	ldd	r30, Z+26	; 0x1a
    1f66:	9b e0       	ldi	r25, 0x0B	; 11
    1f68:	e9 9f       	mul	r30, r25
    1f6a:	f0 01       	movw	r30, r0
    1f6c:	11 24       	eor	r1, r1
    1f6e:	e9 55       	subi	r30, 0x59	; 89
    1f70:	f9 4e       	sbci	r31, 0xE9	; 233
    1f72:	90 81       	ld	r25, Z
    1f74:	92 30       	cpi	r25, 0x02	; 2
    1f76:	08 f0       	brcs	.+2      	; 0x1f7a <xTaskIncrementTick+0x214>
    1f78:	81 e0       	ldi	r24, 0x01	; 1
    1f7a:	90 91 5f 16 	lds	r25, 0x165F	; 0x80165f <xYieldPending>
    1f7e:	91 11       	cpse	r25, r1
    1f80:	16 c0       	rjmp	.+44     	; 0x1fae <xTaskIncrementTick+0x248>
    1f82:	16 c0       	rjmp	.+44     	; 0x1fb0 <xTaskIncrementTick+0x24a>
    1f84:	80 91 60 16 	lds	r24, 0x1660	; 0x801660 <xPendedTicks>
    1f88:	90 91 61 16 	lds	r25, 0x1661	; 0x801661 <xPendedTicks+0x1>
    1f8c:	a0 91 62 16 	lds	r26, 0x1662	; 0x801662 <xPendedTicks+0x2>
    1f90:	b0 91 63 16 	lds	r27, 0x1663	; 0x801663 <xPendedTicks+0x3>
    1f94:	01 96       	adiw	r24, 0x01	; 1
    1f96:	a1 1d       	adc	r26, r1
    1f98:	b1 1d       	adc	r27, r1
    1f9a:	80 93 60 16 	sts	0x1660, r24	; 0x801660 <xPendedTicks>
    1f9e:	90 93 61 16 	sts	0x1661, r25	; 0x801661 <xPendedTicks+0x1>
    1fa2:	a0 93 62 16 	sts	0x1662, r26	; 0x801662 <xPendedTicks+0x2>
    1fa6:	b0 93 63 16 	sts	0x1663, r27	; 0x801663 <xPendedTicks+0x3>
    1faa:	80 e0       	ldi	r24, 0x00	; 0
    1fac:	01 c0       	rjmp	.+2      	; 0x1fb0 <xTaskIncrementTick+0x24a>
    1fae:	81 e0       	ldi	r24, 0x01	; 1
    1fb0:	df 91       	pop	r29
    1fb2:	cf 91       	pop	r28
    1fb4:	ff 90       	pop	r15
    1fb6:	ef 90       	pop	r14
    1fb8:	df 90       	pop	r13
    1fba:	cf 90       	pop	r12
    1fbc:	08 95       	ret

00001fbe <xTaskResumeAll>:
    1fbe:	cf 92       	push	r12
    1fc0:	df 92       	push	r13
    1fc2:	ef 92       	push	r14
    1fc4:	ff 92       	push	r15
    1fc6:	cf 93       	push	r28
    1fc8:	df 93       	push	r29
    1fca:	0f b6       	in	r0, 0x3f	; 63
    1fcc:	f8 94       	cli
    1fce:	0f 92       	push	r0
    1fd0:	80 91 56 16 	lds	r24, 0x1656	; 0x801656 <uxSchedulerSuspended>
    1fd4:	81 50       	subi	r24, 0x01	; 1
    1fd6:	80 93 56 16 	sts	0x1656, r24	; 0x801656 <uxSchedulerSuspended>
    1fda:	80 91 56 16 	lds	r24, 0x1656	; 0x801656 <uxSchedulerSuspended>
    1fde:	81 11       	cpse	r24, r1
    1fe0:	be c0       	rjmp	.+380    	; 0x215e <__DATA_REGION_LENGTH__+0x15e>
    1fe2:	80 91 6a 16 	lds	r24, 0x166A	; 0x80166a <uxCurrentNumberOfTasks>
    1fe6:	81 11       	cpse	r24, r1
    1fe8:	88 c0       	rjmp	.+272    	; 0x20fa <__DATA_REGION_LENGTH__+0xfa>
    1fea:	bc c0       	rjmp	.+376    	; 0x2164 <__DATA_REGION_LENGTH__+0x164>
    1fec:	e0 91 89 16 	lds	r30, 0x1689	; 0x801689 <xPendingReadyList+0x7>
    1ff0:	f0 91 8a 16 	lds	r31, 0x168A	; 0x80168a <xPendingReadyList+0x8>
    1ff4:	00 84       	ldd	r0, Z+8	; 0x08
    1ff6:	f1 85       	ldd	r31, Z+9	; 0x09
    1ff8:	e0 2d       	mov	r30, r0
    1ffa:	a0 8d       	ldd	r26, Z+24	; 0x18
    1ffc:	b1 8d       	ldd	r27, Z+25	; 0x19
    1ffe:	c2 89       	ldd	r28, Z+18	; 0x12
    2000:	d3 89       	ldd	r29, Z+19	; 0x13
    2002:	84 89       	ldd	r24, Z+20	; 0x14
    2004:	95 89       	ldd	r25, Z+21	; 0x15
    2006:	9f 83       	std	Y+7, r25	; 0x07
    2008:	8e 83       	std	Y+6, r24	; 0x06
    200a:	c4 89       	ldd	r28, Z+20	; 0x14
    200c:	d5 89       	ldd	r29, Z+21	; 0x15
    200e:	82 89       	ldd	r24, Z+18	; 0x12
    2010:	93 89       	ldd	r25, Z+19	; 0x13
    2012:	9d 83       	std	Y+5, r25	; 0x05
    2014:	8c 83       	std	Y+4, r24	; 0x04
    2016:	11 96       	adiw	r26, 0x01	; 1
    2018:	2d 91       	ld	r18, X+
    201a:	3c 91       	ld	r19, X
    201c:	12 97       	sbiw	r26, 0x02	; 2
    201e:	cf 01       	movw	r24, r30
    2020:	0e 96       	adiw	r24, 0x0e	; 14
    2022:	28 17       	cp	r18, r24
    2024:	39 07       	cpc	r19, r25
    2026:	31 f4       	brne	.+12     	; 0x2034 <__DATA_REGION_LENGTH__+0x34>
    2028:	84 89       	ldd	r24, Z+20	; 0x14
    202a:	95 89       	ldd	r25, Z+21	; 0x15
    202c:	12 96       	adiw	r26, 0x02	; 2
    202e:	9c 93       	st	X, r25
    2030:	8e 93       	st	-X, r24
    2032:	11 97       	sbiw	r26, 0x01	; 1
    2034:	11 8e       	std	Z+25, r1	; 0x19
    2036:	10 8e       	std	Z+24, r1	; 0x18
    2038:	8c 91       	ld	r24, X
    203a:	81 50       	subi	r24, 0x01	; 1
    203c:	8c 93       	st	X, r24
    203e:	a4 85       	ldd	r26, Z+12	; 0x0c
    2040:	b5 85       	ldd	r27, Z+13	; 0x0d
    2042:	c6 81       	ldd	r28, Z+6	; 0x06
    2044:	d7 81       	ldd	r29, Z+7	; 0x07
    2046:	80 85       	ldd	r24, Z+8	; 0x08
    2048:	91 85       	ldd	r25, Z+9	; 0x09
    204a:	9f 83       	std	Y+7, r25	; 0x07
    204c:	8e 83       	std	Y+6, r24	; 0x06
    204e:	c0 85       	ldd	r28, Z+8	; 0x08
    2050:	d1 85       	ldd	r29, Z+9	; 0x09
    2052:	86 81       	ldd	r24, Z+6	; 0x06
    2054:	97 81       	ldd	r25, Z+7	; 0x07
    2056:	9d 83       	std	Y+5, r25	; 0x05
    2058:	8c 83       	std	Y+4, r24	; 0x04
    205a:	11 96       	adiw	r26, 0x01	; 1
    205c:	8d 91       	ld	r24, X+
    205e:	9c 91       	ld	r25, X
    2060:	12 97       	sbiw	r26, 0x02	; 2
    2062:	9f 01       	movw	r18, r30
    2064:	2e 5f       	subi	r18, 0xFE	; 254
    2066:	3f 4f       	sbci	r19, 0xFF	; 255
    2068:	82 17       	cp	r24, r18
    206a:	93 07       	cpc	r25, r19
    206c:	31 f4       	brne	.+12     	; 0x207a <__DATA_REGION_LENGTH__+0x7a>
    206e:	80 85       	ldd	r24, Z+8	; 0x08
    2070:	91 85       	ldd	r25, Z+9	; 0x09
    2072:	12 96       	adiw	r26, 0x02	; 2
    2074:	9c 93       	st	X, r25
    2076:	8e 93       	st	-X, r24
    2078:	11 97       	sbiw	r26, 0x01	; 1
    207a:	15 86       	std	Z+13, r1	; 0x0d
    207c:	14 86       	std	Z+12, r1	; 0x0c
    207e:	8c 91       	ld	r24, X
    2080:	81 50       	subi	r24, 0x01	; 1
    2082:	8c 93       	st	X, r24
    2084:	a2 8d       	ldd	r26, Z+26	; 0x1a
    2086:	80 91 65 16 	lds	r24, 0x1665	; 0x801665 <uxTopReadyPriority>
    208a:	8a 17       	cp	r24, r26
    208c:	10 f4       	brcc	.+4      	; 0x2092 <__DATA_REGION_LENGTH__+0x92>
    208e:	a0 93 65 16 	sts	0x1665, r26	; 0x801665 <uxTopReadyPriority>
    2092:	8b e0       	ldi	r24, 0x0B	; 11
    2094:	8a 9f       	mul	r24, r26
    2096:	d0 01       	movw	r26, r0
    2098:	11 24       	eor	r1, r1
    209a:	a9 55       	subi	r26, 0x59	; 89
    209c:	b9 4e       	sbci	r27, 0xE9	; 233
    209e:	11 96       	adiw	r26, 0x01	; 1
    20a0:	0d 90       	ld	r0, X+
    20a2:	bc 91       	ld	r27, X
    20a4:	a0 2d       	mov	r26, r0
    20a6:	b7 83       	std	Z+7, r27	; 0x07
    20a8:	a6 83       	std	Z+6, r26	; 0x06
    20aa:	16 96       	adiw	r26, 0x06	; 6
    20ac:	4d 91       	ld	r20, X+
    20ae:	5c 91       	ld	r21, X
    20b0:	17 97       	sbiw	r26, 0x07	; 7
    20b2:	51 87       	std	Z+9, r21	; 0x09
    20b4:	40 87       	std	Z+8, r20	; 0x08
    20b6:	16 96       	adiw	r26, 0x06	; 6
    20b8:	cd 91       	ld	r28, X+
    20ba:	dc 91       	ld	r29, X
    20bc:	17 97       	sbiw	r26, 0x07	; 7
    20be:	3d 83       	std	Y+5, r19	; 0x05
    20c0:	2c 83       	std	Y+4, r18	; 0x04
    20c2:	17 96       	adiw	r26, 0x07	; 7
    20c4:	3c 93       	st	X, r19
    20c6:	2e 93       	st	-X, r18
    20c8:	16 97       	sbiw	r26, 0x06	; 6
    20ca:	a2 8d       	ldd	r26, Z+26	; 0x1a
    20cc:	8a 9f       	mul	r24, r26
    20ce:	d0 01       	movw	r26, r0
    20d0:	11 24       	eor	r1, r1
    20d2:	a9 55       	subi	r26, 0x59	; 89
    20d4:	b9 4e       	sbci	r27, 0xE9	; 233
    20d6:	b5 87       	std	Z+13, r27	; 0x0d
    20d8:	a4 87       	std	Z+12, r26	; 0x0c
    20da:	8c 91       	ld	r24, X
    20dc:	8f 5f       	subi	r24, 0xFF	; 255
    20de:	8c 93       	st	X, r24
    20e0:	92 8d       	ldd	r25, Z+26	; 0x1a
    20e2:	a0 91 15 17 	lds	r26, 0x1715	; 0x801715 <pxCurrentTCB>
    20e6:	b0 91 16 17 	lds	r27, 0x1716	; 0x801716 <pxCurrentTCB+0x1>
    20ea:	5a 96       	adiw	r26, 0x1a	; 26
    20ec:	8c 91       	ld	r24, X
    20ee:	98 17       	cp	r25, r24
    20f0:	30 f0       	brcs	.+12     	; 0x20fe <__DATA_REGION_LENGTH__+0xfe>
    20f2:	81 e0       	ldi	r24, 0x01	; 1
    20f4:	80 93 5f 16 	sts	0x165F, r24	; 0x80165f <xYieldPending>
    20f8:	02 c0       	rjmp	.+4      	; 0x20fe <__DATA_REGION_LENGTH__+0xfe>
    20fa:	e0 e0       	ldi	r30, 0x00	; 0
    20fc:	f0 e0       	ldi	r31, 0x00	; 0
    20fe:	80 91 82 16 	lds	r24, 0x1682	; 0x801682 <xPendingReadyList>
    2102:	81 11       	cpse	r24, r1
    2104:	73 cf       	rjmp	.-282    	; 0x1fec <xTaskResumeAll+0x2e>
    2106:	ef 2b       	or	r30, r31
    2108:	09 f0       	breq	.+2      	; 0x210c <__DATA_REGION_LENGTH__+0x10c>
    210a:	7d db       	rcall	.-2310   	; 0x1806 <prvResetNextTaskUnblockTime>
    210c:	c0 90 60 16 	lds	r12, 0x1660	; 0x801660 <xPendedTicks>
    2110:	d0 90 61 16 	lds	r13, 0x1661	; 0x801661 <xPendedTicks+0x1>
    2114:	e0 90 62 16 	lds	r14, 0x1662	; 0x801662 <xPendedTicks+0x2>
    2118:	f0 90 63 16 	lds	r15, 0x1663	; 0x801663 <xPendedTicks+0x3>
    211c:	c1 14       	cp	r12, r1
    211e:	d1 04       	cpc	r13, r1
    2120:	e1 04       	cpc	r14, r1
    2122:	f1 04       	cpc	r15, r1
    2124:	a1 f0       	breq	.+40     	; 0x214e <__DATA_REGION_LENGTH__+0x14e>
    2126:	1f de       	rcall	.-962    	; 0x1d66 <xTaskIncrementTick>
    2128:	88 23       	and	r24, r24
    212a:	19 f0       	breq	.+6      	; 0x2132 <__DATA_REGION_LENGTH__+0x132>
    212c:	81 e0       	ldi	r24, 0x01	; 1
    212e:	80 93 5f 16 	sts	0x165F, r24	; 0x80165f <xYieldPending>
    2132:	81 e0       	ldi	r24, 0x01	; 1
    2134:	c8 1a       	sub	r12, r24
    2136:	d1 08       	sbc	r13, r1
    2138:	e1 08       	sbc	r14, r1
    213a:	f1 08       	sbc	r15, r1
    213c:	a1 f7       	brne	.-24     	; 0x2126 <__DATA_REGION_LENGTH__+0x126>
    213e:	10 92 60 16 	sts	0x1660, r1	; 0x801660 <xPendedTicks>
    2142:	10 92 61 16 	sts	0x1661, r1	; 0x801661 <xPendedTicks+0x1>
    2146:	10 92 62 16 	sts	0x1662, r1	; 0x801662 <xPendedTicks+0x2>
    214a:	10 92 63 16 	sts	0x1663, r1	; 0x801663 <xPendedTicks+0x3>
    214e:	80 91 5f 16 	lds	r24, 0x165F	; 0x80165f <xYieldPending>
    2152:	88 23       	and	r24, r24
    2154:	31 f0       	breq	.+12     	; 0x2162 <__DATA_REGION_LENGTH__+0x162>
    2156:	0e 94 91 04 	call	0x922	; 0x922 <vPortYield>
    215a:	81 e0       	ldi	r24, 0x01	; 1
    215c:	03 c0       	rjmp	.+6      	; 0x2164 <__DATA_REGION_LENGTH__+0x164>
    215e:	80 e0       	ldi	r24, 0x00	; 0
    2160:	01 c0       	rjmp	.+2      	; 0x2164 <__DATA_REGION_LENGTH__+0x164>
    2162:	80 e0       	ldi	r24, 0x00	; 0
    2164:	0f 90       	pop	r0
    2166:	0f be       	out	0x3f, r0	; 63
    2168:	df 91       	pop	r29
    216a:	cf 91       	pop	r28
    216c:	ff 90       	pop	r15
    216e:	ef 90       	pop	r14
    2170:	df 90       	pop	r13
    2172:	cf 90       	pop	r12
    2174:	08 95       	ret

00002176 <xTaskDelayUntil>:
    2176:	8f 92       	push	r8
    2178:	9f 92       	push	r9
    217a:	af 92       	push	r10
    217c:	bf 92       	push	r11
    217e:	cf 92       	push	r12
    2180:	df 92       	push	r13
    2182:	ef 92       	push	r14
    2184:	ff 92       	push	r15
    2186:	1f 93       	push	r17
    2188:	cf 93       	push	r28
    218a:	df 93       	push	r29
    218c:	ec 01       	movw	r28, r24
    218e:	6a 01       	movw	r12, r20
    2190:	7b 01       	movw	r14, r22
    2192:	d5 dd       	rcall	.-1110   	; 0x1d3e <vTaskSuspendAll>
    2194:	80 90 66 16 	lds	r8, 0x1666	; 0x801666 <xTickCount>
    2198:	90 90 67 16 	lds	r9, 0x1667	; 0x801667 <xTickCount+0x1>
    219c:	a0 90 68 16 	lds	r10, 0x1668	; 0x801668 <xTickCount+0x2>
    21a0:	b0 90 69 16 	lds	r11, 0x1669	; 0x801669 <xTickCount+0x3>
    21a4:	88 81       	ld	r24, Y
    21a6:	99 81       	ldd	r25, Y+1	; 0x01
    21a8:	aa 81       	ldd	r26, Y+2	; 0x02
    21aa:	bb 81       	ldd	r27, Y+3	; 0x03
    21ac:	ac 01       	movw	r20, r24
    21ae:	bd 01       	movw	r22, r26
    21b0:	4c 0d       	add	r20, r12
    21b2:	5d 1d       	adc	r21, r13
    21b4:	6e 1d       	adc	r22, r14
    21b6:	7f 1d       	adc	r23, r15
    21b8:	88 16       	cp	r8, r24
    21ba:	99 06       	cpc	r9, r25
    21bc:	aa 06       	cpc	r10, r26
    21be:	bb 06       	cpc	r11, r27
    21c0:	60 f4       	brcc	.+24     	; 0x21da <xTaskDelayUntil+0x64>
    21c2:	48 17       	cp	r20, r24
    21c4:	59 07       	cpc	r21, r25
    21c6:	6a 07       	cpc	r22, r26
    21c8:	7b 07       	cpc	r23, r27
    21ca:	98 f4       	brcc	.+38     	; 0x21f2 <xTaskDelayUntil+0x7c>
    21cc:	84 16       	cp	r8, r20
    21ce:	95 06       	cpc	r9, r21
    21d0:	a6 06       	cpc	r10, r22
    21d2:	b7 06       	cpc	r11, r23
    21d4:	80 f0       	brcs	.+32     	; 0x21f6 <xTaskDelayUntil+0x80>
    21d6:	10 e0       	ldi	r17, 0x00	; 0
    21d8:	13 c0       	rjmp	.+38     	; 0x2200 <__stack+0x1>
    21da:	48 17       	cp	r20, r24
    21dc:	59 07       	cpc	r21, r25
    21de:	6a 07       	cpc	r22, r26
    21e0:	7b 07       	cpc	r23, r27
    21e2:	58 f0       	brcs	.+22     	; 0x21fa <xTaskDelayUntil+0x84>
    21e4:	84 16       	cp	r8, r20
    21e6:	95 06       	cpc	r9, r21
    21e8:	a6 06       	cpc	r10, r22
    21ea:	b7 06       	cpc	r11, r23
    21ec:	40 f0       	brcs	.+16     	; 0x21fe <xTaskDelayUntil+0x88>
    21ee:	10 e0       	ldi	r17, 0x00	; 0
    21f0:	07 c0       	rjmp	.+14     	; 0x2200 <__stack+0x1>
    21f2:	10 e0       	ldi	r17, 0x00	; 0
    21f4:	05 c0       	rjmp	.+10     	; 0x2200 <__stack+0x1>
    21f6:	11 e0       	ldi	r17, 0x01	; 1
    21f8:	03 c0       	rjmp	.+6      	; 0x2200 <__stack+0x1>
    21fa:	11 e0       	ldi	r17, 0x01	; 1
    21fc:	01 c0       	rjmp	.+2      	; 0x2200 <__stack+0x1>
    21fe:	11 e0       	ldi	r17, 0x01	; 1
    2200:	48 83       	st	Y, r20
    2202:	59 83       	std	Y+1, r21	; 0x01
    2204:	6a 83       	std	Y+2, r22	; 0x02
    2206:	7b 83       	std	Y+3, r23	; 0x03
    2208:	11 23       	and	r17, r17
    220a:	41 f0       	breq	.+16     	; 0x221c <__stack+0x1d>
    220c:	cb 01       	movw	r24, r22
    220e:	ba 01       	movw	r22, r20
    2210:	68 19       	sub	r22, r8
    2212:	79 09       	sbc	r23, r9
    2214:	8a 09       	sbc	r24, r10
    2216:	9b 09       	sbc	r25, r11
    2218:	40 e0       	ldi	r20, 0x00	; 0
    221a:	6b dc       	rcall	.-1834   	; 0x1af2 <prvAddCurrentTaskToDelayedList>
    221c:	d0 de       	rcall	.-608    	; 0x1fbe <xTaskResumeAll>
    221e:	81 11       	cpse	r24, r1
    2220:	02 c0       	rjmp	.+4      	; 0x2226 <__stack+0x27>
    2222:	0e 94 91 04 	call	0x922	; 0x922 <vPortYield>
    2226:	81 2f       	mov	r24, r17
    2228:	df 91       	pop	r29
    222a:	cf 91       	pop	r28
    222c:	1f 91       	pop	r17
    222e:	ff 90       	pop	r15
    2230:	ef 90       	pop	r14
    2232:	df 90       	pop	r13
    2234:	cf 90       	pop	r12
    2236:	bf 90       	pop	r11
    2238:	af 90       	pop	r10
    223a:	9f 90       	pop	r9
    223c:	8f 90       	pop	r8
    223e:	08 95       	ret

00002240 <vTaskDelay>:
    2240:	cf 92       	push	r12
    2242:	df 92       	push	r13
    2244:	ef 92       	push	r14
    2246:	ff 92       	push	r15
    2248:	6b 01       	movw	r12, r22
    224a:	7c 01       	movw	r14, r24
    224c:	67 2b       	or	r22, r23
    224e:	68 2b       	or	r22, r24
    2250:	69 2b       	or	r22, r25
    2252:	39 f0       	breq	.+14     	; 0x2262 <vTaskDelay+0x22>
    2254:	74 dd       	rcall	.-1304   	; 0x1d3e <vTaskSuspendAll>
    2256:	40 e0       	ldi	r20, 0x00	; 0
    2258:	c7 01       	movw	r24, r14
    225a:	b6 01       	movw	r22, r12
    225c:	4a dc       	rcall	.-1900   	; 0x1af2 <prvAddCurrentTaskToDelayedList>
    225e:	af de       	rcall	.-674    	; 0x1fbe <xTaskResumeAll>
    2260:	01 c0       	rjmp	.+2      	; 0x2264 <vTaskDelay+0x24>
    2262:	80 e0       	ldi	r24, 0x00	; 0
    2264:	81 11       	cpse	r24, r1
    2266:	02 c0       	rjmp	.+4      	; 0x226c <vTaskDelay+0x2c>
    2268:	0e 94 91 04 	call	0x922	; 0x922 <vPortYield>
    226c:	ff 90       	pop	r15
    226e:	ef 90       	pop	r14
    2270:	df 90       	pop	r13
    2272:	cf 90       	pop	r12
    2274:	08 95       	ret

00002276 <vTaskSwitchContext>:
    2276:	80 91 56 16 	lds	r24, 0x1656	; 0x801656 <uxSchedulerSuspended>
    227a:	88 23       	and	r24, r24
    227c:	21 f0       	breq	.+8      	; 0x2286 <vTaskSwitchContext+0x10>
    227e:	81 e0       	ldi	r24, 0x01	; 1
    2280:	80 93 5f 16 	sts	0x165F, r24	; 0x80165f <xYieldPending>
    2284:	08 95       	ret
    2286:	10 92 5f 16 	sts	0x165F, r1	; 0x80165f <xYieldPending>
    228a:	e0 91 15 17 	lds	r30, 0x1715	; 0x801715 <pxCurrentTCB>
    228e:	f0 91 16 17 	lds	r31, 0x1716	; 0x801716 <pxCurrentTCB+0x1>
    2292:	20 81       	ld	r18, Z
    2294:	31 81       	ldd	r19, Z+1	; 0x01
    2296:	e0 91 15 17 	lds	r30, 0x1715	; 0x801715 <pxCurrentTCB>
    229a:	f0 91 16 17 	lds	r31, 0x1716	; 0x801716 <pxCurrentTCB+0x1>
    229e:	83 8d       	ldd	r24, Z+27	; 0x1b
    22a0:	94 8d       	ldd	r25, Z+28	; 0x1c
    22a2:	82 17       	cp	r24, r18
    22a4:	93 07       	cpc	r25, r19
    22a6:	60 f0       	brcs	.+24     	; 0x22c0 <vTaskSwitchContext+0x4a>
    22a8:	60 91 15 17 	lds	r22, 0x1715	; 0x801715 <pxCurrentTCB>
    22ac:	70 91 16 17 	lds	r23, 0x1716	; 0x801716 <pxCurrentTCB+0x1>
    22b0:	63 5e       	subi	r22, 0xE3	; 227
    22b2:	7f 4f       	sbci	r23, 0xFF	; 255
    22b4:	80 91 15 17 	lds	r24, 0x1715	; 0x801715 <pxCurrentTCB>
    22b8:	90 91 16 17 	lds	r25, 0x1716	; 0x801716 <pxCurrentTCB+0x1>
    22bc:	0e 94 a8 1b 	call	0x3750	; 0x3750 <vApplicationStackOverflowHook>
    22c0:	80 91 65 16 	lds	r24, 0x1665	; 0x801665 <uxTopReadyPriority>
    22c4:	01 c0       	rjmp	.+2      	; 0x22c8 <vTaskSwitchContext+0x52>
    22c6:	81 50       	subi	r24, 0x01	; 1
    22c8:	28 2f       	mov	r18, r24
    22ca:	30 e0       	ldi	r19, 0x00	; 0
    22cc:	9b e0       	ldi	r25, 0x0B	; 11
    22ce:	92 9f       	mul	r25, r18
    22d0:	f0 01       	movw	r30, r0
    22d2:	93 9f       	mul	r25, r19
    22d4:	f0 0d       	add	r31, r0
    22d6:	11 24       	eor	r1, r1
    22d8:	e9 55       	subi	r30, 0x59	; 89
    22da:	f9 4e       	sbci	r31, 0xE9	; 233
    22dc:	90 81       	ld	r25, Z
    22de:	99 23       	and	r25, r25
    22e0:	91 f3       	breq	.-28     	; 0x22c6 <vTaskSwitchContext+0x50>
    22e2:	9b e0       	ldi	r25, 0x0B	; 11
    22e4:	92 9f       	mul	r25, r18
    22e6:	a0 01       	movw	r20, r0
    22e8:	93 9f       	mul	r25, r19
    22ea:	50 0d       	add	r21, r0
    22ec:	11 24       	eor	r1, r1
    22ee:	df 01       	movw	r26, r30
    22f0:	01 80       	ldd	r0, Z+1	; 0x01
    22f2:	f2 81       	ldd	r31, Z+2	; 0x02
    22f4:	e0 2d       	mov	r30, r0
    22f6:	04 80       	ldd	r0, Z+4	; 0x04
    22f8:	f5 81       	ldd	r31, Z+5	; 0x05
    22fa:	e0 2d       	mov	r30, r0
    22fc:	12 96       	adiw	r26, 0x02	; 2
    22fe:	fc 93       	st	X, r31
    2300:	ee 93       	st	-X, r30
    2302:	11 97       	sbiw	r26, 0x01	; 1
    2304:	46 55       	subi	r20, 0x56	; 86
    2306:	59 4e       	sbci	r21, 0xE9	; 233
    2308:	e4 17       	cp	r30, r20
    230a:	f5 07       	cpc	r31, r21
    230c:	29 f4       	brne	.+10     	; 0x2318 <vTaskSwitchContext+0xa2>
    230e:	44 81       	ldd	r20, Z+4	; 0x04
    2310:	55 81       	ldd	r21, Z+5	; 0x05
    2312:	fd 01       	movw	r30, r26
    2314:	52 83       	std	Z+2, r21	; 0x02
    2316:	41 83       	std	Z+1, r20	; 0x01
    2318:	9b e0       	ldi	r25, 0x0B	; 11
    231a:	92 9f       	mul	r25, r18
    231c:	f0 01       	movw	r30, r0
    231e:	93 9f       	mul	r25, r19
    2320:	f0 0d       	add	r31, r0
    2322:	11 24       	eor	r1, r1
    2324:	e9 55       	subi	r30, 0x59	; 89
    2326:	f9 4e       	sbci	r31, 0xE9	; 233
    2328:	01 80       	ldd	r0, Z+1	; 0x01
    232a:	f2 81       	ldd	r31, Z+2	; 0x02
    232c:	e0 2d       	mov	r30, r0
    232e:	20 85       	ldd	r18, Z+8	; 0x08
    2330:	31 85       	ldd	r19, Z+9	; 0x09
    2332:	30 93 16 17 	sts	0x1716, r19	; 0x801716 <pxCurrentTCB+0x1>
    2336:	20 93 15 17 	sts	0x1715, r18	; 0x801715 <pxCurrentTCB>
    233a:	80 93 65 16 	sts	0x1665, r24	; 0x801665 <uxTopReadyPriority>
    233e:	08 95       	ret

00002340 <vTaskPlaceOnEventList>:
    2340:	cf 92       	push	r12
    2342:	df 92       	push	r13
    2344:	ef 92       	push	r14
    2346:	ff 92       	push	r15
    2348:	6a 01       	movw	r12, r20
    234a:	7b 01       	movw	r14, r22
    234c:	60 91 15 17 	lds	r22, 0x1715	; 0x801715 <pxCurrentTCB>
    2350:	70 91 16 17 	lds	r23, 0x1716	; 0x801716 <pxCurrentTCB+0x1>
    2354:	62 5f       	subi	r22, 0xF2	; 242
    2356:	7f 4f       	sbci	r23, 0xFF	; 255
    2358:	0e 94 d8 03 	call	0x7b0	; 0x7b0 <vListInsert>
    235c:	41 e0       	ldi	r20, 0x01	; 1
    235e:	c7 01       	movw	r24, r14
    2360:	b6 01       	movw	r22, r12
    2362:	c7 db       	rcall	.-2162   	; 0x1af2 <prvAddCurrentTaskToDelayedList>
    2364:	ff 90       	pop	r15
    2366:	ef 90       	pop	r14
    2368:	df 90       	pop	r13
    236a:	cf 90       	pop	r12
    236c:	08 95       	ret

0000236e <vTaskPlaceOnUnorderedEventList>:
    236e:	0f 93       	push	r16
    2370:	1f 93       	push	r17
    2372:	cf 93       	push	r28
    2374:	df 93       	push	r29
    2376:	fc 01       	movw	r30, r24
    2378:	a0 91 15 17 	lds	r26, 0x1715	; 0x801715 <pxCurrentTCB>
    237c:	b0 91 16 17 	lds	r27, 0x1716	; 0x801716 <pxCurrentTCB+0x1>
    2380:	70 68       	ori	r23, 0x80	; 128
    2382:	1e 96       	adiw	r26, 0x0e	; 14
    2384:	4d 93       	st	X+, r20
    2386:	5d 93       	st	X+, r21
    2388:	6d 93       	st	X+, r22
    238a:	7c 93       	st	X, r23
    238c:	51 97       	sbiw	r26, 0x11	; 17
    238e:	a1 81       	ldd	r26, Z+1	; 0x01
    2390:	b2 81       	ldd	r27, Z+2	; 0x02
    2392:	c0 91 15 17 	lds	r28, 0x1715	; 0x801715 <pxCurrentTCB>
    2396:	d0 91 16 17 	lds	r29, 0x1716	; 0x801716 <pxCurrentTCB+0x1>
    239a:	bb 8b       	std	Y+19, r27	; 0x13
    239c:	aa 8b       	std	Y+18, r26	; 0x12
    239e:	c0 91 15 17 	lds	r28, 0x1715	; 0x801715 <pxCurrentTCB>
    23a2:	d0 91 16 17 	lds	r29, 0x1716	; 0x801716 <pxCurrentTCB+0x1>
    23a6:	16 96       	adiw	r26, 0x06	; 6
    23a8:	8d 91       	ld	r24, X+
    23aa:	9c 91       	ld	r25, X
    23ac:	17 97       	sbiw	r26, 0x07	; 7
    23ae:	9d 8b       	std	Y+21, r25	; 0x15
    23b0:	8c 8b       	std	Y+20, r24	; 0x14
    23b2:	16 96       	adiw	r26, 0x06	; 6
    23b4:	cd 91       	ld	r28, X+
    23b6:	dc 91       	ld	r29, X
    23b8:	17 97       	sbiw	r26, 0x07	; 7
    23ba:	80 91 15 17 	lds	r24, 0x1715	; 0x801715 <pxCurrentTCB>
    23be:	90 91 16 17 	lds	r25, 0x1716	; 0x801716 <pxCurrentTCB+0x1>
    23c2:	0e 96       	adiw	r24, 0x0e	; 14
    23c4:	9d 83       	std	Y+5, r25	; 0x05
    23c6:	8c 83       	std	Y+4, r24	; 0x04
    23c8:	80 91 15 17 	lds	r24, 0x1715	; 0x801715 <pxCurrentTCB>
    23cc:	90 91 16 17 	lds	r25, 0x1716	; 0x801716 <pxCurrentTCB+0x1>
    23d0:	0e 96       	adiw	r24, 0x0e	; 14
    23d2:	17 96       	adiw	r26, 0x07	; 7
    23d4:	9c 93       	st	X, r25
    23d6:	8e 93       	st	-X, r24
    23d8:	16 97       	sbiw	r26, 0x06	; 6
    23da:	a0 91 15 17 	lds	r26, 0x1715	; 0x801715 <pxCurrentTCB>
    23de:	b0 91 16 17 	lds	r27, 0x1716	; 0x801716 <pxCurrentTCB+0x1>
    23e2:	59 96       	adiw	r26, 0x19	; 25
    23e4:	fc 93       	st	X, r31
    23e6:	ee 93       	st	-X, r30
    23e8:	58 97       	sbiw	r26, 0x18	; 24
    23ea:	80 81       	ld	r24, Z
    23ec:	8f 5f       	subi	r24, 0xFF	; 255
    23ee:	80 83       	st	Z, r24
    23f0:	41 e0       	ldi	r20, 0x01	; 1
    23f2:	c9 01       	movw	r24, r18
    23f4:	b8 01       	movw	r22, r16
    23f6:	7d db       	rcall	.-2310   	; 0x1af2 <prvAddCurrentTaskToDelayedList>
    23f8:	df 91       	pop	r29
    23fa:	cf 91       	pop	r28
    23fc:	1f 91       	pop	r17
    23fe:	0f 91       	pop	r16
    2400:	08 95       	ret

00002402 <vTaskPlaceOnEventListRestricted>:
    2402:	cf 93       	push	r28
    2404:	df 93       	push	r29
    2406:	fc 01       	movw	r30, r24
    2408:	cb 01       	movw	r24, r22
    240a:	ba 01       	movw	r22, r20
    240c:	a1 81       	ldd	r26, Z+1	; 0x01
    240e:	b2 81       	ldd	r27, Z+2	; 0x02
    2410:	c0 91 15 17 	lds	r28, 0x1715	; 0x801715 <pxCurrentTCB>
    2414:	d0 91 16 17 	lds	r29, 0x1716	; 0x801716 <pxCurrentTCB+0x1>
    2418:	bb 8b       	std	Y+19, r27	; 0x13
    241a:	aa 8b       	std	Y+18, r26	; 0x12
    241c:	c0 91 15 17 	lds	r28, 0x1715	; 0x801715 <pxCurrentTCB>
    2420:	d0 91 16 17 	lds	r29, 0x1716	; 0x801716 <pxCurrentTCB+0x1>
    2424:	16 96       	adiw	r26, 0x06	; 6
    2426:	4d 91       	ld	r20, X+
    2428:	5c 91       	ld	r21, X
    242a:	17 97       	sbiw	r26, 0x07	; 7
    242c:	5d 8b       	std	Y+21, r21	; 0x15
    242e:	4c 8b       	std	Y+20, r20	; 0x14
    2430:	16 96       	adiw	r26, 0x06	; 6
    2432:	cd 91       	ld	r28, X+
    2434:	dc 91       	ld	r29, X
    2436:	17 97       	sbiw	r26, 0x07	; 7
    2438:	40 91 15 17 	lds	r20, 0x1715	; 0x801715 <pxCurrentTCB>
    243c:	50 91 16 17 	lds	r21, 0x1716	; 0x801716 <pxCurrentTCB+0x1>
    2440:	42 5f       	subi	r20, 0xF2	; 242
    2442:	5f 4f       	sbci	r21, 0xFF	; 255
    2444:	5d 83       	std	Y+5, r21	; 0x05
    2446:	4c 83       	std	Y+4, r20	; 0x04
    2448:	40 91 15 17 	lds	r20, 0x1715	; 0x801715 <pxCurrentTCB>
    244c:	50 91 16 17 	lds	r21, 0x1716	; 0x801716 <pxCurrentTCB+0x1>
    2450:	42 5f       	subi	r20, 0xF2	; 242
    2452:	5f 4f       	sbci	r21, 0xFF	; 255
    2454:	17 96       	adiw	r26, 0x07	; 7
    2456:	5c 93       	st	X, r21
    2458:	4e 93       	st	-X, r20
    245a:	16 97       	sbiw	r26, 0x06	; 6
    245c:	a0 91 15 17 	lds	r26, 0x1715	; 0x801715 <pxCurrentTCB>
    2460:	b0 91 16 17 	lds	r27, 0x1716	; 0x801716 <pxCurrentTCB+0x1>
    2464:	59 96       	adiw	r26, 0x19	; 25
    2466:	fc 93       	st	X, r31
    2468:	ee 93       	st	-X, r30
    246a:	58 97       	sbiw	r26, 0x18	; 24
    246c:	30 81       	ld	r19, Z
    246e:	3f 5f       	subi	r19, 0xFF	; 255
    2470:	30 83       	st	Z, r19
    2472:	22 23       	and	r18, r18
    2474:	19 f0       	breq	.+6      	; 0x247c <vTaskPlaceOnEventListRestricted+0x7a>
    2476:	6f ef       	ldi	r22, 0xFF	; 255
    2478:	7f ef       	ldi	r23, 0xFF	; 255
    247a:	cb 01       	movw	r24, r22
    247c:	42 2f       	mov	r20, r18
    247e:	39 db       	rcall	.-2446   	; 0x1af2 <prvAddCurrentTaskToDelayedList>
    2480:	df 91       	pop	r29
    2482:	cf 91       	pop	r28
    2484:	08 95       	ret

00002486 <xTaskRemoveFromEventList>:
    2486:	cf 93       	push	r28
    2488:	df 93       	push	r29
    248a:	dc 01       	movw	r26, r24
    248c:	17 96       	adiw	r26, 0x07	; 7
    248e:	ed 91       	ld	r30, X+
    2490:	fc 91       	ld	r31, X
    2492:	18 97       	sbiw	r26, 0x08	; 8
    2494:	00 84       	ldd	r0, Z+8	; 0x08
    2496:	f1 85       	ldd	r31, Z+9	; 0x09
    2498:	e0 2d       	mov	r30, r0
    249a:	a0 8d       	ldd	r26, Z+24	; 0x18
    249c:	b1 8d       	ldd	r27, Z+25	; 0x19
    249e:	c2 89       	ldd	r28, Z+18	; 0x12
    24a0:	d3 89       	ldd	r29, Z+19	; 0x13
    24a2:	84 89       	ldd	r24, Z+20	; 0x14
    24a4:	95 89       	ldd	r25, Z+21	; 0x15
    24a6:	9f 83       	std	Y+7, r25	; 0x07
    24a8:	8e 83       	std	Y+6, r24	; 0x06
    24aa:	c4 89       	ldd	r28, Z+20	; 0x14
    24ac:	d5 89       	ldd	r29, Z+21	; 0x15
    24ae:	82 89       	ldd	r24, Z+18	; 0x12
    24b0:	93 89       	ldd	r25, Z+19	; 0x13
    24b2:	9d 83       	std	Y+5, r25	; 0x05
    24b4:	8c 83       	std	Y+4, r24	; 0x04
    24b6:	11 96       	adiw	r26, 0x01	; 1
    24b8:	8d 91       	ld	r24, X+
    24ba:	9c 91       	ld	r25, X
    24bc:	12 97       	sbiw	r26, 0x02	; 2
    24be:	9f 01       	movw	r18, r30
    24c0:	22 5f       	subi	r18, 0xF2	; 242
    24c2:	3f 4f       	sbci	r19, 0xFF	; 255
    24c4:	82 17       	cp	r24, r18
    24c6:	93 07       	cpc	r25, r19
    24c8:	31 f4       	brne	.+12     	; 0x24d6 <xTaskRemoveFromEventList+0x50>
    24ca:	84 89       	ldd	r24, Z+20	; 0x14
    24cc:	95 89       	ldd	r25, Z+21	; 0x15
    24ce:	12 96       	adiw	r26, 0x02	; 2
    24d0:	9c 93       	st	X, r25
    24d2:	8e 93       	st	-X, r24
    24d4:	11 97       	sbiw	r26, 0x01	; 1
    24d6:	11 8e       	std	Z+25, r1	; 0x19
    24d8:	10 8e       	std	Z+24, r1	; 0x18
    24da:	8c 91       	ld	r24, X
    24dc:	81 50       	subi	r24, 0x01	; 1
    24de:	8c 93       	st	X, r24
    24e0:	80 91 56 16 	lds	r24, 0x1656	; 0x801656 <uxSchedulerSuspended>
    24e4:	81 11       	cpse	r24, r1
    24e6:	52 c0       	rjmp	.+164    	; 0x258c <xTaskRemoveFromEventList+0x106>
    24e8:	a4 85       	ldd	r26, Z+12	; 0x0c
    24ea:	b5 85       	ldd	r27, Z+13	; 0x0d
    24ec:	c6 81       	ldd	r28, Z+6	; 0x06
    24ee:	d7 81       	ldd	r29, Z+7	; 0x07
    24f0:	80 85       	ldd	r24, Z+8	; 0x08
    24f2:	91 85       	ldd	r25, Z+9	; 0x09
    24f4:	9f 83       	std	Y+7, r25	; 0x07
    24f6:	8e 83       	std	Y+6, r24	; 0x06
    24f8:	c0 85       	ldd	r28, Z+8	; 0x08
    24fa:	d1 85       	ldd	r29, Z+9	; 0x09
    24fc:	86 81       	ldd	r24, Z+6	; 0x06
    24fe:	97 81       	ldd	r25, Z+7	; 0x07
    2500:	9d 83       	std	Y+5, r25	; 0x05
    2502:	8c 83       	std	Y+4, r24	; 0x04
    2504:	11 96       	adiw	r26, 0x01	; 1
    2506:	8d 91       	ld	r24, X+
    2508:	9c 91       	ld	r25, X
    250a:	12 97       	sbiw	r26, 0x02	; 2
    250c:	9f 01       	movw	r18, r30
    250e:	2e 5f       	subi	r18, 0xFE	; 254
    2510:	3f 4f       	sbci	r19, 0xFF	; 255
    2512:	82 17       	cp	r24, r18
    2514:	93 07       	cpc	r25, r19
    2516:	31 f4       	brne	.+12     	; 0x2524 <xTaskRemoveFromEventList+0x9e>
    2518:	80 85       	ldd	r24, Z+8	; 0x08
    251a:	91 85       	ldd	r25, Z+9	; 0x09
    251c:	12 96       	adiw	r26, 0x02	; 2
    251e:	9c 93       	st	X, r25
    2520:	8e 93       	st	-X, r24
    2522:	11 97       	sbiw	r26, 0x01	; 1
    2524:	15 86       	std	Z+13, r1	; 0x0d
    2526:	14 86       	std	Z+12, r1	; 0x0c
    2528:	8c 91       	ld	r24, X
    252a:	81 50       	subi	r24, 0x01	; 1
    252c:	8c 93       	st	X, r24
    252e:	a2 8d       	ldd	r26, Z+26	; 0x1a
    2530:	80 91 65 16 	lds	r24, 0x1665	; 0x801665 <uxTopReadyPriority>
    2534:	8a 17       	cp	r24, r26
    2536:	10 f4       	brcc	.+4      	; 0x253c <xTaskRemoveFromEventList+0xb6>
    2538:	a0 93 65 16 	sts	0x1665, r26	; 0x801665 <uxTopReadyPriority>
    253c:	8b e0       	ldi	r24, 0x0B	; 11
    253e:	8a 9f       	mul	r24, r26
    2540:	d0 01       	movw	r26, r0
    2542:	11 24       	eor	r1, r1
    2544:	a9 55       	subi	r26, 0x59	; 89
    2546:	b9 4e       	sbci	r27, 0xE9	; 233
    2548:	11 96       	adiw	r26, 0x01	; 1
    254a:	0d 90       	ld	r0, X+
    254c:	bc 91       	ld	r27, X
    254e:	a0 2d       	mov	r26, r0
    2550:	b7 83       	std	Z+7, r27	; 0x07
    2552:	a6 83       	std	Z+6, r26	; 0x06
    2554:	16 96       	adiw	r26, 0x06	; 6
    2556:	4d 91       	ld	r20, X+
    2558:	5c 91       	ld	r21, X
    255a:	17 97       	sbiw	r26, 0x07	; 7
    255c:	51 87       	std	Z+9, r21	; 0x09
    255e:	40 87       	std	Z+8, r20	; 0x08
    2560:	16 96       	adiw	r26, 0x06	; 6
    2562:	cd 91       	ld	r28, X+
    2564:	dc 91       	ld	r29, X
    2566:	17 97       	sbiw	r26, 0x07	; 7
    2568:	3d 83       	std	Y+5, r19	; 0x05
    256a:	2c 83       	std	Y+4, r18	; 0x04
    256c:	17 96       	adiw	r26, 0x07	; 7
    256e:	3c 93       	st	X, r19
    2570:	2e 93       	st	-X, r18
    2572:	16 97       	sbiw	r26, 0x06	; 6
    2574:	a2 8d       	ldd	r26, Z+26	; 0x1a
    2576:	8a 9f       	mul	r24, r26
    2578:	d0 01       	movw	r26, r0
    257a:	11 24       	eor	r1, r1
    257c:	a9 55       	subi	r26, 0x59	; 89
    257e:	b9 4e       	sbci	r27, 0xE9	; 233
    2580:	b5 87       	std	Z+13, r27	; 0x0d
    2582:	a4 87       	std	Z+12, r26	; 0x0c
    2584:	8c 91       	ld	r24, X
    2586:	8f 5f       	subi	r24, 0xFF	; 255
    2588:	8c 93       	st	X, r24
    258a:	1c c0       	rjmp	.+56     	; 0x25c4 <xTaskRemoveFromEventList+0x13e>
    258c:	42 e8       	ldi	r20, 0x82	; 130
    258e:	56 e1       	ldi	r21, 0x16	; 22
    2590:	da 01       	movw	r26, r20
    2592:	11 96       	adiw	r26, 0x01	; 1
    2594:	cd 91       	ld	r28, X+
    2596:	dc 91       	ld	r29, X
    2598:	12 97       	sbiw	r26, 0x02	; 2
    259a:	d3 8b       	std	Z+19, r29	; 0x13
    259c:	c2 8b       	std	Z+18, r28	; 0x12
    259e:	8e 81       	ldd	r24, Y+6	; 0x06
    25a0:	9f 81       	ldd	r25, Y+7	; 0x07
    25a2:	95 8b       	std	Z+21, r25	; 0x15
    25a4:	84 8b       	std	Z+20, r24	; 0x14
    25a6:	8e 81       	ldd	r24, Y+6	; 0x06
    25a8:	9f 81       	ldd	r25, Y+7	; 0x07
    25aa:	dc 01       	movw	r26, r24
    25ac:	15 96       	adiw	r26, 0x05	; 5
    25ae:	3c 93       	st	X, r19
    25b0:	2e 93       	st	-X, r18
    25b2:	14 97       	sbiw	r26, 0x04	; 4
    25b4:	3f 83       	std	Y+7, r19	; 0x07
    25b6:	2e 83       	std	Y+6, r18	; 0x06
    25b8:	51 8f       	std	Z+25, r21	; 0x19
    25ba:	40 8f       	std	Z+24, r20	; 0x18
    25bc:	da 01       	movw	r26, r20
    25be:	8c 91       	ld	r24, X
    25c0:	8f 5f       	subi	r24, 0xFF	; 255
    25c2:	8c 93       	st	X, r24
    25c4:	92 8d       	ldd	r25, Z+26	; 0x1a
    25c6:	e0 91 15 17 	lds	r30, 0x1715	; 0x801715 <pxCurrentTCB>
    25ca:	f0 91 16 17 	lds	r31, 0x1716	; 0x801716 <pxCurrentTCB+0x1>
    25ce:	82 8d       	ldd	r24, Z+26	; 0x1a
    25d0:	89 17       	cp	r24, r25
    25d2:	20 f4       	brcc	.+8      	; 0x25dc <xTaskRemoveFromEventList+0x156>
    25d4:	81 e0       	ldi	r24, 0x01	; 1
    25d6:	80 93 5f 16 	sts	0x165F, r24	; 0x80165f <xYieldPending>
    25da:	01 c0       	rjmp	.+2      	; 0x25de <xTaskRemoveFromEventList+0x158>
    25dc:	80 e0       	ldi	r24, 0x00	; 0
    25de:	df 91       	pop	r29
    25e0:	cf 91       	pop	r28
    25e2:	08 95       	ret

000025e4 <vTaskRemoveFromUnorderedEventList>:
    25e4:	cf 93       	push	r28
    25e6:	df 93       	push	r29
    25e8:	dc 01       	movw	r26, r24
    25ea:	70 68       	ori	r23, 0x80	; 128
    25ec:	4d 93       	st	X+, r20
    25ee:	5d 93       	st	X+, r21
    25f0:	6d 93       	st	X+, r22
    25f2:	7c 93       	st	X, r23
    25f4:	13 97       	sbiw	r26, 0x03	; 3
    25f6:	18 96       	adiw	r26, 0x08	; 8
    25f8:	ed 91       	ld	r30, X+
    25fa:	fc 91       	ld	r31, X
    25fc:	19 97       	sbiw	r26, 0x09	; 9
    25fe:	1a 96       	adiw	r26, 0x0a	; 10
    2600:	4d 91       	ld	r20, X+
    2602:	5c 91       	ld	r21, X
    2604:	1b 97       	sbiw	r26, 0x0b	; 11
    2606:	14 96       	adiw	r26, 0x04	; 4
    2608:	8d 91       	ld	r24, X+
    260a:	9c 91       	ld	r25, X
    260c:	15 97       	sbiw	r26, 0x05	; 5
    260e:	16 96       	adiw	r26, 0x06	; 6
    2610:	2d 91       	ld	r18, X+
    2612:	3c 91       	ld	r19, X
    2614:	17 97       	sbiw	r26, 0x07	; 7
    2616:	ec 01       	movw	r28, r24
    2618:	3f 83       	std	Y+7, r19	; 0x07
    261a:	2e 83       	std	Y+6, r18	; 0x06
    261c:	16 96       	adiw	r26, 0x06	; 6
    261e:	8d 91       	ld	r24, X+
    2620:	9c 91       	ld	r25, X
    2622:	17 97       	sbiw	r26, 0x07	; 7
    2624:	14 96       	adiw	r26, 0x04	; 4
    2626:	2d 91       	ld	r18, X+
    2628:	3c 91       	ld	r19, X
    262a:	15 97       	sbiw	r26, 0x05	; 5
    262c:	ec 01       	movw	r28, r24
    262e:	3d 83       	std	Y+5, r19	; 0x05
    2630:	2c 83       	std	Y+4, r18	; 0x04
    2632:	ea 01       	movw	r28, r20
    2634:	89 81       	ldd	r24, Y+1	; 0x01
    2636:	9a 81       	ldd	r25, Y+2	; 0x02
    2638:	a8 17       	cp	r26, r24
    263a:	b9 07       	cpc	r27, r25
    263c:	31 f4       	brne	.+12     	; 0x264a <vTaskRemoveFromUnorderedEventList+0x66>
    263e:	16 96       	adiw	r26, 0x06	; 6
    2640:	8d 91       	ld	r24, X+
    2642:	9c 91       	ld	r25, X
    2644:	17 97       	sbiw	r26, 0x07	; 7
    2646:	9a 83       	std	Y+2, r25	; 0x02
    2648:	89 83       	std	Y+1, r24	; 0x01
    264a:	1b 96       	adiw	r26, 0x0b	; 11
    264c:	1c 92       	st	X, r1
    264e:	1e 92       	st	-X, r1
    2650:	1a 97       	sbiw	r26, 0x0a	; 10
    2652:	da 01       	movw	r26, r20
    2654:	8c 91       	ld	r24, X
    2656:	81 50       	subi	r24, 0x01	; 1
    2658:	8c 93       	st	X, r24
    265a:	a4 85       	ldd	r26, Z+12	; 0x0c
    265c:	b5 85       	ldd	r27, Z+13	; 0x0d
    265e:	c6 81       	ldd	r28, Z+6	; 0x06
    2660:	d7 81       	ldd	r29, Z+7	; 0x07
    2662:	80 85       	ldd	r24, Z+8	; 0x08
    2664:	91 85       	ldd	r25, Z+9	; 0x09
    2666:	9f 83       	std	Y+7, r25	; 0x07
    2668:	8e 83       	std	Y+6, r24	; 0x06
    266a:	c0 85       	ldd	r28, Z+8	; 0x08
    266c:	d1 85       	ldd	r29, Z+9	; 0x09
    266e:	86 81       	ldd	r24, Z+6	; 0x06
    2670:	97 81       	ldd	r25, Z+7	; 0x07
    2672:	9d 83       	std	Y+5, r25	; 0x05
    2674:	8c 83       	std	Y+4, r24	; 0x04
    2676:	11 96       	adiw	r26, 0x01	; 1
    2678:	8d 91       	ld	r24, X+
    267a:	9c 91       	ld	r25, X
    267c:	12 97       	sbiw	r26, 0x02	; 2
    267e:	9f 01       	movw	r18, r30
    2680:	2e 5f       	subi	r18, 0xFE	; 254
    2682:	3f 4f       	sbci	r19, 0xFF	; 255
    2684:	82 17       	cp	r24, r18
    2686:	93 07       	cpc	r25, r19
    2688:	31 f4       	brne	.+12     	; 0x2696 <vTaskRemoveFromUnorderedEventList+0xb2>
    268a:	80 85       	ldd	r24, Z+8	; 0x08
    268c:	91 85       	ldd	r25, Z+9	; 0x09
    268e:	12 96       	adiw	r26, 0x02	; 2
    2690:	9c 93       	st	X, r25
    2692:	8e 93       	st	-X, r24
    2694:	11 97       	sbiw	r26, 0x01	; 1
    2696:	15 86       	std	Z+13, r1	; 0x0d
    2698:	14 86       	std	Z+12, r1	; 0x0c
    269a:	8c 91       	ld	r24, X
    269c:	81 50       	subi	r24, 0x01	; 1
    269e:	8c 93       	st	X, r24
    26a0:	a2 8d       	ldd	r26, Z+26	; 0x1a
    26a2:	80 91 65 16 	lds	r24, 0x1665	; 0x801665 <uxTopReadyPriority>
    26a6:	8a 17       	cp	r24, r26
    26a8:	10 f4       	brcc	.+4      	; 0x26ae <vTaskRemoveFromUnorderedEventList+0xca>
    26aa:	a0 93 65 16 	sts	0x1665, r26	; 0x801665 <uxTopReadyPriority>
    26ae:	8b e0       	ldi	r24, 0x0B	; 11
    26b0:	8a 9f       	mul	r24, r26
    26b2:	d0 01       	movw	r26, r0
    26b4:	11 24       	eor	r1, r1
    26b6:	a9 55       	subi	r26, 0x59	; 89
    26b8:	b9 4e       	sbci	r27, 0xE9	; 233
    26ba:	11 96       	adiw	r26, 0x01	; 1
    26bc:	0d 90       	ld	r0, X+
    26be:	bc 91       	ld	r27, X
    26c0:	a0 2d       	mov	r26, r0
    26c2:	b7 83       	std	Z+7, r27	; 0x07
    26c4:	a6 83       	std	Z+6, r26	; 0x06
    26c6:	16 96       	adiw	r26, 0x06	; 6
    26c8:	4d 91       	ld	r20, X+
    26ca:	5c 91       	ld	r21, X
    26cc:	17 97       	sbiw	r26, 0x07	; 7
    26ce:	51 87       	std	Z+9, r21	; 0x09
    26d0:	40 87       	std	Z+8, r20	; 0x08
    26d2:	16 96       	adiw	r26, 0x06	; 6
    26d4:	cd 91       	ld	r28, X+
    26d6:	dc 91       	ld	r29, X
    26d8:	17 97       	sbiw	r26, 0x07	; 7
    26da:	3d 83       	std	Y+5, r19	; 0x05
    26dc:	2c 83       	std	Y+4, r18	; 0x04
    26de:	17 96       	adiw	r26, 0x07	; 7
    26e0:	3c 93       	st	X, r19
    26e2:	2e 93       	st	-X, r18
    26e4:	16 97       	sbiw	r26, 0x06	; 6
    26e6:	a2 8d       	ldd	r26, Z+26	; 0x1a
    26e8:	8a 9f       	mul	r24, r26
    26ea:	d0 01       	movw	r26, r0
    26ec:	11 24       	eor	r1, r1
    26ee:	a9 55       	subi	r26, 0x59	; 89
    26f0:	b9 4e       	sbci	r27, 0xE9	; 233
    26f2:	b5 87       	std	Z+13, r27	; 0x0d
    26f4:	a4 87       	std	Z+12, r26	; 0x0c
    26f6:	8c 91       	ld	r24, X
    26f8:	8f 5f       	subi	r24, 0xFF	; 255
    26fa:	8c 93       	st	X, r24
    26fc:	92 8d       	ldd	r25, Z+26	; 0x1a
    26fe:	e0 91 15 17 	lds	r30, 0x1715	; 0x801715 <pxCurrentTCB>
    2702:	f0 91 16 17 	lds	r31, 0x1716	; 0x801716 <pxCurrentTCB+0x1>
    2706:	82 8d       	ldd	r24, Z+26	; 0x1a
    2708:	89 17       	cp	r24, r25
    270a:	18 f4       	brcc	.+6      	; 0x2712 <vTaskRemoveFromUnorderedEventList+0x12e>
    270c:	81 e0       	ldi	r24, 0x01	; 1
    270e:	80 93 5f 16 	sts	0x165F, r24	; 0x80165f <xYieldPending>
    2712:	df 91       	pop	r29
    2714:	cf 91       	pop	r28
    2716:	08 95       	ret

00002718 <vTaskSetTimeOutState>:
    2718:	0f b6       	in	r0, 0x3f	; 63
    271a:	f8 94       	cli
    271c:	0f 92       	push	r0
    271e:	20 91 5e 16 	lds	r18, 0x165E	; 0x80165e <xNumOfOverflows>
    2722:	fc 01       	movw	r30, r24
    2724:	20 83       	st	Z, r18
    2726:	40 91 66 16 	lds	r20, 0x1666	; 0x801666 <xTickCount>
    272a:	50 91 67 16 	lds	r21, 0x1667	; 0x801667 <xTickCount+0x1>
    272e:	60 91 68 16 	lds	r22, 0x1668	; 0x801668 <xTickCount+0x2>
    2732:	70 91 69 16 	lds	r23, 0x1669	; 0x801669 <xTickCount+0x3>
    2736:	41 83       	std	Z+1, r20	; 0x01
    2738:	52 83       	std	Z+2, r21	; 0x02
    273a:	63 83       	std	Z+3, r22	; 0x03
    273c:	74 83       	std	Z+4, r23	; 0x04
    273e:	0f 90       	pop	r0
    2740:	0f be       	out	0x3f, r0	; 63
    2742:	08 95       	ret

00002744 <vTaskInternalSetTimeOutState>:
    2744:	20 91 5e 16 	lds	r18, 0x165E	; 0x80165e <xNumOfOverflows>
    2748:	fc 01       	movw	r30, r24
    274a:	20 83       	st	Z, r18
    274c:	40 91 66 16 	lds	r20, 0x1666	; 0x801666 <xTickCount>
    2750:	50 91 67 16 	lds	r21, 0x1667	; 0x801667 <xTickCount+0x1>
    2754:	60 91 68 16 	lds	r22, 0x1668	; 0x801668 <xTickCount+0x2>
    2758:	70 91 69 16 	lds	r23, 0x1669	; 0x801669 <xTickCount+0x3>
    275c:	41 83       	std	Z+1, r20	; 0x01
    275e:	52 83       	std	Z+2, r21	; 0x02
    2760:	63 83       	std	Z+3, r22	; 0x03
    2762:	74 83       	std	Z+4, r23	; 0x04
    2764:	08 95       	ret

00002766 <xTaskCheckForTimeOut>:
    2766:	8f 92       	push	r8
    2768:	9f 92       	push	r9
    276a:	af 92       	push	r10
    276c:	bf 92       	push	r11
    276e:	cf 92       	push	r12
    2770:	df 92       	push	r13
    2772:	ef 92       	push	r14
    2774:	ff 92       	push	r15
    2776:	0f 93       	push	r16
    2778:	1f 93       	push	r17
    277a:	cf 93       	push	r28
    277c:	df 93       	push	r29
    277e:	fb 01       	movw	r30, r22
    2780:	0f b6       	in	r0, 0x3f	; 63
    2782:	f8 94       	cli
    2784:	0f 92       	push	r0
    2786:	c0 90 66 16 	lds	r12, 0x1666	; 0x801666 <xTickCount>
    278a:	d0 90 67 16 	lds	r13, 0x1667	; 0x801667 <xTickCount+0x1>
    278e:	e0 90 68 16 	lds	r14, 0x1668	; 0x801668 <xTickCount+0x2>
    2792:	f0 90 69 16 	lds	r15, 0x1669	; 0x801669 <xTickCount+0x3>
    2796:	dc 01       	movw	r26, r24
    2798:	11 96       	adiw	r26, 0x01	; 1
    279a:	0d 91       	ld	r16, X+
    279c:	1d 91       	ld	r17, X+
    279e:	2d 91       	ld	r18, X+
    27a0:	3c 91       	ld	r19, X
    27a2:	14 97       	sbiw	r26, 0x04	; 4
    27a4:	46 01       	movw	r8, r12
    27a6:	57 01       	movw	r10, r14
    27a8:	80 1a       	sub	r8, r16
    27aa:	91 0a       	sbc	r9, r17
    27ac:	a2 0a       	sbc	r10, r18
    27ae:	b3 0a       	sbc	r11, r19
    27b0:	40 81       	ld	r20, Z
    27b2:	51 81       	ldd	r21, Z+1	; 0x01
    27b4:	62 81       	ldd	r22, Z+2	; 0x02
    27b6:	73 81       	ldd	r23, Z+3	; 0x03
    27b8:	4f 3f       	cpi	r20, 0xFF	; 255
    27ba:	bf ef       	ldi	r27, 0xFF	; 255
    27bc:	5b 07       	cpc	r21, r27
    27be:	6b 07       	cpc	r22, r27
    27c0:	7b 07       	cpc	r23, r27
    27c2:	39 f1       	breq	.+78     	; 0x2812 <xTaskCheckForTimeOut+0xac>
    27c4:	ec 01       	movw	r28, r24
    27c6:	b8 81       	ld	r27, Y
    27c8:	a0 91 5e 16 	lds	r26, 0x165E	; 0x80165e <xNumOfOverflows>
    27cc:	ba 17       	cp	r27, r26
    27ce:	59 f0       	breq	.+22     	; 0x27e6 <xTaskCheckForTimeOut+0x80>
    27d0:	c0 16       	cp	r12, r16
    27d2:	d1 06       	cpc	r13, r17
    27d4:	e2 06       	cpc	r14, r18
    27d6:	f3 06       	cpc	r15, r19
    27d8:	30 f0       	brcs	.+12     	; 0x27e6 <xTaskCheckForTimeOut+0x80>
    27da:	10 82       	st	Z, r1
    27dc:	11 82       	std	Z+1, r1	; 0x01
    27de:	12 82       	std	Z+2, r1	; 0x02
    27e0:	13 82       	std	Z+3, r1	; 0x03
    27e2:	81 e0       	ldi	r24, 0x01	; 1
    27e4:	17 c0       	rjmp	.+46     	; 0x2814 <xTaskCheckForTimeOut+0xae>
    27e6:	84 16       	cp	r8, r20
    27e8:	95 06       	cpc	r9, r21
    27ea:	a6 06       	cpc	r10, r22
    27ec:	b7 06       	cpc	r11, r23
    27ee:	58 f4       	brcc	.+22     	; 0x2806 <xTaskCheckForTimeOut+0xa0>
    27f0:	48 19       	sub	r20, r8
    27f2:	59 09       	sbc	r21, r9
    27f4:	6a 09       	sbc	r22, r10
    27f6:	7b 09       	sbc	r23, r11
    27f8:	40 83       	st	Z, r20
    27fa:	51 83       	std	Z+1, r21	; 0x01
    27fc:	62 83       	std	Z+2, r22	; 0x02
    27fe:	73 83       	std	Z+3, r23	; 0x03
    2800:	a1 df       	rcall	.-190    	; 0x2744 <vTaskInternalSetTimeOutState>
    2802:	80 e0       	ldi	r24, 0x00	; 0
    2804:	07 c0       	rjmp	.+14     	; 0x2814 <xTaskCheckForTimeOut+0xae>
    2806:	10 82       	st	Z, r1
    2808:	11 82       	std	Z+1, r1	; 0x01
    280a:	12 82       	std	Z+2, r1	; 0x02
    280c:	13 82       	std	Z+3, r1	; 0x03
    280e:	81 e0       	ldi	r24, 0x01	; 1
    2810:	01 c0       	rjmp	.+2      	; 0x2814 <xTaskCheckForTimeOut+0xae>
    2812:	80 e0       	ldi	r24, 0x00	; 0
    2814:	0f 90       	pop	r0
    2816:	0f be       	out	0x3f, r0	; 63
    2818:	df 91       	pop	r29
    281a:	cf 91       	pop	r28
    281c:	1f 91       	pop	r17
    281e:	0f 91       	pop	r16
    2820:	ff 90       	pop	r15
    2822:	ef 90       	pop	r14
    2824:	df 90       	pop	r13
    2826:	cf 90       	pop	r12
    2828:	bf 90       	pop	r11
    282a:	af 90       	pop	r10
    282c:	9f 90       	pop	r9
    282e:	8f 90       	pop	r8
    2830:	08 95       	ret

00002832 <vTaskMissedYield>:
    2832:	81 e0       	ldi	r24, 0x01	; 1
    2834:	80 93 5f 16 	sts	0x165F, r24	; 0x80165f <xYieldPending>
    2838:	08 95       	ret

0000283a <xTaskGetCurrentTaskHandle>:
    283a:	80 91 15 17 	lds	r24, 0x1715	; 0x801715 <pxCurrentTCB>
    283e:	90 91 16 17 	lds	r25, 0x1716	; 0x801716 <pxCurrentTCB+0x1>
    2842:	08 95       	ret

00002844 <xTaskGetSchedulerState>:
    2844:	80 91 64 16 	lds	r24, 0x1664	; 0x801664 <xSchedulerRunning>
    2848:	88 23       	and	r24, r24
    284a:	31 f0       	breq	.+12     	; 0x2858 <xTaskGetSchedulerState+0x14>
    284c:	80 91 56 16 	lds	r24, 0x1656	; 0x801656 <uxSchedulerSuspended>
    2850:	81 11       	cpse	r24, r1
    2852:	04 c0       	rjmp	.+8      	; 0x285c <xTaskGetSchedulerState+0x18>
    2854:	82 e0       	ldi	r24, 0x02	; 2
    2856:	08 95       	ret
    2858:	81 e0       	ldi	r24, 0x01	; 1
    285a:	08 95       	ret
    285c:	80 e0       	ldi	r24, 0x00	; 0
    285e:	08 95       	ret

00002860 <xTaskPriorityInherit>:
    2860:	0f 93       	push	r16
    2862:	1f 93       	push	r17
    2864:	cf 93       	push	r28
    2866:	df 93       	push	r29
    2868:	fc 01       	movw	r30, r24
    286a:	89 2b       	or	r24, r25
    286c:	09 f4       	brne	.+2      	; 0x2870 <xTaskPriorityInherit+0x10>
    286e:	77 c0       	rjmp	.+238    	; 0x295e <xTaskPriorityInherit+0xfe>
    2870:	82 8d       	ldd	r24, Z+26	; 0x1a
    2872:	a0 91 15 17 	lds	r26, 0x1715	; 0x801715 <pxCurrentTCB>
    2876:	b0 91 16 17 	lds	r27, 0x1716	; 0x801716 <pxCurrentTCB+0x1>
    287a:	5a 96       	adiw	r26, 0x1a	; 26
    287c:	9c 91       	ld	r25, X
    287e:	89 17       	cp	r24, r25
    2880:	08 f0       	brcs	.+2      	; 0x2884 <xTaskPriorityInherit+0x24>
    2882:	63 c0       	rjmp	.+198    	; 0x294a <xTaskPriorityInherit+0xea>
    2884:	46 85       	ldd	r20, Z+14	; 0x0e
    2886:	57 85       	ldd	r21, Z+15	; 0x0f
    2888:	60 89       	ldd	r22, Z+16	; 0x10
    288a:	71 89       	ldd	r23, Z+17	; 0x11
    288c:	77 23       	and	r23, r23
    288e:	94 f0       	brlt	.+36     	; 0x28b4 <xTaskPriorityInherit+0x54>
    2890:	a0 91 15 17 	lds	r26, 0x1715	; 0x801715 <pxCurrentTCB>
    2894:	b0 91 16 17 	lds	r27, 0x1716	; 0x801716 <pxCurrentTCB+0x1>
    2898:	5a 96       	adiw	r26, 0x1a	; 26
    289a:	9c 91       	ld	r25, X
    289c:	4a e0       	ldi	r20, 0x0A	; 10
    289e:	50 e0       	ldi	r21, 0x00	; 0
    28a0:	60 e0       	ldi	r22, 0x00	; 0
    28a2:	70 e0       	ldi	r23, 0x00	; 0
    28a4:	49 1b       	sub	r20, r25
    28a6:	51 09       	sbc	r21, r1
    28a8:	61 09       	sbc	r22, r1
    28aa:	71 09       	sbc	r23, r1
    28ac:	46 87       	std	Z+14, r20	; 0x0e
    28ae:	57 87       	std	Z+15, r21	; 0x0f
    28b0:	60 8b       	std	Z+16, r22	; 0x10
    28b2:	71 8b       	std	Z+17, r23	; 0x11
    28b4:	24 85       	ldd	r18, Z+12	; 0x0c
    28b6:	35 85       	ldd	r19, Z+13	; 0x0d
    28b8:	4b e0       	ldi	r20, 0x0B	; 11
    28ba:	84 9f       	mul	r24, r20
    28bc:	c0 01       	movw	r24, r0
    28be:	11 24       	eor	r1, r1
    28c0:	89 55       	subi	r24, 0x59	; 89
    28c2:	99 4e       	sbci	r25, 0xE9	; 233
    28c4:	28 17       	cp	r18, r24
    28c6:	39 07       	cpc	r19, r25
    28c8:	b9 f5       	brne	.+110    	; 0x2938 <xTaskPriorityInherit+0xd8>
    28ca:	ef 01       	movw	r28, r30
    28cc:	8f 01       	movw	r16, r30
    28ce:	0e 5f       	subi	r16, 0xFE	; 254
    28d0:	1f 4f       	sbci	r17, 0xFF	; 255
    28d2:	c8 01       	movw	r24, r16
    28d4:	0e 94 15 04 	call	0x82a	; 0x82a <uxListRemove>
    28d8:	e0 91 15 17 	lds	r30, 0x1715	; 0x801715 <pxCurrentTCB>
    28dc:	f0 91 16 17 	lds	r31, 0x1716	; 0x801716 <pxCurrentTCB+0x1>
    28e0:	e2 8d       	ldd	r30, Z+26	; 0x1a
    28e2:	ea 8f       	std	Y+26, r30	; 0x1a
    28e4:	80 91 65 16 	lds	r24, 0x1665	; 0x801665 <uxTopReadyPriority>
    28e8:	8e 17       	cp	r24, r30
    28ea:	10 f4       	brcc	.+4      	; 0x28f0 <xTaskPriorityInherit+0x90>
    28ec:	e0 93 65 16 	sts	0x1665, r30	; 0x801665 <uxTopReadyPriority>
    28f0:	8b e0       	ldi	r24, 0x0B	; 11
    28f2:	8e 9f       	mul	r24, r30
    28f4:	f0 01       	movw	r30, r0
    28f6:	11 24       	eor	r1, r1
    28f8:	e9 55       	subi	r30, 0x59	; 89
    28fa:	f9 4e       	sbci	r31, 0xE9	; 233
    28fc:	01 80       	ldd	r0, Z+1	; 0x01
    28fe:	f2 81       	ldd	r31, Z+2	; 0x02
    2900:	e0 2d       	mov	r30, r0
    2902:	ff 83       	std	Y+7, r31	; 0x07
    2904:	ee 83       	std	Y+6, r30	; 0x06
    2906:	26 81       	ldd	r18, Z+6	; 0x06
    2908:	37 81       	ldd	r19, Z+7	; 0x07
    290a:	39 87       	std	Y+9, r19	; 0x09
    290c:	28 87       	std	Y+8, r18	; 0x08
    290e:	a6 81       	ldd	r26, Z+6	; 0x06
    2910:	b7 81       	ldd	r27, Z+7	; 0x07
    2912:	15 96       	adiw	r26, 0x05	; 5
    2914:	1c 93       	st	X, r17
    2916:	0e 93       	st	-X, r16
    2918:	14 97       	sbiw	r26, 0x04	; 4
    291a:	17 83       	std	Z+7, r17	; 0x07
    291c:	06 83       	std	Z+6, r16	; 0x06
    291e:	ea 8d       	ldd	r30, Y+26	; 0x1a
    2920:	8e 9f       	mul	r24, r30
    2922:	f0 01       	movw	r30, r0
    2924:	11 24       	eor	r1, r1
    2926:	e9 55       	subi	r30, 0x59	; 89
    2928:	f9 4e       	sbci	r31, 0xE9	; 233
    292a:	fd 87       	std	Y+13, r31	; 0x0d
    292c:	ec 87       	std	Y+12, r30	; 0x0c
    292e:	80 81       	ld	r24, Z
    2930:	8f 5f       	subi	r24, 0xFF	; 255
    2932:	80 83       	st	Z, r24
    2934:	81 e0       	ldi	r24, 0x01	; 1
    2936:	16 c0       	rjmp	.+44     	; 0x2964 <xTaskPriorityInherit+0x104>
    2938:	a0 91 15 17 	lds	r26, 0x1715	; 0x801715 <pxCurrentTCB>
    293c:	b0 91 16 17 	lds	r27, 0x1716	; 0x801716 <pxCurrentTCB+0x1>
    2940:	5a 96       	adiw	r26, 0x1a	; 26
    2942:	8c 91       	ld	r24, X
    2944:	82 8f       	std	Z+26, r24	; 0x1a
    2946:	81 e0       	ldi	r24, 0x01	; 1
    2948:	0d c0       	rjmp	.+26     	; 0x2964 <xTaskPriorityInherit+0x104>
    294a:	95 a5       	ldd	r25, Z+45	; 0x2d
    294c:	e0 91 15 17 	lds	r30, 0x1715	; 0x801715 <pxCurrentTCB>
    2950:	f0 91 16 17 	lds	r31, 0x1716	; 0x801716 <pxCurrentTCB+0x1>
    2954:	82 8d       	ldd	r24, Z+26	; 0x1a
    2956:	98 17       	cp	r25, r24
    2958:	20 f0       	brcs	.+8      	; 0x2962 <xTaskPriorityInherit+0x102>
    295a:	80 e0       	ldi	r24, 0x00	; 0
    295c:	03 c0       	rjmp	.+6      	; 0x2964 <xTaskPriorityInherit+0x104>
    295e:	80 e0       	ldi	r24, 0x00	; 0
    2960:	01 c0       	rjmp	.+2      	; 0x2964 <xTaskPriorityInherit+0x104>
    2962:	81 e0       	ldi	r24, 0x01	; 1
    2964:	df 91       	pop	r29
    2966:	cf 91       	pop	r28
    2968:	1f 91       	pop	r17
    296a:	0f 91       	pop	r16
    296c:	08 95       	ret

0000296e <xTaskPriorityDisinherit>:
    296e:	0f 93       	push	r16
    2970:	1f 93       	push	r17
    2972:	cf 93       	push	r28
    2974:	df 93       	push	r29
    2976:	fc 01       	movw	r30, r24
    2978:	89 2b       	or	r24, r25
    297a:	09 f4       	brne	.+2      	; 0x297e <xTaskPriorityDisinherit+0x10>
    297c:	49 c0       	rjmp	.+146    	; 0x2a10 <xTaskPriorityDisinherit+0xa2>
    297e:	86 a5       	ldd	r24, Z+46	; 0x2e
    2980:	81 50       	subi	r24, 0x01	; 1
    2982:	86 a7       	std	Z+46, r24	; 0x2e
    2984:	22 8d       	ldd	r18, Z+26	; 0x1a
    2986:	95 a5       	ldd	r25, Z+45	; 0x2d
    2988:	29 17       	cp	r18, r25
    298a:	09 f4       	brne	.+2      	; 0x298e <xTaskPriorityDisinherit+0x20>
    298c:	43 c0       	rjmp	.+134    	; 0x2a14 <xTaskPriorityDisinherit+0xa6>
    298e:	81 11       	cpse	r24, r1
    2990:	43 c0       	rjmp	.+134    	; 0x2a18 <xTaskPriorityDisinherit+0xaa>
    2992:	ef 01       	movw	r28, r30
    2994:	8f 01       	movw	r16, r30
    2996:	0e 5f       	subi	r16, 0xFE	; 254
    2998:	1f 4f       	sbci	r17, 0xFF	; 255
    299a:	c8 01       	movw	r24, r16
    299c:	0e 94 15 04 	call	0x82a	; 0x82a <uxListRemove>
    29a0:	ed a5       	ldd	r30, Y+45	; 0x2d
    29a2:	ea 8f       	std	Y+26, r30	; 0x1a
    29a4:	8a e0       	ldi	r24, 0x0A	; 10
    29a6:	90 e0       	ldi	r25, 0x00	; 0
    29a8:	a0 e0       	ldi	r26, 0x00	; 0
    29aa:	b0 e0       	ldi	r27, 0x00	; 0
    29ac:	8e 1b       	sub	r24, r30
    29ae:	91 09       	sbc	r25, r1
    29b0:	a1 09       	sbc	r26, r1
    29b2:	b1 09       	sbc	r27, r1
    29b4:	8e 87       	std	Y+14, r24	; 0x0e
    29b6:	9f 87       	std	Y+15, r25	; 0x0f
    29b8:	a8 8b       	std	Y+16, r26	; 0x10
    29ba:	b9 8b       	std	Y+17, r27	; 0x11
    29bc:	80 91 65 16 	lds	r24, 0x1665	; 0x801665 <uxTopReadyPriority>
    29c0:	8e 17       	cp	r24, r30
    29c2:	10 f4       	brcc	.+4      	; 0x29c8 <xTaskPriorityDisinherit+0x5a>
    29c4:	e0 93 65 16 	sts	0x1665, r30	; 0x801665 <uxTopReadyPriority>
    29c8:	8b e0       	ldi	r24, 0x0B	; 11
    29ca:	8e 9f       	mul	r24, r30
    29cc:	f0 01       	movw	r30, r0
    29ce:	11 24       	eor	r1, r1
    29d0:	e9 55       	subi	r30, 0x59	; 89
    29d2:	f9 4e       	sbci	r31, 0xE9	; 233
    29d4:	01 80       	ldd	r0, Z+1	; 0x01
    29d6:	f2 81       	ldd	r31, Z+2	; 0x02
    29d8:	e0 2d       	mov	r30, r0
    29da:	ff 83       	std	Y+7, r31	; 0x07
    29dc:	ee 83       	std	Y+6, r30	; 0x06
    29de:	26 81       	ldd	r18, Z+6	; 0x06
    29e0:	37 81       	ldd	r19, Z+7	; 0x07
    29e2:	39 87       	std	Y+9, r19	; 0x09
    29e4:	28 87       	std	Y+8, r18	; 0x08
    29e6:	a6 81       	ldd	r26, Z+6	; 0x06
    29e8:	b7 81       	ldd	r27, Z+7	; 0x07
    29ea:	15 96       	adiw	r26, 0x05	; 5
    29ec:	1c 93       	st	X, r17
    29ee:	0e 93       	st	-X, r16
    29f0:	14 97       	sbiw	r26, 0x04	; 4
    29f2:	17 83       	std	Z+7, r17	; 0x07
    29f4:	06 83       	std	Z+6, r16	; 0x06
    29f6:	ea 8d       	ldd	r30, Y+26	; 0x1a
    29f8:	8e 9f       	mul	r24, r30
    29fa:	f0 01       	movw	r30, r0
    29fc:	11 24       	eor	r1, r1
    29fe:	e9 55       	subi	r30, 0x59	; 89
    2a00:	f9 4e       	sbci	r31, 0xE9	; 233
    2a02:	fd 87       	std	Y+13, r31	; 0x0d
    2a04:	ec 87       	std	Y+12, r30	; 0x0c
    2a06:	80 81       	ld	r24, Z
    2a08:	8f 5f       	subi	r24, 0xFF	; 255
    2a0a:	80 83       	st	Z, r24
    2a0c:	81 e0       	ldi	r24, 0x01	; 1
    2a0e:	05 c0       	rjmp	.+10     	; 0x2a1a <xTaskPriorityDisinherit+0xac>
    2a10:	80 e0       	ldi	r24, 0x00	; 0
    2a12:	03 c0       	rjmp	.+6      	; 0x2a1a <xTaskPriorityDisinherit+0xac>
    2a14:	80 e0       	ldi	r24, 0x00	; 0
    2a16:	01 c0       	rjmp	.+2      	; 0x2a1a <xTaskPriorityDisinherit+0xac>
    2a18:	80 e0       	ldi	r24, 0x00	; 0
    2a1a:	df 91       	pop	r29
    2a1c:	cf 91       	pop	r28
    2a1e:	1f 91       	pop	r17
    2a20:	0f 91       	pop	r16
    2a22:	08 95       	ret

00002a24 <vTaskPriorityDisinheritAfterTimeout>:
    2a24:	0f 93       	push	r16
    2a26:	1f 93       	push	r17
    2a28:	cf 93       	push	r28
    2a2a:	df 93       	push	r29
    2a2c:	fc 01       	movw	r30, r24
    2a2e:	89 2b       	or	r24, r25
    2a30:	09 f4       	brne	.+2      	; 0x2a34 <vTaskPriorityDisinheritAfterTimeout+0x10>
    2a32:	5a c0       	rjmp	.+180    	; 0x2ae8 <vTaskPriorityDisinheritAfterTimeout+0xc4>
    2a34:	85 a5       	ldd	r24, Z+45	; 0x2d
    2a36:	86 17       	cp	r24, r22
    2a38:	08 f4       	brcc	.+2      	; 0x2a3c <vTaskPriorityDisinheritAfterTimeout+0x18>
    2a3a:	86 2f       	mov	r24, r22
    2a3c:	92 8d       	ldd	r25, Z+26	; 0x1a
    2a3e:	89 17       	cp	r24, r25
    2a40:	09 f4       	brne	.+2      	; 0x2a44 <vTaskPriorityDisinheritAfterTimeout+0x20>
    2a42:	52 c0       	rjmp	.+164    	; 0x2ae8 <vTaskPriorityDisinheritAfterTimeout+0xc4>
    2a44:	26 a5       	ldd	r18, Z+46	; 0x2e
    2a46:	21 30       	cpi	r18, 0x01	; 1
    2a48:	09 f0       	breq	.+2      	; 0x2a4c <vTaskPriorityDisinheritAfterTimeout+0x28>
    2a4a:	4e c0       	rjmp	.+156    	; 0x2ae8 <vTaskPriorityDisinheritAfterTimeout+0xc4>
    2a4c:	82 8f       	std	Z+26, r24	; 0x1a
    2a4e:	46 85       	ldd	r20, Z+14	; 0x0e
    2a50:	57 85       	ldd	r21, Z+15	; 0x0f
    2a52:	60 89       	ldd	r22, Z+16	; 0x10
    2a54:	71 89       	ldd	r23, Z+17	; 0x11
    2a56:	77 23       	and	r23, r23
    2a58:	64 f0       	brlt	.+24     	; 0x2a72 <vTaskPriorityDisinheritAfterTimeout+0x4e>
    2a5a:	4a e0       	ldi	r20, 0x0A	; 10
    2a5c:	50 e0       	ldi	r21, 0x00	; 0
    2a5e:	60 e0       	ldi	r22, 0x00	; 0
    2a60:	70 e0       	ldi	r23, 0x00	; 0
    2a62:	48 1b       	sub	r20, r24
    2a64:	51 09       	sbc	r21, r1
    2a66:	61 09       	sbc	r22, r1
    2a68:	71 09       	sbc	r23, r1
    2a6a:	46 87       	std	Z+14, r20	; 0x0e
    2a6c:	57 87       	std	Z+15, r21	; 0x0f
    2a6e:	60 8b       	std	Z+16, r22	; 0x10
    2a70:	71 8b       	std	Z+17, r23	; 0x11
    2a72:	24 85       	ldd	r18, Z+12	; 0x0c
    2a74:	35 85       	ldd	r19, Z+13	; 0x0d
    2a76:	4b e0       	ldi	r20, 0x0B	; 11
    2a78:	94 9f       	mul	r25, r20
    2a7a:	c0 01       	movw	r24, r0
    2a7c:	11 24       	eor	r1, r1
    2a7e:	89 55       	subi	r24, 0x59	; 89
    2a80:	99 4e       	sbci	r25, 0xE9	; 233
    2a82:	28 17       	cp	r18, r24
    2a84:	39 07       	cpc	r19, r25
    2a86:	81 f5       	brne	.+96     	; 0x2ae8 <vTaskPriorityDisinheritAfterTimeout+0xc4>
    2a88:	ef 01       	movw	r28, r30
    2a8a:	8f 01       	movw	r16, r30
    2a8c:	0e 5f       	subi	r16, 0xFE	; 254
    2a8e:	1f 4f       	sbci	r17, 0xFF	; 255
    2a90:	c8 01       	movw	r24, r16
    2a92:	0e 94 15 04 	call	0x82a	; 0x82a <uxListRemove>
    2a96:	ea 8d       	ldd	r30, Y+26	; 0x1a
    2a98:	80 91 65 16 	lds	r24, 0x1665	; 0x801665 <uxTopReadyPriority>
    2a9c:	8e 17       	cp	r24, r30
    2a9e:	10 f4       	brcc	.+4      	; 0x2aa4 <vTaskPriorityDisinheritAfterTimeout+0x80>
    2aa0:	e0 93 65 16 	sts	0x1665, r30	; 0x801665 <uxTopReadyPriority>
    2aa4:	8b e0       	ldi	r24, 0x0B	; 11
    2aa6:	8e 9f       	mul	r24, r30
    2aa8:	f0 01       	movw	r30, r0
    2aaa:	11 24       	eor	r1, r1
    2aac:	e9 55       	subi	r30, 0x59	; 89
    2aae:	f9 4e       	sbci	r31, 0xE9	; 233
    2ab0:	01 80       	ldd	r0, Z+1	; 0x01
    2ab2:	f2 81       	ldd	r31, Z+2	; 0x02
    2ab4:	e0 2d       	mov	r30, r0
    2ab6:	ff 83       	std	Y+7, r31	; 0x07
    2ab8:	ee 83       	std	Y+6, r30	; 0x06
    2aba:	26 81       	ldd	r18, Z+6	; 0x06
    2abc:	37 81       	ldd	r19, Z+7	; 0x07
    2abe:	39 87       	std	Y+9, r19	; 0x09
    2ac0:	28 87       	std	Y+8, r18	; 0x08
    2ac2:	a6 81       	ldd	r26, Z+6	; 0x06
    2ac4:	b7 81       	ldd	r27, Z+7	; 0x07
    2ac6:	15 96       	adiw	r26, 0x05	; 5
    2ac8:	1c 93       	st	X, r17
    2aca:	0e 93       	st	-X, r16
    2acc:	14 97       	sbiw	r26, 0x04	; 4
    2ace:	17 83       	std	Z+7, r17	; 0x07
    2ad0:	06 83       	std	Z+6, r16	; 0x06
    2ad2:	ea 8d       	ldd	r30, Y+26	; 0x1a
    2ad4:	8e 9f       	mul	r24, r30
    2ad6:	f0 01       	movw	r30, r0
    2ad8:	11 24       	eor	r1, r1
    2ada:	e9 55       	subi	r30, 0x59	; 89
    2adc:	f9 4e       	sbci	r31, 0xE9	; 233
    2ade:	fd 87       	std	Y+13, r31	; 0x0d
    2ae0:	ec 87       	std	Y+12, r30	; 0x0c
    2ae2:	80 81       	ld	r24, Z
    2ae4:	8f 5f       	subi	r24, 0xFF	; 255
    2ae6:	80 83       	st	Z, r24
    2ae8:	df 91       	pop	r29
    2aea:	cf 91       	pop	r28
    2aec:	1f 91       	pop	r17
    2aee:	0f 91       	pop	r16
    2af0:	08 95       	ret

00002af2 <uxTaskResetEventItemValue>:
    2af2:	cf 92       	push	r12
    2af4:	df 92       	push	r13
    2af6:	ef 92       	push	r14
    2af8:	ff 92       	push	r15
    2afa:	e0 91 15 17 	lds	r30, 0x1715	; 0x801715 <pxCurrentTCB>
    2afe:	f0 91 16 17 	lds	r31, 0x1716	; 0x801716 <pxCurrentTCB+0x1>
    2b02:	66 85       	ldd	r22, Z+14	; 0x0e
    2b04:	77 85       	ldd	r23, Z+15	; 0x0f
    2b06:	80 89       	ldd	r24, Z+16	; 0x10
    2b08:	91 89       	ldd	r25, Z+17	; 0x11
    2b0a:	e0 91 15 17 	lds	r30, 0x1715	; 0x801715 <pxCurrentTCB>
    2b0e:	f0 91 16 17 	lds	r31, 0x1716	; 0x801716 <pxCurrentTCB+0x1>
    2b12:	a0 91 15 17 	lds	r26, 0x1715	; 0x801715 <pxCurrentTCB>
    2b16:	b0 91 16 17 	lds	r27, 0x1716	; 0x801716 <pxCurrentTCB+0x1>
    2b1a:	5a 96       	adiw	r26, 0x1a	; 26
    2b1c:	2c 91       	ld	r18, X
    2b1e:	0f 2e       	mov	r0, r31
    2b20:	fa e0       	ldi	r31, 0x0A	; 10
    2b22:	cf 2e       	mov	r12, r31
    2b24:	d1 2c       	mov	r13, r1
    2b26:	e1 2c       	mov	r14, r1
    2b28:	f1 2c       	mov	r15, r1
    2b2a:	f0 2d       	mov	r31, r0
    2b2c:	c2 1a       	sub	r12, r18
    2b2e:	d1 08       	sbc	r13, r1
    2b30:	e1 08       	sbc	r14, r1
    2b32:	f1 08       	sbc	r15, r1
    2b34:	c6 86       	std	Z+14, r12	; 0x0e
    2b36:	d7 86       	std	Z+15, r13	; 0x0f
    2b38:	e0 8a       	std	Z+16, r14	; 0x10
    2b3a:	f1 8a       	std	Z+17, r15	; 0x11
    2b3c:	ff 90       	pop	r15
    2b3e:	ef 90       	pop	r14
    2b40:	df 90       	pop	r13
    2b42:	cf 90       	pop	r12
    2b44:	08 95       	ret

00002b46 <pvTaskIncrementMutexHeldCount>:
    2b46:	80 91 15 17 	lds	r24, 0x1715	; 0x801715 <pxCurrentTCB>
    2b4a:	90 91 16 17 	lds	r25, 0x1716	; 0x801716 <pxCurrentTCB+0x1>
    2b4e:	89 2b       	or	r24, r25
    2b50:	39 f0       	breq	.+14     	; 0x2b60 <pvTaskIncrementMutexHeldCount+0x1a>
    2b52:	e0 91 15 17 	lds	r30, 0x1715	; 0x801715 <pxCurrentTCB>
    2b56:	f0 91 16 17 	lds	r31, 0x1716	; 0x801716 <pxCurrentTCB+0x1>
    2b5a:	86 a5       	ldd	r24, Z+46	; 0x2e
    2b5c:	8f 5f       	subi	r24, 0xFF	; 255
    2b5e:	86 a7       	std	Z+46, r24	; 0x2e
    2b60:	80 91 15 17 	lds	r24, 0x1715	; 0x801715 <pxCurrentTCB>
    2b64:	90 91 16 17 	lds	r25, 0x1716	; 0x801716 <pxCurrentTCB+0x1>
    2b68:	08 95       	ret

00002b6a <xTaskGenericNotifyWait>:
    2b6a:	4f 92       	push	r4
    2b6c:	5f 92       	push	r5
    2b6e:	6f 92       	push	r6
    2b70:	7f 92       	push	r7
    2b72:	af 92       	push	r10
    2b74:	bf 92       	push	r11
    2b76:	cf 92       	push	r12
    2b78:	df 92       	push	r13
    2b7a:	ef 92       	push	r14
    2b7c:	ff 92       	push	r15
    2b7e:	0f 93       	push	r16
    2b80:	1f 93       	push	r17
    2b82:	cf 93       	push	r28
    2b84:	df 93       	push	r29
    2b86:	28 01       	movw	r4, r16
    2b88:	39 01       	movw	r6, r18
    2b8a:	0f b6       	in	r0, 0x3f	; 63
    2b8c:	f8 94       	cli
    2b8e:	0f 92       	push	r0
    2b90:	e0 91 15 17 	lds	r30, 0x1715	; 0x801715 <pxCurrentTCB>
    2b94:	f0 91 16 17 	lds	r31, 0x1716	; 0x801716 <pxCurrentTCB+0x1>
    2b98:	c8 2f       	mov	r28, r24
    2b9a:	d0 e0       	ldi	r29, 0x00	; 0
    2b9c:	ec 0f       	add	r30, r28
    2b9e:	fd 1f       	adc	r31, r29
    2ba0:	83 a9       	ldd	r24, Z+51	; 0x33
    2ba2:	82 30       	cpi	r24, 0x02	; 2
    2ba4:	79 f1       	breq	.+94     	; 0x2c04 <xTaskGenericNotifyWait+0x9a>
    2ba6:	e0 91 15 17 	lds	r30, 0x1715	; 0x801715 <pxCurrentTCB>
    2baa:	f0 91 16 17 	lds	r31, 0x1716	; 0x801716 <pxCurrentTCB+0x1>
    2bae:	ce 01       	movw	r24, r28
    2bb0:	88 0f       	add	r24, r24
    2bb2:	99 1f       	adc	r25, r25
    2bb4:	88 0f       	add	r24, r24
    2bb6:	99 1f       	adc	r25, r25
    2bb8:	e8 0f       	add	r30, r24
    2bba:	f9 1f       	adc	r31, r25
    2bbc:	87 a5       	ldd	r24, Z+47	; 0x2f
    2bbe:	90 a9       	ldd	r25, Z+48	; 0x30
    2bc0:	a1 a9       	ldd	r26, Z+49	; 0x31
    2bc2:	b2 a9       	ldd	r27, Z+50	; 0x32
    2bc4:	40 95       	com	r20
    2bc6:	50 95       	com	r21
    2bc8:	60 95       	com	r22
    2bca:	70 95       	com	r23
    2bcc:	48 23       	and	r20, r24
    2bce:	59 23       	and	r21, r25
    2bd0:	6a 23       	and	r22, r26
    2bd2:	7b 23       	and	r23, r27
    2bd4:	47 a7       	std	Z+47, r20	; 0x2f
    2bd6:	50 ab       	std	Z+48, r21	; 0x30
    2bd8:	61 ab       	std	Z+49, r22	; 0x31
    2bda:	72 ab       	std	Z+50, r23	; 0x32
    2bdc:	e0 91 15 17 	lds	r30, 0x1715	; 0x801715 <pxCurrentTCB>
    2be0:	f0 91 16 17 	lds	r31, 0x1716	; 0x801716 <pxCurrentTCB+0x1>
    2be4:	ec 0f       	add	r30, r28
    2be6:	fd 1f       	adc	r31, r29
    2be8:	81 e0       	ldi	r24, 0x01	; 1
    2bea:	83 ab       	std	Z+51, r24	; 0x33
    2bec:	a1 14       	cp	r10, r1
    2bee:	b1 04       	cpc	r11, r1
    2bf0:	c1 04       	cpc	r12, r1
    2bf2:	d1 04       	cpc	r13, r1
    2bf4:	39 f0       	breq	.+14     	; 0x2c04 <xTaskGenericNotifyWait+0x9a>
    2bf6:	41 e0       	ldi	r20, 0x01	; 1
    2bf8:	c6 01       	movw	r24, r12
    2bfa:	b5 01       	movw	r22, r10
    2bfc:	0e 94 79 0d 	call	0x1af2	; 0x1af2 <prvAddCurrentTaskToDelayedList>
    2c00:	0e 94 91 04 	call	0x922	; 0x922 <vPortYield>
    2c04:	0f 90       	pop	r0
    2c06:	0f be       	out	0x3f, r0	; 63
    2c08:	0f b6       	in	r0, 0x3f	; 63
    2c0a:	f8 94       	cli
    2c0c:	0f 92       	push	r0
    2c0e:	e1 14       	cp	r14, r1
    2c10:	f1 04       	cpc	r15, r1
    2c12:	a1 f0       	breq	.+40     	; 0x2c3c <xTaskGenericNotifyWait+0xd2>
    2c14:	e0 91 15 17 	lds	r30, 0x1715	; 0x801715 <pxCurrentTCB>
    2c18:	f0 91 16 17 	lds	r31, 0x1716	; 0x801716 <pxCurrentTCB+0x1>
    2c1c:	ce 01       	movw	r24, r28
    2c1e:	88 0f       	add	r24, r24
    2c20:	99 1f       	adc	r25, r25
    2c22:	88 0f       	add	r24, r24
    2c24:	99 1f       	adc	r25, r25
    2c26:	e8 0f       	add	r30, r24
    2c28:	f9 1f       	adc	r31, r25
    2c2a:	87 a5       	ldd	r24, Z+47	; 0x2f
    2c2c:	90 a9       	ldd	r25, Z+48	; 0x30
    2c2e:	a1 a9       	ldd	r26, Z+49	; 0x31
    2c30:	b2 a9       	ldd	r27, Z+50	; 0x32
    2c32:	f7 01       	movw	r30, r14
    2c34:	80 83       	st	Z, r24
    2c36:	91 83       	std	Z+1, r25	; 0x01
    2c38:	a2 83       	std	Z+2, r26	; 0x02
    2c3a:	b3 83       	std	Z+3, r27	; 0x03
    2c3c:	e0 91 15 17 	lds	r30, 0x1715	; 0x801715 <pxCurrentTCB>
    2c40:	f0 91 16 17 	lds	r31, 0x1716	; 0x801716 <pxCurrentTCB+0x1>
    2c44:	ec 0f       	add	r30, r28
    2c46:	fd 1f       	adc	r31, r29
    2c48:	83 a9       	ldd	r24, Z+51	; 0x33
    2c4a:	82 30       	cpi	r24, 0x02	; 2
    2c4c:	e9 f4       	brne	.+58     	; 0x2c88 <xTaskGenericNotifyWait+0x11e>
    2c4e:	e0 91 15 17 	lds	r30, 0x1715	; 0x801715 <pxCurrentTCB>
    2c52:	f0 91 16 17 	lds	r31, 0x1716	; 0x801716 <pxCurrentTCB+0x1>
    2c56:	ce 01       	movw	r24, r28
    2c58:	88 0f       	add	r24, r24
    2c5a:	99 1f       	adc	r25, r25
    2c5c:	88 0f       	add	r24, r24
    2c5e:	99 1f       	adc	r25, r25
    2c60:	e8 0f       	add	r30, r24
    2c62:	f9 1f       	adc	r31, r25
    2c64:	87 a5       	ldd	r24, Z+47	; 0x2f
    2c66:	90 a9       	ldd	r25, Z+48	; 0x30
    2c68:	a1 a9       	ldd	r26, Z+49	; 0x31
    2c6a:	b2 a9       	ldd	r27, Z+50	; 0x32
    2c6c:	40 94       	com	r4
    2c6e:	50 94       	com	r5
    2c70:	60 94       	com	r6
    2c72:	70 94       	com	r7
    2c74:	48 22       	and	r4, r24
    2c76:	59 22       	and	r5, r25
    2c78:	6a 22       	and	r6, r26
    2c7a:	7b 22       	and	r7, r27
    2c7c:	47 a6       	std	Z+47, r4	; 0x2f
    2c7e:	50 aa       	std	Z+48, r5	; 0x30
    2c80:	61 aa       	std	Z+49, r6	; 0x31
    2c82:	72 aa       	std	Z+50, r7	; 0x32
    2c84:	81 e0       	ldi	r24, 0x01	; 1
    2c86:	01 c0       	rjmp	.+2      	; 0x2c8a <xTaskGenericNotifyWait+0x120>
    2c88:	80 e0       	ldi	r24, 0x00	; 0
    2c8a:	20 91 15 17 	lds	r18, 0x1715	; 0x801715 <pxCurrentTCB>
    2c8e:	30 91 16 17 	lds	r19, 0x1716	; 0x801716 <pxCurrentTCB+0x1>
    2c92:	c2 0f       	add	r28, r18
    2c94:	d3 1f       	adc	r29, r19
    2c96:	1b aa       	std	Y+51, r1	; 0x33
    2c98:	0f 90       	pop	r0
    2c9a:	0f be       	out	0x3f, r0	; 63
    2c9c:	df 91       	pop	r29
    2c9e:	cf 91       	pop	r28
    2ca0:	1f 91       	pop	r17
    2ca2:	0f 91       	pop	r16
    2ca4:	ff 90       	pop	r15
    2ca6:	ef 90       	pop	r14
    2ca8:	df 90       	pop	r13
    2caa:	cf 90       	pop	r12
    2cac:	bf 90       	pop	r11
    2cae:	af 90       	pop	r10
    2cb0:	7f 90       	pop	r7
    2cb2:	6f 90       	pop	r6
    2cb4:	5f 90       	pop	r5
    2cb6:	4f 90       	pop	r4
    2cb8:	08 95       	ret

00002cba <xTaskGenericNotify>:
    2cba:	8f 92       	push	r8
    2cbc:	9f 92       	push	r9
    2cbe:	af 92       	push	r10
    2cc0:	bf 92       	push	r11
    2cc2:	ef 92       	push	r14
    2cc4:	ff 92       	push	r15
    2cc6:	0f 93       	push	r16
    2cc8:	cf 93       	push	r28
    2cca:	df 93       	push	r29
    2ccc:	dc 01       	movw	r26, r24
    2cce:	0f b6       	in	r0, 0x3f	; 63
    2cd0:	f8 94       	cli
    2cd2:	0f 92       	push	r0
    2cd4:	e1 14       	cp	r14, r1
    2cd6:	f1 04       	cpc	r15, r1
    2cd8:	89 f0       	breq	.+34     	; 0x2cfc <xTaskGenericNotify+0x42>
    2cda:	e6 2f       	mov	r30, r22
    2cdc:	f0 e0       	ldi	r31, 0x00	; 0
    2cde:	ee 0f       	add	r30, r30
    2ce0:	ff 1f       	adc	r31, r31
    2ce2:	ee 0f       	add	r30, r30
    2ce4:	ff 1f       	adc	r31, r31
    2ce6:	e8 0f       	add	r30, r24
    2ce8:	f9 1f       	adc	r31, r25
    2cea:	87 a4       	ldd	r8, Z+47	; 0x2f
    2cec:	90 a8       	ldd	r9, Z+48	; 0x30
    2cee:	a1 a8       	ldd	r10, Z+49	; 0x31
    2cf0:	b2 a8       	ldd	r11, Z+50	; 0x32
    2cf2:	f7 01       	movw	r30, r14
    2cf4:	80 82       	st	Z, r8
    2cf6:	91 82       	std	Z+1, r9	; 0x01
    2cf8:	a2 82       	std	Z+2, r10	; 0x02
    2cfa:	b3 82       	std	Z+3, r11	; 0x03
    2cfc:	70 e0       	ldi	r23, 0x00	; 0
    2cfe:	fd 01       	movw	r30, r26
    2d00:	e6 0f       	add	r30, r22
    2d02:	f7 1f       	adc	r31, r23
    2d04:	83 a9       	ldd	r24, Z+51	; 0x33
    2d06:	92 e0       	ldi	r25, 0x02	; 2
    2d08:	93 ab       	std	Z+51, r25	; 0x33
    2d0a:	02 30       	cpi	r16, 0x02	; 2
    2d0c:	01 f1       	breq	.+64     	; 0x2d4e <xTaskGenericNotify+0x94>
    2d0e:	18 f4       	brcc	.+6      	; 0x2d16 <xTaskGenericNotify+0x5c>
    2d10:	01 30       	cpi	r16, 0x01	; 1
    2d12:	31 f0       	breq	.+12     	; 0x2d20 <xTaskGenericNotify+0x66>
    2d14:	4d c0       	rjmp	.+154    	; 0x2db0 <xTaskGenericNotify+0xf6>
    2d16:	03 30       	cpi	r16, 0x03	; 3
    2d18:	79 f1       	breq	.+94     	; 0x2d78 <xTaskGenericNotify+0xbe>
    2d1a:	04 30       	cpi	r16, 0x04	; 4
    2d1c:	d1 f1       	breq	.+116    	; 0x2d92 <xTaskGenericNotify+0xd8>
    2d1e:	48 c0       	rjmp	.+144    	; 0x2db0 <xTaskGenericNotify+0xf6>
    2d20:	66 0f       	add	r22, r22
    2d22:	77 1f       	adc	r23, r23
    2d24:	66 0f       	add	r22, r22
    2d26:	77 1f       	adc	r23, r23
    2d28:	fd 01       	movw	r30, r26
    2d2a:	e6 0f       	add	r30, r22
    2d2c:	f7 1f       	adc	r31, r23
    2d2e:	87 a4       	ldd	r8, Z+47	; 0x2f
    2d30:	90 a8       	ldd	r9, Z+48	; 0x30
    2d32:	a1 a8       	ldd	r10, Z+49	; 0x31
    2d34:	b2 a8       	ldd	r11, Z+50	; 0x32
    2d36:	ba 01       	movw	r22, r20
    2d38:	a9 01       	movw	r20, r18
    2d3a:	48 29       	or	r20, r8
    2d3c:	59 29       	or	r21, r9
    2d3e:	6a 29       	or	r22, r10
    2d40:	7b 29       	or	r23, r11
    2d42:	47 a7       	std	Z+47, r20	; 0x2f
    2d44:	50 ab       	std	Z+48, r21	; 0x30
    2d46:	61 ab       	std	Z+49, r22	; 0x31
    2d48:	72 ab       	std	Z+50, r23	; 0x32
    2d4a:	01 e0       	ldi	r16, 0x01	; 1
    2d4c:	34 c0       	rjmp	.+104    	; 0x2db6 <xTaskGenericNotify+0xfc>
    2d4e:	66 0f       	add	r22, r22
    2d50:	77 1f       	adc	r23, r23
    2d52:	66 0f       	add	r22, r22
    2d54:	77 1f       	adc	r23, r23
    2d56:	fd 01       	movw	r30, r26
    2d58:	e6 0f       	add	r30, r22
    2d5a:	f7 1f       	adc	r31, r23
    2d5c:	47 a5       	ldd	r20, Z+47	; 0x2f
    2d5e:	50 a9       	ldd	r21, Z+48	; 0x30
    2d60:	61 a9       	ldd	r22, Z+49	; 0x31
    2d62:	72 a9       	ldd	r23, Z+50	; 0x32
    2d64:	4f 5f       	subi	r20, 0xFF	; 255
    2d66:	5f 4f       	sbci	r21, 0xFF	; 255
    2d68:	6f 4f       	sbci	r22, 0xFF	; 255
    2d6a:	7f 4f       	sbci	r23, 0xFF	; 255
    2d6c:	47 a7       	std	Z+47, r20	; 0x2f
    2d6e:	50 ab       	std	Z+48, r21	; 0x30
    2d70:	61 ab       	std	Z+49, r22	; 0x31
    2d72:	72 ab       	std	Z+50, r23	; 0x32
    2d74:	01 e0       	ldi	r16, 0x01	; 1
    2d76:	1f c0       	rjmp	.+62     	; 0x2db6 <xTaskGenericNotify+0xfc>
    2d78:	66 0f       	add	r22, r22
    2d7a:	77 1f       	adc	r23, r23
    2d7c:	66 0f       	add	r22, r22
    2d7e:	77 1f       	adc	r23, r23
    2d80:	fd 01       	movw	r30, r26
    2d82:	e6 0f       	add	r30, r22
    2d84:	f7 1f       	adc	r31, r23
    2d86:	27 a7       	std	Z+47, r18	; 0x2f
    2d88:	30 ab       	std	Z+48, r19	; 0x30
    2d8a:	41 ab       	std	Z+49, r20	; 0x31
    2d8c:	52 ab       	std	Z+50, r21	; 0x32
    2d8e:	01 e0       	ldi	r16, 0x01	; 1
    2d90:	12 c0       	rjmp	.+36     	; 0x2db6 <xTaskGenericNotify+0xfc>
    2d92:	82 30       	cpi	r24, 0x02	; 2
    2d94:	79 f0       	breq	.+30     	; 0x2db4 <xTaskGenericNotify+0xfa>
    2d96:	66 0f       	add	r22, r22
    2d98:	77 1f       	adc	r23, r23
    2d9a:	66 0f       	add	r22, r22
    2d9c:	77 1f       	adc	r23, r23
    2d9e:	fd 01       	movw	r30, r26
    2da0:	e6 0f       	add	r30, r22
    2da2:	f7 1f       	adc	r31, r23
    2da4:	27 a7       	std	Z+47, r18	; 0x2f
    2da6:	30 ab       	std	Z+48, r19	; 0x30
    2da8:	41 ab       	std	Z+49, r20	; 0x31
    2daa:	52 ab       	std	Z+50, r21	; 0x32
    2dac:	01 e0       	ldi	r16, 0x01	; 1
    2dae:	03 c0       	rjmp	.+6      	; 0x2db6 <xTaskGenericNotify+0xfc>
    2db0:	01 e0       	ldi	r16, 0x01	; 1
    2db2:	01 c0       	rjmp	.+2      	; 0x2db6 <xTaskGenericNotify+0xfc>
    2db4:	00 e0       	ldi	r16, 0x00	; 0
    2db6:	81 30       	cpi	r24, 0x01	; 1
    2db8:	09 f0       	breq	.+2      	; 0x2dbc <xTaskGenericNotify+0x102>
    2dba:	69 c0       	rjmp	.+210    	; 0x2e8e <xTaskGenericNotify+0x1d4>
    2dbc:	1c 96       	adiw	r26, 0x0c	; 12
    2dbe:	ed 91       	ld	r30, X+
    2dc0:	fc 91       	ld	r31, X
    2dc2:	1d 97       	sbiw	r26, 0x0d	; 13
    2dc4:	16 96       	adiw	r26, 0x06	; 6
    2dc6:	cd 91       	ld	r28, X+
    2dc8:	dc 91       	ld	r29, X
    2dca:	17 97       	sbiw	r26, 0x07	; 7
    2dcc:	18 96       	adiw	r26, 0x08	; 8
    2dce:	8d 91       	ld	r24, X+
    2dd0:	9c 91       	ld	r25, X
    2dd2:	19 97       	sbiw	r26, 0x09	; 9
    2dd4:	9f 83       	std	Y+7, r25	; 0x07
    2dd6:	8e 83       	std	Y+6, r24	; 0x06
    2dd8:	18 96       	adiw	r26, 0x08	; 8
    2dda:	cd 91       	ld	r28, X+
    2ddc:	dc 91       	ld	r29, X
    2dde:	19 97       	sbiw	r26, 0x09	; 9
    2de0:	16 96       	adiw	r26, 0x06	; 6
    2de2:	8d 91       	ld	r24, X+
    2de4:	9c 91       	ld	r25, X
    2de6:	17 97       	sbiw	r26, 0x07	; 7
    2de8:	9d 83       	std	Y+5, r25	; 0x05
    2dea:	8c 83       	std	Y+4, r24	; 0x04
    2dec:	81 81       	ldd	r24, Z+1	; 0x01
    2dee:	92 81       	ldd	r25, Z+2	; 0x02
    2df0:	9d 01       	movw	r18, r26
    2df2:	2e 5f       	subi	r18, 0xFE	; 254
    2df4:	3f 4f       	sbci	r19, 0xFF	; 255
    2df6:	82 17       	cp	r24, r18
    2df8:	93 07       	cpc	r25, r19
    2dfa:	31 f4       	brne	.+12     	; 0x2e08 <xTaskGenericNotify+0x14e>
    2dfc:	18 96       	adiw	r26, 0x08	; 8
    2dfe:	8d 91       	ld	r24, X+
    2e00:	9c 91       	ld	r25, X
    2e02:	19 97       	sbiw	r26, 0x09	; 9
    2e04:	92 83       	std	Z+2, r25	; 0x02
    2e06:	81 83       	std	Z+1, r24	; 0x01
    2e08:	1d 96       	adiw	r26, 0x0d	; 13
    2e0a:	1c 92       	st	X, r1
    2e0c:	1e 92       	st	-X, r1
    2e0e:	1c 97       	sbiw	r26, 0x0c	; 12
    2e10:	80 81       	ld	r24, Z
    2e12:	81 50       	subi	r24, 0x01	; 1
    2e14:	80 83       	st	Z, r24
    2e16:	5a 96       	adiw	r26, 0x1a	; 26
    2e18:	ec 91       	ld	r30, X
    2e1a:	5a 97       	sbiw	r26, 0x1a	; 26
    2e1c:	80 91 65 16 	lds	r24, 0x1665	; 0x801665 <uxTopReadyPriority>
    2e20:	8e 17       	cp	r24, r30
    2e22:	10 f4       	brcc	.+4      	; 0x2e28 <xTaskGenericNotify+0x16e>
    2e24:	e0 93 65 16 	sts	0x1665, r30	; 0x801665 <uxTopReadyPriority>
    2e28:	8b e0       	ldi	r24, 0x0B	; 11
    2e2a:	8e 9f       	mul	r24, r30
    2e2c:	f0 01       	movw	r30, r0
    2e2e:	11 24       	eor	r1, r1
    2e30:	e9 55       	subi	r30, 0x59	; 89
    2e32:	f9 4e       	sbci	r31, 0xE9	; 233
    2e34:	01 80       	ldd	r0, Z+1	; 0x01
    2e36:	f2 81       	ldd	r31, Z+2	; 0x02
    2e38:	e0 2d       	mov	r30, r0
    2e3a:	17 96       	adiw	r26, 0x07	; 7
    2e3c:	fc 93       	st	X, r31
    2e3e:	ee 93       	st	-X, r30
    2e40:	16 97       	sbiw	r26, 0x06	; 6
    2e42:	46 81       	ldd	r20, Z+6	; 0x06
    2e44:	57 81       	ldd	r21, Z+7	; 0x07
    2e46:	19 96       	adiw	r26, 0x09	; 9
    2e48:	5c 93       	st	X, r21
    2e4a:	4e 93       	st	-X, r20
    2e4c:	18 97       	sbiw	r26, 0x08	; 8
    2e4e:	c6 81       	ldd	r28, Z+6	; 0x06
    2e50:	d7 81       	ldd	r29, Z+7	; 0x07
    2e52:	3d 83       	std	Y+5, r19	; 0x05
    2e54:	2c 83       	std	Y+4, r18	; 0x04
    2e56:	37 83       	std	Z+7, r19	; 0x07
    2e58:	26 83       	std	Z+6, r18	; 0x06
    2e5a:	5a 96       	adiw	r26, 0x1a	; 26
    2e5c:	ec 91       	ld	r30, X
    2e5e:	5a 97       	sbiw	r26, 0x1a	; 26
    2e60:	8e 9f       	mul	r24, r30
    2e62:	f0 01       	movw	r30, r0
    2e64:	11 24       	eor	r1, r1
    2e66:	e9 55       	subi	r30, 0x59	; 89
    2e68:	f9 4e       	sbci	r31, 0xE9	; 233
    2e6a:	1d 96       	adiw	r26, 0x0d	; 13
    2e6c:	fc 93       	st	X, r31
    2e6e:	ee 93       	st	-X, r30
    2e70:	1c 97       	sbiw	r26, 0x0c	; 12
    2e72:	80 81       	ld	r24, Z
    2e74:	8f 5f       	subi	r24, 0xFF	; 255
    2e76:	80 83       	st	Z, r24
    2e78:	5a 96       	adiw	r26, 0x1a	; 26
    2e7a:	9c 91       	ld	r25, X
    2e7c:	e0 91 15 17 	lds	r30, 0x1715	; 0x801715 <pxCurrentTCB>
    2e80:	f0 91 16 17 	lds	r31, 0x1716	; 0x801716 <pxCurrentTCB+0x1>
    2e84:	82 8d       	ldd	r24, Z+26	; 0x1a
    2e86:	89 17       	cp	r24, r25
    2e88:	10 f4       	brcc	.+4      	; 0x2e8e <xTaskGenericNotify+0x1d4>
    2e8a:	0e 94 91 04 	call	0x922	; 0x922 <vPortYield>
    2e8e:	0f 90       	pop	r0
    2e90:	0f be       	out	0x3f, r0	; 63
    2e92:	80 2f       	mov	r24, r16
    2e94:	df 91       	pop	r29
    2e96:	cf 91       	pop	r28
    2e98:	0f 91       	pop	r16
    2e9a:	ff 90       	pop	r15
    2e9c:	ef 90       	pop	r14
    2e9e:	bf 90       	pop	r11
    2ea0:	af 90       	pop	r10
    2ea2:	9f 90       	pop	r9
    2ea4:	8f 90       	pop	r8
    2ea6:	08 95       	ret

00002ea8 <xTaskGenericNotifyFromISR>:
    2ea8:	8f 92       	push	r8
    2eaa:	9f 92       	push	r9
    2eac:	af 92       	push	r10
    2eae:	bf 92       	push	r11
    2eb0:	cf 92       	push	r12
    2eb2:	df 92       	push	r13
    2eb4:	ef 92       	push	r14
    2eb6:	ff 92       	push	r15
    2eb8:	0f 93       	push	r16
    2eba:	cf 93       	push	r28
    2ebc:	df 93       	push	r29
    2ebe:	dc 01       	movw	r26, r24
    2ec0:	e1 14       	cp	r14, r1
    2ec2:	f1 04       	cpc	r15, r1
    2ec4:	89 f0       	breq	.+34     	; 0x2ee8 <xTaskGenericNotifyFromISR+0x40>
    2ec6:	e6 2f       	mov	r30, r22
    2ec8:	f0 e0       	ldi	r31, 0x00	; 0
    2eca:	ee 0f       	add	r30, r30
    2ecc:	ff 1f       	adc	r31, r31
    2ece:	ee 0f       	add	r30, r30
    2ed0:	ff 1f       	adc	r31, r31
    2ed2:	e8 0f       	add	r30, r24
    2ed4:	f9 1f       	adc	r31, r25
    2ed6:	87 a4       	ldd	r8, Z+47	; 0x2f
    2ed8:	90 a8       	ldd	r9, Z+48	; 0x30
    2eda:	a1 a8       	ldd	r10, Z+49	; 0x31
    2edc:	b2 a8       	ldd	r11, Z+50	; 0x32
    2ede:	f7 01       	movw	r30, r14
    2ee0:	80 82       	st	Z, r8
    2ee2:	91 82       	std	Z+1, r9	; 0x01
    2ee4:	a2 82       	std	Z+2, r10	; 0x02
    2ee6:	b3 82       	std	Z+3, r11	; 0x03
    2ee8:	70 e0       	ldi	r23, 0x00	; 0
    2eea:	fd 01       	movw	r30, r26
    2eec:	e6 0f       	add	r30, r22
    2eee:	f7 1f       	adc	r31, r23
    2ef0:	93 a9       	ldd	r25, Z+51	; 0x33
    2ef2:	82 e0       	ldi	r24, 0x02	; 2
    2ef4:	83 ab       	std	Z+51, r24	; 0x33
    2ef6:	02 30       	cpi	r16, 0x02	; 2
    2ef8:	01 f1       	breq	.+64     	; 0x2f3a <xTaskGenericNotifyFromISR+0x92>
    2efa:	18 f4       	brcc	.+6      	; 0x2f02 <xTaskGenericNotifyFromISR+0x5a>
    2efc:	01 30       	cpi	r16, 0x01	; 1
    2efe:	31 f0       	breq	.+12     	; 0x2f0c <xTaskGenericNotifyFromISR+0x64>
    2f00:	4d c0       	rjmp	.+154    	; 0x2f9c <xTaskGenericNotifyFromISR+0xf4>
    2f02:	03 30       	cpi	r16, 0x03	; 3
    2f04:	79 f1       	breq	.+94     	; 0x2f64 <xTaskGenericNotifyFromISR+0xbc>
    2f06:	04 30       	cpi	r16, 0x04	; 4
    2f08:	d1 f1       	breq	.+116    	; 0x2f7e <xTaskGenericNotifyFromISR+0xd6>
    2f0a:	48 c0       	rjmp	.+144    	; 0x2f9c <xTaskGenericNotifyFromISR+0xf4>
    2f0c:	66 0f       	add	r22, r22
    2f0e:	77 1f       	adc	r23, r23
    2f10:	66 0f       	add	r22, r22
    2f12:	77 1f       	adc	r23, r23
    2f14:	fd 01       	movw	r30, r26
    2f16:	e6 0f       	add	r30, r22
    2f18:	f7 1f       	adc	r31, r23
    2f1a:	87 a4       	ldd	r8, Z+47	; 0x2f
    2f1c:	90 a8       	ldd	r9, Z+48	; 0x30
    2f1e:	a1 a8       	ldd	r10, Z+49	; 0x31
    2f20:	b2 a8       	ldd	r11, Z+50	; 0x32
    2f22:	ba 01       	movw	r22, r20
    2f24:	a9 01       	movw	r20, r18
    2f26:	48 29       	or	r20, r8
    2f28:	59 29       	or	r21, r9
    2f2a:	6a 29       	or	r22, r10
    2f2c:	7b 29       	or	r23, r11
    2f2e:	47 a7       	std	Z+47, r20	; 0x2f
    2f30:	50 ab       	std	Z+48, r21	; 0x30
    2f32:	61 ab       	std	Z+49, r22	; 0x31
    2f34:	72 ab       	std	Z+50, r23	; 0x32
    2f36:	81 e0       	ldi	r24, 0x01	; 1
    2f38:	34 c0       	rjmp	.+104    	; 0x2fa2 <xTaskGenericNotifyFromISR+0xfa>
    2f3a:	66 0f       	add	r22, r22
    2f3c:	77 1f       	adc	r23, r23
    2f3e:	66 0f       	add	r22, r22
    2f40:	77 1f       	adc	r23, r23
    2f42:	fd 01       	movw	r30, r26
    2f44:	e6 0f       	add	r30, r22
    2f46:	f7 1f       	adc	r31, r23
    2f48:	47 a5       	ldd	r20, Z+47	; 0x2f
    2f4a:	50 a9       	ldd	r21, Z+48	; 0x30
    2f4c:	61 a9       	ldd	r22, Z+49	; 0x31
    2f4e:	72 a9       	ldd	r23, Z+50	; 0x32
    2f50:	4f 5f       	subi	r20, 0xFF	; 255
    2f52:	5f 4f       	sbci	r21, 0xFF	; 255
    2f54:	6f 4f       	sbci	r22, 0xFF	; 255
    2f56:	7f 4f       	sbci	r23, 0xFF	; 255
    2f58:	47 a7       	std	Z+47, r20	; 0x2f
    2f5a:	50 ab       	std	Z+48, r21	; 0x30
    2f5c:	61 ab       	std	Z+49, r22	; 0x31
    2f5e:	72 ab       	std	Z+50, r23	; 0x32
    2f60:	81 e0       	ldi	r24, 0x01	; 1
    2f62:	1f c0       	rjmp	.+62     	; 0x2fa2 <xTaskGenericNotifyFromISR+0xfa>
    2f64:	66 0f       	add	r22, r22
    2f66:	77 1f       	adc	r23, r23
    2f68:	66 0f       	add	r22, r22
    2f6a:	77 1f       	adc	r23, r23
    2f6c:	fd 01       	movw	r30, r26
    2f6e:	e6 0f       	add	r30, r22
    2f70:	f7 1f       	adc	r31, r23
    2f72:	27 a7       	std	Z+47, r18	; 0x2f
    2f74:	30 ab       	std	Z+48, r19	; 0x30
    2f76:	41 ab       	std	Z+49, r20	; 0x31
    2f78:	52 ab       	std	Z+50, r21	; 0x32
    2f7a:	81 e0       	ldi	r24, 0x01	; 1
    2f7c:	12 c0       	rjmp	.+36     	; 0x2fa2 <xTaskGenericNotifyFromISR+0xfa>
    2f7e:	92 30       	cpi	r25, 0x02	; 2
    2f80:	79 f0       	breq	.+30     	; 0x2fa0 <xTaskGenericNotifyFromISR+0xf8>
    2f82:	66 0f       	add	r22, r22
    2f84:	77 1f       	adc	r23, r23
    2f86:	66 0f       	add	r22, r22
    2f88:	77 1f       	adc	r23, r23
    2f8a:	fd 01       	movw	r30, r26
    2f8c:	e6 0f       	add	r30, r22
    2f8e:	f7 1f       	adc	r31, r23
    2f90:	27 a7       	std	Z+47, r18	; 0x2f
    2f92:	30 ab       	std	Z+48, r19	; 0x30
    2f94:	41 ab       	std	Z+49, r20	; 0x31
    2f96:	52 ab       	std	Z+50, r21	; 0x32
    2f98:	81 e0       	ldi	r24, 0x01	; 1
    2f9a:	03 c0       	rjmp	.+6      	; 0x2fa2 <xTaskGenericNotifyFromISR+0xfa>
    2f9c:	81 e0       	ldi	r24, 0x01	; 1
    2f9e:	01 c0       	rjmp	.+2      	; 0x2fa2 <xTaskGenericNotifyFromISR+0xfa>
    2fa0:	80 e0       	ldi	r24, 0x00	; 0
    2fa2:	91 30       	cpi	r25, 0x01	; 1
    2fa4:	09 f0       	breq	.+2      	; 0x2fa8 <xTaskGenericNotifyFromISR+0x100>
    2fa6:	96 c0       	rjmp	.+300    	; 0x30d4 <xTaskGenericNotifyFromISR+0x22c>
    2fa8:	90 91 56 16 	lds	r25, 0x1656	; 0x801656 <uxSchedulerSuspended>
    2fac:	91 11       	cpse	r25, r1
    2fae:	5f c0       	rjmp	.+190    	; 0x306e <xTaskGenericNotifyFromISR+0x1c6>
    2fb0:	1c 96       	adiw	r26, 0x0c	; 12
    2fb2:	ed 91       	ld	r30, X+
    2fb4:	fc 91       	ld	r31, X
    2fb6:	1d 97       	sbiw	r26, 0x0d	; 13
    2fb8:	16 96       	adiw	r26, 0x06	; 6
    2fba:	cd 91       	ld	r28, X+
    2fbc:	dc 91       	ld	r29, X
    2fbe:	17 97       	sbiw	r26, 0x07	; 7
    2fc0:	18 96       	adiw	r26, 0x08	; 8
    2fc2:	2d 91       	ld	r18, X+
    2fc4:	3c 91       	ld	r19, X
    2fc6:	19 97       	sbiw	r26, 0x09	; 9
    2fc8:	3f 83       	std	Y+7, r19	; 0x07
    2fca:	2e 83       	std	Y+6, r18	; 0x06
    2fcc:	18 96       	adiw	r26, 0x08	; 8
    2fce:	cd 91       	ld	r28, X+
    2fd0:	dc 91       	ld	r29, X
    2fd2:	19 97       	sbiw	r26, 0x09	; 9
    2fd4:	16 96       	adiw	r26, 0x06	; 6
    2fd6:	2d 91       	ld	r18, X+
    2fd8:	3c 91       	ld	r19, X
    2fda:	17 97       	sbiw	r26, 0x07	; 7
    2fdc:	3d 83       	std	Y+5, r19	; 0x05
    2fde:	2c 83       	std	Y+4, r18	; 0x04
    2fe0:	41 81       	ldd	r20, Z+1	; 0x01
    2fe2:	52 81       	ldd	r21, Z+2	; 0x02
    2fe4:	9d 01       	movw	r18, r26
    2fe6:	2e 5f       	subi	r18, 0xFE	; 254
    2fe8:	3f 4f       	sbci	r19, 0xFF	; 255
    2fea:	42 17       	cp	r20, r18
    2fec:	53 07       	cpc	r21, r19
    2fee:	31 f4       	brne	.+12     	; 0x2ffc <xTaskGenericNotifyFromISR+0x154>
    2ff0:	18 96       	adiw	r26, 0x08	; 8
    2ff2:	4d 91       	ld	r20, X+
    2ff4:	5c 91       	ld	r21, X
    2ff6:	19 97       	sbiw	r26, 0x09	; 9
    2ff8:	52 83       	std	Z+2, r21	; 0x02
    2ffa:	41 83       	std	Z+1, r20	; 0x01
    2ffc:	1d 96       	adiw	r26, 0x0d	; 13
    2ffe:	1c 92       	st	X, r1
    3000:	1e 92       	st	-X, r1
    3002:	1c 97       	sbiw	r26, 0x0c	; 12
    3004:	90 81       	ld	r25, Z
    3006:	91 50       	subi	r25, 0x01	; 1
    3008:	90 83       	st	Z, r25
    300a:	5a 96       	adiw	r26, 0x1a	; 26
    300c:	ec 91       	ld	r30, X
    300e:	5a 97       	sbiw	r26, 0x1a	; 26
    3010:	90 91 65 16 	lds	r25, 0x1665	; 0x801665 <uxTopReadyPriority>
    3014:	9e 17       	cp	r25, r30
    3016:	10 f4       	brcc	.+4      	; 0x301c <xTaskGenericNotifyFromISR+0x174>
    3018:	e0 93 65 16 	sts	0x1665, r30	; 0x801665 <uxTopReadyPriority>
    301c:	9b e0       	ldi	r25, 0x0B	; 11
    301e:	9e 9f       	mul	r25, r30
    3020:	f0 01       	movw	r30, r0
    3022:	11 24       	eor	r1, r1
    3024:	e9 55       	subi	r30, 0x59	; 89
    3026:	f9 4e       	sbci	r31, 0xE9	; 233
    3028:	01 80       	ldd	r0, Z+1	; 0x01
    302a:	f2 81       	ldd	r31, Z+2	; 0x02
    302c:	e0 2d       	mov	r30, r0
    302e:	17 96       	adiw	r26, 0x07	; 7
    3030:	fc 93       	st	X, r31
    3032:	ee 93       	st	-X, r30
    3034:	16 97       	sbiw	r26, 0x06	; 6
    3036:	46 81       	ldd	r20, Z+6	; 0x06
    3038:	57 81       	ldd	r21, Z+7	; 0x07
    303a:	19 96       	adiw	r26, 0x09	; 9
    303c:	5c 93       	st	X, r21
    303e:	4e 93       	st	-X, r20
    3040:	18 97       	sbiw	r26, 0x08	; 8
    3042:	c6 81       	ldd	r28, Z+6	; 0x06
    3044:	d7 81       	ldd	r29, Z+7	; 0x07
    3046:	3d 83       	std	Y+5, r19	; 0x05
    3048:	2c 83       	std	Y+4, r18	; 0x04
    304a:	37 83       	std	Z+7, r19	; 0x07
    304c:	26 83       	std	Z+6, r18	; 0x06
    304e:	5a 96       	adiw	r26, 0x1a	; 26
    3050:	ec 91       	ld	r30, X
    3052:	5a 97       	sbiw	r26, 0x1a	; 26
    3054:	9e 9f       	mul	r25, r30
    3056:	f0 01       	movw	r30, r0
    3058:	11 24       	eor	r1, r1
    305a:	e9 55       	subi	r30, 0x59	; 89
    305c:	f9 4e       	sbci	r31, 0xE9	; 233
    305e:	1d 96       	adiw	r26, 0x0d	; 13
    3060:	fc 93       	st	X, r31
    3062:	ee 93       	st	-X, r30
    3064:	1c 97       	sbiw	r26, 0x0c	; 12
    3066:	90 81       	ld	r25, Z
    3068:	9f 5f       	subi	r25, 0xFF	; 255
    306a:	90 83       	st	Z, r25
    306c:	21 c0       	rjmp	.+66     	; 0x30b0 <xTaskGenericNotifyFromISR+0x208>
    306e:	62 e8       	ldi	r22, 0x82	; 130
    3070:	76 e1       	ldi	r23, 0x16	; 22
    3072:	fb 01       	movw	r30, r22
    3074:	c1 81       	ldd	r28, Z+1	; 0x01
    3076:	d2 81       	ldd	r29, Z+2	; 0x02
    3078:	53 96       	adiw	r26, 0x13	; 19
    307a:	dc 93       	st	X, r29
    307c:	ce 93       	st	-X, r28
    307e:	52 97       	sbiw	r26, 0x12	; 18
    3080:	2e 81       	ldd	r18, Y+6	; 0x06
    3082:	3f 81       	ldd	r19, Y+7	; 0x07
    3084:	55 96       	adiw	r26, 0x15	; 21
    3086:	3c 93       	st	X, r19
    3088:	2e 93       	st	-X, r18
    308a:	54 97       	sbiw	r26, 0x14	; 20
    308c:	4e 81       	ldd	r20, Y+6	; 0x06
    308e:	5f 81       	ldd	r21, Y+7	; 0x07
    3090:	9d 01       	movw	r18, r26
    3092:	22 5f       	subi	r18, 0xF2	; 242
    3094:	3f 4f       	sbci	r19, 0xFF	; 255
    3096:	fa 01       	movw	r30, r20
    3098:	35 83       	std	Z+5, r19	; 0x05
    309a:	24 83       	std	Z+4, r18	; 0x04
    309c:	3f 83       	std	Y+7, r19	; 0x07
    309e:	2e 83       	std	Y+6, r18	; 0x06
    30a0:	59 96       	adiw	r26, 0x19	; 25
    30a2:	7c 93       	st	X, r23
    30a4:	6e 93       	st	-X, r22
    30a6:	58 97       	sbiw	r26, 0x18	; 24
    30a8:	fb 01       	movw	r30, r22
    30aa:	90 81       	ld	r25, Z
    30ac:	9f 5f       	subi	r25, 0xFF	; 255
    30ae:	90 83       	st	Z, r25
    30b0:	5a 96       	adiw	r26, 0x1a	; 26
    30b2:	2c 91       	ld	r18, X
    30b4:	e0 91 15 17 	lds	r30, 0x1715	; 0x801715 <pxCurrentTCB>
    30b8:	f0 91 16 17 	lds	r31, 0x1716	; 0x801716 <pxCurrentTCB+0x1>
    30bc:	92 8d       	ldd	r25, Z+26	; 0x1a
    30be:	92 17       	cp	r25, r18
    30c0:	48 f4       	brcc	.+18     	; 0x30d4 <xTaskGenericNotifyFromISR+0x22c>
    30c2:	c1 14       	cp	r12, r1
    30c4:	d1 04       	cpc	r13, r1
    30c6:	19 f0       	breq	.+6      	; 0x30ce <xTaskGenericNotifyFromISR+0x226>
    30c8:	91 e0       	ldi	r25, 0x01	; 1
    30ca:	f6 01       	movw	r30, r12
    30cc:	90 83       	st	Z, r25
    30ce:	91 e0       	ldi	r25, 0x01	; 1
    30d0:	90 93 5f 16 	sts	0x165F, r25	; 0x80165f <xYieldPending>
    30d4:	df 91       	pop	r29
    30d6:	cf 91       	pop	r28
    30d8:	0f 91       	pop	r16
    30da:	ff 90       	pop	r15
    30dc:	ef 90       	pop	r14
    30de:	df 90       	pop	r13
    30e0:	cf 90       	pop	r12
    30e2:	bf 90       	pop	r11
    30e4:	af 90       	pop	r10
    30e6:	9f 90       	pop	r9
    30e8:	8f 90       	pop	r8
    30ea:	08 95       	ret

000030ec <xTaskGenericNotifyStateClear>:

        configASSERT( uxIndexToClear < configTASK_NOTIFICATION_ARRAY_ENTRIES );

        /* If null is passed in here then it is the calling task that is having
         * its notification state cleared. */
        pxTCB = prvGetTCBFromHandle( xTask );
    30ec:	00 97       	sbiw	r24, 0x00	; 0
    30ee:	21 f4       	brne	.+8      	; 0x30f8 <xTaskGenericNotifyStateClear+0xc>
    30f0:	80 91 15 17 	lds	r24, 0x1715	; 0x801715 <pxCurrentTCB>
    30f4:	90 91 16 17 	lds	r25, 0x1716	; 0x801716 <pxCurrentTCB+0x1>

        taskENTER_CRITICAL();
    30f8:	0f b6       	in	r0, 0x3f	; 63
    30fa:	f8 94       	cli
    30fc:	0f 92       	push	r0
        {
            if( pxTCB->ucNotifyState[ uxIndexToClear ] == taskNOTIFICATION_RECEIVED )
    30fe:	70 e0       	ldi	r23, 0x00	; 0
    3100:	fc 01       	movw	r30, r24
    3102:	e6 0f       	add	r30, r22
    3104:	f7 1f       	adc	r31, r23
    3106:	23 a9       	ldd	r18, Z+51	; 0x33
    3108:	22 30       	cpi	r18, 0x02	; 2
    310a:	31 f4       	brne	.+12     	; 0x3118 <xTaskGenericNotifyStateClear+0x2c>
            {
                pxTCB->ucNotifyState[ uxIndexToClear ] = taskNOT_WAITING_NOTIFICATION;
    310c:	fc 01       	movw	r30, r24
    310e:	e6 0f       	add	r30, r22
    3110:	f7 1f       	adc	r31, r23
    3112:	13 aa       	std	Z+51, r1	; 0x33
                xReturn = pdPASS;
    3114:	81 e0       	ldi	r24, 0x01	; 1
    3116:	01 c0       	rjmp	.+2      	; 0x311a <xTaskGenericNotifyStateClear+0x2e>
            }
            else
            {
                xReturn = pdFAIL;
    3118:	80 e0       	ldi	r24, 0x00	; 0
            }
        }
        taskEXIT_CRITICAL();
    311a:	0f 90       	pop	r0
    311c:	0f be       	out	0x3f, r0	; 63

        return xReturn;
    }
    311e:	08 95       	ret

00003120 <prvGetNextExpireTime>:
    3120:	dc 01       	movw	r26, r24
    3122:	e0 91 21 17 	lds	r30, 0x1721	; 0x801721 <pxCurrentTimerList>
    3126:	f0 91 22 17 	lds	r31, 0x1722	; 0x801722 <pxCurrentTimerList+0x1>
    312a:	80 81       	ld	r24, Z
    312c:	91 e0       	ldi	r25, 0x01	; 1
    312e:	81 11       	cpse	r24, r1
    3130:	90 e0       	ldi	r25, 0x00	; 0
    3132:	9c 93       	st	X, r25
    3134:	91 11       	cpse	r25, r1
    3136:	08 c0       	rjmp	.+16     	; 0x3148 <prvGetNextExpireTime+0x28>
    3138:	07 80       	ldd	r0, Z+7	; 0x07
    313a:	f0 85       	ldd	r31, Z+8	; 0x08
    313c:	e0 2d       	mov	r30, r0
    313e:	60 81       	ld	r22, Z
    3140:	71 81       	ldd	r23, Z+1	; 0x01
    3142:	82 81       	ldd	r24, Z+2	; 0x02
    3144:	93 81       	ldd	r25, Z+3	; 0x03
    3146:	08 95       	ret
    3148:	60 e0       	ldi	r22, 0x00	; 0
    314a:	70 e0       	ldi	r23, 0x00	; 0
    314c:	cb 01       	movw	r24, r22
    314e:	08 95       	ret

00003150 <prvInsertTimerInActiveList>:
    3150:	cf 92       	push	r12
    3152:	df 92       	push	r13
    3154:	ef 92       	push	r14
    3156:	ff 92       	push	r15
    3158:	0f 93       	push	r16
    315a:	1f 93       	push	r17
    315c:	fc 01       	movw	r30, r24
    315e:	42 83       	std	Z+2, r20	; 0x02
    3160:	53 83       	std	Z+3, r21	; 0x03
    3162:	64 83       	std	Z+4, r22	; 0x04
    3164:	75 83       	std	Z+5, r23	; 0x05
    3166:	93 87       	std	Z+11, r25	; 0x0b
    3168:	82 87       	std	Z+10, r24	; 0x0a
    316a:	04 17       	cp	r16, r20
    316c:	15 07       	cpc	r17, r21
    316e:	26 07       	cpc	r18, r22
    3170:	37 07       	cpc	r19, r23
    3172:	c0 f0       	brcs	.+48     	; 0x31a4 <prvInsertTimerInActiveList+0x54>
    3174:	0c 19       	sub	r16, r12
    3176:	1d 09       	sbc	r17, r13
    3178:	2e 09       	sbc	r18, r14
    317a:	3f 09       	sbc	r19, r15
    317c:	86 85       	ldd	r24, Z+14	; 0x0e
    317e:	97 85       	ldd	r25, Z+15	; 0x0f
    3180:	a0 89       	ldd	r26, Z+16	; 0x10
    3182:	b1 89       	ldd	r27, Z+17	; 0x11
    3184:	08 17       	cp	r16, r24
    3186:	19 07       	cpc	r17, r25
    3188:	2a 07       	cpc	r18, r26
    318a:	3b 07       	cpc	r19, r27
    318c:	00 f5       	brcc	.+64     	; 0x31ce <prvInsertTimerInActiveList+0x7e>
    318e:	bf 01       	movw	r22, r30
    3190:	6e 5f       	subi	r22, 0xFE	; 254
    3192:	7f 4f       	sbci	r23, 0xFF	; 255
    3194:	80 91 1f 17 	lds	r24, 0x171F	; 0x80171f <pxOverflowTimerList>
    3198:	90 91 20 17 	lds	r25, 0x1720	; 0x801720 <pxOverflowTimerList+0x1>
    319c:	0e 94 d8 03 	call	0x7b0	; 0x7b0 <vListInsert>
    31a0:	80 e0       	ldi	r24, 0x00	; 0
    31a2:	18 c0       	rjmp	.+48     	; 0x31d4 <prvInsertTimerInActiveList+0x84>
    31a4:	0c 15       	cp	r16, r12
    31a6:	1d 05       	cpc	r17, r13
    31a8:	2e 05       	cpc	r18, r14
    31aa:	3f 05       	cpc	r19, r15
    31ac:	28 f4       	brcc	.+10     	; 0x31b8 <prvInsertTimerInActiveList+0x68>
    31ae:	4c 15       	cp	r20, r12
    31b0:	5d 05       	cpc	r21, r13
    31b2:	6e 05       	cpc	r22, r14
    31b4:	7f 05       	cpc	r23, r15
    31b6:	68 f4       	brcc	.+26     	; 0x31d2 <prvInsertTimerInActiveList+0x82>
    31b8:	bf 01       	movw	r22, r30
    31ba:	6e 5f       	subi	r22, 0xFE	; 254
    31bc:	7f 4f       	sbci	r23, 0xFF	; 255
    31be:	80 91 21 17 	lds	r24, 0x1721	; 0x801721 <pxCurrentTimerList>
    31c2:	90 91 22 17 	lds	r25, 0x1722	; 0x801722 <pxCurrentTimerList+0x1>
    31c6:	0e 94 d8 03 	call	0x7b0	; 0x7b0 <vListInsert>
    31ca:	80 e0       	ldi	r24, 0x00	; 0
    31cc:	03 c0       	rjmp	.+6      	; 0x31d4 <prvInsertTimerInActiveList+0x84>
    31ce:	81 e0       	ldi	r24, 0x01	; 1
    31d0:	01 c0       	rjmp	.+2      	; 0x31d4 <prvInsertTimerInActiveList+0x84>
    31d2:	81 e0       	ldi	r24, 0x01	; 1
    31d4:	1f 91       	pop	r17
    31d6:	0f 91       	pop	r16
    31d8:	ff 90       	pop	r15
    31da:	ef 90       	pop	r14
    31dc:	df 90       	pop	r13
    31de:	cf 90       	pop	r12
    31e0:	08 95       	ret

000031e2 <prvCheckForValidListAndQueue>:
    31e2:	0f b6       	in	r0, 0x3f	; 63
    31e4:	f8 94       	cli
    31e6:	0f 92       	push	r0
    31e8:	80 91 1d 17 	lds	r24, 0x171D	; 0x80171d <xTimerQueue>
    31ec:	90 91 1e 17 	lds	r25, 0x171E	; 0x80171e <xTimerQueue+0x1>
    31f0:	89 2b       	or	r24, r25
    31f2:	e9 f4       	brne	.+58     	; 0x322e <prvCheckForValidListAndQueue+0x4c>
    31f4:	8e e2       	ldi	r24, 0x2E	; 46
    31f6:	97 e1       	ldi	r25, 0x17	; 23
    31f8:	0e 94 c3 03 	call	0x786	; 0x786 <vListInitialise>
    31fc:	83 e2       	ldi	r24, 0x23	; 35
    31fe:	97 e1       	ldi	r25, 0x17	; 23
    3200:	0e 94 c3 03 	call	0x786	; 0x786 <vListInitialise>
    3204:	8e e2       	ldi	r24, 0x2E	; 46
    3206:	97 e1       	ldi	r25, 0x17	; 23
    3208:	90 93 22 17 	sts	0x1722, r25	; 0x801722 <pxCurrentTimerList+0x1>
    320c:	80 93 21 17 	sts	0x1721, r24	; 0x801721 <pxCurrentTimerList>
    3210:	83 e2       	ldi	r24, 0x23	; 35
    3212:	97 e1       	ldi	r25, 0x17	; 23
    3214:	90 93 20 17 	sts	0x1720, r25	; 0x801720 <pxOverflowTimerList+0x1>
    3218:	80 93 1f 17 	sts	0x171F, r24	; 0x80171f <pxOverflowTimerList>
    321c:	40 e0       	ldi	r20, 0x00	; 0
    321e:	67 e0       	ldi	r22, 0x07	; 7
    3220:	8a e0       	ldi	r24, 0x0A	; 10
    3222:	0e 94 86 06 	call	0xd0c	; 0xd0c <xQueueGenericCreate>
    3226:	90 93 1e 17 	sts	0x171E, r25	; 0x80171e <xTimerQueue+0x1>
    322a:	80 93 1d 17 	sts	0x171D, r24	; 0x80171d <xTimerQueue>
    322e:	0f 90       	pop	r0
    3230:	0f be       	out	0x3f, r0	; 63
    3232:	08 95       	ret

00003234 <xTimerCreateTimerTask>:
    3234:	ef 92       	push	r14
    3236:	ff 92       	push	r15
    3238:	0f 93       	push	r16
    323a:	d3 df       	rcall	.-90     	; 0x31e2 <prvCheckForValidListAndQueue>
    323c:	80 91 1d 17 	lds	r24, 0x171D	; 0x80171d <xTimerQueue>
    3240:	90 91 1e 17 	lds	r25, 0x171E	; 0x80171e <xTimerQueue+0x1>
    3244:	89 2b       	or	r24, r25
    3246:	91 f0       	breq	.+36     	; 0x326c <xTimerCreateTimerTask+0x38>
    3248:	0f 2e       	mov	r0, r31
    324a:	fb e1       	ldi	r31, 0x1B	; 27
    324c:	ef 2e       	mov	r14, r31
    324e:	f7 e1       	ldi	r31, 0x17	; 23
    3250:	ff 2e       	mov	r15, r31
    3252:	f0 2d       	mov	r31, r0
    3254:	03 e0       	ldi	r16, 0x03	; 3
    3256:	20 e0       	ldi	r18, 0x00	; 0
    3258:	30 e0       	ldi	r19, 0x00	; 0
    325a:	40 ec       	ldi	r20, 0xC0	; 192
    325c:	50 e0       	ldi	r21, 0x00	; 0
    325e:	64 e7       	ldi	r22, 0x74	; 116
    3260:	72 e0       	ldi	r23, 0x02	; 2
    3262:	87 ed       	ldi	r24, 0xD7	; 215
    3264:	90 e0       	ldi	r25, 0x00	; 0
    3266:	0e 94 1b 0e 	call	0x1c36	; 0x1c36 <xTaskCreate>
    326a:	01 c0       	rjmp	.+2      	; 0x326e <xTimerCreateTimerTask+0x3a>
    326c:	80 e0       	ldi	r24, 0x00	; 0
    326e:	0f 91       	pop	r16
    3270:	ff 90       	pop	r15
    3272:	ef 90       	pop	r14
    3274:	08 95       	ret

00003276 <xTimerGenericCommand>:
    BaseType_t xTimerGenericCommand( TimerHandle_t xTimer,
                                     const BaseType_t xCommandID,
                                     const TickType_t xOptionalValue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const TickType_t xTicksToWait )
    {
    3276:	8f 92       	push	r8
    3278:	9f 92       	push	r9
    327a:	af 92       	push	r10
    327c:	bf 92       	push	r11
    327e:	cf 92       	push	r12
    3280:	df 92       	push	r13
    3282:	ef 92       	push	r14
    3284:	ff 92       	push	r15
    3286:	0f 93       	push	r16
    3288:	1f 93       	push	r17
    328a:	cf 93       	push	r28
    328c:	df 93       	push	r29
    328e:	cd b7       	in	r28, 0x3d	; 61
    3290:	de b7       	in	r29, 0x3e	; 62
    3292:	27 97       	sbiw	r28, 0x07	; 7
    3294:	0f b6       	in	r0, 0x3f	; 63
    3296:	f8 94       	cli
    3298:	de bf       	out	0x3e, r29	; 62
    329a:	0f be       	out	0x3f, r0	; 63
    329c:	cd bf       	out	0x3d, r28	; 61

        configASSERT( xTimer );

        /* Send a message to the timer service task to perform a particular action
         * on a particular timer definition. */
        if( xTimerQueue != NULL )
    329e:	e0 91 1d 17 	lds	r30, 0x171D	; 0x80171d <xTimerQueue>
    32a2:	f0 91 1e 17 	lds	r31, 0x171E	; 0x80171e <xTimerQueue+0x1>
    32a6:	30 97       	sbiw	r30, 0x00	; 0
    32a8:	81 f1       	breq	.+96     	; 0x330a <xTimerGenericCommand+0x94>
        {
            /* Send a command to the timer service task to start the xTimer timer. */
            xMessage.xMessageID = xCommandID;
    32aa:	69 83       	std	Y+1, r22	; 0x01
            xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
    32ac:	2a 83       	std	Y+2, r18	; 0x02
    32ae:	3b 83       	std	Y+3, r19	; 0x03
    32b0:	4c 83       	std	Y+4, r20	; 0x04
    32b2:	5d 83       	std	Y+5, r21	; 0x05
            xMessage.u.xTimerParameters.pxTimer = xTimer;
    32b4:	9f 83       	std	Y+7, r25	; 0x07
    32b6:	8e 83       	std	Y+6, r24	; 0x06

            if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
    32b8:	66 30       	cpi	r22, 0x06	; 6
    32ba:	f4 f4       	brge	.+60     	; 0x32f8 <xTimerGenericCommand+0x82>
            {
                if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
    32bc:	c3 da       	rcall	.-2682   	; 0x2844 <xTaskGetSchedulerState>
    32be:	82 30       	cpi	r24, 0x02	; 2
    32c0:	69 f4       	brne	.+26     	; 0x32dc <xTimerGenericCommand+0x66>
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
    32c2:	00 e0       	ldi	r16, 0x00	; 0
    32c4:	a7 01       	movw	r20, r14
    32c6:	96 01       	movw	r18, r12
    32c8:	be 01       	movw	r22, r28
    32ca:	6f 5f       	subi	r22, 0xFF	; 255
    32cc:	7f 4f       	sbci	r23, 0xFF	; 255
    32ce:	80 91 1d 17 	lds	r24, 0x171D	; 0x80171d <xTimerQueue>
    32d2:	90 91 1e 17 	lds	r25, 0x171E	; 0x80171e <xTimerQueue+0x1>
    32d6:	0e 94 a9 06 	call	0xd52	; 0xd52 <xQueueGenericSend>
    32da:	18 c0       	rjmp	.+48     	; 0x330c <xTimerGenericCommand+0x96>
                }
                else
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
    32dc:	00 e0       	ldi	r16, 0x00	; 0
    32de:	20 e0       	ldi	r18, 0x00	; 0
    32e0:	30 e0       	ldi	r19, 0x00	; 0
    32e2:	a9 01       	movw	r20, r18
    32e4:	be 01       	movw	r22, r28
    32e6:	6f 5f       	subi	r22, 0xFF	; 255
    32e8:	7f 4f       	sbci	r23, 0xFF	; 255
    32ea:	80 91 1d 17 	lds	r24, 0x171D	; 0x80171d <xTimerQueue>
    32ee:	90 91 1e 17 	lds	r25, 0x171E	; 0x80171e <xTimerQueue+0x1>
    32f2:	0e 94 a9 06 	call	0xd52	; 0xd52 <xQueueGenericSend>
    32f6:	0a c0       	rjmp	.+20     	; 0x330c <xTimerGenericCommand+0x96>
                }
            }
            else
            {
                xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
    32f8:	20 e0       	ldi	r18, 0x00	; 0
    32fa:	a8 01       	movw	r20, r16
    32fc:	be 01       	movw	r22, r28
    32fe:	6f 5f       	subi	r22, 0xFF	; 255
    3300:	7f 4f       	sbci	r23, 0xFF	; 255
    3302:	cf 01       	movw	r24, r30
    3304:	0e 94 3b 07 	call	0xe76	; 0xe76 <xQueueGenericSendFromISR>
    3308:	01 c0       	rjmp	.+2      	; 0x330c <xTimerGenericCommand+0x96>
                                     const BaseType_t xCommandID,
                                     const TickType_t xOptionalValue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const TickType_t xTicksToWait )
    {
        BaseType_t xReturn = pdFAIL;
    330a:	80 e0       	ldi	r24, 0x00	; 0
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
    }
    330c:	27 96       	adiw	r28, 0x07	; 7
    330e:	0f b6       	in	r0, 0x3f	; 63
    3310:	f8 94       	cli
    3312:	de bf       	out	0x3e, r29	; 62
    3314:	0f be       	out	0x3f, r0	; 63
    3316:	cd bf       	out	0x3d, r28	; 61
    3318:	df 91       	pop	r29
    331a:	cf 91       	pop	r28
    331c:	1f 91       	pop	r17
    331e:	0f 91       	pop	r16
    3320:	ff 90       	pop	r15
    3322:	ef 90       	pop	r14
    3324:	df 90       	pop	r13
    3326:	cf 90       	pop	r12
    3328:	bf 90       	pop	r11
    332a:	af 90       	pop	r10
    332c:	9f 90       	pop	r9
    332e:	8f 90       	pop	r8
    3330:	08 95       	ret

00003332 <prvSwitchTimerLists>:
        }
    }
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
    3332:	8f 92       	push	r8
    3334:	9f 92       	push	r9
    3336:	af 92       	push	r10
    3338:	bf 92       	push	r11
    333a:	cf 92       	push	r12
    333c:	df 92       	push	r13
    333e:	ef 92       	push	r14
    3340:	ff 92       	push	r15
    3342:	0f 93       	push	r16
    3344:	1f 93       	push	r17
    3346:	cf 93       	push	r28
    3348:	df 93       	push	r29

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
    334a:	3b c0       	rjmp	.+118    	; 0x33c2 <prvSwitchTimerLists+0x90>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
    334c:	07 80       	ldd	r0, Z+7	; 0x07
    334e:	f0 85       	ldd	r31, Z+8	; 0x08
    3350:	e0 2d       	mov	r30, r0
    3352:	80 80       	ld	r8, Z
    3354:	91 80       	ldd	r9, Z+1	; 0x01
    3356:	a2 80       	ldd	r10, Z+2	; 0x02
    3358:	b3 80       	ldd	r11, Z+3	; 0x03

            /* Remove the timer from the list. */
            pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
    335a:	c0 85       	ldd	r28, Z+8	; 0x08
    335c:	d1 85       	ldd	r29, Z+9	; 0x09
            ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    335e:	8e 01       	movw	r16, r28
    3360:	0e 5f       	subi	r16, 0xFE	; 254
    3362:	1f 4f       	sbci	r17, 0xFF	; 255
    3364:	c8 01       	movw	r24, r16
    3366:	0e 94 15 04 	call	0x82a	; 0x82a <uxListRemove>
            traceTIMER_EXPIRED( pxTimer );

            /* Execute its callback, then send a command to restart the timer if
             * it is an auto-reload timer.  It cannot be restarted here as the lists
             * have not yet been switched. */
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    336a:	ec 89       	ldd	r30, Y+20	; 0x14
    336c:	fd 89       	ldd	r31, Y+21	; 0x15
    336e:	ce 01       	movw	r24, r28
    3370:	19 95       	eicall

            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
    3372:	8e 89       	ldd	r24, Y+22	; 0x16
    3374:	82 ff       	sbrs	r24, 2
    3376:	25 c0       	rjmp	.+74     	; 0x33c2 <prvSwitchTimerLists+0x90>
                 * the timer going into the same timer list then it has already expired
                 * and the timer should be re-inserted into the current list so it is
                 * processed again within this loop.  Otherwise a command should be sent
                 * to restart the timer to ensure it is only inserted into a list after
                 * the lists have been swapped. */
                xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
    3378:	8e 85       	ldd	r24, Y+14	; 0x0e
    337a:	9f 85       	ldd	r25, Y+15	; 0x0f
    337c:	a8 89       	ldd	r26, Y+16	; 0x10
    337e:	b9 89       	ldd	r27, Y+17	; 0x11
    3380:	88 0d       	add	r24, r8
    3382:	99 1d       	adc	r25, r9
    3384:	aa 1d       	adc	r26, r10
    3386:	bb 1d       	adc	r27, r11

                if( xReloadTime > xNextExpireTime )
    3388:	88 16       	cp	r8, r24
    338a:	99 06       	cpc	r9, r25
    338c:	aa 06       	cpc	r10, r26
    338e:	bb 06       	cpc	r11, r27
    3390:	70 f4       	brcc	.+28     	; 0x33ae <prvSwitchTimerLists+0x7c>
                {
                    listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
    3392:	8a 83       	std	Y+2, r24	; 0x02
    3394:	9b 83       	std	Y+3, r25	; 0x03
    3396:	ac 83       	std	Y+4, r26	; 0x04
    3398:	bd 83       	std	Y+5, r27	; 0x05
                    listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
    339a:	db 87       	std	Y+11, r29	; 0x0b
    339c:	ca 87       	std	Y+10, r28	; 0x0a
                    vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
    339e:	b8 01       	movw	r22, r16
    33a0:	80 91 21 17 	lds	r24, 0x1721	; 0x801721 <pxCurrentTimerList>
    33a4:	90 91 22 17 	lds	r25, 0x1722	; 0x801722 <pxCurrentTimerList+0x1>
    33a8:	0e 94 d8 03 	call	0x7b0	; 0x7b0 <vListInsert>
    33ac:	0a c0       	rjmp	.+20     	; 0x33c2 <prvSwitchTimerLists+0x90>
                }
                else
                {
                    xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
    33ae:	c1 2c       	mov	r12, r1
    33b0:	d1 2c       	mov	r13, r1
    33b2:	76 01       	movw	r14, r12
    33b4:	00 e0       	ldi	r16, 0x00	; 0
    33b6:	10 e0       	ldi	r17, 0x00	; 0
    33b8:	a5 01       	movw	r20, r10
    33ba:	94 01       	movw	r18, r8
    33bc:	60 e0       	ldi	r22, 0x00	; 0
    33be:	ce 01       	movw	r24, r28
    33c0:	5a df       	rcall	.-332    	; 0x3276 <xTimerGenericCommand>

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
    33c2:	e0 91 21 17 	lds	r30, 0x1721	; 0x801721 <pxCurrentTimerList>
    33c6:	f0 91 22 17 	lds	r31, 0x1722	; 0x801722 <pxCurrentTimerList+0x1>
    33ca:	80 81       	ld	r24, Z
    33cc:	81 11       	cpse	r24, r1
    33ce:	be cf       	rjmp	.-132    	; 0x334c <prvSwitchTimerLists+0x1a>
                mtCOVERAGE_TEST_MARKER();
            }
        }

        pxTemp = pxCurrentTimerList;
        pxCurrentTimerList = pxOverflowTimerList;
    33d0:	80 91 1f 17 	lds	r24, 0x171F	; 0x80171f <pxOverflowTimerList>
    33d4:	90 91 20 17 	lds	r25, 0x1720	; 0x801720 <pxOverflowTimerList+0x1>
    33d8:	90 93 22 17 	sts	0x1722, r25	; 0x801722 <pxCurrentTimerList+0x1>
    33dc:	80 93 21 17 	sts	0x1721, r24	; 0x801721 <pxCurrentTimerList>
        pxOverflowTimerList = pxTemp;
    33e0:	f0 93 20 17 	sts	0x1720, r31	; 0x801720 <pxOverflowTimerList+0x1>
    33e4:	e0 93 1f 17 	sts	0x171F, r30	; 0x80171f <pxOverflowTimerList>
    }
    33e8:	df 91       	pop	r29
    33ea:	cf 91       	pop	r28
    33ec:	1f 91       	pop	r17
    33ee:	0f 91       	pop	r16
    33f0:	ff 90       	pop	r15
    33f2:	ef 90       	pop	r14
    33f4:	df 90       	pop	r13
    33f6:	cf 90       	pop	r12
    33f8:	bf 90       	pop	r11
    33fa:	af 90       	pop	r10
    33fc:	9f 90       	pop	r9
    33fe:	8f 90       	pop	r8
    3400:	08 95       	ret

00003402 <prvSampleTimeNow>:
        return xNextExpireTime;
    }
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
    3402:	cf 92       	push	r12
    3404:	df 92       	push	r13
    3406:	ef 92       	push	r14
    3408:	ff 92       	push	r15
    340a:	cf 93       	push	r28
    340c:	df 93       	push	r29
    340e:	ec 01       	movw	r28, r24
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
    3410:	0e 94 a5 0e 	call	0x1d4a	; 0x1d4a <xTaskGetTickCount>
    3414:	6b 01       	movw	r12, r22
    3416:	7c 01       	movw	r14, r24

        if( xTimeNow < xLastTime )
    3418:	80 91 17 17 	lds	r24, 0x1717	; 0x801717 <xLastTime.2436>
    341c:	90 91 18 17 	lds	r25, 0x1718	; 0x801718 <xLastTime.2436+0x1>
    3420:	a0 91 19 17 	lds	r26, 0x1719	; 0x801719 <xLastTime.2436+0x2>
    3424:	b0 91 1a 17 	lds	r27, 0x171A	; 0x80171a <xLastTime.2436+0x3>
    3428:	c8 16       	cp	r12, r24
    342a:	d9 06       	cpc	r13, r25
    342c:	ea 06       	cpc	r14, r26
    342e:	fb 06       	cpc	r15, r27
    3430:	20 f4       	brcc	.+8      	; 0x343a <prvSampleTimeNow+0x38>
        {
            prvSwitchTimerLists();
    3432:	7f df       	rcall	.-258    	; 0x3332 <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
    3434:	81 e0       	ldi	r24, 0x01	; 1
    3436:	88 83       	st	Y, r24
    3438:	01 c0       	rjmp	.+2      	; 0x343c <prvSampleTimeNow+0x3a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
    343a:	18 82       	st	Y, r1
        }

        xLastTime = xTimeNow;
    343c:	c0 92 17 17 	sts	0x1717, r12	; 0x801717 <xLastTime.2436>
    3440:	d0 92 18 17 	sts	0x1718, r13	; 0x801718 <xLastTime.2436+0x1>
    3444:	e0 92 19 17 	sts	0x1719, r14	; 0x801719 <xLastTime.2436+0x2>
    3448:	f0 92 1a 17 	sts	0x171A, r15	; 0x80171a <xLastTime.2436+0x3>

        return xTimeNow;
    }
    344c:	c7 01       	movw	r24, r14
    344e:	b6 01       	movw	r22, r12
    3450:	df 91       	pop	r29
    3452:	cf 91       	pop	r28
    3454:	ff 90       	pop	r15
    3456:	ef 90       	pop	r14
    3458:	df 90       	pop	r13
    345a:	cf 90       	pop	r12
    345c:	08 95       	ret

0000345e <prvProcessExpiredTimer>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
    345e:	4f 92       	push	r4
    3460:	5f 92       	push	r5
    3462:	6f 92       	push	r6
    3464:	7f 92       	push	r7
    3466:	8f 92       	push	r8
    3468:	9f 92       	push	r9
    346a:	af 92       	push	r10
    346c:	bf 92       	push	r11
    346e:	cf 92       	push	r12
    3470:	df 92       	push	r13
    3472:	ef 92       	push	r14
    3474:	ff 92       	push	r15
    3476:	0f 93       	push	r16
    3478:	1f 93       	push	r17
    347a:	cf 93       	push	r28
    347c:	df 93       	push	r29
    347e:	4b 01       	movw	r8, r22
    3480:	5c 01       	movw	r10, r24
    3482:	29 01       	movw	r4, r18
    3484:	3a 01       	movw	r6, r20
        BaseType_t xResult;
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
    3486:	e0 91 21 17 	lds	r30, 0x1721	; 0x801721 <pxCurrentTimerList>
    348a:	f0 91 22 17 	lds	r31, 0x1722	; 0x801722 <pxCurrentTimerList+0x1>
    348e:	07 80       	ldd	r0, Z+7	; 0x07
    3490:	f0 85       	ldd	r31, Z+8	; 0x08
    3492:	e0 2d       	mov	r30, r0
    3494:	c0 85       	ldd	r28, Z+8	; 0x08
    3496:	d1 85       	ldd	r29, Z+9	; 0x09

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    3498:	ce 01       	movw	r24, r28
    349a:	02 96       	adiw	r24, 0x02	; 2
    349c:	0e 94 15 04 	call	0x82a	; 0x82a <uxListRemove>
        traceTIMER_EXPIRED( pxTimer );

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
    34a0:	8e 89       	ldd	r24, Y+22	; 0x16
    34a2:	82 ff       	sbrs	r24, 2
    34a4:	1b c0       	rjmp	.+54     	; 0x34dc <prvProcessExpiredTimer+0x7e>
        {
            /* The timer is inserted into a list using a time relative to anything
             * other than the current time.  It will therefore be inserted into the
             * correct list relative to the time this task thinks it is now. */
            if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
    34a6:	4e 85       	ldd	r20, Y+14	; 0x0e
    34a8:	5f 85       	ldd	r21, Y+15	; 0x0f
    34aa:	68 89       	ldd	r22, Y+16	; 0x10
    34ac:	79 89       	ldd	r23, Y+17	; 0x11
    34ae:	48 0d       	add	r20, r8
    34b0:	59 1d       	adc	r21, r9
    34b2:	6a 1d       	adc	r22, r10
    34b4:	7b 1d       	adc	r23, r11
    34b6:	75 01       	movw	r14, r10
    34b8:	64 01       	movw	r12, r8
    34ba:	93 01       	movw	r18, r6
    34bc:	82 01       	movw	r16, r4
    34be:	ce 01       	movw	r24, r28
    34c0:	47 de       	rcall	.-882    	; 0x3150 <prvInsertTimerInActiveList>
    34c2:	88 23       	and	r24, r24
    34c4:	69 f0       	breq	.+26     	; 0x34e0 <prvProcessExpiredTimer+0x82>
            {
                /* The timer expired before it was added to the active timer
                 * list.  Reload it now.  */
                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
    34c6:	c1 2c       	mov	r12, r1
    34c8:	d1 2c       	mov	r13, r1
    34ca:	76 01       	movw	r14, r12
    34cc:	00 e0       	ldi	r16, 0x00	; 0
    34ce:	10 e0       	ldi	r17, 0x00	; 0
    34d0:	a5 01       	movw	r20, r10
    34d2:	94 01       	movw	r18, r8
    34d4:	60 e0       	ldi	r22, 0x00	; 0
    34d6:	ce 01       	movw	r24, r28
    34d8:	ce de       	rcall	.-612    	; 0x3276 <xTimerGenericCommand>
    34da:	02 c0       	rjmp	.+4      	; 0x34e0 <prvProcessExpiredTimer+0x82>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
    34dc:	8e 7f       	andi	r24, 0xFE	; 254
    34de:	8e 8b       	std	Y+22, r24	; 0x16
            mtCOVERAGE_TEST_MARKER();
        }

        /* Call the timer callback. */
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    34e0:	ec 89       	ldd	r30, Y+20	; 0x14
    34e2:	fd 89       	ldd	r31, Y+21	; 0x15
    34e4:	ce 01       	movw	r24, r28
    34e6:	19 95       	eicall
    }
    34e8:	df 91       	pop	r29
    34ea:	cf 91       	pop	r28
    34ec:	1f 91       	pop	r17
    34ee:	0f 91       	pop	r16
    34f0:	ff 90       	pop	r15
    34f2:	ef 90       	pop	r14
    34f4:	df 90       	pop	r13
    34f6:	cf 90       	pop	r12
    34f8:	bf 90       	pop	r11
    34fa:	af 90       	pop	r10
    34fc:	9f 90       	pop	r9
    34fe:	8f 90       	pop	r8
    3500:	7f 90       	pop	r7
    3502:	6f 90       	pop	r6
    3504:	5f 90       	pop	r5
    3506:	4f 90       	pop	r4
    3508:	08 95       	ret

0000350a <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
    350a:	8f 92       	push	r8
    350c:	9f 92       	push	r9
    350e:	af 92       	push	r10
    3510:	bf 92       	push	r11
    3512:	cf 92       	push	r12
    3514:	df 92       	push	r13
    3516:	ef 92       	push	r14
    3518:	ff 92       	push	r15
    351a:	1f 93       	push	r17
    351c:	cf 93       	push	r28
    351e:	df 93       	push	r29
    3520:	1f 92       	push	r1
    3522:	cd b7       	in	r28, 0x3d	; 61
    3524:	de b7       	in	r29, 0x3e	; 62
    3526:	6b 01       	movw	r12, r22
    3528:	7c 01       	movw	r14, r24
    352a:	14 2f       	mov	r17, r20
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
    352c:	0e 94 9f 0e 	call	0x1d3e	; 0x1d3e <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
    3530:	ce 01       	movw	r24, r28
    3532:	01 96       	adiw	r24, 0x01	; 1
    3534:	66 df       	rcall	.-308    	; 0x3402 <prvSampleTimeNow>
    3536:	4b 01       	movw	r8, r22
    3538:	5c 01       	movw	r10, r24

            if( xTimerListsWereSwitched == pdFALSE )
    353a:	89 81       	ldd	r24, Y+1	; 0x01
    353c:	81 11       	cpse	r24, r1
    353e:	2d c0       	rjmp	.+90     	; 0x359a <prvProcessTimerOrBlockTask+0x90>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
    3540:	11 11       	cpse	r17, r1
    3542:	0d c0       	rjmp	.+26     	; 0x355e <prvProcessTimerOrBlockTask+0x54>
    3544:	8c 14       	cp	r8, r12
    3546:	9d 04       	cpc	r9, r13
    3548:	ae 04       	cpc	r10, r14
    354a:	bf 04       	cpc	r11, r15
    354c:	40 f0       	brcs	.+16     	; 0x355e <prvProcessTimerOrBlockTask+0x54>
                {
                    ( void ) xTaskResumeAll();
    354e:	0e 94 df 0f 	call	0x1fbe	; 0x1fbe <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
    3552:	a5 01       	movw	r20, r10
    3554:	94 01       	movw	r18, r8
    3556:	c7 01       	movw	r24, r14
    3558:	b6 01       	movw	r22, r12
    355a:	81 df       	rcall	.-254    	; 0x345e <prvProcessExpiredTimer>
    355c:	20 c0       	rjmp	.+64     	; 0x359e <prvProcessTimerOrBlockTask+0x94>
                     * time has not been reached yet.  This task should therefore
                     * block to wait for the next expire time or a command to be
                     * received - whichever comes first.  The following line cannot
                     * be reached unless xNextExpireTime > xTimeNow, except in the
                     * case when the current timer list is empty. */
                    if( xListWasEmpty != pdFALSE )
    355e:	11 23       	and	r17, r17
    3560:	41 f0       	breq	.+16     	; 0x3572 <prvProcessTimerOrBlockTask+0x68>
                    {
                        /* The current timer list is empty - is the overflow list
                         * also empty? */
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
    3562:	e0 91 1f 17 	lds	r30, 0x171F	; 0x80171f <pxOverflowTimerList>
    3566:	f0 91 20 17 	lds	r31, 0x1720	; 0x801720 <pxOverflowTimerList+0x1>
    356a:	80 81       	ld	r24, Z
    356c:	11 e0       	ldi	r17, 0x01	; 1
    356e:	81 11       	cpse	r24, r1
    3570:	10 e0       	ldi	r17, 0x00	; 0
                    }

                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
    3572:	b7 01       	movw	r22, r14
    3574:	a6 01       	movw	r20, r12
    3576:	48 19       	sub	r20, r8
    3578:	59 09       	sbc	r21, r9
    357a:	6a 09       	sbc	r22, r10
    357c:	7b 09       	sbc	r23, r11
    357e:	21 2f       	mov	r18, r17
    3580:	80 91 1d 17 	lds	r24, 0x171D	; 0x80171d <xTimerQueue>
    3584:	90 91 1e 17 	lds	r25, 0x171E	; 0x80171e <xTimerQueue+0x1>
    3588:	0e 94 b6 08 	call	0x116c	; 0x116c <vQueueWaitForMessageRestricted>

                    if( xTaskResumeAll() == pdFALSE )
    358c:	0e 94 df 0f 	call	0x1fbe	; 0x1fbe <xTaskResumeAll>
    3590:	81 11       	cpse	r24, r1
    3592:	05 c0       	rjmp	.+10     	; 0x359e <prvProcessTimerOrBlockTask+0x94>
                    {
                        /* Yield to wait for either a command to arrive, or the
                         * block time to expire.  If a command arrived between the
                         * critical section being exited and this yield then the yield
                         * will not cause the task to block. */
                        portYIELD_WITHIN_API();
    3594:	0e 94 91 04 	call	0x922	; 0x922 <vPortYield>
    3598:	02 c0       	rjmp	.+4      	; 0x359e <prvProcessTimerOrBlockTask+0x94>
                    }
                }
            }
            else
            {
                ( void ) xTaskResumeAll();
    359a:	0e 94 df 0f 	call	0x1fbe	; 0x1fbe <xTaskResumeAll>
            }
        }
    }
    359e:	0f 90       	pop	r0
    35a0:	df 91       	pop	r29
    35a2:	cf 91       	pop	r28
    35a4:	1f 91       	pop	r17
    35a6:	ff 90       	pop	r15
    35a8:	ef 90       	pop	r14
    35aa:	df 90       	pop	r13
    35ac:	cf 90       	pop	r12
    35ae:	bf 90       	pop	r11
    35b0:	af 90       	pop	r10
    35b2:	9f 90       	pop	r9
    35b4:	8f 90       	pop	r8
    35b6:	08 95       	ret

000035b8 <prvProcessReceivedCommands>:
        return xProcessTimerNow;
    }
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
    35b8:	af 92       	push	r10
    35ba:	bf 92       	push	r11
    35bc:	cf 92       	push	r12
    35be:	df 92       	push	r13
    35c0:	ef 92       	push	r14
    35c2:	ff 92       	push	r15
    35c4:	0f 93       	push	r16
    35c6:	1f 93       	push	r17
    35c8:	cf 93       	push	r28
    35ca:	df 93       	push	r29
    35cc:	cd b7       	in	r28, 0x3d	; 61
    35ce:	de b7       	in	r29, 0x3e	; 62
    35d0:	28 97       	sbiw	r28, 0x08	; 8
    35d2:	0f b6       	in	r0, 0x3f	; 63
    35d4:	f8 94       	cli
    35d6:	de bf       	out	0x3e, r29	; 62
    35d8:	0f be       	out	0x3f, r0	; 63
    35da:	cd bf       	out	0x3d, r28	; 61
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched, xResult;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
    35dc:	82 c0       	rjmp	.+260    	; 0x36e2 <prvProcessReceivedCommands+0x12a>
                }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
    35de:	89 81       	ldd	r24, Y+1	; 0x01
    35e0:	88 23       	and	r24, r24
    35e2:	0c f4       	brge	.+2      	; 0x35e6 <prvProcessReceivedCommands+0x2e>
    35e4:	7e c0       	rjmp	.+252    	; 0x36e2 <prvProcessReceivedCommands+0x12a>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
    35e6:	ae 80       	ldd	r10, Y+6	; 0x06
    35e8:	bf 80       	ldd	r11, Y+7	; 0x07

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
    35ea:	d5 01       	movw	r26, r10
    35ec:	1c 96       	adiw	r26, 0x0c	; 12
    35ee:	8d 91       	ld	r24, X+
    35f0:	9c 91       	ld	r25, X
    35f2:	1d 97       	sbiw	r26, 0x0d	; 13
    35f4:	89 2b       	or	r24, r25
    35f6:	21 f0       	breq	.+8      	; 0x3600 <prvProcessReceivedCommands+0x48>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    35f8:	c5 01       	movw	r24, r10
    35fa:	02 96       	adiw	r24, 0x02	; 2
    35fc:	0e 94 15 04 	call	0x82a	; 0x82a <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
    3600:	ce 01       	movw	r24, r28
    3602:	08 96       	adiw	r24, 0x08	; 8
    3604:	fe de       	rcall	.-516    	; 0x3402 <prvSampleTimeNow>
    3606:	8b 01       	movw	r16, r22
    3608:	9c 01       	movw	r18, r24

                switch( xMessage.xMessageID )
    360a:	e9 81       	ldd	r30, Y+1	; 0x01
    360c:	0e 2e       	mov	r0, r30
    360e:	00 0c       	add	r0, r0
    3610:	ff 0b       	sbc	r31, r31
    3612:	ea 30       	cpi	r30, 0x0A	; 10
    3614:	f1 05       	cpc	r31, r1
    3616:	08 f0       	brcs	.+2      	; 0x361a <prvProcessReceivedCommands+0x62>
    3618:	64 c0       	rjmp	.+200    	; 0x36e2 <prvProcessReceivedCommands+0x12a>
    361a:	88 27       	eor	r24, r24
    361c:	ee 58       	subi	r30, 0x8E	; 142
    361e:	ff 4f       	sbci	r31, 0xFF	; 255
    3620:	8f 4f       	sbci	r24, 0xFF	; 255
    3622:	0c 94 b3 2e 	jmp	0x5d66	; 0x5d66 <__tablejump2__>
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                    case tmrCOMMAND_START_DONT_TRACE:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
    3626:	f5 01       	movw	r30, r10
    3628:	86 89       	ldd	r24, Z+22	; 0x16
    362a:	81 60       	ori	r24, 0x01	; 1
    362c:	86 8b       	std	Z+22, r24	; 0x16

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
    362e:	ca 80       	ldd	r12, Y+2	; 0x02
    3630:	db 80       	ldd	r13, Y+3	; 0x03
    3632:	ec 80       	ldd	r14, Y+4	; 0x04
    3634:	fd 80       	ldd	r15, Y+5	; 0x05
    3636:	46 85       	ldd	r20, Z+14	; 0x0e
    3638:	57 85       	ldd	r21, Z+15	; 0x0f
    363a:	60 89       	ldd	r22, Z+16	; 0x10
    363c:	71 89       	ldd	r23, Z+17	; 0x11
    363e:	4c 0d       	add	r20, r12
    3640:	5d 1d       	adc	r21, r13
    3642:	6e 1d       	adc	r22, r14
    3644:	7f 1d       	adc	r23, r15
    3646:	c5 01       	movw	r24, r10
    3648:	83 dd       	rcall	.-1274   	; 0x3150 <prvInsertTimerInActiveList>
    364a:	88 23       	and	r24, r24
    364c:	09 f4       	brne	.+2      	; 0x3650 <prvProcessReceivedCommands+0x98>
    364e:	49 c0       	rjmp	.+146    	; 0x36e2 <prvProcessReceivedCommands+0x12a>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    3650:	d5 01       	movw	r26, r10
    3652:	54 96       	adiw	r26, 0x14	; 20
    3654:	ed 91       	ld	r30, X+
    3656:	fc 91       	ld	r31, X
    3658:	55 97       	sbiw	r26, 0x15	; 21
    365a:	c5 01       	movw	r24, r10
    365c:	19 95       	eicall
                            traceTIMER_EXPIRED( pxTimer );

                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
    365e:	f5 01       	movw	r30, r10
    3660:	86 89       	ldd	r24, Z+22	; 0x16
    3662:	82 ff       	sbrs	r24, 2
    3664:	3e c0       	rjmp	.+124    	; 0x36e2 <prvProcessReceivedCommands+0x12a>
                            {
                                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
    3666:	4a 81       	ldd	r20, Y+2	; 0x02
    3668:	5b 81       	ldd	r21, Y+3	; 0x03
    366a:	6c 81       	ldd	r22, Y+4	; 0x04
    366c:	7d 81       	ldd	r23, Y+5	; 0x05
    366e:	86 85       	ldd	r24, Z+14	; 0x0e
    3670:	97 85       	ldd	r25, Z+15	; 0x0f
    3672:	a0 89       	ldd	r26, Z+16	; 0x10
    3674:	b1 89       	ldd	r27, Z+17	; 0x11
    3676:	9a 01       	movw	r18, r20
    3678:	ab 01       	movw	r20, r22
    367a:	28 0f       	add	r18, r24
    367c:	39 1f       	adc	r19, r25
    367e:	4a 1f       	adc	r20, r26
    3680:	5b 1f       	adc	r21, r27
    3682:	c1 2c       	mov	r12, r1
    3684:	d1 2c       	mov	r13, r1
    3686:	76 01       	movw	r14, r12
    3688:	00 e0       	ldi	r16, 0x00	; 0
    368a:	10 e0       	ldi	r17, 0x00	; 0
    368c:	60 e0       	ldi	r22, 0x00	; 0
    368e:	c5 01       	movw	r24, r10
    3690:	f2 dd       	rcall	.-1052   	; 0x3276 <xTimerGenericCommand>
    3692:	27 c0       	rjmp	.+78     	; 0x36e2 <prvProcessReceivedCommands+0x12a>
                        break;

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
    3694:	d5 01       	movw	r26, r10
    3696:	56 96       	adiw	r26, 0x16	; 22
    3698:	8c 91       	ld	r24, X
    369a:	56 97       	sbiw	r26, 0x16	; 22
    369c:	8e 7f       	andi	r24, 0xFE	; 254
    369e:	56 96       	adiw	r26, 0x16	; 22
    36a0:	8c 93       	st	X, r24
                        break;
    36a2:	1f c0       	rjmp	.+62     	; 0x36e2 <prvProcessReceivedCommands+0x12a>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
    36a4:	f5 01       	movw	r30, r10
    36a6:	86 89       	ldd	r24, Z+22	; 0x16
    36a8:	81 60       	ori	r24, 0x01	; 1
    36aa:	86 8b       	std	Z+22, r24	; 0x16
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
    36ac:	4a 81       	ldd	r20, Y+2	; 0x02
    36ae:	5b 81       	ldd	r21, Y+3	; 0x03
    36b0:	6c 81       	ldd	r22, Y+4	; 0x04
    36b2:	7d 81       	ldd	r23, Y+5	; 0x05
    36b4:	46 87       	std	Z+14, r20	; 0x0e
    36b6:	57 87       	std	Z+15, r21	; 0x0f
    36b8:	60 8b       	std	Z+16, r22	; 0x10
    36ba:	71 8b       	std	Z+17, r23	; 0x11
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
    36bc:	40 0f       	add	r20, r16
    36be:	51 1f       	adc	r21, r17
    36c0:	62 1f       	adc	r22, r18
    36c2:	73 1f       	adc	r23, r19
    36c4:	68 01       	movw	r12, r16
    36c6:	79 01       	movw	r14, r18
    36c8:	c5 01       	movw	r24, r10
    36ca:	42 dd       	rcall	.-1404   	; 0x3150 <prvInsertTimerInActiveList>
                        break;
    36cc:	0a c0       	rjmp	.+20     	; 0x36e2 <prvProcessReceivedCommands+0x12a>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                            {
                                /* The timer has already been removed from the active list,
                                 * just free up the memory if the memory was dynamically
                                 * allocated. */
                                if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
    36ce:	f5 01       	movw	r30, r10
    36d0:	86 89       	ldd	r24, Z+22	; 0x16
    36d2:	81 fd       	sbrc	r24, 1
    36d4:	04 c0       	rjmp	.+8      	; 0x36de <prvProcessReceivedCommands+0x126>
                                {
                                    vPortFree( pxTimer );
    36d6:	c5 01       	movw	r24, r10
    36d8:	0e 94 86 03 	call	0x70c	; 0x70c <vPortFree>
    36dc:	02 c0       	rjmp	.+4      	; 0x36e2 <prvProcessReceivedCommands+0x12a>
                                }
                                else
                                {
                                    pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
    36de:	8e 7f       	andi	r24, 0xFE	; 254
    36e0:	86 8b       	std	Z+22, r24	; 0x16
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched, xResult;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
    36e2:	20 e0       	ldi	r18, 0x00	; 0
    36e4:	30 e0       	ldi	r19, 0x00	; 0
    36e6:	a9 01       	movw	r20, r18
    36e8:	be 01       	movw	r22, r28
    36ea:	6f 5f       	subi	r22, 0xFF	; 255
    36ec:	7f 4f       	sbci	r23, 0xFF	; 255
    36ee:	80 91 1d 17 	lds	r24, 0x171D	; 0x80171d <xTimerQueue>
    36f2:	90 91 1e 17 	lds	r25, 0x171E	; 0x80171e <xTimerQueue+0x1>
    36f6:	0e 94 76 07 	call	0xeec	; 0xeec <xQueueReceive>
    36fa:	81 11       	cpse	r24, r1
    36fc:	70 cf       	rjmp	.-288    	; 0x35de <prvProcessReceivedCommands+0x26>
                        /* Don't expect to get here. */
                        break;
                }
            }
        }
    }
    36fe:	28 96       	adiw	r28, 0x08	; 8
    3700:	0f b6       	in	r0, 0x3f	; 63
    3702:	f8 94       	cli
    3704:	de bf       	out	0x3e, r29	; 62
    3706:	0f be       	out	0x3f, r0	; 63
    3708:	cd bf       	out	0x3d, r28	; 61
    370a:	df 91       	pop	r29
    370c:	cf 91       	pop	r28
    370e:	1f 91       	pop	r17
    3710:	0f 91       	pop	r16
    3712:	ff 90       	pop	r15
    3714:	ef 90       	pop	r14
    3716:	df 90       	pop	r13
    3718:	cf 90       	pop	r12
    371a:	bf 90       	pop	r11
    371c:	af 90       	pop	r10
    371e:	08 95       	ret

00003720 <vApplicationIdleHook>:
 *
 */
void vApplicationIdleHook( void ) __attribute__((weak));

void vApplicationIdleHook( void )
{
    3720:	08 95       	ret

00003722 <prvSetMainLedOn>:
 * Private function to enable board led to use it in application hooks
 */
void prvSetMainLedOn( void ) 
{
#if defined(__AVR_ATmega640__) || defined(__AVR_ATmega1280__) || defined(__AVR_ATmega1281__) || defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__) // Arduino Mega with 2560
    DDRB  |= _BV(DDB7);
    3722:	84 b1       	in	r24, 0x04	; 4
    3724:	80 68       	ori	r24, 0x80	; 128
    3726:	84 b9       	out	0x04, r24	; 4
    PORTB |= _BV(PORTB7);       // Main (red PB7) LED on. Main LED on.
    3728:	85 b1       	in	r24, 0x05	; 5
    372a:	80 68       	ori	r24, 0x80	; 128
    372c:	85 b9       	out	0x05, r24	; 5
    372e:	08 95       	ret

00003730 <prvBlinkMainLed>:
 */
void prvBlinkMainLed( void ) 
{

#if defined(__AVR_ATmega640__) || defined(__AVR_ATmega1280__) || defined(__AVR_ATmega1281__) || defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__)  // Mega with 2560
        PINB  |= _BV(PINB7);       // Main (red PB7) LED toggle.
    3730:	83 b1       	in	r24, 0x03	; 3
    3732:	80 68       	ori	r24, 0x80	; 128
    3734:	83 b9       	out	0x03, r24	; 3
    3736:	08 95       	ret

00003738 <vApplicationMallocFailedHook>:
\*---------------------------------------------------------------------------*/
void vApplicationMallocFailedHook( void ) __attribute__((weak));

void vApplicationMallocFailedHook( void )
{
    prvSetMainLedOn(); // Main LED on.
    3738:	f4 df       	rcall	.-24     	; 0x3722 <prvSetMainLedOn>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    373a:	2f ef       	ldi	r18, 0xFF	; 255
    373c:	80 e7       	ldi	r24, 0x70	; 112
    373e:	92 e0       	ldi	r25, 0x02	; 2
    3740:	21 50       	subi	r18, 0x01	; 1
    3742:	80 40       	sbci	r24, 0x00	; 0
    3744:	90 40       	sbci	r25, 0x00	; 0
    3746:	e1 f7       	brne	.-8      	; 0x3740 <vApplicationMallocFailedHook+0x8>
    3748:	00 c0       	rjmp	.+0      	; 0x374a <vApplicationMallocFailedHook+0x12>
    
    for(;;)
    {
        _delay_ms(50);
        prvBlinkMainLed(); // Main LED fast blink.
    374a:	00 00       	nop
    374c:	f1 df       	rcall	.-30     	; 0x3730 <prvBlinkMainLed>
    374e:	f5 cf       	rjmp	.-22     	; 0x373a <vApplicationMallocFailedHook+0x2>

00003750 <vApplicationStackOverflowHook>:

void vApplicationStackOverflowHook( TaskHandle_t xTask __attribute__((unused)),
                                    char * pcTaskName __attribute__((unused)) )
{

    prvSetMainLedOn(); // Main LED on.
    3750:	e8 df       	rcall	.-48     	; 0x3722 <prvSetMainLedOn>
    3752:	2f ef       	ldi	r18, 0xFF	; 255
    3754:	87 ea       	ldi	r24, 0xA7	; 167
    3756:	91 e6       	ldi	r25, 0x61	; 97
    3758:	21 50       	subi	r18, 0x01	; 1
    375a:	80 40       	sbci	r24, 0x00	; 0
    375c:	90 40       	sbci	r25, 0x00	; 0
    375e:	e1 f7       	brne	.-8      	; 0x3758 <vApplicationStackOverflowHook+0x8>
    3760:	00 c0       	rjmp	.+0      	; 0x3762 <vApplicationStackOverflowHook+0x12>

    for(;;)
    {
        _delay_ms(2000);
        prvBlinkMainLed();  // Main LED slow blink.
    3762:	00 00       	nop
    3764:	e5 df       	rcall	.-54     	; 0x3730 <prvBlinkMainLed>
    3766:	f5 cf       	rjmp	.-22     	; 0x3752 <vApplicationStackOverflowHook+0x2>

00003768 <applicationTask>:
extern EventGroupHandle_t measureEventGroup;
extern EventGroupHandle_t dataConfigurationGroup;


void applicationTask(void *pvParameters)
{
    3768:	cf 93       	push	r28
    376a:	df 93       	push	r29
    376c:	cd b7       	in	r28, 0x3d	; 61
    376e:	de b7       	in	r29, 0x3e	; 62
    3770:	66 97       	sbiw	r28, 0x16	; 22
    3772:	0f b6       	in	r0, 0x3f	; 63
    3774:	f8 94       	cli
    3776:	de bf       	out	0x3e, r29	; 62
    3778:	0f be       	out	0x3f, r0	; 63
    377a:	cd bf       	out	0x3d, r28	; 61
	for (;;)
	{
		
		xEventGroupSetBits(measureEventGroup,co2_bit | temperature_and_humidity_bit);
    377c:	43 e0       	ldi	r20, 0x03	; 3
    377e:	50 e0       	ldi	r21, 0x00	; 0
    3780:	60 e0       	ldi	r22, 0x00	; 0
    3782:	70 e0       	ldi	r23, 0x00	; 0
    3784:	80 91 72 18 	lds	r24, 0x1872	; 0x801872 <measureEventGroup>
    3788:	90 91 73 18 	lds	r25, 0x1873	; 0x801873 <measureEventGroup+0x1>
    378c:	0e 94 dc 01 	call	0x3b8	; 0x3b8 <xEventGroupSetBits>
		

		EventBits_t eventBits = xEventGroupWaitBits(dataConfigurationGroup,temperature_and_humidity_bit|co2_bit, pdTRUE, pdTRUE,portMAX_DELAY);
    3790:	cc 24       	eor	r12, r12
    3792:	ca 94       	dec	r12
    3794:	dc 2c       	mov	r13, r12
    3796:	76 01       	movw	r14, r12
    3798:	01 e0       	ldi	r16, 0x01	; 1
    379a:	21 e0       	ldi	r18, 0x01	; 1
    379c:	43 e0       	ldi	r20, 0x03	; 3
    379e:	50 e0       	ldi	r21, 0x00	; 0
    37a0:	60 e0       	ldi	r22, 0x00	; 0
    37a2:	70 e0       	ldi	r23, 0x00	; 0
    37a4:	80 91 8c 18 	lds	r24, 0x188C	; 0x80188c <dataConfigurationGroup>
    37a8:	90 91 8d 18 	lds	r25, 0x188D	; 0x80188d <dataConfigurationGroup+0x1>
    37ac:	0e 94 3c 01 	call	0x278	; 0x278 <xEventGroupWaitBits>
	
		
		if((eventBits &(co2_bit | temperature_and_humidity_bit))==(co2_bit | temperature_and_humidity_bit)) 
    37b0:	dc 01       	movw	r26, r24
    37b2:	cb 01       	movw	r24, r22
    37b4:	83 70       	andi	r24, 0x03	; 3
    37b6:	99 27       	eor	r25, r25
    37b8:	aa 27       	eor	r26, r26
    37ba:	bb 27       	eor	r27, r27
    37bc:	03 97       	sbiw	r24, 0x03	; 3
    37be:	a1 05       	cpc	r26, r1
    37c0:	b1 05       	cpc	r27, r1
    37c2:	31 f5       	brne	.+76     	; 0x3810 <applicationTask+0xa8>
		{
			
			SensorDataSharePackage_setCo2_value(get_co2_data());
    37c4:	8b d0       	rcall	.+278    	; 0x38dc <get_co2_data>
    37c6:	cd d2       	rcall	.+1434   	; 0x3d62 <SensorDataSharePackage_setCo2_value>
			SensorDataSharePackage_setTemperature_value(get_temperature_data());
    37c8:	cb d3       	rcall	.+1942   	; 0x3f60 <get_temperature_data>
    37ca:	c1 d2       	rcall	.+1410   	; 0x3d4e <SensorDataSharePackage_setTemperature_value>
			SensorDataSharePackage_setHumidity_value(get_humidity_data());
    37cc:	ce d3       	rcall	.+1948   	; 0x3f6a <get_humidity_data>
    37ce:	c4 d2       	rcall	.+1416   	; 0x3d58 <SensorDataSharePackage_setHumidity_value>
    37d0:	62 e0       	ldi	r22, 0x02	; 2
			payload=SensorDataSharePackage_getLoraPayload(2);
    37d2:	ce 01       	movw	r24, r28
    37d4:	01 96       	adiw	r24, 0x01	; 1
    37d6:	ca d2       	rcall	.+1428   	; 0x3d6c <SensorDataSharePackage_getLoraPayload>
    37d8:	86 e1       	ldi	r24, 0x16	; 22
    37da:	fe 01       	movw	r30, r28
    37dc:	31 96       	adiw	r30, 0x01	; 1
    37de:	a6 e7       	ldi	r26, 0x76	; 118
    37e0:	b8 e1       	ldi	r27, 0x18	; 24
    37e2:	01 90       	ld	r0, Z+
    37e4:	0d 92       	st	X+, r0
    37e6:	8a 95       	dec	r24
    37e8:	e1 f7       	brne	.-8      	; 0x37e2 <applicationTask+0x7a>
    37ea:	0f ef       	ldi	r16, 0xFF	; 255
    37ec:	1f ef       	ldi	r17, 0xFF	; 255
			xMessageBufferSend(uplinkMessageBuffer,(void*)&payload,sizeof(lora_driver_payload_t),portMAX_DELAY);
    37ee:	98 01       	movw	r18, r16
    37f0:	46 e1       	ldi	r20, 0x16	; 22
    37f2:	50 e0       	ldi	r21, 0x00	; 0
    37f4:	66 e7       	ldi	r22, 0x76	; 118
    37f6:	78 e1       	ldi	r23, 0x18	; 24
    37f8:	80 91 8e 18 	lds	r24, 0x188E	; 0x80188e <uplinkMessageBuffer>
    37fc:	90 91 8f 18 	lds	r25, 0x188F	; 0x80188f <uplinkMessageBuffer+0x1>
    3800:	0e 94 77 0a 	call	0x14ee	; 0x14ee <xStreamBufferSend>
    3804:	64 e4       	ldi	r22, 0x44	; 68
    3806:	77 e0       	ldi	r23, 0x07	; 7
			vTaskDelay(pdMS_TO_TICKS(30000));
    3808:	80 e0       	ldi	r24, 0x00	; 0
    380a:	90 e0       	ldi	r25, 0x00	; 0
    380c:	0e 94 20 11 	call	0x2240	; 0x2240 <vTaskDelay>
    3810:	63 e0       	ldi	r22, 0x03	; 3
    3812:	70 e0       	ldi	r23, 0x00	; 0
		}
		vTaskDelay(pdMS_TO_TICKS(50));
    3814:	80 e0       	ldi	r24, 0x00	; 0
    3816:	90 e0       	ldi	r25, 0x00	; 0
    3818:	0e 94 20 11 	call	0x2240	; 0x2240 <vTaskDelay>
    381c:	af cf       	rjmp	.-162    	; 0x377c <applicationTask+0x14>

0000381e <applicationTaskRun>:
    381e:	ef 92       	push	r14
	}
    3820:	ff 92       	push	r15
}

void applicationTaskRun(UBaseType_t priority)
{
    3822:	0f 93       	push	r16
	xTaskCreate(
    3824:	e1 2c       	mov	r14, r1
    3826:	f1 2c       	mov	r15, r1
    3828:	08 2f       	mov	r16, r24
    382a:	20 e0       	ldi	r18, 0x00	; 0
    382c:	30 e0       	ldi	r19, 0x00	; 0
    382e:	40 ec       	ldi	r20, 0xC0	; 192
    3830:	50 e0       	ldi	r21, 0x00	; 0
    3832:	6c e7       	ldi	r22, 0x7C	; 124
    3834:	72 e0       	ldi	r23, 0x02	; 2
    3836:	84 eb       	ldi	r24, 0xB4	; 180
    3838:	9b e1       	ldi	r25, 0x1B	; 27
    383a:	0e 94 1b 0e 	call	0x1c36	; 0x1c36 <xTaskCreate>
	,  "AppTask"
	,  configMINIMAL_STACK_SIZE
	,  NULL
	,  tskIDLE_PRIORITY + priority
	,  NULL );
}
    383e:	0f 91       	pop	r16
    3840:	ff 90       	pop	r15
    3842:	ef 90       	pop	r14
    3844:	08 95       	ret

00003846 <myCo2CallBack>:
	 return co2_data;
 }

void myCo2CallBack(uint16_t* ppm) {
	//xQueueSend(dataSensorQueue , &ppm, portMAX_DELAY);
	co2_data = ppm;
    3846:	80 93 91 18 	sts	0x1891, r24	; 0x801891 <co2_data>
    384a:	90 93 92 18 	sts	0x1892, r25	; 0x801892 <co2_data+0x1>
	printf("CO2 Ionut --> %i",co2_data);
    384e:	9f 93       	push	r25
    3850:	8f 93       	push	r24
    3852:	84 e8       	ldi	r24, 0x84	; 132
    3854:	92 e0       	ldi	r25, 0x02	; 2
    3856:	9f 93       	push	r25
    3858:	8f 93       	push	r24
    385a:	0e 94 3f 30 	call	0x607e	; 0x607e <printf>
	xEventGroupSetBits(dataConfigurationGroup, co2_bit);
    385e:	42 e0       	ldi	r20, 0x02	; 2
    3860:	50 e0       	ldi	r21, 0x00	; 0
    3862:	60 e0       	ldi	r22, 0x00	; 0
    3864:	70 e0       	ldi	r23, 0x00	; 0
    3866:	80 91 8c 18 	lds	r24, 0x188C	; 0x80188c <dataConfigurationGroup>
    386a:	90 91 8d 18 	lds	r25, 0x188D	; 0x80188d <dataConfigurationGroup+0x1>
    386e:	0e 94 dc 01 	call	0x3b8	; 0x3b8 <xEventGroupSetBits>
	
}
    3872:	0f 90       	pop	r0
    3874:	0f 90       	pop	r0
    3876:	0f 90       	pop	r0
    3878:	0f 90       	pop	r0
    387a:	08 95       	ret

0000387c <Co2_init>:
 //TickType_t xFrequency;
 uint16_t co2_data;
 
 void Co2_init() {
	 
	mh_z19_initialise(ser_USART3);
    387c:	83 e0       	ldi	r24, 0x03	; 3
    387e:	0e 94 ae 25 	call	0x4b5c	; 0x4b5c <mh_z19_initialise>
	mh_z19_injectCallBack(myCo2CallBack);
    3882:	83 e2       	ldi	r24, 0x23	; 35
    3884:	9c e1       	ldi	r25, 0x1C	; 28
    3886:	0c 94 d3 25 	jmp	0x4ba6	; 0x4ba6 <mh_z19_injectCallBack>
    388a:	08 95       	ret

0000388c <Co2_measureTask>:
 }
 
 void Co2_measureTask(void) {
 
	rc = mh_z19_takeMeassuring();
    388c:	0e 94 d8 25 	call	0x4bb0	; 0x4bb0 <mh_z19_takeMeassuring>
    3890:	80 93 90 18 	sts	0x1890, r24	; 0x801890 <rc>
 
	if (rc != MHZ19_OK)
    3894:	88 23       	and	r24, r24
    3896:	41 f0       	breq	.+16     	; 0x38a8 <Co2_measureTask+0x1c>
	{
		printf("das ist kaput, scheisse");
    3898:	85 e9       	ldi	r24, 0x95	; 149
    389a:	92 e0       	ldi	r25, 0x02	; 2
    389c:	9f 93       	push	r25
    389e:	8f 93       	push	r24
    38a0:	0e 94 3f 30 	call	0x607e	; 0x607e <printf>
    38a4:	0f 90       	pop	r0
    38a6:	0f 90       	pop	r0
    38a8:	08 95       	ret

000038aa <Co2_getDataFromSensorTask>:
 
 void Co2_getDataFromSensorTask() {
	 
	 while (1) {
		
		 EventBits_t sensorDataBits = xEventGroupWaitBits(measureEventGroup,co2_bit,pdTRUE,pdTRUE,portMAX_DELAY);
    38aa:	cc 24       	eor	r12, r12
    38ac:	ca 94       	dec	r12
    38ae:	dc 2c       	mov	r13, r12
    38b0:	76 01       	movw	r14, r12
    38b2:	01 e0       	ldi	r16, 0x01	; 1
    38b4:	21 e0       	ldi	r18, 0x01	; 1
    38b6:	42 e0       	ldi	r20, 0x02	; 2
    38b8:	50 e0       	ldi	r21, 0x00	; 0
    38ba:	60 e0       	ldi	r22, 0x00	; 0
    38bc:	70 e0       	ldi	r23, 0x00	; 0
    38be:	80 91 72 18 	lds	r24, 0x1872	; 0x801872 <measureEventGroup>
    38c2:	90 91 73 18 	lds	r25, 0x1873	; 0x801873 <measureEventGroup+0x1>
    38c6:	0e 94 3c 01 	call	0x278	; 0x278 <xEventGroupWaitBits>
		 
		 if ((sensorDataBits & co2_bit) == co2_bit) 
    38ca:	61 fd       	sbrc	r22, 1
			 Co2_measureTask();
    38cc:	df df       	rcall	.-66     	; 0x388c <Co2_measureTask>
			 
			 vTaskDelay(pdMS_TO_TICKS(50));
    38ce:	63 e0       	ldi	r22, 0x03	; 3
    38d0:	70 e0       	ldi	r23, 0x00	; 0
    38d2:	80 e0       	ldi	r24, 0x00	; 0
    38d4:	90 e0       	ldi	r25, 0x00	; 0
    38d6:	0e 94 20 11 	call	0x2240	; 0x2240 <vTaskDelay>
	 }
    38da:	e7 cf       	rjmp	.-50     	; 0x38aa <Co2_getDataFromSensorTask>

000038dc <get_co2_data>:
 }
 
 uint16_t get_co2_data() {
	 return co2_data;
 }
    38dc:	80 91 91 18 	lds	r24, 0x1891	; 0x801891 <co2_data>
    38e0:	90 91 92 18 	lds	r25, 0x1892	; 0x801892 <co2_data+0x1>
    38e4:	08 95       	ret

000038e6 <createCo2Task>:
	printf("CO2 Ionut --> %i",co2_data);
	xEventGroupSetBits(dataConfigurationGroup, co2_bit);
	
}

void createCo2Task( UBaseType_t priority) {
    38e6:	ef 92       	push	r14
    38e8:	ff 92       	push	r15
    38ea:	0f 93       	push	r16
    38ec:	08 2f       	mov	r16, r24
	Co2_init();
    38ee:	c6 df       	rcall	.-116    	; 0x387c <Co2_init>
	xTaskCreate(
    38f0:	e1 2c       	mov	r14, r1
    38f2:	f1 2c       	mov	r15, r1
    38f4:	20 e0       	ldi	r18, 0x00	; 0
    38f6:	30 e0       	ldi	r19, 0x00	; 0
    38f8:	40 ec       	ldi	r20, 0xC0	; 192
    38fa:	50 e0       	ldi	r21, 0x00	; 0
    38fc:	6d ea       	ldi	r22, 0xAD	; 173
    38fe:	72 e0       	ldi	r23, 0x02	; 2
    3900:	85 e5       	ldi	r24, 0x55	; 85
    3902:	9c e1       	ldi	r25, 0x1C	; 28
    3904:	0e 94 1b 0e 	call	0x1c36	; 0x1c36 <xTaskCreate>
	, configMINIMAL_STACK_SIZE
	,  NULL
	, tskIDLE_PRIORITY + priority
	,NULL
	);
}
    3908:	0f 91       	pop	r16
    390a:	ff 90       	pop	r15
    390c:	ef 90       	pop	r14
    390e:	08 95       	ret

00003910 <initializeTemperatureAndHumiditySemaphore>:
 *  Author: Ionut / Dragos / Alexandru
 */ 
#include "../Source/headers/Initializers.h"


void initializeTemperatureAndHumiditySemaphore() {
    3910:	0f 93       	push	r16
	temperatureAndHumiditySemaphore = xSemaphoreCreateBinary();
    3912:	43 e0       	ldi	r20, 0x03	; 3
    3914:	60 e0       	ldi	r22, 0x00	; 0
    3916:	81 e0       	ldi	r24, 0x01	; 1
    3918:	0e 94 86 06 	call	0xd0c	; 0xd0c <xQueueGenericCreate>
    391c:	90 93 75 18 	sts	0x1875, r25	; 0x801875 <temperatureAndHumiditySemaphore+0x1>
    3920:	80 93 74 18 	sts	0x1874, r24	; 0x801874 <temperatureAndHumiditySemaphore>
	xSemaphoreGive(temperatureAndHumiditySemaphore);
    3924:	00 e0       	ldi	r16, 0x00	; 0
    3926:	20 e0       	ldi	r18, 0x00	; 0
    3928:	30 e0       	ldi	r19, 0x00	; 0
    392a:	a9 01       	movw	r20, r18
    392c:	60 e0       	ldi	r22, 0x00	; 0
    392e:	70 e0       	ldi	r23, 0x00	; 0
    3930:	0e 94 a9 06 	call	0xd52	; 0xd52 <xQueueGenericSend>
}
    3934:	0f 91       	pop	r16
    3936:	08 95       	ret

00003938 <initializeServoSemaphore>:

void initializeServoSemaphore() {
    3938:	0f 93       	push	r16
	servoSemaphore = xSemaphoreCreateBinary();
    393a:	43 e0       	ldi	r20, 0x03	; 3
    393c:	60 e0       	ldi	r22, 0x00	; 0
    393e:	81 e0       	ldi	r24, 0x01	; 1
    3940:	0e 94 86 06 	call	0xd0c	; 0xd0c <xQueueGenericCreate>
    3944:	90 93 71 18 	sts	0x1871, r25	; 0x801871 <servoSemaphore+0x1>
    3948:	80 93 70 18 	sts	0x1870, r24	; 0x801870 <servoSemaphore>
	xSemaphoreGive(servoSemaphore);
    394c:	00 e0       	ldi	r16, 0x00	; 0
    394e:	20 e0       	ldi	r18, 0x00	; 0
    3950:	30 e0       	ldi	r19, 0x00	; 0
    3952:	a9 01       	movw	r20, r18
    3954:	60 e0       	ldi	r22, 0x00	; 0
    3956:	70 e0       	ldi	r23, 0x00	; 0
    3958:	0e 94 a9 06 	call	0xd52	; 0xd52 <xQueueGenericSend>
}
    395c:	0f 91       	pop	r16
    395e:	08 95       	ret

00003960 <initializeQueue>:

void initializeQueue() {
	dataSensorQueue = xQueueCreate(3, sizeof(uint16_t));
    3960:	40 e0       	ldi	r20, 0x00	; 0
    3962:	62 e0       	ldi	r22, 0x02	; 2
    3964:	83 e0       	ldi	r24, 0x03	; 3
    3966:	0e 94 86 06 	call	0xd0c	; 0xd0c <xQueueGenericCreate>
    396a:	90 93 6d 18 	sts	0x186D, r25	; 0x80186d <dataSensorQueue+0x1>
    396e:	80 93 6c 18 	sts	0x186C, r24	; 0x80186c <dataSensorQueue>
    3972:	08 95       	ret

00003974 <initializeEventGroup>:
}

void initializeEventGroup() {
	dataConfigurationGroup = xEventGroupCreate();
    3974:	0e 94 29 01 	call	0x252	; 0x252 <xEventGroupCreate>
    3978:	90 93 8d 18 	sts	0x188D, r25	; 0x80188d <dataConfigurationGroup+0x1>
    397c:	80 93 8c 18 	sts	0x188C, r24	; 0x80188c <dataConfigurationGroup>
	measureEventGroup=xEventGroupCreate();
    3980:	0e 94 29 01 	call	0x252	; 0x252 <xEventGroupCreate>
    3984:	90 93 73 18 	sts	0x1873, r25	; 0x801873 <measureEventGroup+0x1>
    3988:	80 93 72 18 	sts	0x1872, r24	; 0x801872 <measureEventGroup>
    398c:	08 95       	ret

0000398e <initializeDownlinkMessageBuffer>:
}

void initializeDownlinkMessageBuffer() {
	
	uplinkMessageBuffer=xMessageBufferCreate(sizeof(lora_driver_payload_t) * 2);
    398e:	41 e0       	ldi	r20, 0x01	; 1
    3990:	60 e0       	ldi	r22, 0x00	; 0
    3992:	70 e0       	ldi	r23, 0x00	; 0
    3994:	8c e2       	ldi	r24, 0x2C	; 44
    3996:	90 e0       	ldi	r25, 0x00	; 0
    3998:	0e 94 15 0a 	call	0x142a	; 0x142a <xStreamBufferGenericCreate>
    399c:	90 93 8f 18 	sts	0x188F, r25	; 0x80188f <uplinkMessageBuffer+0x1>
    39a0:	80 93 8e 18 	sts	0x188E, r24	; 0x80188e <uplinkMessageBuffer>
	downlinkMessageBuffer = xMessageBufferCreate(sizeof(lora_driver_payload_t) * 2);
    39a4:	41 e0       	ldi	r20, 0x01	; 1
    39a6:	60 e0       	ldi	r22, 0x00	; 0
    39a8:	70 e0       	ldi	r23, 0x00	; 0
    39aa:	8c e2       	ldi	r24, 0x2C	; 44
    39ac:	90 e0       	ldi	r25, 0x00	; 0
    39ae:	0e 94 15 0a 	call	0x142a	; 0x142a <xStreamBufferGenericCreate>
    39b2:	90 93 6f 18 	sts	0x186F, r25	; 0x80186f <downlinkMessageBuffer+0x1>
    39b6:	80 93 6e 18 	sts	0x186E, r24	; 0x80186e <downlinkMessageBuffer>
    39ba:	08 95       	ret

000039bc <lora_downlink_task>:

void lora_downlink_task()
{
		for(;;)
		{
			xMessageBufferReceive(downlinkMessageBuffer, &downlink_payload, sizeof(lora_driver_payload_t), portMAX_DELAY);
    39bc:	0f ef       	ldi	r16, 0xFF	; 255
    39be:	1f ef       	ldi	r17, 0xFF	; 255
    39c0:	98 01       	movw	r18, r16
    39c2:	46 e1       	ldi	r20, 0x16	; 22
    39c4:	50 e0       	ldi	r21, 0x00	; 0
    39c6:	63 e9       	ldi	r22, 0x93	; 147
    39c8:	78 e1       	ldi	r23, 0x18	; 24
    39ca:	80 91 6e 18 	lds	r24, 0x186E	; 0x80186e <downlinkMessageBuffer>
    39ce:	90 91 6f 18 	lds	r25, 0x186F	; 0x80186f <downlinkMessageBuffer+0x1>
    39d2:	0e 94 80 0b 	call	0x1700	; 0x1700 <xStreamBufferReceive>
			printf("DOWN LINK<<<<<: from port: %d with %d bytes received!",downlink_payload.portNo, downlink_payload.len); ///ev aici putem schimba ca ar arata cam identic cu ei
    39d6:	c3 e9       	ldi	r28, 0x93	; 147
    39d8:	d8 e1       	ldi	r29, 0x18	; 24
    39da:	99 81       	ldd	r25, Y+1	; 0x01
    39dc:	88 81       	ld	r24, Y
    39de:	1f 92       	push	r1
    39e0:	9f 93       	push	r25
    39e2:	1f 92       	push	r1
    39e4:	8f 93       	push	r24
    39e6:	88 ec       	ldi	r24, 0xC8	; 200
    39e8:	92 e0       	ldi	r25, 0x02	; 2
    39ea:	9f 93       	push	r25
    39ec:	8f 93       	push	r24
    39ee:	0e 94 3f 30 	call	0x607e	; 0x607e <printf>
		
			if (4 == downlink_payload.len)
    39f2:	89 81       	ldd	r24, Y+1	; 0x01
    39f4:	0f 90       	pop	r0
    39f6:	0f 90       	pop	r0
    39f8:	0f 90       	pop	r0
    39fa:	0f 90       	pop	r0
    39fc:	0f 90       	pop	r0
    39fe:	0f 90       	pop	r0
    3a00:	84 30       	cpi	r24, 0x04	; 4
    3a02:	79 f4       	brne	.+30     	; 0x3a22 <lora_downlink_task+0x66>
			{
				uint8_t level =  (downlink_payload.bytes[0]);
				setServoLevel(level); ///asta dam remove
    3a04:	80 91 95 18 	lds	r24, 0x1895	; 0x801895 <downlink_payload+0x2>
    3a08:	67 d1       	rcall	.+718    	; 0x3cd8 <setServoLevel>
				xSemaphoreGive(servoSemaphore);  //aici trb schimbat iar
    3a0a:	00 e0       	ldi	r16, 0x00	; 0
    3a0c:	20 e0       	ldi	r18, 0x00	; 0
    3a0e:	30 e0       	ldi	r19, 0x00	; 0
    3a10:	a9 01       	movw	r20, r18
    3a12:	60 e0       	ldi	r22, 0x00	; 0
    3a14:	70 e0       	ldi	r23, 0x00	; 0
    3a16:	80 91 70 18 	lds	r24, 0x1870	; 0x801870 <servoSemaphore>
    3a1a:	90 91 71 18 	lds	r25, 0x1871	; 0x801871 <servoSemaphore+0x1>
    3a1e:	0e 94 a9 06 	call	0xd52	; 0xd52 <xQueueGenericSend>
			}

			vTaskDelay(pdMS_TO_TICKS(100));
    3a22:	66 e0       	ldi	r22, 0x06	; 6
    3a24:	70 e0       	ldi	r23, 0x00	; 0
    3a26:	80 e0       	ldi	r24, 0x00	; 0
    3a28:	90 e0       	ldi	r25, 0x00	; 0
    3a2a:	0e 94 20 11 	call	0x2240	; 0x2240 <vTaskDelay>
		}
    3a2e:	c6 cf       	rjmp	.-116    	; 0x39bc <lora_downlink_task>

00003a30 <lora_downlink_handler_create>:
		
}


void lora_downlink_handler_create(UBaseType_t lora_handler_task_priority)
{
    3a30:	ef 92       	push	r14
    3a32:	ff 92       	push	r15
    3a34:	0f 93       	push	r16

		xTaskCreate(
    3a36:	e1 2c       	mov	r14, r1
    3a38:	f1 2c       	mov	r15, r1
    3a3a:	08 2f       	mov	r16, r24
    3a3c:	20 e0       	ldi	r18, 0x00	; 0
    3a3e:	30 e0       	ldi	r19, 0x00	; 0
    3a40:	40 ec       	ldi	r20, 0xC0	; 192
    3a42:	50 e0       	ldi	r21, 0x00	; 0
    3a44:	6e ef       	ldi	r22, 0xFE	; 254
    3a46:	72 e0       	ldi	r23, 0x02	; 2
    3a48:	8e ed       	ldi	r24, 0xDE	; 222
    3a4a:	9c e1       	ldi	r25, 0x1C	; 28
    3a4c:	0e 94 1b 0e 	call	0x1c36	; 0x1c36 <xTaskCreate>
		"lora_downlink"
		, configMINIMAL_STACK_SIZE
		, NULL
		,tskIDLE_PRIORITY + lora_handler_task_priority
		, NULL );
}
    3a50:	0f 91       	pop	r16
    3a52:	ff 90       	pop	r15
    3a54:	ef 90       	pop	r14
    3a56:	08 95       	ret

00003a58 <_lora_setup>:
	,  lora_handler_task_priority  // Priority, with 3 (configMAX_PRIORITIES - 1) being the highest, and 0 being the lowest.
	,  NULL );
}*/

static void _lora_setup(void)
{
    3a58:	0f 93       	push	r16
    3a5a:	1f 93       	push	r17
    3a5c:	cf 93       	push	r28
    3a5e:	df 93       	push	r29
    3a60:	cd b7       	in	r28, 0x3d	; 61
    3a62:	de b7       	in	r29, 0x3e	; 62
    3a64:	64 97       	sbiw	r28, 0x14	; 20
    3a66:	0f b6       	in	r0, 0x3f	; 63
    3a68:	f8 94       	cli
    3a6a:	de bf       	out	0x3e, r29	; 62
    3a6c:	0f be       	out	0x3f, r0	; 63
    3a6e:	cd bf       	out	0x3d, r28	; 61
	char _out_buf[20];
	
	lora_driver_returnCode_t rc;
	
	status_leds_slowBlink(led_ST2); // OPTIONAL: Led the green led blink slowly while we are setting up LoRa
    3a70:	81 e0       	ldi	r24, 0x01	; 1
    3a72:	0e 94 b3 2a 	call	0x5566	; 0x5566 <status_leds_slowBlink>

	// Factory reset the transceiver
	printf("FactoryReset >%s<\n", lora_driver_mapReturnCodeToText(lora_driver_rn2483FactoryReset()));
    3a76:	19 d5       	rcall	.+2610   	; 0x44aa <lora_driver_rn2483FactoryReset>
    3a78:	95 d7       	rcall	.+3882   	; 0x49a4 <lora_driver_mapReturnCodeToText>
    3a7a:	9f 93       	push	r25
    3a7c:	8f 93       	push	r24
    3a7e:	8c e0       	ldi	r24, 0x0C	; 12
    3a80:	93 e0       	ldi	r25, 0x03	; 3
    3a82:	9f 93       	push	r25
    3a84:	8f 93       	push	r24
    3a86:	0e 94 3f 30 	call	0x607e	; 0x607e <printf>
	
	// Configure to EU868 LoRaWAN standards
	printf("Configure to EU868 >%s<\n", lora_driver_mapReturnCodeToText(lora_driver_configureToEu868()));
    3a8a:	8d d6       	rcall	.+3354   	; 0x47a6 <lora_driver_configureToEu868>
    3a8c:	8b d7       	rcall	.+3862   	; 0x49a4 <lora_driver_mapReturnCodeToText>
    3a8e:	9f 93       	push	r25
    3a90:	8f 93       	push	r24
    3a92:	8f e1       	ldi	r24, 0x1F	; 31
    3a94:	93 e0       	ldi	r25, 0x03	; 3
    3a96:	9f 93       	push	r25
    3a98:	8f 93       	push	r24
    3a9a:	0e 94 3f 30 	call	0x607e	; 0x607e <printf>
    3a9e:	8e 01       	movw	r16, r28
    3aa0:	0f 5f       	subi	r16, 0xFF	; 255

	// Get the transceivers HW EUI
	rc = lora_driver_getRn2483Hweui(_out_buf);
    3aa2:	1f 4f       	sbci	r17, 0xFF	; 255
    3aa4:	c8 01       	movw	r24, r16
    3aa6:	13 d5       	rcall	.+2598   	; 0x44ce <lora_driver_getRn2483Hweui>
    3aa8:	7d d7       	rcall	.+3834   	; 0x49a4 <lora_driver_mapReturnCodeToText>
	
	printf("Get HWEUI >%s<: %s\n",lora_driver_mapReturnCodeToText(rc), _out_buf);
    3aaa:	1f 93       	push	r17
    3aac:	0f 93       	push	r16
    3aae:	9f 93       	push	r25
    3ab0:	8f 93       	push	r24
    3ab2:	88 e3       	ldi	r24, 0x38	; 56
    3ab4:	93 e0       	ldi	r25, 0x03	; 3
    3ab6:	9f 93       	push	r25
    3ab8:	8f 93       	push	r24
    3aba:	0e 94 3f 30 	call	0x607e	; 0x607e <printf>

	// Set the HWEUI as DevEUI in the LoRaWAN software stack in the transceiver
	printf("Set DevEUI: %s >%s<\n", _out_buf, lora_driver_mapReturnCodeToText(lora_driver_setDeviceIdentifier(_out_buf)));
    3abe:	c8 01       	movw	r24, r16
    3ac0:	22 d5       	rcall	.+2628   	; 0x4506 <lora_driver_setDeviceIdentifier>
    3ac2:	70 d7       	rcall	.+3808   	; 0x49a4 <lora_driver_mapReturnCodeToText>
    3ac4:	9f 93       	push	r25
    3ac6:	8f 93       	push	r24
    3ac8:	1f 93       	push	r17
    3aca:	0f 93       	push	r16
    3acc:	8c e4       	ldi	r24, 0x4C	; 76
    3ace:	93 e0       	ldi	r25, 0x03	; 3
    3ad0:	9f 93       	push	r25
    3ad2:	8f 93       	push	r24
    3ad4:	0e 94 3f 30 	call	0x607e	; 0x607e <printf>

	// Set Over The Air Activation parameters to be ready to join the LoRaWAN
	printf("Set OTAA Identity appEUI:%s appKEY:%s devEUI:%s >%s<\n", LORA_appEUI, LORA_appKEY, _out_buf, lora_driver_mapReturnCodeToText(lora_driver_setOtaaIdentity(LORA_appEUI,LORA_appKEY,_out_buf)));
    3ad8:	a8 01       	movw	r20, r16
    3ada:	61 e6       	ldi	r22, 0x61	; 97
    3adc:	73 e0       	ldi	r23, 0x03	; 3
    3ade:	82 e8       	ldi	r24, 0x82	; 130
    3ae0:	93 e0       	ldi	r25, 0x03	; 3
    3ae2:	3f d7       	rcall	.+3710   	; 0x4962 <lora_driver_setOtaaIdentity>
    3ae4:	5f d7       	rcall	.+3774   	; 0x49a4 <lora_driver_mapReturnCodeToText>
    3ae6:	9f 93       	push	r25
    3ae8:	8f 93       	push	r24
    3aea:	1f 93       	push	r17
    3aec:	0f 93       	push	r16
    3aee:	81 e6       	ldi	r24, 0x61	; 97
    3af0:	93 e0       	ldi	r25, 0x03	; 3
    3af2:	9f 93       	push	r25
    3af4:	8f 93       	push	r24
    3af6:	82 e8       	ldi	r24, 0x82	; 130
    3af8:	93 e0       	ldi	r25, 0x03	; 3
    3afa:	9f 93       	push	r25
    3afc:	8f 93       	push	r24
    3afe:	83 e9       	ldi	r24, 0x93	; 147
    3b00:	93 e0       	ldi	r25, 0x03	; 3
    3b02:	9f 93       	push	r25
    3b04:	8f 93       	push	r24
    3b06:	0e 94 3f 30 	call	0x607e	; 0x607e <printf>

	// Save all the MAC settings in the transceiver
	printf("Save mac >%s<\n",lora_driver_mapReturnCodeToText(lora_driver_saveMac()));
    3b0a:	30 d5       	rcall	.+2656   	; 0x456c <lora_driver_saveMac>
    3b0c:	4b d7       	rcall	.+3734   	; 0x49a4 <lora_driver_mapReturnCodeToText>
    3b0e:	9f 93       	push	r25
    3b10:	8f 93       	push	r24
    3b12:	89 ec       	ldi	r24, 0xC9	; 201
    3b14:	93 e0       	ldi	r25, 0x03	; 3
    3b16:	9f 93       	push	r25
    3b18:	8f 93       	push	r24
    3b1a:	0e 94 3f 30 	call	0x607e	; 0x607e <printf>

	// Enable Adaptive Data Rate
	printf("Set Adaptive Data Rate: ON >%s<\n", lora_driver_mapReturnCodeToText(lora_driver_setAdaptiveDataRate(LORA_ON)));
    3b1e:	0f b6       	in	r0, 0x3f	; 63
    3b20:	f8 94       	cli
    3b22:	de bf       	out	0x3e, r29	; 62
    3b24:	0f be       	out	0x3f, r0	; 63
    3b26:	cd bf       	out	0x3d, r28	; 61
    3b28:	81 e0       	ldi	r24, 0x01	; 1
    3b2a:	1a d6       	rcall	.+3124   	; 0x4760 <lora_driver_setAdaptiveDataRate>
    3b2c:	3b d7       	rcall	.+3702   	; 0x49a4 <lora_driver_mapReturnCodeToText>
    3b2e:	9f 93       	push	r25
    3b30:	8f 93       	push	r24
    3b32:	88 ed       	ldi	r24, 0xD8	; 216
    3b34:	93 e0       	ldi	r25, 0x03	; 3
    3b36:	9f 93       	push	r25
    3b38:	8f 93       	push	r24
    3b3a:	0e 94 3f 30 	call	0x607e	; 0x607e <printf>

	// Set receiver window1 delay to 500 ms - this is needed if down-link messages will be used
	printf("Set Receiver Delay: %d ms >%s<\n", 500, lora_driver_mapReturnCodeToText(lora_driver_setReceiveDelay(500)));
    3b3e:	84 ef       	ldi	r24, 0xF4	; 244
    3b40:	91 e0       	ldi	r25, 0x01	; 1
    3b42:	19 d6       	rcall	.+3122   	; 0x4776 <lora_driver_setReceiveDelay>
    3b44:	2f d7       	rcall	.+3678   	; 0x49a4 <lora_driver_mapReturnCodeToText>
    3b46:	9f 93       	push	r25
    3b48:	8f 93       	push	r24
    3b4a:	81 e0       	ldi	r24, 0x01	; 1
    3b4c:	8f 93       	push	r24
    3b4e:	84 ef       	ldi	r24, 0xF4	; 244
    3b50:	8f 93       	push	r24
    3b52:	89 ef       	ldi	r24, 0xF9	; 249
    3b54:	93 e0       	ldi	r25, 0x03	; 3
    3b56:	9f 93       	push	r25
    3b58:	8f 93       	push	r24
    3b5a:	0e 94 3f 30 	call	0x607e	; 0x607e <printf>
    3b5e:	0f b6       	in	r0, 0x3f	; 63
    3b60:	f8 94       	cli
    3b62:	de bf       	out	0x3e, r29	; 62
    3b64:	0f be       	out	0x3f, r0	; 63
    3b66:	cd bf       	out	0x3d, r28	; 61

	// Join the LoRaWAN
	uint8_t maxJoinTriesLeft = 100;
    3b68:	14 e6       	ldi	r17, 0x64	; 100
	
	do {
		rc = lora_driver_join(LORA_OTAA);
    3b6a:	80 e0       	ldi	r24, 0x00	; 0
    3b6c:	05 d5       	rcall	.+2570   	; 0x4578 <lora_driver_join>
    3b6e:	08 2f       	mov	r16, r24
    3b70:	19 d7       	rcall	.+3634   	; 0x49a4 <lora_driver_mapReturnCodeToText>
				
		printf("Join Network TriesLeft:%d >%s<\n", maxJoinTriesLeft, lora_driver_mapReturnCodeToText(rc));
    3b72:	9f 93       	push	r25
    3b74:	8f 93       	push	r24
    3b76:	1f 92       	push	r1
    3b78:	1f 93       	push	r17
    3b7a:	89 e1       	ldi	r24, 0x19	; 25
    3b7c:	94 e0       	ldi	r25, 0x04	; 4
    3b7e:	9f 93       	push	r25
    3b80:	8f 93       	push	r24
    3b82:	0e 94 3f 30 	call	0x607e	; 0x607e <printf>
    3b86:	0f 90       	pop	r0
    3b88:	0f 90       	pop	r0

		if ( rc != LORA_ACCEPTED)
    3b8a:	0f 90       	pop	r0
    3b8c:	0f 90       	pop	r0
    3b8e:	0f 90       	pop	r0
    3b90:	0f 90       	pop	r0
    3b92:	08 30       	cpi	r16, 0x08	; 8
    3b94:	59 f0       	breq	.+22     	; 0x3bac <_lora_setup+0x154>
    3b96:	80 e0       	ldi	r24, 0x00	; 0
    3b98:	0e 94 17 2b 	call	0x562e	; 0x562e <status_leds_longPuls>
		{
			// Make the red led pulse to tell something went wrong
			status_leds_longPuls(led_ST1); // OPTIONAL
    3b9c:	66 e3       	ldi	r22, 0x36	; 54
    3b9e:	71 e0       	ldi	r23, 0x01	; 1
			// Wait 5 sec and lets try again
			vTaskDelay(pdMS_TO_TICKS(5000UL));
    3ba0:	80 e0       	ldi	r24, 0x00	; 0
    3ba2:	90 e0       	ldi	r25, 0x00	; 0
    3ba4:	0e 94 20 11 	call	0x2240	; 0x2240 <vTaskDelay>
    3ba8:	11 50       	subi	r17, 0x01	; 1
    3baa:	f9 f6       	brne	.-66     	; 0x3b6a <_lora_setup+0x112>
		}
		else
		{
			break;
		}
	} while (--maxJoinTriesLeft);
    3bac:	08 30       	cpi	r16, 0x08	; 8
    3bae:	21 f4       	brne	.+8      	; 0x3bb8 <_lora_setup+0x160>

	if (rc == LORA_ACCEPTED)
    3bb0:	81 e0       	ldi	r24, 0x01	; 1
    3bb2:	0e 94 f9 2a 	call	0x55f2	; 0x55f2 <status_leds_ledOn>
	{
		// Connected to LoRaWAN :-)
		// Make the green led steady
		status_leds_ledOn(led_ST2); // OPTIONAL
    3bb6:	09 c0       	rjmp	.+18     	; 0x3bca <_lora_setup+0x172>
    3bb8:	81 e0       	ldi	r24, 0x01	; 1
		while (1)
		{
			taskYIELD();
		}
	}
}
    3bba:	0e 94 08 2b 	call	0x5610	; 0x5610 <status_leds_ledOff>
	}
	else
	{
		// Something went wrong
		// Turn off the green led
		status_leds_ledOff(led_ST2); // OPTIONAL
    3bbe:	80 e0       	ldi	r24, 0x00	; 0
    3bc0:	0e 94 d6 2a 	call	0x55ac	; 0x55ac <status_leds_fastBlink>
		// Make the red led blink fast to tell something went wrong
		status_leds_fastBlink(led_ST1); // OPTIONAL
    3bc4:	0e 94 91 04 	call	0x922	; 0x922 <vPortYield>

		// Lets stay here
		while (1)
		{
			taskYIELD();
    3bc8:	fd cf       	rjmp	.-6      	; 0x3bc4 <_lora_setup+0x16c>
    3bca:	64 96       	adiw	r28, 0x14	; 20
    3bcc:	0f b6       	in	r0, 0x3f	; 63
		}
	}
}
    3bce:	f8 94       	cli
    3bd0:	de bf       	out	0x3e, r29	; 62
    3bd2:	0f be       	out	0x3f, r0	; 63
    3bd4:	cd bf       	out	0x3d, r28	; 61
    3bd6:	df 91       	pop	r29
    3bd8:	cf 91       	pop	r28
    3bda:	1f 91       	pop	r17
    3bdc:	0f 91       	pop	r16
    3bde:	08 95       	ret

00003be0 <lora_handler_uplink_task>:
    3be0:	cf 93       	push	r28
    3be2:	df 93       	push	r29

/*-----------------------------------------------------------*/
void lora_handler_uplink_task( void *pvParameters )
{
    3be4:	00 d0       	rcall	.+0      	; 0x3be6 <lora_handler_uplink_task+0x6>
    3be6:	1f 92       	push	r1
    3be8:	cd b7       	in	r28, 0x3d	; 61
    3bea:	de b7       	in	r29, 0x3e	; 62
	// Hardware reset of LoRaWAN transceiver
	lora_driver_resetRn2483(1);
    3bec:	81 e0       	ldi	r24, 0x01	; 1
    3bee:	4f d4       	rcall	.+2206   	; 0x448e <lora_driver_resetRn2483>
	vTaskDelay(2);
    3bf0:	62 e0       	ldi	r22, 0x02	; 2
    3bf2:	70 e0       	ldi	r23, 0x00	; 0
    3bf4:	80 e0       	ldi	r24, 0x00	; 0
    3bf6:	90 e0       	ldi	r25, 0x00	; 0
    3bf8:	0e 94 20 11 	call	0x2240	; 0x2240 <vTaskDelay>
	lora_driver_resetRn2483(0);
    3bfc:	80 e0       	ldi	r24, 0x00	; 0
    3bfe:	47 d4       	rcall	.+2190   	; 0x448e <lora_driver_resetRn2483>
	// Give it a chance to wakeup
	vTaskDelay(150);
    3c00:	66 e9       	ldi	r22, 0x96	; 150
    3c02:	70 e0       	ldi	r23, 0x00	; 0
    3c04:	80 e0       	ldi	r24, 0x00	; 0
    3c06:	90 e0       	ldi	r25, 0x00	; 0
    3c08:	0e 94 20 11 	call	0x2240	; 0x2240 <vTaskDelay>

	lora_driver_flushBuffers(); // get rid of first version string from module after reset!
    3c0c:	f9 d3       	rcall	.+2034   	; 0x4400 <lora_driver_flushBuffers>

	_lora_setup();
    3c0e:	24 df       	rcall	.-440    	; 0x3a58 <_lora_setup>
    3c10:	0e 94 a5 0e 	call	0x1d4a	; 0x1d4a <xTaskGetTickCount>
	//_uplink_payload.len = 6;
	//_uplink_payload.portNo = 2;

	TickType_t xLastWakeTime;
	const TickType_t xFrequency = pdMS_TO_TICKS(3000UL); // Upload message every 5 minutes (300000 ms)
	xLastWakeTime = xTaskGetTickCount();
    3c14:	69 83       	std	Y+1, r22	; 0x01
    3c16:	7a 83       	std	Y+2, r23	; 0x02
    3c18:	8b 83       	std	Y+3, r24	; 0x03
    3c1a:	9c 83       	std	Y+4, r25	; 0x04
    3c1c:	0f ef       	ldi	r16, 0xFF	; 255
	for(;;)
	{
		
		EventBits_t temp;
	
		temp=xMessageBufferReceive(uplinkMessageBuffer,(void*)&payload,sizeof(payload),portMAX_DELAY);
    3c1e:	1f ef       	ldi	r17, 0xFF	; 255
    3c20:	98 01       	movw	r18, r16
    3c22:	46 e1       	ldi	r20, 0x16	; 22
    3c24:	50 e0       	ldi	r21, 0x00	; 0
    3c26:	66 e7       	ldi	r22, 0x76	; 118
    3c28:	78 e1       	ldi	r23, 0x18	; 24
    3c2a:	80 91 8e 18 	lds	r24, 0x188E	; 0x80188e <uplinkMessageBuffer>
    3c2e:	90 91 8f 18 	lds	r25, 0x188F	; 0x80188f <uplinkMessageBuffer+0x1>
    3c32:	0e 94 80 0b 	call	0x1700	; 0x1700 <xStreamBufferReceive>
    3c36:	8c 01       	movw	r16, r24
    3c38:	4a eb       	ldi	r20, 0xBA	; 186
	
		xTaskDelayUntil( &xLastWakeTime, xFrequency );
    3c3a:	50 e0       	ldi	r21, 0x00	; 0
    3c3c:	60 e0       	ldi	r22, 0x00	; 0
    3c3e:	70 e0       	ldi	r23, 0x00	; 0
    3c40:	ce 01       	movw	r24, r28
    3c42:	01 96       	adiw	r24, 0x01	; 1
    3c44:	0e 94 bb 10 	call	0x2176	; 0x2176 <xTaskDelayUntil>
    3c48:	01 2b       	or	r16, r17
		
		if( temp > 0 )
    3c4a:	a1 f0       	breq	.+40     	; 0x3c74 <lora_handler_uplink_task+0x94>
    3c4c:	83 e0       	ldi	r24, 0x03	; 3
		{
			status_leds_shortPuls(led_ST4);  // OPTIONAL
    3c4e:	0e 94 29 2b 	call	0x5652	; 0x5652 <status_leds_shortPuls>
			printf("Uploaded Message ------------------>%s<\n", lora_driver_mapReturnCodeToText(lora_driver_sendUploadMessage(false, &payload)));
    3c52:	66 e7       	ldi	r22, 0x76	; 118
    3c54:	78 e1       	ldi	r23, 0x18	; 24
    3c56:	80 e0       	ldi	r24, 0x00	; 0
    3c58:	b8 d4       	rcall	.+2416   	; 0x45ca <lora_driver_sendUploadMessage>
    3c5a:	a4 d6       	rcall	.+3400   	; 0x49a4 <lora_driver_mapReturnCodeToText>
    3c5c:	9f 93       	push	r25
    3c5e:	8f 93       	push	r24
    3c60:	89 e3       	ldi	r24, 0x39	; 57
    3c62:	94 e0       	ldi	r25, 0x04	; 4
    3c64:	9f 93       	push	r25
    3c66:	8f 93       	push	r24
    3c68:	0e 94 3f 30 	call	0x607e	; 0x607e <printf>
    3c6c:	0f 90       	pop	r0
    3c6e:	0f 90       	pop	r0
    3c70:	0f 90       	pop	r0
    3c72:	0f 90       	pop	r0
    3c74:	64 e6       	ldi	r22, 0x64	; 100
		}
		vTaskDelay(100); // verificatr 
    3c76:	70 e0       	ldi	r23, 0x00	; 0
    3c78:	80 e0       	ldi	r24, 0x00	; 0
    3c7a:	90 e0       	ldi	r25, 0x00	; 0
    3c7c:	0e 94 20 11 	call	0x2240	; 0x2240 <vTaskDelay>
    3c80:	cd cf       	rjmp	.-102    	; 0x3c1c <lora_handler_uplink_task+0x3c>

00003c82 <lora_uplink_handler_create>:
	}
    3c82:	ef 92       	push	r14
}
void lora_uplink_handler_create(UBaseType_t lora_handler_task_priority)
{
    3c84:	ff 92       	push	r15
    3c86:	0f 93       	push	r16
	xTaskCreate(
    3c88:	e1 2c       	mov	r14, r1
    3c8a:	f1 2c       	mov	r15, r1
    3c8c:	08 2f       	mov	r16, r24
    3c8e:	20 e0       	ldi	r18, 0x00	; 0
    3c90:	30 e0       	ldi	r19, 0x00	; 0
    3c92:	40 ec       	ldi	r20, 0xC0	; 192
    3c94:	50 e0       	ldi	r21, 0x00	; 0
    3c96:	62 e6       	ldi	r22, 0x62	; 98
    3c98:	74 e0       	ldi	r23, 0x04	; 4
    3c9a:	80 ef       	ldi	r24, 0xF0	; 240
    3c9c:	9d e1       	ldi	r25, 0x1D	; 29
    3c9e:	0e 94 1b 0e 	call	0x1c36	; 0x1c36 <xTaskCreate>
	"LRHandUplink"  // A name just for humans
	, configMINIMAL_STACK_SIZE  // This stack size can be checked & adjusted by reading the Stack Highwater
	, NULL
	, tskIDLE_PRIORITY + lora_handler_task_priority  // Priority, with 3 (configMAX_PRIORITIES - 1) being the highest, and 0 being the lowest.
	, NULL );
}
    3ca2:	0f 91       	pop	r16
    3ca4:	ff 90       	pop	r15
    3ca6:	ef 90       	pop	r14
    3ca8:	08 95       	ret

00003caa <Organization_init>:
#include "../Source/headers/Organization.h"

SemaphoreHandle_t organizeSemaphore;
uint8_t servoLevel;

void Organization_init() {
    3caa:	0f 93       	push	r16
	
	servoLevel = -100;
    3cac:	8c e9       	ldi	r24, 0x9C	; 156
    3cae:	80 93 a9 18 	sts	0x18A9, r24	; 0x8018a9 <servoLevel>
	organizeSemaphore = xSemaphoreCreateBinary();
    3cb2:	43 e0       	ldi	r20, 0x03	; 3
    3cb4:	60 e0       	ldi	r22, 0x00	; 0
    3cb6:	81 e0       	ldi	r24, 0x01	; 1
    3cb8:	0e 94 86 06 	call	0xd0c	; 0xd0c <xQueueGenericCreate>
    3cbc:	90 93 ab 18 	sts	0x18AB, r25	; 0x8018ab <organizeSemaphore+0x1>
    3cc0:	80 93 aa 18 	sts	0x18AA, r24	; 0x8018aa <organizeSemaphore>
	xSemaphoreGive(organizeSemaphore);
    3cc4:	00 e0       	ldi	r16, 0x00	; 0
    3cc6:	20 e0       	ldi	r18, 0x00	; 0
    3cc8:	30 e0       	ldi	r19, 0x00	; 0
    3cca:	a9 01       	movw	r20, r18
    3ccc:	60 e0       	ldi	r22, 0x00	; 0
    3cce:	70 e0       	ldi	r23, 0x00	; 0
    3cd0:	0e 94 a9 06 	call	0xd52	; 0xd52 <xQueueGenericSend>
}
    3cd4:	0f 91       	pop	r16
    3cd6:	08 95       	ret

00003cd8 <setServoLevel>:

void setServoLevel(uint8_t level) {
    3cd8:	0f 93       	push	r16
    3cda:	cf 93       	push	r28
    3cdc:	c8 2f       	mov	r28, r24
	
	if(xSemaphoreTake(organizeSemaphore, portMAX_DELAY) == pdTRUE) {
    3cde:	4f ef       	ldi	r20, 0xFF	; 255
    3ce0:	5f ef       	ldi	r21, 0xFF	; 255
    3ce2:	ba 01       	movw	r22, r20
    3ce4:	80 91 aa 18 	lds	r24, 0x18AA	; 0x8018aa <organizeSemaphore>
    3ce8:	90 91 ab 18 	lds	r25, 0x18AB	; 0x8018ab <organizeSemaphore+0x1>
    3cec:	0e 94 05 08 	call	0x100a	; 0x100a <xQueueSemaphoreTake>
    3cf0:	81 30       	cpi	r24, 0x01	; 1
    3cf2:	71 f4       	brne	.+28     	; 0x3d10 <setServoLevel+0x38>
		
		servoLevel = level;
    3cf4:	c0 93 a9 18 	sts	0x18A9, r28	; 0x8018a9 <servoLevel>
		xSemaphoreGive(organizeSemaphore);
    3cf8:	00 e0       	ldi	r16, 0x00	; 0
    3cfa:	20 e0       	ldi	r18, 0x00	; 0
    3cfc:	30 e0       	ldi	r19, 0x00	; 0
    3cfe:	a9 01       	movw	r20, r18
    3d00:	60 e0       	ldi	r22, 0x00	; 0
    3d02:	70 e0       	ldi	r23, 0x00	; 0
    3d04:	80 91 aa 18 	lds	r24, 0x18AA	; 0x8018aa <organizeSemaphore>
    3d08:	90 91 ab 18 	lds	r25, 0x18AB	; 0x8018ab <organizeSemaphore+0x1>
    3d0c:	0e 94 a9 06 	call	0xd52	; 0xd52 <xQueueGenericSend>
	}
}
    3d10:	cf 91       	pop	r28
    3d12:	0f 91       	pop	r16
    3d14:	08 95       	ret

00003d16 <getServoLevel>:

uint8_t getServoLevel() {
    3d16:	0f 93       	push	r16
	if(xSemaphoreTake(organizeSemaphore, portMAX_DELAY) == pdTRUE)
    3d18:	4f ef       	ldi	r20, 0xFF	; 255
    3d1a:	5f ef       	ldi	r21, 0xFF	; 255
    3d1c:	ba 01       	movw	r22, r20
    3d1e:	80 91 aa 18 	lds	r24, 0x18AA	; 0x8018aa <organizeSemaphore>
    3d22:	90 91 ab 18 	lds	r25, 0x18AB	; 0x8018ab <organizeSemaphore+0x1>
    3d26:	0e 94 05 08 	call	0x100a	; 0x100a <xQueueSemaphoreTake>
    3d2a:	81 30       	cpi	r24, 0x01	; 1
    3d2c:	61 f4       	brne	.+24     	; 0x3d46 <getServoLevel+0x30>
	{
		xSemaphoreGive(organizeSemaphore);
    3d2e:	00 e0       	ldi	r16, 0x00	; 0
    3d30:	20 e0       	ldi	r18, 0x00	; 0
    3d32:	30 e0       	ldi	r19, 0x00	; 0
    3d34:	a9 01       	movw	r20, r18
    3d36:	60 e0       	ldi	r22, 0x00	; 0
    3d38:	70 e0       	ldi	r23, 0x00	; 0
    3d3a:	80 91 aa 18 	lds	r24, 0x18AA	; 0x8018aa <organizeSemaphore>
    3d3e:	90 91 ab 18 	lds	r25, 0x18AB	; 0x8018ab <organizeSemaphore+0x1>
    3d42:	0e 94 a9 06 	call	0xd52	; 0xd52 <xQueueGenericSend>
		
	}
	return servoLevel;
}
    3d46:	80 91 a9 18 	lds	r24, 0x18A9	; 0x8018a9 <servoLevel>
    3d4a:	0f 91       	pop	r16
    3d4c:	08 95       	ret

00003d4e <SensorDataSharePackage_setTemperature_value>:
void SensorDataSharePackage_setCo2_value(uint16_t value) {
	co2_value = value;
}

void SensorDataSharePackage_setServo(uint8_t servo_state) {
	servo_actuator = servo_state;
    3d4e:	90 93 ad 18 	sts	0x18AD, r25	; 0x8018ad <temperature_value+0x1>
    3d52:	80 93 ac 18 	sts	0x18AC, r24	; 0x8018ac <temperature_value>
    3d56:	08 95       	ret

00003d58 <SensorDataSharePackage_setHumidity_value>:
    3d58:	90 93 c8 18 	sts	0x18C8, r25	; 0x8018c8 <humidity_value+0x1>
    3d5c:	80 93 c7 18 	sts	0x18C7, r24	; 0x8018c7 <humidity_value>
    3d60:	08 95       	ret

00003d62 <SensorDataSharePackage_setCo2_value>:
    3d62:	90 93 c6 18 	sts	0x18C6, r25	; 0x8018c6 <co2_value+0x1>
    3d66:	80 93 c5 18 	sts	0x18C5, r24	; 0x8018c5 <co2_value>
    3d6a:	08 95       	ret

00003d6c <SensorDataSharePackage_getLoraPayload>:
}

lora_driver_payload_t SensorDataSharePackage_getLoraPayload(uint8_t port_No) {
    3d6c:	1f 93       	push	r17
    3d6e:	cf 93       	push	r28
    3d70:	df 93       	push	r29
    3d72:	ec 01       	movw	r28, r24
    3d74:	16 2f       	mov	r17, r22
	
	
		printf( " Temperature ---> %i",temperature_value);
    3d76:	80 91 ad 18 	lds	r24, 0x18AD	; 0x8018ad <temperature_value+0x1>
    3d7a:	8f 93       	push	r24
    3d7c:	80 91 ac 18 	lds	r24, 0x18AC	; 0x8018ac <temperature_value>
    3d80:	8f 93       	push	r24
    3d82:	8f e6       	ldi	r24, 0x6F	; 111
    3d84:	94 e0       	ldi	r25, 0x04	; 4
    3d86:	9f 93       	push	r25
    3d88:	8f 93       	push	r24
    3d8a:	0e 94 3f 30 	call	0x607e	; 0x607e <printf>
		printf("Humidity ---> %i",humidity_value);
    3d8e:	80 91 c8 18 	lds	r24, 0x18C8	; 0x8018c8 <humidity_value+0x1>
    3d92:	8f 93       	push	r24
    3d94:	80 91 c7 18 	lds	r24, 0x18C7	; 0x8018c7 <humidity_value>
    3d98:	8f 93       	push	r24
    3d9a:	84 e8       	ldi	r24, 0x84	; 132
    3d9c:	94 e0       	ldi	r25, 0x04	; 4
    3d9e:	9f 93       	push	r25
    3da0:	8f 93       	push	r24
    3da2:	0e 94 3f 30 	call	0x607e	; 0x607e <printf>
		printf(" CO2 ---> %i",co2_value);
    3da6:	80 91 c6 18 	lds	r24, 0x18C6	; 0x8018c6 <co2_value+0x1>
    3daa:	8f 93       	push	r24
    3dac:	80 91 c5 18 	lds	r24, 0x18C5	; 0x8018c5 <co2_value>
    3db0:	8f 93       	push	r24
    3db2:	85 e9       	ldi	r24, 0x95	; 149
    3db4:	94 e0       	ldi	r25, 0x04	; 4
    3db6:	9f 93       	push	r25
    3db8:	8f 93       	push	r24
    3dba:	0e 94 3f 30 	call	0x607e	; 0x607e <printf>
		
		uplink_payload.portNo = port_No;
    3dbe:	ee ea       	ldi	r30, 0xAE	; 174
    3dc0:	f8 e1       	ldi	r31, 0x18	; 24
    3dc2:	10 83       	st	Z, r17
		uplink_payload.len = 6;
    3dc4:	86 e0       	ldi	r24, 0x06	; 6
    3dc6:	81 83       	std	Z+1, r24	; 0x01
		
		uplink_payload.bytes[0] =(uint8_t) (humidity_value >> 8);
    3dc8:	80 91 c7 18 	lds	r24, 0x18C7	; 0x8018c7 <humidity_value>
    3dcc:	90 91 c8 18 	lds	r25, 0x18C8	; 0x8018c8 <humidity_value+0x1>
    3dd0:	92 83       	std	Z+2, r25	; 0x02
		uplink_payload.bytes[1] =(uint8_t) (humidity_value & 0xFF);
    3dd2:	83 83       	std	Z+3, r24	; 0x03
		
		uplink_payload.bytes[2] =(uint8_t) (temperature_value >> 8);
    3dd4:	80 91 ac 18 	lds	r24, 0x18AC	; 0x8018ac <temperature_value>
    3dd8:	90 91 ad 18 	lds	r25, 0x18AD	; 0x8018ad <temperature_value+0x1>
    3ddc:	94 83       	std	Z+4, r25	; 0x04
		uplink_payload.bytes[3] =(uint8_t) (temperature_value & 0xFF);
    3dde:	85 83       	std	Z+5, r24	; 0x05
		
		uplink_payload.bytes[4] =(uint8_t) (co2_value >> 8);
    3de0:	20 91 c5 18 	lds	r18, 0x18C5	; 0x8018c5 <co2_value>
    3de4:	80 91 c6 18 	lds	r24, 0x18C6	; 0x8018c6 <co2_value+0x1>
    3de8:	86 83       	std	Z+6, r24	; 0x06
		uplink_payload.bytes[5] =(uint8_t) (co2_value & 0xFF);
    3dea:	27 83       	std	Z+7, r18	; 0x07
		
		uint16_t temp=(uplink_payload.bytes[4] <<8)+ uplink_payload.bytes[5];
    3dec:	90 e0       	ldi	r25, 0x00	; 0
    3dee:	98 2f       	mov	r25, r24
    3df0:	88 27       	eor	r24, r24
    3df2:	82 0f       	add	r24, r18
    3df4:	91 1d       	adc	r25, r1
		printf("ALEO BLEADI %i",temp);
    3df6:	9f 93       	push	r25
    3df8:	8f 93       	push	r24
    3dfa:	82 ea       	ldi	r24, 0xA2	; 162
    3dfc:	94 e0       	ldi	r25, 0x04	; 4
    3dfe:	9f 93       	push	r25
    3e00:	8f 93       	push	r24
    3e02:	0e 94 3f 30 	call	0x607e	; 0x607e <printf>
		
	
	return uplink_payload;
    3e06:	86 e1       	ldi	r24, 0x16	; 22
    3e08:	ee ea       	ldi	r30, 0xAE	; 174
    3e0a:	f8 e1       	ldi	r31, 0x18	; 24
    3e0c:	de 01       	movw	r26, r28
    3e0e:	01 90       	ld	r0, Z+
    3e10:	0d 92       	st	X+, r0
    3e12:	8a 95       	dec	r24
    3e14:	e1 f7       	brne	.-8      	; 0x3e0e <SensorDataSharePackage_getLoraPayload+0xa2>
    3e16:	8d b7       	in	r24, 0x3d	; 61
    3e18:	9e b7       	in	r25, 0x3e	; 62
    3e1a:	40 96       	adiw	r24, 0x10	; 16
    3e1c:	0f b6       	in	r0, 0x3f	; 63
    3e1e:	f8 94       	cli
    3e20:	9e bf       	out	0x3e, r25	; 62
    3e22:	0f be       	out	0x3f, r0	; 63
    3e24:	8d bf       	out	0x3d, r24	; 61
    3e26:	ce 01       	movw	r24, r28
    3e28:	df 91       	pop	r29
    3e2a:	cf 91       	pop	r28
    3e2c:	1f 91       	pop	r17
    3e2e:	08 95       	ret

00003e30 <servo_TurnTask>:
void servo_TurnTask(void *pvParameters)
{

	for (;;) {
		
		if (xSemaphoreTake(servoSemaphore, portMAX_DELAY) == pdTRUE) {
    3e30:	4f ef       	ldi	r20, 0xFF	; 255
    3e32:	5f ef       	ldi	r21, 0xFF	; 255
    3e34:	ba 01       	movw	r22, r20
    3e36:	80 91 70 18 	lds	r24, 0x1870	; 0x801870 <servoSemaphore>
    3e3a:	90 91 71 18 	lds	r25, 0x1871	; 0x801871 <servoSemaphore+0x1>
    3e3e:	0e 94 05 08 	call	0x100a	; 0x100a <xQueueSemaphoreTake>
    3e42:	81 30       	cpi	r24, 0x01	; 1
    3e44:	61 f4       	brne	.+24     	; 0x3e5e <servo_TurnTask+0x2e>
			
			printf("Turning on the actuator to the power... ");
    3e46:	81 eb       	ldi	r24, 0xB1	; 177
    3e48:	94 e0       	ldi	r25, 0x04	; 4
    3e4a:	9f 93       	push	r25
    3e4c:	8f 93       	push	r24
    3e4e:	0e 94 3f 30 	call	0x607e	; 0x607e <printf>
			rc_servo_setPosition(1, getServoLevel()); // schimbam in servo power
    3e52:	61 df       	rcall	.-318    	; 0x3d16 <getServoLevel>
    3e54:	68 2f       	mov	r22, r24
    3e56:	81 e0       	ldi	r24, 0x01	; 1
    3e58:	da d6       	rcall	.+3508   	; 0x4c0e <rc_servo_setPosition>
    3e5a:	0f 90       	pop	r0
    3e5c:	0f 90       	pop	r0
		}
		vTaskDelay(pdMS_TO_TICKS(100));
    3e5e:	66 e0       	ldi	r22, 0x06	; 6
    3e60:	70 e0       	ldi	r23, 0x00	; 0
    3e62:	80 e0       	ldi	r24, 0x00	; 0
    3e64:	90 e0       	ldi	r25, 0x00	; 0
    3e66:	0e 94 20 11 	call	0x2240	; 0x2240 <vTaskDelay>
		
	}
    3e6a:	e2 cf       	rjmp	.-60     	; 0x3e30 <servo_TurnTask>

00003e6c <servo_TaskRun>:
}


void servo_TaskRun()
{
    3e6c:	ef 92       	push	r14
    3e6e:	ff 92       	push	r15
    3e70:	0f 93       	push	r16
	rc_servo_initialise();
    3e72:	e5 d6       	rcall	.+3530   	; 0x4c3e <rc_servo_initialise>
	
	xTaskCreate(
    3e74:	e1 2c       	mov	r14, r1
    3e76:	f1 2c       	mov	r15, r1
    3e78:	03 e0       	ldi	r16, 0x03	; 3
    3e7a:	20 e0       	ldi	r18, 0x00	; 0
    3e7c:	30 e0       	ldi	r19, 0x00	; 0
    3e7e:	40 ec       	ldi	r20, 0xC0	; 192
    3e80:	50 e0       	ldi	r21, 0x00	; 0
    3e82:	6a ed       	ldi	r22, 0xDA	; 218
    3e84:	74 e0       	ldi	r23, 0x04	; 4
    3e86:	88 e1       	ldi	r24, 0x18	; 24
    3e88:	9f e1       	ldi	r25, 0x1F	; 31
    3e8a:	0e 94 1b 0e 	call	0x1c36	; 0x1c36 <xTaskCreate>
	, "Actuator"  // A name just for humans
	, configMINIMAL_STACK_SIZE // This stack size can be checked & adjusted by reading the Stack Highwater
	, NULL
	, tskIDLE_PRIORITY + 3 // Priority, with 3 (configMAX_PRIORITIES - 1) being the highest, and 0 being the lowest.
	, NULL );
}
    3e8e:	0f 91       	pop	r16
    3e90:	ff 90       	pop	r15
    3e92:	ef 90       	pop	r14
    3e94:	08 95       	ret

00003e96 <TempHumid_init>:
//TickType_t xLastWakeTime;
//TickType_t xFrequency;

void TempHumid_init()
{
	if (HIH8120_OK == hih8120_initialise())
    3e96:	2e d1       	rcall	.+604    	; 0x40f4 <hih8120_initialise>
    3e98:	81 11       	cpse	r24, r1
    3e9a:	09 c0       	rjmp	.+18     	; 0x3eae <TempHumid_init+0x18>
	{
		printf("The driver for temperature and humidity is initialized"); //The driver is initialized.
    3e9c:	83 ee       	ldi	r24, 0xE3	; 227
    3e9e:	94 e0       	ldi	r25, 0x04	; 4
    3ea0:	9f 93       	push	r25
    3ea2:	8f 93       	push	r24
    3ea4:	0e 94 3f 30 	call	0x607e	; 0x607e <printf>
    3ea8:	0f 90       	pop	r0
    3eaa:	0f 90       	pop	r0
    3eac:	08 95       	ret
	}
	else
	{	
		printf("The driver didn't start");
    3eae:	8a e1       	ldi	r24, 0x1A	; 26
    3eb0:	95 e0       	ldi	r25, 0x05	; 5
    3eb2:	9f 93       	push	r25
    3eb4:	8f 93       	push	r24
    3eb6:	0e 94 3f 30 	call	0x607e	; 0x607e <printf>
    3eba:	0f 90       	pop	r0
    3ebc:	0f 90       	pop	r0
    3ebe:	08 95       	ret

00003ec0 <TempHumid_measureTask>:

void TempHumid_measureTask(void)
{
	//xTaskDelayUntil( &xLastWakeTime, xFrequency);
	
	if (HIH8120_OK != hih8120_wakeup())
    3ec0:	31 d1       	rcall	.+610    	; 0x4124 <hih8120_wakeup>
    3ec2:	88 23       	and	r24, r24
    3ec4:	41 f0       	breq	.+16     	; 0x3ed6 <TempHumid_measureTask+0x16>
	{
		printf("Temperature&humidity sensor didn't wake up retrying");	
    3ec6:	82 e3       	ldi	r24, 0x32	; 50
    3ec8:	95 e0       	ldi	r25, 0x05	; 5
    3eca:	9f 93       	push	r25
    3ecc:	8f 93       	push	r24
    3ece:	0e 94 3f 30 	call	0x607e	; 0x607e <printf>
    3ed2:	0f 90       	pop	r0
    3ed4:	0f 90       	pop	r0
		
	}
	vTaskDelay(pdMS_TO_TICKS(100));
    3ed6:	66 e0       	ldi	r22, 0x06	; 6
    3ed8:	70 e0       	ldi	r23, 0x00	; 0
    3eda:	80 e0       	ldi	r24, 0x00	; 0
    3edc:	90 e0       	ldi	r25, 0x00	; 0
    3ede:	0e 94 20 11 	call	0x2240	; 0x2240 <vTaskDelay>
	
	if ( HIH8120_OK !=  hih8120_measure())
    3ee2:	35 d1       	rcall	.+618    	; 0x414e <hih8120_measure>
    3ee4:	88 23       	and	r24, r24
    3ee6:	41 f0       	breq	.+16     	; 0x3ef8 <TempHumid_measureTask+0x38>
	{
		printf("Temperature&humidity sensor could not perform measurement ");
    3ee8:	86 e6       	ldi	r24, 0x66	; 102
    3eea:	95 e0       	ldi	r25, 0x05	; 5
    3eec:	9f 93       	push	r25
    3eee:	8f 93       	push	r24
    3ef0:	0e 94 3f 30 	call	0x607e	; 0x607e <printf>
    3ef4:	0f 90       	pop	r0
    3ef6:	0f 90       	pop	r0
		
	}
	
	vTaskDelay(pdMS_TO_TICKS(20));
    3ef8:	61 e0       	ldi	r22, 0x01	; 1
    3efa:	70 e0       	ldi	r23, 0x00	; 0
    3efc:	80 e0       	ldi	r24, 0x00	; 0
    3efe:	90 e0       	ldi	r25, 0x00	; 0
    3f00:	0c 94 20 11 	jmp	0x2240	; 0x2240 <vTaskDelay>
    3f04:	08 95       	ret

00003f06 <TempHumid_getDataFromSensorTask>:

void TempHumid_getDataFromSensorTask(void *pvParameters)
{
	while (1) {
		
		xEventGroupWaitBits(measureEventGroup,temperature_and_humidity_bit,pdTRUE,pdTRUE,portMAX_DELAY);
    3f06:	cc 24       	eor	r12, r12
    3f08:	ca 94       	dec	r12
    3f0a:	dc 2c       	mov	r13, r12
    3f0c:	76 01       	movw	r14, r12
    3f0e:	01 e0       	ldi	r16, 0x01	; 1
    3f10:	21 e0       	ldi	r18, 0x01	; 1
    3f12:	41 e0       	ldi	r20, 0x01	; 1
    3f14:	50 e0       	ldi	r21, 0x00	; 0
    3f16:	60 e0       	ldi	r22, 0x00	; 0
    3f18:	70 e0       	ldi	r23, 0x00	; 0
    3f1a:	80 91 72 18 	lds	r24, 0x1872	; 0x801872 <measureEventGroup>
    3f1e:	90 91 73 18 	lds	r25, 0x1873	; 0x801873 <measureEventGroup+0x1>
    3f22:	0e 94 3c 01 	call	0x278	; 0x278 <xEventGroupWaitBits>
		//if (xSemaphoreTake(temperatureAndHumiditySemaphore, portMAX_DELAY) == pdTRUE) {
			
			TempHumid_measureTask();
    3f26:	cc df       	rcall	.-104    	; 0x3ec0 <TempHumid_measureTask>
			temperature_data = hih8120_getTemperature();
    3f28:	38 d1       	rcall	.+624    	; 0x419a <hih8120_getTemperature>
    3f2a:	62 d0       	rcall	.+196    	; 0x3ff0 <__fixunssfsi>
    3f2c:	70 93 3c 17 	sts	0x173C, r23	; 0x80173c <temperature_data+0x1>
    3f30:	60 93 3b 17 	sts	0x173B, r22	; 0x80173b <temperature_data>
			humidity_data = hih8120_getHumidity();
    3f34:	1d d1       	rcall	.+570    	; 0x4170 <hih8120_getHumidity>
    3f36:	5c d0       	rcall	.+184    	; 0x3ff0 <__fixunssfsi>
    3f38:	70 93 3a 17 	sts	0x173A, r23	; 0x80173a <humidity_data+0x1>
    3f3c:	60 93 39 17 	sts	0x1739, r22	; 0x801739 <humidity_data>
    3f40:	41 e0       	ldi	r20, 0x01	; 1
    3f42:	50 e0       	ldi	r21, 0x00	; 0
			
			//xQueueSend(dataSensorQueue, &temperature, portMAX_DELAY);
			//xQueueSend(dataSensorQueue, &humidity, portMAX_DELAY);
			
			xEventGroupSetBits(dataConfigurationGroup,temperature_and_humidity_bit);
    3f44:	60 e0       	ldi	r22, 0x00	; 0
    3f46:	70 e0       	ldi	r23, 0x00	; 0
    3f48:	80 91 8c 18 	lds	r24, 0x188C	; 0x80188c <dataConfigurationGroup>
    3f4c:	90 91 8d 18 	lds	r25, 0x188D	; 0x80188d <dataConfigurationGroup+0x1>
    3f50:	0e 94 dc 01 	call	0x3b8	; 0x3b8 <xEventGroupSetBits>
    3f54:	60 e0       	ldi	r22, 0x00	; 0
    3f56:	70 e0       	ldi	r23, 0x00	; 0
		//}
		
		vTaskDelay(pdMS_TO_TICKS(10));
    3f58:	cb 01       	movw	r24, r22
    3f5a:	0e 94 20 11 	call	0x2240	; 0x2240 <vTaskDelay>
    3f5e:	d3 cf       	rjmp	.-90     	; 0x3f06 <TempHumid_getDataFromSensorTask>

00003f60 <get_temperature_data>:
    3f60:	80 91 3b 17 	lds	r24, 0x173B	; 0x80173b <temperature_data>
}

uint16_t get_temperature_data() {
	
	return temperature_data;
}
    3f64:	90 91 3c 17 	lds	r25, 0x173C	; 0x80173c <temperature_data+0x1>
    3f68:	08 95       	ret

00003f6a <get_humidity_data>:

uint16_t get_humidity_data() {
	
	return humidity_data;
}
    3f6a:	80 91 39 17 	lds	r24, 0x1739	; 0x801739 <humidity_data>
    3f6e:	90 91 3a 17 	lds	r25, 0x173A	; 0x80173a <humidity_data+0x1>
    3f72:	08 95       	ret

00003f74 <createTempHumidTask>:

void createTempHumidTask(UBaseType_t priority) {
    3f74:	ef 92       	push	r14
    3f76:	ff 92       	push	r15
    3f78:	0f 93       	push	r16
    3f7a:	08 2f       	mov	r16, r24
	TempHumid_init();
    3f7c:	8c df       	rcall	.-232    	; 0x3e96 <TempHumid_init>
	
	xTaskCreate (
    3f7e:	e1 2c       	mov	r14, r1
    3f80:	f1 2c       	mov	r15, r1
    3f82:	20 e0       	ldi	r18, 0x00	; 0
    3f84:	30 e0       	ldi	r19, 0x00	; 0
    3f86:	40 ec       	ldi	r20, 0xC0	; 192
    3f88:	50 e0       	ldi	r21, 0x00	; 0
    3f8a:	61 ea       	ldi	r22, 0xA1	; 161
    3f8c:	75 e0       	ldi	r23, 0x05	; 5
    3f8e:	83 e8       	ldi	r24, 0x83	; 131
    3f90:	9f e1       	ldi	r25, 0x1F	; 31
    3f92:	0e 94 1b 0e 	call	0x1c36	; 0x1c36 <xTaskCreate>
	, "Get data from Sensor task"
	, configMINIMAL_STACK_SIZE
	,  NULL
	, tskIDLE_PRIORITY + priority
	, NULL);
    3f96:	0f 91       	pop	r16
    3f98:	ff 90       	pop	r15
    3f9a:	ef 90       	pop	r14
    3f9c:	08 95       	ret

00003f9e <taskInitializeData>:
// Prototype for LoRaWAN handler
//void lora_handler_initialise(UBaseType_t lora_handler_task_priority);

void taskInitializeData()
{
	initializeTemperatureAndHumiditySemaphore();
    3f9e:	b8 dc       	rcall	.-1680   	; 0x3910 <initializeTemperatureAndHumiditySemaphore>
	initializeServoSemaphore();
    3fa0:	cb dc       	rcall	.-1642   	; 0x3938 <initializeServoSemaphore>
	initializeQueue();
    3fa2:	de dc       	rcall	.-1604   	; 0x3960 <initializeQueue>
	initializeEventGroup();
    3fa4:	e7 dc       	rcall	.-1586   	; 0x3974 <initializeEventGroup>
    3fa6:	81 de       	rcall	.-766    	; 0x3caa <Organization_init>
	Organization_init();
    3fa8:	f2 dc       	rcall	.-1564   	; 0x398e <initializeDownlinkMessageBuffer>
    3faa:	60 91 6e 18 	lds	r22, 0x186E	; 0x80186e <downlinkMessageBuffer>
	initializeDownlinkMessageBuffer();
	
	lora_driver_initialise(ser_USART1, downlinkMessageBuffer);
    3fae:	70 91 6f 18 	lds	r23, 0x186F	; 0x80186f <downlinkMessageBuffer+0x1>
    3fb2:	81 e0       	ldi	r24, 0x01	; 1
    3fb4:	2c c2       	rjmp	.+1112   	; 0x440e <lora_driver_initialise>
    3fb6:	08 95       	ret

00003fb8 <create_tasks>:
    3fb8:	81 e0       	ldi	r24, 0x01	; 1
    3fba:	dc df       	rcall	.-72     	; 0x3f74 <createTempHumidTask>
    3fbc:	81 e0       	ldi	r24, 0x01	; 1

/*-----------------------------------------------------------*/
void create_tasks(void)
{
	createTempHumidTask(1);
	createCo2Task(1);
    3fbe:	93 dc       	rcall	.-1754   	; 0x38e6 <createCo2Task>
	applicationTaskRun(2);
    3fc0:	82 e0       	ldi	r24, 0x02	; 2
    3fc2:	2d dc       	rcall	.-1958   	; 0x381e <applicationTaskRun>
	lora_uplink_handler_create(4);
    3fc4:	84 e0       	ldi	r24, 0x04	; 4
    3fc6:	5d de       	rcall	.-838    	; 0x3c82 <lora_uplink_handler_create>
	lora_downlink_handler_create(3);
    3fc8:	83 e0       	ldi	r24, 0x03	; 3
    3fca:	32 dd       	rcall	.-1436   	; 0x3a30 <lora_downlink_handler_create>
	servo_TaskRun(3);
    3fcc:	83 e0       	ldi	r24, 0x03	; 3
    3fce:	90 e0       	ldi	r25, 0x00	; 0
    3fd0:	4d cf       	rjmp	.-358    	; 0x3e6c <servo_TaskRun>
    3fd2:	08 95       	ret

00003fd4 <initialiseSystem>:
    3fd4:	80 e0       	ldi	r24, 0x00	; 0


/*-----------------------------------------------------------*/
void initialiseSystem()
{
	stdio_initialise(ser_USART0);
    3fd6:	0e 94 f2 29 	call	0x53e4	; 0x53e4 <stdio_initialise>
	taskInitializeData();
    3fda:	e1 df       	rcall	.-62     	; 0x3f9e <taskInitializeData>
	create_tasks();
    3fdc:	ed cf       	rjmp	.-38     	; 0x3fb8 <create_tasks>
    3fde:	08 95       	ret

00003fe0 <main>:
    3fe0:	f9 df       	rcall	.-14     	; 0x3fd4 <initialiseSystem>

/*-----------------------------------------------------------*/
int main(void)
{
	initialiseSystem(); // Must be done as the very first thing!!
	printf("Program Started!!\n");
    3fe2:	8b eb       	ldi	r24, 0xBB	; 187
    3fe4:	95 e0       	ldi	r25, 0x05	; 5
    3fe6:	0e 94 52 30 	call	0x60a4	; 0x60a4 <puts>
	vTaskStartScheduler(); // Initialize and run the freeRTOS scheduler. Execution should never return from here.
    3fea:	0e 94 67 0e 	call	0x1cce	; 0x1cce <vTaskStartScheduler>
    3fee:	ff cf       	rjmp	.-2      	; 0x3fee <main+0xe>

00003ff0 <__fixunssfsi>:
    3ff0:	33 d0       	rcall	.+102    	; 0x4058 <__fp_splitA>
    3ff2:	88 f0       	brcs	.+34     	; 0x4016 <__fixunssfsi+0x26>
    3ff4:	9f 57       	subi	r25, 0x7F	; 127
    3ff6:	90 f0       	brcs	.+36     	; 0x401c <__fixunssfsi+0x2c>
    3ff8:	b9 2f       	mov	r27, r25
    3ffa:	99 27       	eor	r25, r25
    3ffc:	b7 51       	subi	r27, 0x17	; 23
    3ffe:	a0 f0       	brcs	.+40     	; 0x4028 <__fixunssfsi+0x38>
    4000:	d1 f0       	breq	.+52     	; 0x4036 <__fixunssfsi+0x46>
    4002:	66 0f       	add	r22, r22
    4004:	77 1f       	adc	r23, r23
    4006:	88 1f       	adc	r24, r24
    4008:	99 1f       	adc	r25, r25
    400a:	1a f0       	brmi	.+6      	; 0x4012 <__fixunssfsi+0x22>
    400c:	ba 95       	dec	r27
    400e:	c9 f7       	brne	.-14     	; 0x4002 <__fixunssfsi+0x12>
    4010:	12 c0       	rjmp	.+36     	; 0x4036 <__fixunssfsi+0x46>
    4012:	b1 30       	cpi	r27, 0x01	; 1
    4014:	81 f0       	breq	.+32     	; 0x4036 <__fixunssfsi+0x46>
    4016:	3a d0       	rcall	.+116    	; 0x408c <__fp_zero>
    4018:	b1 e0       	ldi	r27, 0x01	; 1
    401a:	08 95       	ret
    401c:	37 c0       	rjmp	.+110    	; 0x408c <__fp_zero>
    401e:	67 2f       	mov	r22, r23
    4020:	78 2f       	mov	r23, r24
    4022:	88 27       	eor	r24, r24
    4024:	b8 5f       	subi	r27, 0xF8	; 248
    4026:	39 f0       	breq	.+14     	; 0x4036 <__fixunssfsi+0x46>
    4028:	b9 3f       	cpi	r27, 0xF9	; 249
    402a:	cc f3       	brlt	.-14     	; 0x401e <__fixunssfsi+0x2e>
    402c:	86 95       	lsr	r24
    402e:	77 95       	ror	r23
    4030:	67 95       	ror	r22
    4032:	b3 95       	inc	r27
    4034:	d9 f7       	brne	.-10     	; 0x402c <__fixunssfsi+0x3c>
    4036:	3e f4       	brtc	.+14     	; 0x4046 <__fixunssfsi+0x56>
    4038:	90 95       	com	r25
    403a:	80 95       	com	r24
    403c:	70 95       	com	r23
    403e:	61 95       	neg	r22
    4040:	7f 4f       	sbci	r23, 0xFF	; 255
    4042:	8f 4f       	sbci	r24, 0xFF	; 255
    4044:	9f 4f       	sbci	r25, 0xFF	; 255
    4046:	08 95       	ret

00004048 <__fp_split3>:
    4048:	57 fd       	sbrc	r21, 7
    404a:	90 58       	subi	r25, 0x80	; 128
    404c:	44 0f       	add	r20, r20
    404e:	55 1f       	adc	r21, r21
    4050:	59 f0       	breq	.+22     	; 0x4068 <__fp_splitA+0x10>
    4052:	5f 3f       	cpi	r21, 0xFF	; 255
    4054:	71 f0       	breq	.+28     	; 0x4072 <__fp_splitA+0x1a>
    4056:	47 95       	ror	r20

00004058 <__fp_splitA>:
    4058:	88 0f       	add	r24, r24
    405a:	97 fb       	bst	r25, 7
    405c:	99 1f       	adc	r25, r25
    405e:	61 f0       	breq	.+24     	; 0x4078 <__fp_splitA+0x20>
    4060:	9f 3f       	cpi	r25, 0xFF	; 255
    4062:	79 f0       	breq	.+30     	; 0x4082 <__fp_splitA+0x2a>
    4064:	87 95       	ror	r24
    4066:	08 95       	ret
    4068:	12 16       	cp	r1, r18
    406a:	13 06       	cpc	r1, r19
    406c:	14 06       	cpc	r1, r20
    406e:	55 1f       	adc	r21, r21
    4070:	f2 cf       	rjmp	.-28     	; 0x4056 <__fp_split3+0xe>
    4072:	46 95       	lsr	r20
    4074:	f1 df       	rcall	.-30     	; 0x4058 <__fp_splitA>
    4076:	08 c0       	rjmp	.+16     	; 0x4088 <__fp_splitA+0x30>
    4078:	16 16       	cp	r1, r22
    407a:	17 06       	cpc	r1, r23
    407c:	18 06       	cpc	r1, r24
    407e:	99 1f       	adc	r25, r25
    4080:	f1 cf       	rjmp	.-30     	; 0x4064 <__fp_splitA+0xc>
    4082:	86 95       	lsr	r24
    4084:	71 05       	cpc	r23, r1
    4086:	61 05       	cpc	r22, r1
    4088:	08 94       	sec
    408a:	08 95       	ret

0000408c <__fp_zero>:
    408c:	e8 94       	clt

0000408e <__fp_szero>:
    408e:	bb 27       	eor	r27, r27
    4090:	66 27       	eor	r22, r22
    4092:	77 27       	eor	r23, r23
    4094:	cb 01       	movw	r24, r22
    4096:	97 f9       	bld	r25, 7
    4098:	08 95       	ret

0000409a <_hihTwiCallback>:
    409a:	65 30       	cpi	r22, 0x05	; 5
    409c:	f1 f4       	brne	.+60     	; 0x40da <_hihTwiCallback+0x40>
    409e:	fa 01       	movw	r30, r20
    40a0:	80 81       	ld	r24, Z
    40a2:	8f 73       	andi	r24, 0x3F	; 63
    40a4:	90 e0       	ldi	r25, 0x00	; 0
    40a6:	98 2f       	mov	r25, r24
    40a8:	88 27       	eor	r24, r24
    40aa:	21 81       	ldd	r18, Z+1	; 0x01
    40ac:	82 2b       	or	r24, r18
    40ae:	90 93 0a 02 	sts	0x020A, r25	; 0x80020a <_hum+0x1>
    40b2:	80 93 09 02 	sts	0x0209, r24	; 0x800209 <_hum>
    40b6:	82 81       	ldd	r24, Z+2	; 0x02
    40b8:	f0 e4       	ldi	r31, 0x40	; 64
    40ba:	8f 9f       	mul	r24, r31
    40bc:	c0 01       	movw	r24, r0
    40be:	11 24       	eor	r1, r1
    40c0:	fa 01       	movw	r30, r20
    40c2:	23 81       	ldd	r18, Z+3	; 0x03
    40c4:	26 95       	lsr	r18
    40c6:	26 95       	lsr	r18
    40c8:	82 2b       	or	r24, r18
    40ca:	90 93 08 02 	sts	0x0208, r25	; 0x800208 <_temp+0x1>
    40ce:	80 93 07 02 	sts	0x0207, r24	; 0x800207 <_temp>
    40d2:	81 e0       	ldi	r24, 0x01	; 1
    40d4:	80 93 3d 17 	sts	0x173D, r24	; 0x80173d <_measuringIsReady>
    40d8:	08 95       	ret
    40da:	64 30       	cpi	r22, 0x04	; 4
    40dc:	51 f0       	breq	.+20     	; 0x40f2 <_hihTwiCallback+0x58>
    40de:	80 e0       	ldi	r24, 0x00	; 0
    40e0:	90 e4       	ldi	r25, 0x40	; 64
    40e2:	90 93 08 02 	sts	0x0208, r25	; 0x800208 <_temp+0x1>
    40e6:	80 93 07 02 	sts	0x0207, r24	; 0x800207 <_temp>
    40ea:	90 93 0a 02 	sts	0x020A, r25	; 0x80020a <_hum+0x1>
    40ee:	80 93 09 02 	sts	0x0209, r24	; 0x800209 <_hum>
    40f2:	08 95       	ret

000040f4 <hih8120_initialise>:
    40f4:	0f 93       	push	r16
    40f6:	1f 93       	push	r17
    40f8:	0d e4       	ldi	r16, 0x4D	; 77
    40fa:	10 e2       	ldi	r17, 0x20	; 32
    40fc:	20 e0       	ldi	r18, 0x00	; 0
    40fe:	34 e2       	ldi	r19, 0x24	; 36
    4100:	44 ef       	ldi	r20, 0xF4	; 244
    4102:	50 e0       	ldi	r21, 0x00	; 0
    4104:	60 e0       	ldi	r22, 0x00	; 0
    4106:	87 e2       	ldi	r24, 0x27	; 39
    4108:	0e 94 4b 2b 	call	0x5696	; 0x5696 <twiCreate>
    410c:	90 93 3f 17 	sts	0x173F, r25	; 0x80173f <_hih8120Handler+0x1>
    4110:	80 93 3e 17 	sts	0x173E, r24	; 0x80173e <_hih8120Handler>
    4114:	21 e0       	ldi	r18, 0x01	; 1
    4116:	89 2b       	or	r24, r25
    4118:	09 f0       	breq	.+2      	; 0x411c <hih8120_initialise+0x28>
    411a:	20 e0       	ldi	r18, 0x00	; 0
    411c:	82 2f       	mov	r24, r18
    411e:	1f 91       	pop	r17
    4120:	0f 91       	pop	r16
    4122:	08 95       	ret

00004124 <hih8120_wakeup>:
    4124:	80 91 3e 17 	lds	r24, 0x173E	; 0x80173e <_hih8120Handler>
    4128:	90 91 3f 17 	lds	r25, 0x173F	; 0x80173f <_hih8120Handler+0x1>
    412c:	00 97       	sbiw	r24, 0x00	; 0
    412e:	59 f0       	breq	.+22     	; 0x4146 <hih8120_wakeup+0x22>
    4130:	40 e0       	ldi	r20, 0x00	; 0
    4132:	60 e0       	ldi	r22, 0x00	; 0
    4134:	70 e0       	ldi	r23, 0x00	; 0
    4136:	0e 94 9c 2b 	call	0x5738	; 0x5738 <twiTransmit>
    413a:	84 30       	cpi	r24, 0x04	; 4
    413c:	31 f4       	brne	.+12     	; 0x414a <hih8120_wakeup+0x26>
    413e:	10 92 3d 17 	sts	0x173D, r1	; 0x80173d <_measuringIsReady>
    4142:	80 e0       	ldi	r24, 0x00	; 0
    4144:	08 95       	ret
    4146:	82 e0       	ldi	r24, 0x02	; 2
    4148:	08 95       	ret
    414a:	83 e0       	ldi	r24, 0x03	; 3
    414c:	08 95       	ret

0000414e <hih8120_measure>:
    414e:	80 91 3e 17 	lds	r24, 0x173E	; 0x80173e <_hih8120Handler>
    4152:	90 91 3f 17 	lds	r25, 0x173F	; 0x80173f <_hih8120Handler+0x1>
    4156:	00 97       	sbiw	r24, 0x00	; 0
    4158:	39 f0       	breq	.+14     	; 0x4168 <hih8120_measure+0x1a>
    415a:	64 e0       	ldi	r22, 0x04	; 4
    415c:	0e 94 e8 2b 	call	0x57d0	; 0x57d0 <twiReceive>
    4160:	85 30       	cpi	r24, 0x05	; 5
    4162:	21 f0       	breq	.+8      	; 0x416c <hih8120_measure+0x1e>
    4164:	83 e0       	ldi	r24, 0x03	; 3
    4166:	08 95       	ret
    4168:	82 e0       	ldi	r24, 0x02	; 2
    416a:	08 95       	ret
    416c:	80 e0       	ldi	r24, 0x00	; 0
    416e:	08 95       	ret

00004170 <hih8120_getHumidity>:
    4170:	60 91 09 02 	lds	r22, 0x0209	; 0x800209 <_hum>
    4174:	70 91 0a 02 	lds	r23, 0x020A	; 0x80020a <_hum+0x1>
    4178:	80 e0       	ldi	r24, 0x00	; 0
    417a:	90 e0       	ldi	r25, 0x00	; 0
    417c:	0e 94 c6 2d 	call	0x5b8c	; 0x5b8c <__floatunsisf>
    4180:	20 e0       	ldi	r18, 0x00	; 0
    4182:	30 e0       	ldi	r19, 0x00	; 0
    4184:	48 ec       	ldi	r20, 0xC8	; 200
    4186:	52 e4       	ldi	r21, 0x42	; 66
    4188:	0e 94 2b 2e 	call	0x5c56	; 0x5c56 <__mulsf3>
    418c:	20 e0       	ldi	r18, 0x00	; 0
    418e:	38 ef       	ldi	r19, 0xF8	; 248
    4190:	4f e7       	ldi	r20, 0x7F	; 127
    4192:	56 e4       	ldi	r21, 0x46	; 70
    4194:	0c 94 5b 2d 	jmp	0x5ab6	; 0x5ab6 <__divsf3>
    4198:	08 95       	ret

0000419a <hih8120_getTemperature>:
    419a:	60 91 07 02 	lds	r22, 0x0207	; 0x800207 <_temp>
    419e:	70 91 08 02 	lds	r23, 0x0208	; 0x800208 <_temp+0x1>
    41a2:	80 e0       	ldi	r24, 0x00	; 0
    41a4:	90 e0       	ldi	r25, 0x00	; 0
    41a6:	0e 94 c6 2d 	call	0x5b8c	; 0x5b8c <__floatunsisf>
    41aa:	20 e0       	ldi	r18, 0x00	; 0
    41ac:	30 e0       	ldi	r19, 0x00	; 0
    41ae:	45 e2       	ldi	r20, 0x25	; 37
    41b0:	53 e4       	ldi	r21, 0x43	; 67
    41b2:	0e 94 2b 2e 	call	0x5c56	; 0x5c56 <__mulsf3>
    41b6:	20 e0       	ldi	r18, 0x00	; 0
    41b8:	38 ef       	ldi	r19, 0xF8	; 248
    41ba:	4f e7       	ldi	r20, 0x7F	; 127
    41bc:	56 e4       	ldi	r21, 0x46	; 70
    41be:	0e 94 5b 2d 	call	0x5ab6	; 0x5ab6 <__divsf3>
    41c2:	20 e0       	ldi	r18, 0x00	; 0
    41c4:	30 e0       	ldi	r19, 0x00	; 0
    41c6:	40 e2       	ldi	r20, 0x20	; 32
    41c8:	52 e4       	ldi	r21, 0x42	; 66
    41ca:	0c 94 f4 2c 	jmp	0x59e8	; 0x59e8 <__subsf3>
    41ce:	08 95       	ret

000041d0 <_serialCallBack>:
    41d0:	0f 93       	push	r16
    41d2:	1f 93       	push	r17
    41d4:	cf 93       	push	r28
    41d6:	df 93       	push	r29
    41d8:	1f 92       	push	r1
    41da:	1f 92       	push	r1
    41dc:	cd b7       	in	r28, 0x3d	; 61
    41de:	de b7       	in	r29, 0x3e	; 62
    41e0:	8c 01       	movw	r16, r24
    41e2:	19 82       	std	Y+1, r1	; 0x01
    41e4:	2d c0       	rjmp	.+90     	; 0x4240 <_serialCallBack+0x70>
    41e6:	e0 91 77 17 	lds	r30, 0x1777	; 0x801777 <rec_buf_inp.2878>
    41ea:	ec 32       	cpi	r30, 0x2C	; 44
    41ec:	50 f4       	brcc	.+20     	; 0x4202 <_serialCallBack+0x32>
    41ee:	81 e0       	ldi	r24, 0x01	; 1
    41f0:	8e 0f       	add	r24, r30
    41f2:	80 93 77 17 	sts	0x1777, r24	; 0x801777 <rec_buf_inp.2878>
    41f6:	f0 e0       	ldi	r31, 0x00	; 0
    41f8:	e7 55       	subi	r30, 0x57	; 87
    41fa:	f8 4e       	sbci	r31, 0xE8	; 232
    41fc:	8a 81       	ldd	r24, Y+2	; 0x02
    41fe:	80 83       	st	Z, r24
    4200:	02 c0       	rjmp	.+4      	; 0x4206 <_serialCallBack+0x36>
    4202:	10 92 77 17 	sts	0x1777, r1	; 0x801777 <rec_buf_inp.2878>
    4206:	8a 81       	ldd	r24, Y+2	; 0x02
    4208:	8a 30       	cpi	r24, 0x0A	; 10
    420a:	d1 f4       	brne	.+52     	; 0x4240 <_serialCallBack+0x70>
    420c:	40 91 77 17 	lds	r20, 0x1777	; 0x801777 <rec_buf_inp.2878>
    4210:	50 e0       	ldi	r21, 0x00	; 0
    4212:	fa 01       	movw	r30, r20
    4214:	e9 55       	subi	r30, 0x59	; 89
    4216:	f8 4e       	sbci	r31, 0xE8	; 232
    4218:	10 82       	st	Z, r1
    421a:	41 50       	subi	r20, 0x01	; 1
    421c:	51 09       	sbc	r21, r1
    421e:	9e 01       	movw	r18, r28
    4220:	2f 5f       	subi	r18, 0xFF	; 255
    4222:	3f 4f       	sbci	r19, 0xFF	; 255
    4224:	69 ea       	ldi	r22, 0xA9	; 169
    4226:	77 e1       	ldi	r23, 0x17	; 23
    4228:	80 91 7a 17 	lds	r24, 0x177A	; 0x80177a <_serialReplyBufferHandle>
    422c:	90 91 7b 17 	lds	r25, 0x177B	; 0x80177b <_serialReplyBufferHandle+0x1>
    4230:	0e 94 3c 0b 	call	0x1678	; 0x1678 <xStreamBufferSendFromISR>
    4234:	89 81       	ldd	r24, Y+1	; 0x01
    4236:	81 11       	cpse	r24, r1
    4238:	0e 94 91 04 	call	0x922	; 0x922 <vPortYield>
    423c:	10 92 77 17 	sts	0x1777, r1	; 0x801777 <rec_buf_inp.2878>
    4240:	be 01       	movw	r22, r28
    4242:	6e 5f       	subi	r22, 0xFE	; 254
    4244:	7f 4f       	sbci	r23, 0xFF	; 255
    4246:	c8 01       	movw	r24, r16
    4248:	37 d6       	rcall	.+3182   	; 0x4eb8 <serial_getByte>
    424a:	88 23       	and	r24, r24
    424c:	61 f2       	breq	.-104    	; 0x41e6 <_serialCallBack+0x16>
    424e:	0f 90       	pop	r0
    4250:	0f 90       	pop	r0
    4252:	df 91       	pop	r29
    4254:	cf 91       	pop	r28
    4256:	1f 91       	pop	r17
    4258:	0f 91       	pop	r16
    425a:	08 95       	ret

0000425c <_uploadMessage>:
    425c:	0f 93       	push	r16
    425e:	1f 93       	push	r17
    4260:	cf 93       	push	r28
    4262:	df 93       	push	r29
    4264:	8c 01       	movw	r16, r24
    4266:	eb 01       	movw	r28, r22
    4268:	80 91 7a 17 	lds	r24, 0x177A	; 0x80177a <_serialReplyBufferHandle>
    426c:	90 91 7b 17 	lds	r25, 0x177B	; 0x80177b <_serialReplyBufferHandle+0x1>
    4270:	0e 94 47 0a 	call	0x148e	; 0x148e <xStreamBufferReset>
    4274:	b8 01       	movw	r22, r16
    4276:	80 e4       	ldi	r24, 0x40	; 64
    4278:	97 e1       	ldi	r25, 0x17	; 23
    427a:	0e 94 20 30 	call	0x6040	; 0x6040 <strcpy>
    427e:	20 97       	sbiw	r28, 0x00	; 0
    4280:	79 f0       	breq	.+30     	; 0x42a0 <_uploadMessage+0x44>
    4282:	e0 e4       	ldi	r30, 0x40	; 64
    4284:	f7 e1       	ldi	r31, 0x17	; 23
    4286:	01 90       	ld	r0, Z+
    4288:	00 20       	and	r0, r0
    428a:	e9 f7       	brne	.-6      	; 0x4286 <_uploadMessage+0x2a>
    428c:	31 97       	sbiw	r30, 0x01	; 1
    428e:	80 e2       	ldi	r24, 0x20	; 32
    4290:	90 e0       	ldi	r25, 0x00	; 0
    4292:	91 83       	std	Z+1, r25	; 0x01
    4294:	80 83       	st	Z, r24
    4296:	be 01       	movw	r22, r28
    4298:	80 e4       	ldi	r24, 0x40	; 64
    429a:	97 e1       	ldi	r25, 0x17	; 23
    429c:	0e 94 15 30 	call	0x602a	; 0x602a <strcat>
    42a0:	e0 e4       	ldi	r30, 0x40	; 64
    42a2:	f7 e1       	ldi	r31, 0x17	; 23
    42a4:	df 01       	movw	r26, r30
    42a6:	0d 90       	ld	r0, X+
    42a8:	00 20       	and	r0, r0
    42aa:	e9 f7       	brne	.-6      	; 0x42a6 <_uploadMessage+0x4a>
    42ac:	11 97       	sbiw	r26, 0x01	; 1
    42ae:	8d e0       	ldi	r24, 0x0D	; 13
    42b0:	9a e0       	ldi	r25, 0x0A	; 10
    42b2:	11 96       	adiw	r26, 0x01	; 1
    42b4:	9c 93       	st	X, r25
    42b6:	8e 93       	st	-X, r24
    42b8:	12 96       	adiw	r26, 0x02	; 2
    42ba:	1c 92       	st	X, r1
    42bc:	01 90       	ld	r0, Z+
    42be:	00 20       	and	r0, r0
    42c0:	e9 f7       	brne	.-6      	; 0x42bc <_uploadMessage+0x60>
    42c2:	31 97       	sbiw	r30, 0x01	; 1
    42c4:	e0 54       	subi	r30, 0x40	; 64
    42c6:	f7 41       	sbci	r31, 0x17	; 23
    42c8:	ae 2f       	mov	r26, r30
    42ca:	80 e4       	ldi	r24, 0x40	; 64
    42cc:	97 e1       	ldi	r25, 0x17	; 23
    42ce:	ac 01       	movw	r20, r24
    42d0:	6a 2f       	mov	r22, r26
    42d2:	80 91 7c 17 	lds	r24, 0x177C	; 0x80177c <_rn2483_serial>
    42d6:	90 91 7d 17 	lds	r25, 0x177D	; 0x80177d <_rn2483_serial+0x1>
    42da:	99 d5       	rcall	.+2866   	; 0x4e0e <serial_sendBytes>
    42dc:	81 11       	cpse	r24, r1
    42de:	11 c0       	rjmp	.+34     	; 0x4302 <_uploadMessage+0xa6>
    42e0:	08 e2       	ldi	r16, 0x28	; 40
    42e2:	15 e0       	ldi	r17, 0x05	; 5
    42e4:	20 e0       	ldi	r18, 0x00	; 0
    42e6:	30 e0       	ldi	r19, 0x00	; 0
    42e8:	4d e2       	ldi	r20, 0x2D	; 45
    42ea:	50 e0       	ldi	r21, 0x00	; 0
    42ec:	63 e0       	ldi	r22, 0x03	; 3
    42ee:	78 e1       	ldi	r23, 0x18	; 24
    42f0:	80 91 7a 17 	lds	r24, 0x177A	; 0x80177a <_serialReplyBufferHandle>
    42f4:	90 91 7b 17 	lds	r25, 0x177B	; 0x80177b <_serialReplyBufferHandle+0x1>
    42f8:	0e 94 80 0b 	call	0x1700	; 0x1700 <xStreamBufferReceive>
    42fc:	83 e0       	ldi	r24, 0x03	; 3
    42fe:	98 e1       	ldi	r25, 0x18	; 24
    4300:	02 c0       	rjmp	.+4      	; 0x4306 <_uploadMessage+0xaa>
    4302:	80 e0       	ldi	r24, 0x00	; 0
    4304:	90 e0       	ldi	r25, 0x00	; 0
    4306:	df 91       	pop	r29
    4308:	cf 91       	pop	r28
    430a:	1f 91       	pop	r17
    430c:	0f 91       	pop	r16
    430e:	08 95       	ret

00004310 <_reply2ReturnCode>:
    4310:	2f 92       	push	r2
    4312:	3f 92       	push	r3
    4314:	4f 92       	push	r4
    4316:	5f 92       	push	r5
    4318:	6f 92       	push	r6
    431a:	7f 92       	push	r7
    431c:	8f 92       	push	r8
    431e:	9f 92       	push	r9
    4320:	af 92       	push	r10
    4322:	bf 92       	push	r11
    4324:	cf 92       	push	r12
    4326:	df 92       	push	r13
    4328:	ef 92       	push	r14
    432a:	ff 92       	push	r15
    432c:	0f 93       	push	r16
    432e:	1f 93       	push	r17
    4330:	cf 93       	push	r28
    4332:	df 93       	push	r29
    4334:	5c 01       	movw	r10, r24
    4336:	fc 01       	movw	r30, r24
    4338:	01 90       	ld	r0, Z+
    433a:	00 20       	and	r0, r0
    433c:	e9 f7       	brne	.-6      	; 0x4338 <_reply2ReturnCode+0x28>
    433e:	31 97       	sbiw	r30, 0x01	; 1
    4340:	6f 01       	movw	r12, r30
    4342:	c8 1a       	sub	r12, r24
    4344:	d9 0a       	sbc	r13, r25
    4346:	5c 2c       	mov	r5, r12
    4348:	0f 2e       	mov	r0, r31
    434a:	f6 e6       	ldi	r31, 0x66	; 102
    434c:	8f 2e       	mov	r8, r31
    434e:	f8 e0       	ldi	r31, 0x08	; 8
    4350:	9f 2e       	mov	r9, r31
    4352:	f0 2d       	mov	r31, r0
    4354:	e1 2c       	mov	r14, r1
    4356:	f1 2c       	mov	r15, r1
    4358:	4c 2c       	mov	r4, r12
    435a:	37 01       	movw	r6, r14
    435c:	f4 01       	movw	r30, r8
    435e:	01 81       	ldd	r16, Z+1	; 0x01
    4360:	12 81       	ldd	r17, Z+2	; 0x02
    4362:	e8 01       	movw	r28, r16
    4364:	09 90       	ld	r0, Y+
    4366:	00 20       	and	r0, r0
    4368:	e9 f7       	brne	.-6      	; 0x4364 <_reply2ReturnCode+0x54>
    436a:	21 97       	sbiw	r28, 0x01	; 1
    436c:	c0 1b       	sub	r28, r16
    436e:	d1 0b       	sbc	r29, r17
    4370:	3c 2e       	mov	r3, r28
    4372:	f9 e0       	ldi	r31, 0x09	; 9
    4374:	cf 16       	cp	r12, r31
    4376:	d1 04       	cpc	r13, r1
    4378:	58 f0       	brcs	.+22     	; 0x4390 <_reply2ReturnCode+0x80>
    437a:	f4 01       	movw	r30, r8
    437c:	20 80       	ld	r2, Z
    437e:	fe e0       	ldi	r31, 0x0E	; 14
    4380:	2f 12       	cpse	r2, r31
    4382:	06 c0       	rjmp	.+12     	; 0x4390 <_reply2ReturnCode+0x80>
    4384:	b8 01       	movw	r22, r16
    4386:	c5 01       	movw	r24, r10
    4388:	0e 94 f0 2f 	call	0x5fe0	; 0x5fe0 <strcasestr>
    438c:	89 2b       	or	r24, r25
    438e:	09 f5       	brne	.+66     	; 0x43d2 <_reply2ReturnCode+0xc2>
    4390:	44 2d       	mov	r20, r4
    4392:	35 14       	cp	r3, r5
    4394:	08 f4       	brcc	.+2      	; 0x4398 <_reply2ReturnCode+0x88>
    4396:	4c 2f       	mov	r20, r28
    4398:	50 e0       	ldi	r21, 0x00	; 0
    439a:	b8 01       	movw	r22, r16
    439c:	c5 01       	movw	r24, r10
    439e:	0e 94 27 30 	call	0x604e	; 0x604e <strncasecmp>
    43a2:	89 2b       	or	r24, r25
    43a4:	49 f4       	brne	.+18     	; 0x43b8 <_reply2ReturnCode+0xa8>
    43a6:	f3 01       	movw	r30, r6
    43a8:	ee 0f       	add	r30, r30
    43aa:	ff 1f       	adc	r31, r31
    43ac:	e6 0d       	add	r30, r6
    43ae:	f7 1d       	adc	r31, r7
    43b0:	ea 59       	subi	r30, 0x9A	; 154
    43b2:	f7 4f       	sbci	r31, 0xF7	; 247
    43b4:	20 80       	ld	r2, Z
    43b6:	0d c0       	rjmp	.+26     	; 0x43d2 <_reply2ReturnCode+0xc2>
    43b8:	8f ef       	ldi	r24, 0xFF	; 255
    43ba:	e8 1a       	sub	r14, r24
    43bc:	f8 0a       	sbc	r15, r24
    43be:	e3 e0       	ldi	r30, 0x03	; 3
    43c0:	8e 0e       	add	r8, r30
    43c2:	91 1c       	adc	r9, r1
    43c4:	f1 e1       	ldi	r31, 0x11	; 17
    43c6:	ef 16       	cp	r14, r31
    43c8:	f1 04       	cpc	r15, r1
    43ca:	39 f6       	brne	.-114    	; 0x435a <_reply2ReturnCode+0x4a>
    43cc:	68 94       	set
    43ce:	22 24       	eor	r2, r2
    43d0:	24 f8       	bld	r2, 4
    43d2:	82 2d       	mov	r24, r2
    43d4:	df 91       	pop	r29
    43d6:	cf 91       	pop	r28
    43d8:	1f 91       	pop	r17
    43da:	0f 91       	pop	r16
    43dc:	ff 90       	pop	r15
    43de:	ef 90       	pop	r14
    43e0:	df 90       	pop	r13
    43e2:	cf 90       	pop	r12
    43e4:	bf 90       	pop	r11
    43e6:	af 90       	pop	r10
    43e8:	9f 90       	pop	r9
    43ea:	8f 90       	pop	r8
    43ec:	7f 90       	pop	r7
    43ee:	6f 90       	pop	r6
    43f0:	5f 90       	pop	r5
    43f2:	4f 90       	pop	r4
    43f4:	3f 90       	pop	r3
    43f6:	2f 90       	pop	r2
    43f8:	08 95       	ret

000043fa <_uploadMessageRc>:
    43fa:	30 df       	rcall	.-416    	; 0x425c <_uploadMessage>
    43fc:	89 cf       	rjmp	.-238    	; 0x4310 <_reply2ReturnCode>
    43fe:	08 95       	ret

00004400 <lora_driver_flushBuffers>:
    4400:	80 91 7a 17 	lds	r24, 0x177A	; 0x80177a <_serialReplyBufferHandle>
    4404:	90 91 7b 17 	lds	r25, 0x177B	; 0x80177b <_serialReplyBufferHandle+0x1>
    4408:	0c 94 47 0a 	jmp	0x148e	; 0x148e <xStreamBufferReset>
    440c:	08 95       	ret

0000440e <lora_driver_initialise>:
    440e:	8f 92       	push	r8
    4410:	9f 92       	push	r9
    4412:	af 92       	push	r10
    4414:	cf 92       	push	r12
    4416:	ef 92       	push	r14
    4418:	0f 93       	push	r16
    441a:	1f 93       	push	r17
    441c:	cf 93       	push	r28
    441e:	c8 2f       	mov	r28, r24
    4420:	8b 01       	movw	r16, r22
    4422:	41 e0       	ldi	r20, 0x01	; 1
    4424:	60 e0       	ldi	r22, 0x00	; 0
    4426:	70 e0       	ldi	r23, 0x00	; 0
    4428:	88 ec       	ldi	r24, 0xC8	; 200
    442a:	90 e0       	ldi	r25, 0x00	; 0
    442c:	0e 94 15 0a 	call	0x142a	; 0x142a <xStreamBufferGenericCreate>
    4430:	90 93 7b 17 	sts	0x177B, r25	; 0x80177b <_serialReplyBufferHandle+0x1>
    4434:	80 93 7a 17 	sts	0x177A, r24	; 0x80177a <_serialReplyBufferHandle>
    4438:	10 93 79 17 	sts	0x1779, r17	; 0x801779 <_downlinkMessageBuffer+0x1>
    443c:	00 93 78 17 	sts	0x1778, r16	; 0x801778 <_downlinkMessageBuffer>
    4440:	0f 2e       	mov	r0, r31
    4442:	f8 ee       	ldi	r31, 0xE8	; 232
    4444:	8f 2e       	mov	r8, r31
    4446:	f0 e2       	ldi	r31, 0x20	; 32
    4448:	9f 2e       	mov	r9, r31
    444a:	f0 2d       	mov	r31, r0
    444c:	68 94       	set
    444e:	aa 24       	eor	r10, r10
    4450:	a6 f8       	bld	r10, 6
    4452:	68 94       	set
    4454:	cc 24       	eor	r12, r12
    4456:	c6 f8       	bld	r12, 6
    4458:	e1 2c       	mov	r14, r1
    445a:	00 e0       	ldi	r16, 0x00	; 0
    445c:	23 e0       	ldi	r18, 0x03	; 3
    445e:	40 e0       	ldi	r20, 0x00	; 0
    4460:	51 ee       	ldi	r21, 0xE1	; 225
    4462:	60 e0       	ldi	r22, 0x00	; 0
    4464:	70 e0       	ldi	r23, 0x00	; 0
    4466:	8c 2f       	mov	r24, r28
    4468:	06 d4       	rcall	.+2060   	; 0x4c76 <serial_create>
    446a:	90 93 7d 17 	sts	0x177D, r25	; 0x80177d <_rn2483_serial+0x1>
    446e:	80 93 7c 17 	sts	0x177C, r24	; 0x80177c <_rn2483_serial>
    4472:	e7 e0       	ldi	r30, 0x07	; 7
    4474:	f1 e0       	ldi	r31, 0x01	; 1
    4476:	80 81       	ld	r24, Z
    4478:	80 61       	ori	r24, 0x10	; 16
    447a:	80 83       	st	Z, r24
    447c:	cf 91       	pop	r28
    447e:	1f 91       	pop	r17
    4480:	0f 91       	pop	r16
    4482:	ef 90       	pop	r14
    4484:	cf 90       	pop	r12
    4486:	af 90       	pop	r10
    4488:	9f 90       	pop	r9
    448a:	8f 90       	pop	r8
    448c:	08 95       	ret

0000448e <lora_driver_resetRn2483>:
    448e:	88 23       	and	r24, r24
    4490:	31 f0       	breq	.+12     	; 0x449e <lora_driver_resetRn2483+0x10>
    4492:	e8 e0       	ldi	r30, 0x08	; 8
    4494:	f1 e0       	ldi	r31, 0x01	; 1
    4496:	80 81       	ld	r24, Z
    4498:	8f 7e       	andi	r24, 0xEF	; 239
    449a:	80 83       	st	Z, r24
    449c:	08 95       	ret
    449e:	e8 e0       	ldi	r30, 0x08	; 8
    44a0:	f1 e0       	ldi	r31, 0x01	; 1
    44a2:	80 81       	ld	r24, Z
    44a4:	80 61       	ori	r24, 0x10	; 16
    44a6:	80 83       	st	Z, r24
    44a8:	08 95       	ret

000044aa <lora_driver_rn2483FactoryReset>:
    44aa:	60 e0       	ldi	r22, 0x00	; 0
    44ac:	70 e0       	ldi	r23, 0x00	; 0
    44ae:	8c ee       	ldi	r24, 0xEC	; 236
    44b0:	95 e0       	ldi	r25, 0x05	; 5
    44b2:	d4 de       	rcall	.-600    	; 0x425c <_uploadMessage>
    44b4:	e3 e0       	ldi	r30, 0x03	; 3
    44b6:	f8 e1       	ldi	r31, 0x18	; 24
    44b8:	01 90       	ld	r0, Z+
    44ba:	00 20       	and	r0, r0
    44bc:	e9 f7       	brne	.-6      	; 0x44b8 <lora_driver_rn2483FactoryReset+0xe>
    44be:	31 97       	sbiw	r30, 0x01	; 1
    44c0:	e3 50       	subi	r30, 0x03	; 3
    44c2:	f8 41       	sbci	r31, 0x18	; 24
    44c4:	81 e0       	ldi	r24, 0x01	; 1
    44c6:	75 97       	sbiw	r30, 0x15	; 21
    44c8:	08 f0       	brcs	.+2      	; 0x44cc <lora_driver_rn2483FactoryReset+0x22>
    44ca:	80 e0       	ldi	r24, 0x00	; 0
    44cc:	08 95       	ret

000044ce <lora_driver_getRn2483Hweui>:
    44ce:	cf 93       	push	r28
    44d0:	df 93       	push	r29
    44d2:	ec 01       	movw	r28, r24
    44d4:	60 e0       	ldi	r22, 0x00	; 0
    44d6:	70 e0       	ldi	r23, 0x00	; 0
    44d8:	8d ef       	ldi	r24, 0xFD	; 253
    44da:	95 e0       	ldi	r25, 0x05	; 5
    44dc:	bf de       	rcall	.-642    	; 0x425c <_uploadMessage>
    44de:	e3 e0       	ldi	r30, 0x03	; 3
    44e0:	f8 e1       	ldi	r31, 0x18	; 24
    44e2:	01 90       	ld	r0, Z+
    44e4:	00 20       	and	r0, r0
    44e6:	e9 f7       	brne	.-6      	; 0x44e2 <lora_driver_getRn2483Hweui+0x14>
    44e8:	e4 51       	subi	r30, 0x14	; 20
    44ea:	f8 41       	sbci	r31, 0x18	; 24
    44ec:	39 f4       	brne	.+14     	; 0x44fc <lora_driver_getRn2483Hweui+0x2e>
    44ee:	63 e0       	ldi	r22, 0x03	; 3
    44f0:	78 e1       	ldi	r23, 0x18	; 24
    44f2:	ce 01       	movw	r24, r28
    44f4:	0e 94 20 30 	call	0x6040	; 0x6040 <strcpy>
    44f8:	80 e0       	ldi	r24, 0x00	; 0
    44fa:	02 c0       	rjmp	.+4      	; 0x4500 <lora_driver_getRn2483Hweui+0x32>
    44fc:	18 82       	st	Y, r1
    44fe:	81 e0       	ldi	r24, 0x01	; 1
    4500:	df 91       	pop	r29
    4502:	cf 91       	pop	r28
    4504:	08 95       	ret

00004506 <lora_driver_setDeviceIdentifier>:
    4506:	fc 01       	movw	r30, r24
    4508:	01 90       	ld	r0, Z+
    450a:	00 20       	and	r0, r0
    450c:	e9 f7       	brne	.-6      	; 0x4508 <lora_driver_setDeviceIdentifier+0x2>
    450e:	9f 01       	movw	r18, r30
    4510:	21 51       	subi	r18, 0x11	; 17
    4512:	31 09       	sbc	r19, r1
    4514:	28 17       	cp	r18, r24
    4516:	39 07       	cpc	r19, r25
    4518:	29 f4       	brne	.+10     	; 0x4524 <lora_driver_setDeviceIdentifier+0x1e>
    451a:	bc 01       	movw	r22, r24
    451c:	8b e2       	ldi	r24, 0x2B	; 43
    451e:	96 e0       	ldi	r25, 0x06	; 6
    4520:	6c cf       	rjmp	.-296    	; 0x43fa <_uploadMessageRc>
    4522:	08 95       	ret
    4524:	89 e0       	ldi	r24, 0x09	; 9
    4526:	08 95       	ret

00004528 <lora_driver_setApplicationIdentifier>:
    4528:	fc 01       	movw	r30, r24
    452a:	01 90       	ld	r0, Z+
    452c:	00 20       	and	r0, r0
    452e:	e9 f7       	brne	.-6      	; 0x452a <lora_driver_setApplicationIdentifier+0x2>
    4530:	9f 01       	movw	r18, r30
    4532:	21 51       	subi	r18, 0x11	; 17
    4534:	31 09       	sbc	r19, r1
    4536:	28 17       	cp	r18, r24
    4538:	39 07       	cpc	r19, r25
    453a:	29 f4       	brne	.+10     	; 0x4546 <lora_driver_setApplicationIdentifier+0x1e>
    453c:	bc 01       	movw	r22, r24
    453e:	8a e3       	ldi	r24, 0x3A	; 58
    4540:	96 e0       	ldi	r25, 0x06	; 6
    4542:	5b cf       	rjmp	.-330    	; 0x43fa <_uploadMessageRc>
    4544:	08 95       	ret
    4546:	89 e0       	ldi	r24, 0x09	; 9
    4548:	08 95       	ret

0000454a <lora_driver_setApplicationKey>:
    454a:	fc 01       	movw	r30, r24
    454c:	01 90       	ld	r0, Z+
    454e:	00 20       	and	r0, r0
    4550:	e9 f7       	brne	.-6      	; 0x454c <lora_driver_setApplicationKey+0x2>
    4552:	9f 01       	movw	r18, r30
    4554:	21 52       	subi	r18, 0x21	; 33
    4556:	31 09       	sbc	r19, r1
    4558:	28 17       	cp	r18, r24
    455a:	39 07       	cpc	r19, r25
    455c:	29 f4       	brne	.+10     	; 0x4568 <lora_driver_setApplicationKey+0x1e>
    455e:	bc 01       	movw	r22, r24
    4560:	89 e4       	ldi	r24, 0x49	; 73
    4562:	96 e0       	ldi	r25, 0x06	; 6
    4564:	4a cf       	rjmp	.-364    	; 0x43fa <_uploadMessageRc>
    4566:	08 95       	ret
    4568:	89 e0       	ldi	r24, 0x09	; 9
    456a:	08 95       	ret

0000456c <lora_driver_saveMac>:
    456c:	60 e0       	ldi	r22, 0x00	; 0
    456e:	70 e0       	ldi	r23, 0x00	; 0
    4570:	88 e8       	ldi	r24, 0x88	; 136
    4572:	96 e0       	ldi	r25, 0x06	; 6
    4574:	42 cf       	rjmp	.-380    	; 0x43fa <_uploadMessageRc>
    4576:	08 95       	ret

00004578 <lora_driver_join>:
    4578:	0f 93       	push	r16
    457a:	1f 93       	push	r17
    457c:	e8 2f       	mov	r30, r24
    457e:	f0 e0       	ldi	r31, 0x00	; 0
    4580:	ee 0f       	add	r30, r30
    4582:	ff 1f       	adc	r31, r31
    4584:	ee 59       	subi	r30, 0x9E	; 158
    4586:	f7 4f       	sbci	r31, 0xF7	; 247
    4588:	60 81       	ld	r22, Z
    458a:	71 81       	ldd	r23, Z+1	; 0x01
    458c:	81 e9       	ldi	r24, 0x91	; 145
    458e:	96 e0       	ldi	r25, 0x06	; 6
    4590:	34 df       	rcall	.-408    	; 0x43fa <_uploadMessageRc>
    4592:	81 11       	cpse	r24, r1
    4594:	14 c0       	rjmp	.+40     	; 0x45be <lora_driver_join+0x46>
    4596:	08 e2       	ldi	r16, 0x28	; 40
    4598:	15 e0       	ldi	r17, 0x05	; 5
    459a:	20 e0       	ldi	r18, 0x00	; 0
    459c:	30 e0       	ldi	r19, 0x00	; 0
    459e:	4d e2       	ldi	r20, 0x2D	; 45
    45a0:	50 e0       	ldi	r21, 0x00	; 0
    45a2:	63 e0       	ldi	r22, 0x03	; 3
    45a4:	78 e1       	ldi	r23, 0x18	; 24
    45a6:	80 91 7a 17 	lds	r24, 0x177A	; 0x80177a <_serialReplyBufferHandle>
    45aa:	90 91 7b 17 	lds	r25, 0x177B	; 0x80177b <_serialReplyBufferHandle+0x1>
    45ae:	0e 94 80 0b 	call	0x1700	; 0x1700 <xStreamBufferReceive>
    45b2:	88 23       	and	r24, r24
    45b4:	21 f0       	breq	.+8      	; 0x45be <lora_driver_join+0x46>
    45b6:	83 e0       	ldi	r24, 0x03	; 3
    45b8:	98 e1       	ldi	r25, 0x18	; 24
    45ba:	aa de       	rcall	.-684    	; 0x4310 <_reply2ReturnCode>
    45bc:	03 c0       	rjmp	.+6      	; 0x45c4 <lora_driver_join+0x4c>
    45be:	83 e0       	ldi	r24, 0x03	; 3
    45c0:	98 e1       	ldi	r25, 0x18	; 24
    45c2:	a6 de       	rcall	.-692    	; 0x4310 <_reply2ReturnCode>
    45c4:	1f 91       	pop	r17
    45c6:	0f 91       	pop	r16
    45c8:	08 95       	ret

000045ca <lora_driver_sendUploadMessage>:
    45ca:	0f 93       	push	r16
    45cc:	1f 93       	push	r17
    45ce:	cf 93       	push	r28
    45d0:	df 93       	push	r29
    45d2:	1f 92       	push	r1
    45d4:	cd b7       	in	r28, 0x3d	; 61
    45d6:	de b7       	in	r29, 0x3e	; 62
    45d8:	db 01       	movw	r26, r22
    45da:	11 96       	adiw	r26, 0x01	; 1
    45dc:	9c 91       	ld	r25, X
    45de:	11 97       	sbiw	r26, 0x01	; 1
    45e0:	95 31       	cpi	r25, 0x15	; 21
    45e2:	08 f0       	brcs	.+2      	; 0x45e6 <lora_driver_sendUploadMessage+0x1c>
    45e4:	b4 c0       	rjmp	.+360    	; 0x474e <lora_driver_sendUploadMessage+0x184>
    45e6:	99 23       	and	r25, r25
    45e8:	81 f1       	breq	.+96     	; 0x464a <lora_driver_sendUploadMessage+0x80>
    45ea:	60 e0       	ldi	r22, 0x00	; 0
    45ec:	70 e0       	ldi	r23, 0x00	; 0
    45ee:	27 2f       	mov	r18, r23
    45f0:	30 e0       	ldi	r19, 0x00	; 0
    45f2:	46 2f       	mov	r20, r22
    45f4:	50 e0       	ldi	r21, 0x00	; 0
    45f6:	fd 01       	movw	r30, r26
    45f8:	e4 0f       	add	r30, r20
    45fa:	f5 1f       	adc	r31, r21
    45fc:	92 81       	ldd	r25, Z+2	; 0x02
    45fe:	92 95       	swap	r25
    4600:	9f 70       	andi	r25, 0x0F	; 15
    4602:	9a 30       	cpi	r25, 0x0A	; 10
    4604:	10 f0       	brcs	.+4      	; 0x460a <lora_driver_sendUploadMessage+0x40>
    4606:	99 5c       	subi	r25, 0xC9	; 201
    4608:	01 c0       	rjmp	.+2      	; 0x460c <lora_driver_sendUploadMessage+0x42>
    460a:	90 5d       	subi	r25, 0xD0	; 208
    460c:	f9 01       	movw	r30, r18
    460e:	ec 56       	subi	r30, 0x6C	; 108
    4610:	f8 4e       	sbci	r31, 0xE8	; 232
    4612:	90 83       	st	Z, r25
    4614:	2f 5f       	subi	r18, 0xFF	; 255
    4616:	3f 4f       	sbci	r19, 0xFF	; 255
    4618:	fd 01       	movw	r30, r26
    461a:	e4 0f       	add	r30, r20
    461c:	f5 1f       	adc	r31, r21
    461e:	92 81       	ldd	r25, Z+2	; 0x02
    4620:	9f 70       	andi	r25, 0x0F	; 15
    4622:	49 2f       	mov	r20, r25
    4624:	50 e0       	ldi	r21, 0x00	; 0
    4626:	4a 30       	cpi	r20, 0x0A	; 10
    4628:	51 05       	cpc	r21, r1
    462a:	14 f0       	brlt	.+4      	; 0x4630 <lora_driver_sendUploadMessage+0x66>
    462c:	99 5c       	subi	r25, 0xC9	; 201
    462e:	01 c0       	rjmp	.+2      	; 0x4632 <lora_driver_sendUploadMessage+0x68>
    4630:	90 5d       	subi	r25, 0xD0	; 208
    4632:	f9 01       	movw	r30, r18
    4634:	ec 56       	subi	r30, 0x6C	; 108
    4636:	f8 4e       	sbci	r31, 0xE8	; 232
    4638:	90 83       	st	Z, r25
    463a:	7e 5f       	subi	r23, 0xFE	; 254
    463c:	6f 5f       	subi	r22, 0xFF	; 255
    463e:	11 96       	adiw	r26, 0x01	; 1
    4640:	9c 91       	ld	r25, X
    4642:	11 97       	sbiw	r26, 0x01	; 1
    4644:	69 17       	cp	r22, r25
    4646:	98 f2       	brcs	.-90     	; 0x45ee <lora_driver_sendUploadMessage+0x24>
    4648:	01 c0       	rjmp	.+2      	; 0x464c <lora_driver_sendUploadMessage+0x82>
    464a:	70 e0       	ldi	r23, 0x00	; 0
    464c:	e7 2f       	mov	r30, r23
    464e:	f0 e0       	ldi	r31, 0x00	; 0
    4650:	ec 56       	subi	r30, 0x6C	; 108
    4652:	f8 4e       	sbci	r31, 0xE8	; 232
    4654:	10 82       	st	Z, r1
    4656:	4c 91       	ld	r20, X
    4658:	81 11       	cpse	r24, r1
    465a:	03 c0       	rjmp	.+6      	; 0x4662 <lora_driver_sendUploadMessage+0x98>
    465c:	8a e9       	ldi	r24, 0x9A	; 154
    465e:	96 e0       	ldi	r25, 0x06	; 6
    4660:	02 c0       	rjmp	.+4      	; 0x4666 <lora_driver_sendUploadMessage+0x9c>
    4662:	8c e9       	ldi	r24, 0x9C	; 156
    4664:	96 e0       	ldi	r25, 0x06	; 6
    4666:	24 e9       	ldi	r18, 0x94	; 148
    4668:	37 e1       	ldi	r19, 0x17	; 23
    466a:	3f 93       	push	r19
    466c:	2f 93       	push	r18
    466e:	1f 92       	push	r1
    4670:	4f 93       	push	r20
    4672:	9f 93       	push	r25
    4674:	8f 93       	push	r24
    4676:	80 ea       	ldi	r24, 0xA0	; 160
    4678:	96 e0       	ldi	r25, 0x06	; 6
    467a:	9f 93       	push	r25
    467c:	8f 93       	push	r24
    467e:	86 ed       	ldi	r24, 0xD6	; 214
    4680:	97 e1       	ldi	r25, 0x17	; 23
    4682:	9f 93       	push	r25
    4684:	8f 93       	push	r24
    4686:	0e 94 82 30 	call	0x6104	; 0x6104 <sprintf>
    468a:	60 e0       	ldi	r22, 0x00	; 0
    468c:	70 e0       	ldi	r23, 0x00	; 0
    468e:	86 ed       	ldi	r24, 0xD6	; 214
    4690:	97 e1       	ldi	r25, 0x17	; 23
    4692:	b3 de       	rcall	.-666    	; 0x43fa <_uploadMessageRc>
    4694:	0f b6       	in	r0, 0x3f	; 63
    4696:	f8 94       	cli
    4698:	de bf       	out	0x3e, r29	; 62
    469a:	0f be       	out	0x3f, r0	; 63
    469c:	cd bf       	out	0x3d, r28	; 61
    469e:	81 11       	cpse	r24, r1
    46a0:	59 c0       	rjmp	.+178    	; 0x4754 <lora_driver_sendUploadMessage+0x18a>
    46a2:	08 e2       	ldi	r16, 0x28	; 40
    46a4:	15 e0       	ldi	r17, 0x05	; 5
    46a6:	20 e0       	ldi	r18, 0x00	; 0
    46a8:	30 e0       	ldi	r19, 0x00	; 0
    46aa:	4d e2       	ldi	r20, 0x2D	; 45
    46ac:	50 e0       	ldi	r21, 0x00	; 0
    46ae:	63 e0       	ldi	r22, 0x03	; 3
    46b0:	78 e1       	ldi	r23, 0x18	; 24
    46b2:	80 91 7a 17 	lds	r24, 0x177A	; 0x80177a <_serialReplyBufferHandle>
    46b6:	90 91 7b 17 	lds	r25, 0x177B	; 0x80177b <_serialReplyBufferHandle+0x1>
    46ba:	0e 94 80 0b 	call	0x1700	; 0x1700 <xStreamBufferReceive>
    46be:	88 23       	and	r24, r24
    46c0:	09 f4       	brne	.+2      	; 0x46c4 <lora_driver_sendUploadMessage+0xfa>
    46c2:	47 c0       	rjmp	.+142    	; 0x4752 <lora_driver_sendUploadMessage+0x188>
    46c4:	83 e0       	ldi	r24, 0x03	; 3
    46c6:	98 e1       	ldi	r25, 0x18	; 24
    46c8:	23 de       	rcall	.-954    	; 0x4310 <_reply2ReturnCode>
    46ca:	8e 30       	cpi	r24, 0x0E	; 14
    46cc:	09 f0       	breq	.+2      	; 0x46d0 <lora_driver_sendUploadMessage+0x106>
    46ce:	42 c0       	rjmp	.+132    	; 0x4754 <lora_driver_sendUploadMessage+0x18a>
    46d0:	87 e0       	ldi	r24, 0x07	; 7
    46d2:	89 83       	std	Y+1, r24	; 0x01
    46d4:	80 91 78 17 	lds	r24, 0x1778	; 0x801778 <_downlinkMessageBuffer>
    46d8:	90 91 79 17 	lds	r25, 0x1779	; 0x801779 <_downlinkMessageBuffer+0x1>
    46dc:	89 2b       	or	r24, r25
    46de:	a9 f1       	breq	.+106    	; 0x474a <lora_driver_sendUploadMessage+0x180>
    46e0:	be 01       	movw	r22, r28
    46e2:	6f 5f       	subi	r22, 0xFF	; 255
    46e4:	7f 4f       	sbci	r23, 0xFF	; 255
    46e6:	83 e0       	ldi	r24, 0x03	; 3
    46e8:	98 e1       	ldi	r25, 0x18	; 24
    46ea:	68 d1       	rcall	.+720    	; 0x49bc <decode_port_no>
    46ec:	80 93 7e 17 	sts	0x177E, r24	; 0x80177e <_downlinkPayload>
    46f0:	e9 81       	ldd	r30, Y+1	; 0x01
    46f2:	f0 e0       	ldi	r31, 0x00	; 0
    46f4:	ed 5f       	subi	r30, 0xFD	; 253
    46f6:	f7 4e       	sbci	r31, 0xE7	; 231
    46f8:	df 01       	movw	r26, r30
    46fa:	0d 90       	ld	r0, X+
    46fc:	00 20       	and	r0, r0
    46fe:	e9 f7       	brne	.-6      	; 0x46fa <lora_driver_sendUploadMessage+0x130>
    4700:	11 97       	sbiw	r26, 0x01	; 1
    4702:	ae 1b       	sub	r26, r30
    4704:	bf 0b       	sbc	r27, r31
    4706:	aa 23       	and	r26, r26
    4708:	91 f0       	breq	.+36     	; 0x472e <lora_driver_sendUploadMessage+0x164>
    470a:	bb 27       	eor	r27, r27
    470c:	cd 01       	movw	r24, r26
    470e:	01 97       	sbiw	r24, 0x01	; 1
    4710:	9c 01       	movw	r18, r24
    4712:	12 f4       	brpl	.+4      	; 0x4718 <lora_driver_sendUploadMessage+0x14e>
    4714:	2f 5f       	subi	r18, 0xFF	; 255
    4716:	3f 4f       	sbci	r19, 0xFF	; 255
    4718:	35 95       	asr	r19
    471a:	27 95       	ror	r18
    471c:	20 93 7f 17 	sts	0x177F, r18	; 0x80177f <_downlinkPayload+0x1>
    4720:	af 01       	movw	r20, r30
    4722:	4f 5f       	subi	r20, 0xFF	; 255
    4724:	5f 4f       	sbci	r21, 0xFF	; 255
    4726:	64 e1       	ldi	r22, 0x14	; 20
    4728:	80 e8       	ldi	r24, 0x80	; 128
    472a:	97 e1       	ldi	r25, 0x17	; 23
    472c:	73 d1       	rcall	.+742    	; 0x4a14 <decode_hexadecimal_string_bytes>
    472e:	01 e0       	ldi	r16, 0x01	; 1
    4730:	10 e0       	ldi	r17, 0x00	; 0
    4732:	20 e0       	ldi	r18, 0x00	; 0
    4734:	30 e0       	ldi	r19, 0x00	; 0
    4736:	46 e1       	ldi	r20, 0x16	; 22
    4738:	50 e0       	ldi	r21, 0x00	; 0
    473a:	6e e7       	ldi	r22, 0x7E	; 126
    473c:	77 e1       	ldi	r23, 0x17	; 23
    473e:	80 91 78 17 	lds	r24, 0x1778	; 0x801778 <_downlinkMessageBuffer>
    4742:	90 91 79 17 	lds	r25, 0x1779	; 0x801779 <_downlinkMessageBuffer+0x1>
    4746:	0e 94 77 0a 	call	0x14ee	; 0x14ee <xStreamBufferSend>
    474a:	8e e0       	ldi	r24, 0x0E	; 14
    474c:	03 c0       	rjmp	.+6      	; 0x4754 <lora_driver_sendUploadMessage+0x18a>
    474e:	84 e1       	ldi	r24, 0x14	; 20
    4750:	01 c0       	rjmp	.+2      	; 0x4754 <lora_driver_sendUploadMessage+0x18a>
    4752:	80 e0       	ldi	r24, 0x00	; 0
    4754:	0f 90       	pop	r0
    4756:	df 91       	pop	r29
    4758:	cf 91       	pop	r28
    475a:	1f 91       	pop	r17
    475c:	0f 91       	pop	r16
    475e:	08 95       	ret

00004760 <lora_driver_setAdaptiveDataRate>:
    4760:	81 30       	cpi	r24, 0x01	; 1
    4762:	19 f0       	breq	.+6      	; 0x476a <lora_driver_setAdaptiveDataRate+0xa>
    4764:	60 eb       	ldi	r22, 0xB0	; 176
    4766:	76 e0       	ldi	r23, 0x06	; 6
    4768:	02 c0       	rjmp	.+4      	; 0x476e <lora_driver_setAdaptiveDataRate+0xe>
    476a:	69 e8       	ldi	r22, 0x89	; 137
    476c:	77 e0       	ldi	r23, 0x07	; 7
    476e:	84 eb       	ldi	r24, 0xB4	; 180
    4770:	96 e0       	ldi	r25, 0x06	; 6
    4772:	43 ce       	rjmp	.-890    	; 0x43fa <_uploadMessageRc>
    4774:	08 95       	ret

00004776 <lora_driver_setReceiveDelay>:
    4776:	9f 93       	push	r25
    4778:	8f 93       	push	r24
    477a:	85 ee       	ldi	r24, 0xE5	; 229
    477c:	96 e0       	ldi	r25, 0x06	; 6
    477e:	9f 93       	push	r25
    4780:	8f 93       	push	r24
    4782:	86 ed       	ldi	r24, 0xD6	; 214
    4784:	97 e1       	ldi	r25, 0x17	; 23
    4786:	9f 93       	push	r25
    4788:	8f 93       	push	r24
    478a:	0e 94 82 30 	call	0x6104	; 0x6104 <sprintf>
    478e:	60 e0       	ldi	r22, 0x00	; 0
    4790:	70 e0       	ldi	r23, 0x00	; 0
    4792:	86 ed       	ldi	r24, 0xD6	; 214
    4794:	97 e1       	ldi	r25, 0x17	; 23
    4796:	31 de       	rcall	.-926    	; 0x43fa <_uploadMessageRc>
    4798:	0f 90       	pop	r0
    479a:	0f 90       	pop	r0
    479c:	0f 90       	pop	r0
    479e:	0f 90       	pop	r0
    47a0:	0f 90       	pop	r0
    47a2:	0f 90       	pop	r0
    47a4:	08 95       	ret

000047a6 <lora_driver_configureToEu868>:
    47a6:	2f 92       	push	r2
    47a8:	3f 92       	push	r3
    47aa:	4f 92       	push	r4
    47ac:	5f 92       	push	r5
    47ae:	6f 92       	push	r6
    47b0:	7f 92       	push	r7
    47b2:	8f 92       	push	r8
    47b4:	9f 92       	push	r9
    47b6:	af 92       	push	r10
    47b8:	bf 92       	push	r11
    47ba:	cf 92       	push	r12
    47bc:	df 92       	push	r13
    47be:	ef 92       	push	r14
    47c0:	ff 92       	push	r15
    47c2:	0f 93       	push	r16
    47c4:	1f 93       	push	r17
    47c6:	cf 93       	push	r28
    47c8:	df 93       	push	r29
    47ca:	cd b7       	in	r28, 0x3d	; 61
    47cc:	de b7       	in	r29, 0x3e	; 62
    47ce:	a0 97       	sbiw	r28, 0x20	; 32
    47d0:	0f b6       	in	r0, 0x3f	; 63
    47d2:	f8 94       	cli
    47d4:	de bf       	out	0x3e, r29	; 62
    47d6:	0f be       	out	0x3f, r0	; 63
    47d8:	cd bf       	out	0x3d, r28	; 61
    47da:	62 e1       	ldi	r22, 0x12	; 18
    47dc:	77 e0       	ldi	r23, 0x07	; 7
    47de:	8e e1       	ldi	r24, 0x1E	; 30
    47e0:	97 e0       	ldi	r25, 0x07	; 7
    47e2:	3c dd       	rcall	.-1416   	; 0x425c <_uploadMessage>
    47e4:	95 dd       	rcall	.-1238   	; 0x4310 <_reply2ReturnCode>
    47e6:	81 11       	cpse	r24, r1
    47e8:	a3 c0       	rjmp	.+326    	; 0x4930 <lora_driver_configureToEu868+0x18a>
    47ea:	80 e2       	ldi	r24, 0x20	; 32
    47ec:	e2 e2       	ldi	r30, 0x22	; 34
    47ee:	f2 e0       	ldi	r31, 0x02	; 2
    47f0:	de 01       	movw	r26, r28
    47f2:	11 96       	adiw	r26, 0x01	; 1
    47f4:	01 90       	ld	r0, Z+
    47f6:	0d 92       	st	X+, r0
    47f8:	8a 95       	dec	r24
    47fa:	e1 f7       	brne	.-8      	; 0x47f4 <lora_driver_configureToEu868+0x4e>
    47fc:	9e 01       	movw	r18, r28
    47fe:	2f 5f       	subi	r18, 0xFF	; 255
    4800:	3f 4f       	sbci	r19, 0xFF	; 255
    4802:	69 01       	movw	r12, r18
    4804:	e1 2c       	mov	r14, r1
    4806:	f1 2c       	mov	r15, r1
    4808:	0f 2e       	mov	r0, r31
    480a:	fa e2       	ldi	r31, 0x2A	; 42
    480c:	af 2e       	mov	r10, r31
    480e:	f7 e0       	ldi	r31, 0x07	; 7
    4810:	bf 2e       	mov	r11, r31
    4812:	f0 2d       	mov	r31, r0
    4814:	06 ed       	ldi	r16, 0xD6	; 214
    4816:	17 e1       	ldi	r17, 0x17	; 23
    4818:	0f 2e       	mov	r0, r31
    481a:	f3 e4       	ldi	r31, 0x43	; 67
    481c:	4f 2e       	mov	r4, r31
    481e:	f7 e0       	ldi	r31, 0x07	; 7
    4820:	5f 2e       	mov	r5, r31
    4822:	f0 2d       	mov	r31, r0
    4824:	0f 2e       	mov	r0, r31
    4826:	fa e5       	ldi	r31, 0x5A	; 90
    4828:	8f 2e       	mov	r8, r31
    482a:	f7 e0       	ldi	r31, 0x07	; 7
    482c:	9f 2e       	mov	r9, r31
    482e:	f0 2d       	mov	r31, r0
    4830:	0f 2e       	mov	r0, r31
    4832:	f4 e7       	ldi	r31, 0x74	; 116
    4834:	6f 2e       	mov	r6, r31
    4836:	f7 e0       	ldi	r31, 0x07	; 7
    4838:	7f 2e       	mov	r7, r31
    483a:	f0 2d       	mov	r31, r0
    483c:	3e 2c       	mov	r3, r14
    483e:	2f 2c       	mov	r2, r15
    4840:	ff 92       	push	r15
    4842:	ef 92       	push	r14
    4844:	bf 92       	push	r11
    4846:	af 92       	push	r10
    4848:	1f 93       	push	r17
    484a:	0f 93       	push	r16
    484c:	0e 94 82 30 	call	0x6104	; 0x6104 <sprintf>
    4850:	60 e0       	ldi	r22, 0x00	; 0
    4852:	70 e0       	ldi	r23, 0x00	; 0
    4854:	c8 01       	movw	r24, r16
    4856:	02 dd       	rcall	.-1532   	; 0x425c <_uploadMessage>
    4858:	5b dd       	rcall	.-1354   	; 0x4310 <_reply2ReturnCode>
    485a:	0f 90       	pop	r0
    485c:	0f 90       	pop	r0
    485e:	0f 90       	pop	r0
    4860:	0f 90       	pop	r0
    4862:	0f 90       	pop	r0
    4864:	0f 90       	pop	r0
    4866:	81 11       	cpse	r24, r1
    4868:	63 c0       	rjmp	.+198    	; 0x4930 <lora_driver_configureToEu868+0x18a>
    486a:	32 e0       	ldi	r19, 0x02	; 2
    486c:	3e 15       	cp	r19, r14
    486e:	e8 f4       	brcc	.+58     	; 0x48aa <lora_driver_configureToEu868+0x104>
    4870:	f6 01       	movw	r30, r12
    4872:	83 81       	ldd	r24, Z+3	; 0x03
    4874:	8f 93       	push	r24
    4876:	82 81       	ldd	r24, Z+2	; 0x02
    4878:	8f 93       	push	r24
    487a:	81 81       	ldd	r24, Z+1	; 0x01
    487c:	8f 93       	push	r24
    487e:	80 81       	ld	r24, Z
    4880:	8f 93       	push	r24
    4882:	ff 92       	push	r15
    4884:	ef 92       	push	r14
    4886:	5f 92       	push	r5
    4888:	4f 92       	push	r4
    488a:	1f 93       	push	r17
    488c:	0f 93       	push	r16
    488e:	0e 94 82 30 	call	0x6104	; 0x6104 <sprintf>
    4892:	60 e0       	ldi	r22, 0x00	; 0
    4894:	70 e0       	ldi	r23, 0x00	; 0
    4896:	c8 01       	movw	r24, r16
    4898:	e1 dc       	rcall	.-1598   	; 0x425c <_uploadMessage>
    489a:	3a dd       	rcall	.-1420   	; 0x4310 <_reply2ReturnCode>
    489c:	0f b6       	in	r0, 0x3f	; 63
    489e:	f8 94       	cli
    48a0:	de bf       	out	0x3e, r29	; 62
    48a2:	0f be       	out	0x3f, r0	; 63
    48a4:	cd bf       	out	0x3d, r28	; 61
    48a6:	81 11       	cpse	r24, r1
    48a8:	43 c0       	rjmp	.+134    	; 0x4930 <lora_driver_configureToEu868+0x18a>
    48aa:	2f 92       	push	r2
    48ac:	3f 92       	push	r3
    48ae:	9f 92       	push	r9
    48b0:	8f 92       	push	r8
    48b2:	1f 93       	push	r17
    48b4:	0f 93       	push	r16
    48b6:	0e 94 82 30 	call	0x6104	; 0x6104 <sprintf>
    48ba:	60 e0       	ldi	r22, 0x00	; 0
    48bc:	70 e0       	ldi	r23, 0x00	; 0
    48be:	c8 01       	movw	r24, r16
    48c0:	cd dc       	rcall	.-1638   	; 0x425c <_uploadMessage>
    48c2:	26 dd       	rcall	.-1460   	; 0x4310 <_reply2ReturnCode>
    48c4:	0f 90       	pop	r0
    48c6:	0f 90       	pop	r0
    48c8:	0f 90       	pop	r0
    48ca:	0f 90       	pop	r0
    48cc:	0f 90       	pop	r0
    48ce:	0f 90       	pop	r0
    48d0:	81 11       	cpse	r24, r1
    48d2:	2e c0       	rjmp	.+92     	; 0x4930 <lora_driver_configureToEu868+0x18a>
    48d4:	2f 92       	push	r2
    48d6:	3f 92       	push	r3
    48d8:	7f 92       	push	r7
    48da:	6f 92       	push	r6
    48dc:	1f 93       	push	r17
    48de:	0f 93       	push	r16
    48e0:	0e 94 82 30 	call	0x6104	; 0x6104 <sprintf>
    48e4:	60 e0       	ldi	r22, 0x00	; 0
    48e6:	70 e0       	ldi	r23, 0x00	; 0
    48e8:	c8 01       	movw	r24, r16
    48ea:	b8 dc       	rcall	.-1680   	; 0x425c <_uploadMessage>
    48ec:	11 dd       	rcall	.-1502   	; 0x4310 <_reply2ReturnCode>
    48ee:	0f 90       	pop	r0
    48f0:	0f 90       	pop	r0
    48f2:	0f 90       	pop	r0
    48f4:	0f 90       	pop	r0
    48f6:	0f 90       	pop	r0
    48f8:	0f 90       	pop	r0
    48fa:	81 11       	cpse	r24, r1
    48fc:	19 c0       	rjmp	.+50     	; 0x4930 <lora_driver_configureToEu868+0x18a>
    48fe:	3f ef       	ldi	r19, 0xFF	; 255
    4900:	e3 1a       	sub	r14, r19
    4902:	f3 0a       	sbc	r15, r19
    4904:	84 e0       	ldi	r24, 0x04	; 4
    4906:	c8 0e       	add	r12, r24
    4908:	d1 1c       	adc	r13, r1
    490a:	98 e0       	ldi	r25, 0x08	; 8
    490c:	e9 16       	cp	r14, r25
    490e:	f1 04       	cpc	r15, r1
    4910:	09 f0       	breq	.+2      	; 0x4914 <lora_driver_configureToEu868+0x16e>
    4912:	94 cf       	rjmp	.-216    	; 0x483c <lora_driver_configureToEu868+0x96>
    4914:	60 e0       	ldi	r22, 0x00	; 0
    4916:	70 e0       	ldi	r23, 0x00	; 0
    4918:	8c e8       	ldi	r24, 0x8C	; 140
    491a:	97 e0       	ldi	r25, 0x07	; 7
    491c:	9f dc       	rcall	.-1730   	; 0x425c <_uploadMessage>
    491e:	f8 dc       	rcall	.-1552   	; 0x4310 <_reply2ReturnCode>
    4920:	81 11       	cpse	r24, r1
    4922:	06 c0       	rjmp	.+12     	; 0x4930 <lora_driver_configureToEu868+0x18a>
    4924:	60 e0       	ldi	r22, 0x00	; 0
    4926:	70 e0       	ldi	r23, 0x00	; 0
    4928:	8d e9       	ldi	r24, 0x9D	; 157
    492a:	97 e0       	ldi	r25, 0x07	; 7
    492c:	97 dc       	rcall	.-1746   	; 0x425c <_uploadMessage>
    492e:	f0 dc       	rcall	.-1568   	; 0x4310 <_reply2ReturnCode>
    4930:	a0 96       	adiw	r28, 0x20	; 32
    4932:	0f b6       	in	r0, 0x3f	; 63
    4934:	f8 94       	cli
    4936:	de bf       	out	0x3e, r29	; 62
    4938:	0f be       	out	0x3f, r0	; 63
    493a:	cd bf       	out	0x3d, r28	; 61
    493c:	df 91       	pop	r29
    493e:	cf 91       	pop	r28
    4940:	1f 91       	pop	r17
    4942:	0f 91       	pop	r16
    4944:	ff 90       	pop	r15
    4946:	ef 90       	pop	r14
    4948:	df 90       	pop	r13
    494a:	cf 90       	pop	r12
    494c:	bf 90       	pop	r11
    494e:	af 90       	pop	r10
    4950:	9f 90       	pop	r9
    4952:	8f 90       	pop	r8
    4954:	7f 90       	pop	r7
    4956:	6f 90       	pop	r6
    4958:	5f 90       	pop	r5
    495a:	4f 90       	pop	r4
    495c:	3f 90       	pop	r3
    495e:	2f 90       	pop	r2
    4960:	08 95       	ret

00004962 <lora_driver_setOtaaIdentity>:
    4962:	ef 92       	push	r14
    4964:	ff 92       	push	r15
    4966:	0f 93       	push	r16
    4968:	1f 93       	push	r17
    496a:	cf 93       	push	r28
    496c:	df 93       	push	r29
    496e:	ec 01       	movw	r28, r24
    4970:	8b 01       	movw	r16, r22
    4972:	7a 01       	movw	r14, r20
    4974:	81 e0       	ldi	r24, 0x01	; 1
    4976:	f4 de       	rcall	.-536    	; 0x4760 <lora_driver_setAdaptiveDataRate>
    4978:	81 11       	cpse	r24, r1
    497a:	0d c0       	rjmp	.+26     	; 0x4996 <lora_driver_setOtaaIdentity+0x34>
    497c:	ce 01       	movw	r24, r28
    497e:	d4 dd       	rcall	.-1112   	; 0x4528 <lora_driver_setApplicationIdentifier>
    4980:	81 11       	cpse	r24, r1
    4982:	09 c0       	rjmp	.+18     	; 0x4996 <lora_driver_setOtaaIdentity+0x34>
    4984:	c8 01       	movw	r24, r16
    4986:	e1 dd       	rcall	.-1086   	; 0x454a <lora_driver_setApplicationKey>
    4988:	81 11       	cpse	r24, r1
    498a:	05 c0       	rjmp	.+10     	; 0x4996 <lora_driver_setOtaaIdentity+0x34>
    498c:	c7 01       	movw	r24, r14
    498e:	bb dd       	rcall	.-1162   	; 0x4506 <lora_driver_setDeviceIdentifier>
    4990:	81 11       	cpse	r24, r1
    4992:	01 c0       	rjmp	.+2      	; 0x4996 <lora_driver_setOtaaIdentity+0x34>
    4994:	eb dd       	rcall	.-1066   	; 0x456c <lora_driver_saveMac>
    4996:	df 91       	pop	r29
    4998:	cf 91       	pop	r28
    499a:	1f 91       	pop	r17
    499c:	0f 91       	pop	r16
    499e:	ff 90       	pop	r15
    49a0:	ef 90       	pop	r14
    49a2:	08 95       	ret

000049a4 <lora_driver_mapReturnCodeToText>:
    49a4:	90 e0       	ldi	r25, 0x00	; 0
    49a6:	fc 01       	movw	r30, r24
    49a8:	ee 0f       	add	r30, r30
    49aa:	ff 1f       	adc	r31, r31
    49ac:	8e 0f       	add	r24, r30
    49ae:	9f 1f       	adc	r25, r31
    49b0:	fc 01       	movw	r30, r24
    49b2:	ea 59       	subi	r30, 0x9A	; 154
    49b4:	f7 4f       	sbci	r31, 0xF7	; 247
    49b6:	81 81       	ldd	r24, Z+1	; 0x01
    49b8:	92 81       	ldd	r25, Z+2	; 0x02
    49ba:	08 95       	ret

000049bc <decode_port_no>:
    49bc:	dc 01       	movw	r26, r24
    49be:	00 97       	sbiw	r24, 0x00	; 0
    49c0:	29 f1       	breq	.+74     	; 0x4a0c <decode_port_no+0x50>
    49c2:	fb 01       	movw	r30, r22
    49c4:	20 81       	ld	r18, Z
    49c6:	fc 01       	movw	r30, r24
    49c8:	01 90       	ld	r0, Z+
    49ca:	00 20       	and	r0, r0
    49cc:	e9 f7       	brne	.-6      	; 0x49c8 <decode_port_no+0xc>
    49ce:	31 97       	sbiw	r30, 0x01	; 1
    49d0:	e8 1b       	sub	r30, r24
    49d2:	f9 0b       	sbc	r31, r25
    49d4:	82 2f       	mov	r24, r18
    49d6:	90 e0       	ldi	r25, 0x00	; 0
    49d8:	e8 17       	cp	r30, r24
    49da:	f9 07       	cpc	r31, r25
    49dc:	c8 f0       	brcs	.+50     	; 0x4a10 <decode_port_no+0x54>
    49de:	80 e0       	ldi	r24, 0x00	; 0
    49e0:	08 c0       	rjmp	.+16     	; 0x49f2 <decode_port_no+0x36>
    49e2:	88 0f       	add	r24, r24
    49e4:	38 2f       	mov	r19, r24
    49e6:	33 0f       	add	r19, r19
    49e8:	33 0f       	add	r19, r19
    49ea:	83 0f       	add	r24, r19
    49ec:	80 53       	subi	r24, 0x30	; 48
    49ee:	89 0f       	add	r24, r25
    49f0:	2f 5f       	subi	r18, 0xFF	; 255
    49f2:	fd 01       	movw	r30, r26
    49f4:	e2 0f       	add	r30, r18
    49f6:	f1 1d       	adc	r31, r1
    49f8:	90 81       	ld	r25, Z
    49fa:	30 ed       	ldi	r19, 0xD0	; 208
    49fc:	39 0f       	add	r19, r25
    49fe:	3a 30       	cpi	r19, 0x0A	; 10
    4a00:	10 f4       	brcc	.+4      	; 0x4a06 <decode_port_no+0x4a>
    4a02:	91 11       	cpse	r25, r1
    4a04:	ee cf       	rjmp	.-36     	; 0x49e2 <decode_port_no+0x26>
    4a06:	fb 01       	movw	r30, r22
    4a08:	20 83       	st	Z, r18
    4a0a:	08 95       	ret
    4a0c:	80 e0       	ldi	r24, 0x00	; 0
    4a0e:	08 95       	ret
    4a10:	80 e0       	ldi	r24, 0x00	; 0
    4a12:	08 95       	ret

00004a14 <decode_hexadecimal_string_bytes>:
    4a14:	0f 93       	push	r16
    4a16:	1f 93       	push	r17
    4a18:	cf 93       	push	r28
    4a1a:	df 93       	push	r29
    4a1c:	dc 01       	movw	r26, r24
    4a1e:	ea 01       	movw	r28, r20
    4a20:	20 97       	sbiw	r28, 0x00	; 0
    4a22:	e1 f1       	breq	.+120    	; 0x4a9c <decode_hexadecimal_string_bytes+0x88>
    4a24:	fa 01       	movw	r30, r20
    4a26:	01 90       	ld	r0, Z+
    4a28:	00 20       	and	r0, r0
    4a2a:	e9 f7       	brne	.-6      	; 0x4a26 <decode_hexadecimal_string_bytes+0x12>
    4a2c:	31 97       	sbiw	r30, 0x01	; 1
    4a2e:	e4 1b       	sub	r30, r20
    4a30:	f5 0b       	sbc	r31, r21
    4a32:	32 97       	sbiw	r30, 0x02	; 2
    4a34:	10 f5       	brcc	.+68     	; 0x4a7a <decode_hexadecimal_string_bytes+0x66>
    4a36:	32 c0       	rjmp	.+100    	; 0x4a9c <decode_hexadecimal_string_bytes+0x88>
    4a38:	8d 01       	movw	r16, r26
    4a3a:	04 0f       	add	r16, r20
    4a3c:	15 1f       	adc	r17, r21
    4a3e:	30 e0       	ldi	r19, 0x00	; 0
    4a40:	ae 01       	movw	r20, r28
    4a42:	42 0f       	add	r20, r18
    4a44:	53 1f       	adc	r21, r19
    4a46:	fa 01       	movw	r30, r20
    4a48:	90 81       	ld	r25, Z
    4a4a:	91 34       	cpi	r25, 0x41	; 65
    4a4c:	28 f0       	brcs	.+10     	; 0x4a58 <decode_hexadecimal_string_bytes+0x44>
    4a4e:	97 53       	subi	r25, 0x37	; 55
    4a50:	59 2f       	mov	r21, r25
    4a52:	52 95       	swap	r21
    4a54:	50 7f       	andi	r21, 0xF0	; 240
    4a56:	03 c0       	rjmp	.+6      	; 0x4a5e <decode_hexadecimal_string_bytes+0x4a>
    4a58:	59 2f       	mov	r21, r25
    4a5a:	52 95       	swap	r21
    4a5c:	50 7f       	andi	r21, 0xF0	; 240
    4a5e:	2c 0f       	add	r18, r28
    4a60:	3d 1f       	adc	r19, r29
    4a62:	f9 01       	movw	r30, r18
    4a64:	91 81       	ldd	r25, Z+1	; 0x01
    4a66:	91 34       	cpi	r25, 0x41	; 65
    4a68:	10 f0       	brcs	.+4      	; 0x4a6e <decode_hexadecimal_string_bytes+0x5a>
    4a6a:	97 53       	subi	r25, 0x37	; 55
    4a6c:	01 c0       	rjmp	.+2      	; 0x4a70 <decode_hexadecimal_string_bytes+0x5c>
    4a6e:	90 53       	subi	r25, 0x30	; 48
    4a70:	95 0f       	add	r25, r21
    4a72:	f8 01       	movw	r30, r16
    4a74:	90 83       	st	Z, r25
    4a76:	8f 5f       	subi	r24, 0xFF	; 255
    4a78:	01 c0       	rjmp	.+2      	; 0x4a7c <decode_hexadecimal_string_bytes+0x68>
    4a7a:	80 e0       	ldi	r24, 0x00	; 0
    4a7c:	28 2f       	mov	r18, r24
    4a7e:	22 0f       	add	r18, r18
    4a80:	48 2f       	mov	r20, r24
    4a82:	50 e0       	ldi	r21, 0x00	; 0
    4a84:	fe 01       	movw	r30, r28
    4a86:	01 90       	ld	r0, Z+
    4a88:	00 20       	and	r0, r0
    4a8a:	e9 f7       	brne	.-6      	; 0x4a86 <decode_hexadecimal_string_bytes+0x72>
    4a8c:	31 97       	sbiw	r30, 0x01	; 1
    4a8e:	ec 1b       	sub	r30, r28
    4a90:	fd 0b       	sbc	r31, r29
    4a92:	4e 17       	cp	r20, r30
    4a94:	5f 07       	cpc	r21, r31
    4a96:	10 f4       	brcc	.+4      	; 0x4a9c <decode_hexadecimal_string_bytes+0x88>
    4a98:	86 13       	cpse	r24, r22
    4a9a:	ce cf       	rjmp	.-100    	; 0x4a38 <decode_hexadecimal_string_bytes+0x24>
    4a9c:	df 91       	pop	r29
    4a9e:	cf 91       	pop	r28
    4aa0:	1f 91       	pop	r17
    4aa2:	0f 91       	pop	r16
    4aa4:	08 95       	ret

00004aa6 <_serialCallBack>:
    4aa6:	80 91 33 18 	lds	r24, 0x1833	; 0x801833 <crc_sum.1945>
    4aaa:	86 0f       	add	r24, r22
    4aac:	80 93 33 18 	sts	0x1833, r24	; 0x801833 <crc_sum.1945>
    4ab0:	90 91 36 18 	lds	r25, 0x1836	; 0x801836 <_mh_state>
    4ab4:	91 30       	cpi	r25, 0x01	; 1
    4ab6:	79 f0       	breq	.+30     	; 0x4ad6 <_serialCallBack+0x30>
    4ab8:	28 f0       	brcs	.+10     	; 0x4ac4 <_serialCallBack+0x1e>
    4aba:	92 30       	cpi	r25, 0x02	; 2
    4abc:	a9 f0       	breq	.+42     	; 0x4ae8 <_serialCallBack+0x42>
    4abe:	93 30       	cpi	r25, 0x03	; 3
    4ac0:	19 f1       	breq	.+70     	; 0x4b08 <_serialCallBack+0x62>
    4ac2:	08 95       	ret
    4ac4:	6f 3f       	cpi	r22, 0xFF	; 255
    4ac6:	09 f0       	breq	.+2      	; 0x4aca <_serialCallBack+0x24>
    4ac8:	48 c0       	rjmp	.+144    	; 0x4b5a <_serialCallBack+0xb4>
    4aca:	10 92 33 18 	sts	0x1833, r1	; 0x801833 <crc_sum.1945>
    4ace:	81 e0       	ldi	r24, 0x01	; 1
    4ad0:	80 93 36 18 	sts	0x1836, r24	; 0x801836 <_mh_state>
    4ad4:	08 95       	ret
    4ad6:	66 38       	cpi	r22, 0x86	; 134
    4ad8:	09 f0       	breq	.+2      	; 0x4adc <_serialCallBack+0x36>
    4ada:	3f c0       	rjmp	.+126    	; 0x4b5a <_serialCallBack+0xb4>
    4adc:	10 92 32 18 	sts	0x1832, r1	; 0x801832 <inDex.1943>
    4ae0:	82 e0       	ldi	r24, 0x02	; 2
    4ae2:	80 93 36 18 	sts	0x1836, r24	; 0x801836 <_mh_state>
    4ae6:	08 95       	ret
    4ae8:	e0 91 32 18 	lds	r30, 0x1832	; 0x801832 <inDex.1943>
    4aec:	81 e0       	ldi	r24, 0x01	; 1
    4aee:	8e 0f       	add	r24, r30
    4af0:	80 93 32 18 	sts	0x1832, r24	; 0x801832 <inDex.1943>
    4af4:	f0 e0       	ldi	r31, 0x00	; 0
    4af6:	e0 5d       	subi	r30, 0xD0	; 208
    4af8:	f7 4e       	sbci	r31, 0xE7	; 231
    4afa:	60 83       	st	Z, r22
    4afc:	82 30       	cpi	r24, 0x02	; 2
    4afe:	69 f5       	brne	.+90     	; 0x4b5a <_serialCallBack+0xb4>
    4b00:	83 e0       	ldi	r24, 0x03	; 3
    4b02:	80 93 36 18 	sts	0x1836, r24	; 0x801836 <_mh_state>
    4b06:	08 95       	ret
    4b08:	90 91 32 18 	lds	r25, 0x1832	; 0x801832 <inDex.1943>
    4b0c:	21 e0       	ldi	r18, 0x01	; 1
    4b0e:	29 0f       	add	r18, r25
    4b10:	20 93 32 18 	sts	0x1832, r18	; 0x801832 <inDex.1943>
    4b14:	96 30       	cpi	r25, 0x06	; 6
    4b16:	09 f5       	brne	.+66     	; 0x4b5a <_serialCallBack+0xb4>
    4b18:	81 11       	cpse	r24, r1
    4b1a:	0e c0       	rjmp	.+28     	; 0x4b38 <_serialCallBack+0x92>
    4b1c:	e0 e3       	ldi	r30, 0x30	; 48
    4b1e:	f8 e1       	ldi	r31, 0x18	; 24
    4b20:	80 81       	ld	r24, Z
    4b22:	90 e0       	ldi	r25, 0x00	; 0
    4b24:	98 2f       	mov	r25, r24
    4b26:	88 27       	eor	r24, r24
    4b28:	21 81       	ldd	r18, Z+1	; 0x01
    4b2a:	82 0f       	add	r24, r18
    4b2c:	91 1d       	adc	r25, r1
    4b2e:	90 93 38 18 	sts	0x1838, r25	; 0x801838 <_ppm+0x1>
    4b32:	80 93 37 18 	sts	0x1837, r24	; 0x801837 <_ppm>
    4b36:	04 c0       	rjmp	.+8      	; 0x4b40 <_serialCallBack+0x9a>
    4b38:	10 92 38 18 	sts	0x1838, r1	; 0x801838 <_ppm+0x1>
    4b3c:	10 92 37 18 	sts	0x1837, r1	; 0x801837 <_ppm>
    4b40:	10 92 36 18 	sts	0x1836, r1	; 0x801836 <_mh_state>
    4b44:	e0 91 34 18 	lds	r30, 0x1834	; 0x801834 <_appCallBack>
    4b48:	f0 91 35 18 	lds	r31, 0x1835	; 0x801835 <_appCallBack+0x1>
    4b4c:	30 97       	sbiw	r30, 0x00	; 0
    4b4e:	29 f0       	breq	.+10     	; 0x4b5a <_serialCallBack+0xb4>
    4b50:	80 91 37 18 	lds	r24, 0x1837	; 0x801837 <_ppm>
    4b54:	90 91 38 18 	lds	r25, 0x1838	; 0x801838 <_ppm+0x1>
    4b58:	19 95       	eicall
    4b5a:	08 95       	ret

00004b5c <mh_z19_initialise>:
    4b5c:	8f 92       	push	r8
    4b5e:	9f 92       	push	r9
    4b60:	af 92       	push	r10
    4b62:	cf 92       	push	r12
    4b64:	ef 92       	push	r14
    4b66:	0f 93       	push	r16
    4b68:	0f 2e       	mov	r0, r31
    4b6a:	f3 e5       	ldi	r31, 0x53	; 83
    4b6c:	8f 2e       	mov	r8, r31
    4b6e:	f5 e2       	ldi	r31, 0x25	; 37
    4b70:	9f 2e       	mov	r9, r31
    4b72:	f0 2d       	mov	r31, r0
    4b74:	68 94       	set
    4b76:	aa 24       	eor	r10, r10
    4b78:	a4 f8       	bld	r10, 4
    4b7a:	68 94       	set
    4b7c:	cc 24       	eor	r12, r12
    4b7e:	c4 f8       	bld	r12, 4
    4b80:	e1 2c       	mov	r14, r1
    4b82:	00 e0       	ldi	r16, 0x00	; 0
    4b84:	23 e0       	ldi	r18, 0x03	; 3
    4b86:	40 e8       	ldi	r20, 0x80	; 128
    4b88:	55 e2       	ldi	r21, 0x25	; 37
    4b8a:	60 e0       	ldi	r22, 0x00	; 0
    4b8c:	70 e0       	ldi	r23, 0x00	; 0
    4b8e:	73 d0       	rcall	.+230    	; 0x4c76 <serial_create>
    4b90:	90 93 3a 18 	sts	0x183A, r25	; 0x80183a <_serial+0x1>
    4b94:	80 93 39 18 	sts	0x1839, r24	; 0x801839 <_serial>
    4b98:	0f 91       	pop	r16
    4b9a:	ef 90       	pop	r14
    4b9c:	cf 90       	pop	r12
    4b9e:	af 90       	pop	r10
    4ba0:	9f 90       	pop	r9
    4ba2:	8f 90       	pop	r8
    4ba4:	08 95       	ret

00004ba6 <mh_z19_injectCallBack>:
    4ba6:	90 93 35 18 	sts	0x1835, r25	; 0x801835 <_appCallBack+0x1>
    4baa:	80 93 34 18 	sts	0x1834, r24	; 0x801834 <_appCallBack>
    4bae:	08 95       	ret

00004bb0 <mh_z19_takeMeassuring>:
    4bb0:	cf 93       	push	r28
    4bb2:	df 93       	push	r29
    4bb4:	cd b7       	in	r28, 0x3d	; 61
    4bb6:	de b7       	in	r29, 0x3e	; 62
    4bb8:	29 97       	sbiw	r28, 0x09	; 9
    4bba:	0f b6       	in	r0, 0x3f	; 63
    4bbc:	f8 94       	cli
    4bbe:	de bf       	out	0x3e, r29	; 62
    4bc0:	0f be       	out	0x3f, r0	; 63
    4bc2:	cd bf       	out	0x3d, r28	; 61
    4bc4:	89 e0       	ldi	r24, 0x09	; 9
    4bc6:	e2 e4       	ldi	r30, 0x42	; 66
    4bc8:	f2 e0       	ldi	r31, 0x02	; 2
    4bca:	9e 01       	movw	r18, r28
    4bcc:	2f 5f       	subi	r18, 0xFF	; 255
    4bce:	3f 4f       	sbci	r19, 0xFF	; 255
    4bd0:	d9 01       	movw	r26, r18
    4bd2:	01 90       	ld	r0, Z+
    4bd4:	0d 92       	st	X+, r0
    4bd6:	8a 95       	dec	r24
    4bd8:	e1 f7       	brne	.-8      	; 0x4bd2 <mh_z19_takeMeassuring+0x22>
    4bda:	10 92 38 18 	sts	0x1838, r1	; 0x801838 <_ppm+0x1>
    4bde:	10 92 37 18 	sts	0x1837, r1	; 0x801837 <_ppm>
    4be2:	80 91 39 18 	lds	r24, 0x1839	; 0x801839 <_serial>
    4be6:	90 91 3a 18 	lds	r25, 0x183A	; 0x80183a <_serial+0x1>
    4bea:	00 97       	sbiw	r24, 0x00	; 0
    4bec:	31 f0       	breq	.+12     	; 0x4bfa <mh_z19_takeMeassuring+0x4a>
    4bee:	42 2f       	mov	r20, r18
    4bf0:	53 2f       	mov	r21, r19
    4bf2:	69 e0       	ldi	r22, 0x09	; 9
    4bf4:	0c d1       	rcall	.+536    	; 0x4e0e <serial_sendBytes>
    4bf6:	80 e0       	ldi	r24, 0x00	; 0
    4bf8:	01 c0       	rjmp	.+2      	; 0x4bfc <mh_z19_takeMeassuring+0x4c>
    4bfa:	82 e0       	ldi	r24, 0x02	; 2
    4bfc:	29 96       	adiw	r28, 0x09	; 9
    4bfe:	0f b6       	in	r0, 0x3f	; 63
    4c00:	f8 94       	cli
    4c02:	de bf       	out	0x3e, r29	; 62
    4c04:	0f be       	out	0x3f, r0	; 63
    4c06:	cd bf       	out	0x3d, r28	; 61
    4c08:	df 91       	pop	r29
    4c0a:	cf 91       	pop	r28
    4c0c:	08 95       	ret

00004c0e <rc_servo_setPosition>:
    4c0e:	65 36       	cpi	r22, 0x65	; 101
    4c10:	0c f0       	brlt	.+2      	; 0x4c14 <rc_servo_setPosition+0x6>
    4c12:	64 e6       	ldi	r22, 0x64	; 100
    4c14:	6c 39       	cpi	r22, 0x9C	; 156
    4c16:	0c f4       	brge	.+2      	; 0x4c1a <rc_servo_setPosition+0xc>
    4c18:	6c e9       	ldi	r22, 0x9C	; 156
    4c1a:	96 ef       	ldi	r25, 0xF6	; 246
    4c1c:	69 02       	muls	r22, r25
    4c1e:	b0 01       	movw	r22, r0
    4c20:	11 24       	eor	r1, r1
    4c22:	68 54       	subi	r22, 0x48	; 72
    4c24:	74 4f       	sbci	r23, 0xF4	; 244
    4c26:	81 11       	cpse	r24, r1
    4c28:	05 c0       	rjmp	.+10     	; 0x4c34 <rc_servo_setPosition+0x26>
    4c2a:	70 93 29 01 	sts	0x0129, r23	; 0x800129 <__TEXT_REGION_LENGTH__+0x7c0129>
    4c2e:	60 93 28 01 	sts	0x0128, r22	; 0x800128 <__TEXT_REGION_LENGTH__+0x7c0128>
    4c32:	08 95       	ret
    4c34:	70 93 2b 01 	sts	0x012B, r23	; 0x80012b <__TEXT_REGION_LENGTH__+0x7c012b>
    4c38:	60 93 2a 01 	sts	0x012A, r22	; 0x80012a <__TEXT_REGION_LENGTH__+0x7c012a>
    4c3c:	08 95       	ret

00004c3e <rc_servo_initialise>:
    4c3e:	ea e0       	ldi	r30, 0x0A	; 10
    4c40:	f1 e0       	ldi	r31, 0x01	; 1
    4c42:	80 81       	ld	r24, Z
    4c44:	88 61       	ori	r24, 0x18	; 24
    4c46:	80 83       	st	Z, r24
    4c48:	8f e3       	ldi	r24, 0x3F	; 63
    4c4a:	9c e9       	ldi	r25, 0x9C	; 156
    4c4c:	90 93 27 01 	sts	0x0127, r25	; 0x800127 <__TEXT_REGION_LENGTH__+0x7c0127>
    4c50:	80 93 26 01 	sts	0x0126, r24	; 0x800126 <__TEXT_REGION_LENGTH__+0x7c0126>
    4c54:	60 e0       	ldi	r22, 0x00	; 0
    4c56:	80 e0       	ldi	r24, 0x00	; 0
    4c58:	da df       	rcall	.-76     	; 0x4c0e <rc_servo_setPosition>
    4c5a:	60 e0       	ldi	r22, 0x00	; 0
    4c5c:	81 e0       	ldi	r24, 0x01	; 1
    4c5e:	d7 df       	rcall	.-82     	; 0x4c0e <rc_servo_setPosition>
    4c60:	e0 e2       	ldi	r30, 0x20	; 32
    4c62:	f1 e0       	ldi	r31, 0x01	; 1
    4c64:	80 81       	ld	r24, Z
    4c66:	82 6a       	ori	r24, 0xA2	; 162
    4c68:	80 83       	st	Z, r24
    4c6a:	e1 e2       	ldi	r30, 0x21	; 33
    4c6c:	f1 e0       	ldi	r31, 0x01	; 1
    4c6e:	80 81       	ld	r24, Z
    4c70:	8a 61       	ori	r24, 0x1A	; 26
    4c72:	80 83       	st	Z, r24
    4c74:	08 95       	ret

00004c76 <serial_create>:
    4c76:	2f 92       	push	r2
    4c78:	3f 92       	push	r3
    4c7a:	4f 92       	push	r4
    4c7c:	5f 92       	push	r5
    4c7e:	6f 92       	push	r6
    4c80:	7f 92       	push	r7
    4c82:	8f 92       	push	r8
    4c84:	9f 92       	push	r9
    4c86:	af 92       	push	r10
    4c88:	cf 92       	push	r12
    4c8a:	ef 92       	push	r14
    4c8c:	ff 92       	push	r15
    4c8e:	0f 93       	push	r16
    4c90:	1f 93       	push	r17
    4c92:	cf 93       	push	r28
    4c94:	df 93       	push	r29
    4c96:	cd b7       	in	r28, 0x3d	; 61
    4c98:	de b7       	in	r29, 0x3e	; 62
    4c9a:	f8 2e       	mov	r15, r24
    4c9c:	2a 01       	movw	r4, r20
    4c9e:	3b 01       	movw	r6, r22
    4ca0:	88 e0       	ldi	r24, 0x08	; 8
    4ca2:	90 e0       	ldi	r25, 0x00	; 0
    4ca4:	0e 94 bb 2e 	call	0x5d76	; 0x5d76 <malloc>
    4ca8:	8c 01       	movw	r16, r24
    4caa:	8f 2d       	mov	r24, r15
    4cac:	90 e0       	ldi	r25, 0x00	; 0
    4cae:	fc 01       	movw	r30, r24
    4cb0:	ee 0f       	add	r30, r30
    4cb2:	ff 1f       	adc	r31, r31
    4cb4:	e5 5c       	subi	r30, 0xC5	; 197
    4cb6:	f7 4e       	sbci	r31, 0xE7	; 231
    4cb8:	11 83       	std	Z+1, r17	; 0x01
    4cba:	00 83       	st	Z, r16
    4cbc:	01 15       	cp	r16, r1
    4cbe:	11 05       	cpc	r17, r1
    4cc0:	09 f4       	brne	.+2      	; 0x4cc4 <serial_create+0x4e>
    4cc2:	68 c0       	rjmp	.+208    	; 0x4d94 <serial_create+0x11e>
    4cc4:	88 0f       	add	r24, r24
    4cc6:	99 1f       	adc	r25, r25
    4cc8:	fc 01       	movw	r30, r24
    4cca:	e5 5f       	subi	r30, 0xF5	; 245
    4ccc:	fd 4f       	sbci	r31, 0xFD	; 253
    4cce:	80 81       	ld	r24, Z
    4cd0:	91 81       	ldd	r25, Z+1	; 0x01
    4cd2:	d8 01       	movw	r26, r16
    4cd4:	8d 93       	st	X+, r24
    4cd6:	9c 93       	st	X, r25
    4cd8:	8c 2d       	mov	r24, r12
    4cda:	90 e0       	ldi	r25, 0x00	; 0
    4cdc:	88 0f       	add	r24, r24
    4cde:	99 1f       	adc	r25, r25
    4ce0:	88 0f       	add	r24, r24
    4ce2:	99 1f       	adc	r25, r25
    4ce4:	0e 94 bb 2e 	call	0x5d76	; 0x5d76 <malloc>
    4ce8:	1c 01       	movw	r2, r24
    4cea:	86 e0       	ldi	r24, 0x06	; 6
    4cec:	90 e0       	ldi	r25, 0x00	; 0
    4cee:	0e 94 bb 2e 	call	0x5d76	; 0x5d76 <malloc>
    4cf2:	7c 01       	movw	r14, r24
    4cf4:	4c 2d       	mov	r20, r12
    4cf6:	b1 01       	movw	r22, r2
    4cf8:	5b d6       	rcall	.+3254   	; 0x59b0 <fifo_init>
    4cfa:	f8 01       	movw	r30, r16
    4cfc:	f5 82       	std	Z+5, r15	; 0x05
    4cfe:	e4 82       	std	Z+4, r14	; 0x04
    4d00:	8a 2d       	mov	r24, r10
    4d02:	90 e0       	ldi	r25, 0x00	; 0
    4d04:	88 0f       	add	r24, r24
    4d06:	99 1f       	adc	r25, r25
    4d08:	88 0f       	add	r24, r24
    4d0a:	99 1f       	adc	r25, r25
    4d0c:	0e 94 bb 2e 	call	0x5d76	; 0x5d76 <malloc>
    4d10:	1c 01       	movw	r2, r24
    4d12:	86 e0       	ldi	r24, 0x06	; 6
    4d14:	90 e0       	ldi	r25, 0x00	; 0
    4d16:	0e 94 bb 2e 	call	0x5d76	; 0x5d76 <malloc>
    4d1a:	7c 01       	movw	r14, r24
    4d1c:	4a 2d       	mov	r20, r10
    4d1e:	b1 01       	movw	r22, r2
    4d20:	47 d6       	rcall	.+3214   	; 0x59b0 <fifo_init>
    4d22:	d8 01       	movw	r26, r16
    4d24:	13 96       	adiw	r26, 0x03	; 3
    4d26:	fc 92       	st	X, r15
    4d28:	ee 92       	st	-X, r14
    4d2a:	12 97       	sbiw	r26, 0x02	; 2
    4d2c:	17 96       	adiw	r26, 0x07	; 7
    4d2e:	9c 92       	st	X, r9
    4d30:	8e 92       	st	-X, r8
    4d32:	16 97       	sbiw	r26, 0x06	; 6
    4d34:	ff b6       	in	r15, 0x3f	; 63
    4d36:	f8 94       	cli
    4d38:	ed 91       	ld	r30, X+
    4d3a:	fc 91       	ld	r31, X
    4d3c:	11 97       	sbiw	r26, 0x01	; 1
    4d3e:	36 97       	sbiw	r30, 0x06	; 6
    4d40:	80 81       	ld	r24, Z
    4d42:	82 60       	ori	r24, 0x02	; 2
    4d44:	80 83       	st	Z, r24
    4d46:	8d 90       	ld	r8, X+
    4d48:	9c 90       	ld	r9, X
    4d4a:	c3 01       	movw	r24, r6
    4d4c:	b2 01       	movw	r22, r4
    4d4e:	1e d7       	rcall	.+3644   	; 0x5b8c <__floatunsisf>
    4d50:	20 e0       	ldi	r18, 0x00	; 0
    4d52:	30 e0       	ldi	r19, 0x00	; 0
    4d54:	40 e0       	ldi	r20, 0x00	; 0
    4d56:	51 e4       	ldi	r21, 0x41	; 65
    4d58:	7e d7       	rcall	.+3836   	; 0x5c56 <__mulsf3>
    4d5a:	9b 01       	movw	r18, r22
    4d5c:	ac 01       	movw	r20, r24
    4d5e:	60 e0       	ldi	r22, 0x00	; 0
    4d60:	74 e2       	ldi	r23, 0x24	; 36
    4d62:	84 e7       	ldi	r24, 0x74	; 116
    4d64:	9b e4       	ldi	r25, 0x4B	; 75
    4d66:	a7 d6       	rcall	.+3406   	; 0x5ab6 <__divsf3>
    4d68:	20 e0       	ldi	r18, 0x00	; 0
    4d6a:	30 e0       	ldi	r19, 0x00	; 0
    4d6c:	40 e8       	ldi	r20, 0x80	; 128
    4d6e:	5f e3       	ldi	r21, 0x3F	; 63
    4d70:	3b d6       	rcall	.+3190   	; 0x59e8 <__subsf3>
    4d72:	3e d9       	rcall	.-3460   	; 0x3ff0 <__fixunssfsi>
    4d74:	f4 01       	movw	r30, r8
    4d76:	32 97       	sbiw	r30, 0x02	; 2
    4d78:	60 83       	st	Z, r22
    4d7a:	d8 01       	movw	r26, r16
    4d7c:	ed 91       	ld	r30, X+
    4d7e:	fc 91       	ld	r31, X
    4d80:	11 97       	sbiw	r26, 0x01	; 1
    4d82:	35 97       	sbiw	r30, 0x05	; 5
    4d84:	88 e9       	ldi	r24, 0x98	; 152
    4d86:	80 83       	st	Z, r24
    4d88:	ed 91       	ld	r30, X+
    4d8a:	fc 91       	ld	r31, X
    4d8c:	34 97       	sbiw	r30, 0x04	; 4
    4d8e:	86 e0       	ldi	r24, 0x06	; 6
    4d90:	80 83       	st	Z, r24
    4d92:	ff be       	out	0x3f, r15	; 63
    4d94:	c8 01       	movw	r24, r16
    4d96:	df 91       	pop	r29
    4d98:	cf 91       	pop	r28
    4d9a:	1f 91       	pop	r17
    4d9c:	0f 91       	pop	r16
    4d9e:	ff 90       	pop	r15
    4da0:	ef 90       	pop	r14
    4da2:	cf 90       	pop	r12
    4da4:	af 90       	pop	r10
    4da6:	9f 90       	pop	r9
    4da8:	8f 90       	pop	r8
    4daa:	7f 90       	pop	r7
    4dac:	6f 90       	pop	r6
    4dae:	5f 90       	pop	r5
    4db0:	4f 90       	pop	r4
    4db2:	3f 90       	pop	r3
    4db4:	2f 90       	pop	r2
    4db6:	08 95       	ret

00004db8 <serial_sendByte>:
    4db8:	cf 93       	push	r28
    4dba:	df 93       	push	r29
    4dbc:	dc 01       	movw	r26, r24
    4dbe:	89 2b       	or	r24, r25
    4dc0:	01 f1       	breq	.+64     	; 0x4e02 <serial_sendByte+0x4a>
    4dc2:	12 96       	adiw	r26, 0x02	; 2
    4dc4:	ed 91       	ld	r30, X+
    4dc6:	fc 91       	ld	r31, X
    4dc8:	13 97       	sbiw	r26, 0x03	; 3
    4dca:	93 81       	ldd	r25, Z+3	; 0x03
    4dcc:	82 81       	ldd	r24, Z+2	; 0x02
    4dce:	25 81       	ldd	r18, Z+5	; 0x05
    4dd0:	98 1b       	sub	r25, r24
    4dd2:	92 23       	and	r25, r18
    4dd4:	84 81       	ldd	r24, Z+4	; 0x04
    4dd6:	98 17       	cp	r25, r24
    4dd8:	b1 f0       	breq	.+44     	; 0x4e06 <serial_sendByte+0x4e>
    4dda:	83 81       	ldd	r24, Z+3	; 0x03
    4ddc:	26 95       	lsr	r18
    4dde:	28 23       	and	r18, r24
    4de0:	c0 81       	ld	r28, Z
    4de2:	d1 81       	ldd	r29, Z+1	; 0x01
    4de4:	c2 0f       	add	r28, r18
    4de6:	d1 1d       	adc	r29, r1
    4de8:	68 83       	st	Y, r22
    4dea:	8f 5f       	subi	r24, 0xFF	; 255
    4dec:	95 81       	ldd	r25, Z+5	; 0x05
    4dee:	89 23       	and	r24, r25
    4df0:	83 83       	std	Z+3, r24	; 0x03
    4df2:	ed 91       	ld	r30, X+
    4df4:	fc 91       	ld	r31, X
    4df6:	35 97       	sbiw	r30, 0x05	; 5
    4df8:	80 81       	ld	r24, Z
    4dfa:	80 62       	ori	r24, 0x20	; 32
    4dfc:	80 83       	st	Z, r24
    4dfe:	80 e0       	ldi	r24, 0x00	; 0
    4e00:	03 c0       	rjmp	.+6      	; 0x4e08 <serial_sendByte+0x50>
    4e02:	81 e0       	ldi	r24, 0x01	; 1
    4e04:	01 c0       	rjmp	.+2      	; 0x4e08 <serial_sendByte+0x50>
    4e06:	82 e0       	ldi	r24, 0x02	; 2
    4e08:	df 91       	pop	r29
    4e0a:	cf 91       	pop	r28
    4e0c:	08 95       	ret

00004e0e <serial_sendBytes>:
    4e0e:	ef 92       	push	r14
    4e10:	ff 92       	push	r15
    4e12:	0f 93       	push	r16
    4e14:	1f 93       	push	r17
    4e16:	cf 93       	push	r28
    4e18:	df 93       	push	r29
    4e1a:	7c 01       	movw	r14, r24
    4e1c:	00 97       	sbiw	r24, 0x00	; 0
    4e1e:	09 f4       	brne	.+2      	; 0x4e22 <serial_sendBytes+0x14>
    4e20:	41 c0       	rjmp	.+130    	; 0x4ea4 <serial_sendBytes+0x96>
    4e22:	dc 01       	movw	r26, r24
    4e24:	12 96       	adiw	r26, 0x02	; 2
    4e26:	ed 91       	ld	r30, X+
    4e28:	fc 91       	ld	r31, X
    4e2a:	13 97       	sbiw	r26, 0x03	; 3
    4e2c:	93 81       	ldd	r25, Z+3	; 0x03
    4e2e:	82 81       	ldd	r24, Z+2	; 0x02
    4e30:	98 1b       	sub	r25, r24
    4e32:	85 81       	ldd	r24, Z+5	; 0x05
    4e34:	98 23       	and	r25, r24
    4e36:	84 81       	ldd	r24, Z+4	; 0x04
    4e38:	89 1b       	sub	r24, r25
    4e3a:	86 17       	cp	r24, r22
    4e3c:	a8 f1       	brcs	.+106    	; 0x4ea8 <serial_sendBytes+0x9a>
    4e3e:	66 23       	and	r22, r22
    4e40:	41 f1       	breq	.+80     	; 0x4e92 <serial_sendBytes+0x84>
    4e42:	84 2f       	mov	r24, r20
    4e44:	95 2f       	mov	r25, r21
    4e46:	dc 01       	movw	r26, r24
    4e48:	61 50       	subi	r22, 0x01	; 1
    4e4a:	46 2f       	mov	r20, r22
    4e4c:	50 e0       	ldi	r21, 0x00	; 0
    4e4e:	4f 5f       	subi	r20, 0xFF	; 255
    4e50:	5f 4f       	sbci	r21, 0xFF	; 255
    4e52:	48 0f       	add	r20, r24
    4e54:	59 1f       	adc	r21, r25
    4e56:	e7 01       	movw	r28, r14
    4e58:	ea 81       	ldd	r30, Y+2	; 0x02
    4e5a:	fb 81       	ldd	r31, Y+3	; 0x03
    4e5c:	93 81       	ldd	r25, Z+3	; 0x03
    4e5e:	82 81       	ldd	r24, Z+2	; 0x02
    4e60:	25 81       	ldd	r18, Z+5	; 0x05
    4e62:	98 1b       	sub	r25, r24
    4e64:	92 23       	and	r25, r18
    4e66:	84 81       	ldd	r24, Z+4	; 0x04
    4e68:	98 17       	cp	r25, r24
    4e6a:	79 f0       	breq	.+30     	; 0x4e8a <serial_sendBytes+0x7c>
    4e6c:	8c 91       	ld	r24, X
    4e6e:	93 81       	ldd	r25, Z+3	; 0x03
    4e70:	26 95       	lsr	r18
    4e72:	29 23       	and	r18, r25
    4e74:	60 81       	ld	r22, Z
    4e76:	71 81       	ldd	r23, Z+1	; 0x01
    4e78:	8b 01       	movw	r16, r22
    4e7a:	02 0f       	add	r16, r18
    4e7c:	11 1d       	adc	r17, r1
    4e7e:	e8 01       	movw	r28, r16
    4e80:	88 83       	st	Y, r24
    4e82:	9f 5f       	subi	r25, 0xFF	; 255
    4e84:	85 81       	ldd	r24, Z+5	; 0x05
    4e86:	98 23       	and	r25, r24
    4e88:	93 83       	std	Z+3, r25	; 0x03
    4e8a:	11 96       	adiw	r26, 0x01	; 1
    4e8c:	a4 17       	cp	r26, r20
    4e8e:	b5 07       	cpc	r27, r21
    4e90:	11 f7       	brne	.-60     	; 0x4e56 <serial_sendBytes+0x48>
    4e92:	d7 01       	movw	r26, r14
    4e94:	ed 91       	ld	r30, X+
    4e96:	fc 91       	ld	r31, X
    4e98:	35 97       	sbiw	r30, 0x05	; 5
    4e9a:	80 81       	ld	r24, Z
    4e9c:	80 62       	ori	r24, 0x20	; 32
    4e9e:	80 83       	st	Z, r24
    4ea0:	80 e0       	ldi	r24, 0x00	; 0
    4ea2:	03 c0       	rjmp	.+6      	; 0x4eaa <serial_sendBytes+0x9c>
    4ea4:	81 e0       	ldi	r24, 0x01	; 1
    4ea6:	01 c0       	rjmp	.+2      	; 0x4eaa <serial_sendBytes+0x9c>
    4ea8:	82 e0       	ldi	r24, 0x02	; 2
    4eaa:	df 91       	pop	r29
    4eac:	cf 91       	pop	r28
    4eae:	1f 91       	pop	r17
    4eb0:	0f 91       	pop	r16
    4eb2:	ff 90       	pop	r15
    4eb4:	ef 90       	pop	r14
    4eb6:	08 95       	ret

00004eb8 <serial_getByte>:
    4eb8:	00 97       	sbiw	r24, 0x00	; 0
    4eba:	d1 f0       	breq	.+52     	; 0x4ef0 <serial_getByte+0x38>
    4ebc:	dc 01       	movw	r26, r24
    4ebe:	14 96       	adiw	r26, 0x04	; 4
    4ec0:	ed 91       	ld	r30, X+
    4ec2:	fc 91       	ld	r31, X
    4ec4:	15 97       	sbiw	r26, 0x05	; 5
    4ec6:	93 81       	ldd	r25, Z+3	; 0x03
    4ec8:	82 81       	ldd	r24, Z+2	; 0x02
    4eca:	98 17       	cp	r25, r24
    4ecc:	99 f0       	breq	.+38     	; 0x4ef4 <serial_getByte+0x3c>
    4ece:	92 81       	ldd	r25, Z+2	; 0x02
    4ed0:	85 81       	ldd	r24, Z+5	; 0x05
    4ed2:	86 95       	lsr	r24
    4ed4:	89 23       	and	r24, r25
    4ed6:	a0 81       	ld	r26, Z
    4ed8:	b1 81       	ldd	r27, Z+1	; 0x01
    4eda:	a8 0f       	add	r26, r24
    4edc:	b1 1d       	adc	r27, r1
    4ede:	8c 91       	ld	r24, X
    4ee0:	db 01       	movw	r26, r22
    4ee2:	8c 93       	st	X, r24
    4ee4:	9f 5f       	subi	r25, 0xFF	; 255
    4ee6:	85 81       	ldd	r24, Z+5	; 0x05
    4ee8:	98 23       	and	r25, r24
    4eea:	92 83       	std	Z+2, r25	; 0x02
    4eec:	80 e0       	ldi	r24, 0x00	; 0
    4eee:	08 95       	ret
    4ef0:	81 e0       	ldi	r24, 0x01	; 1
    4ef2:	08 95       	ret
    4ef4:	83 e0       	ldi	r24, 0x03	; 3
    4ef6:	08 95       	ret

00004ef8 <__vector_25>:
    4ef8:	1f 92       	push	r1
    4efa:	0f 92       	push	r0
    4efc:	0f b6       	in	r0, 0x3f	; 63
    4efe:	0f 92       	push	r0
    4f00:	11 24       	eor	r1, r1
    4f02:	0b b6       	in	r0, 0x3b	; 59
    4f04:	0f 92       	push	r0
    4f06:	2f 93       	push	r18
    4f08:	3f 93       	push	r19
    4f0a:	4f 93       	push	r20
    4f0c:	5f 93       	push	r21
    4f0e:	6f 93       	push	r22
    4f10:	7f 93       	push	r23
    4f12:	8f 93       	push	r24
    4f14:	9f 93       	push	r25
    4f16:	af 93       	push	r26
    4f18:	bf 93       	push	r27
    4f1a:	cf 93       	push	r28
    4f1c:	df 93       	push	r29
    4f1e:	ef 93       	push	r30
    4f20:	ff 93       	push	r31
    4f22:	a0 91 3b 18 	lds	r26, 0x183B	; 0x80183b <_ser_handle>
    4f26:	b0 91 3c 18 	lds	r27, 0x183C	; 0x80183c <_ser_handle+0x1>
    4f2a:	10 97       	sbiw	r26, 0x00	; 0
    4f2c:	11 f1       	breq	.+68     	; 0x4f72 <__vector_25+0x7a>
    4f2e:	60 91 c6 00 	lds	r22, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7c00c6>
    4f32:	14 96       	adiw	r26, 0x04	; 4
    4f34:	ed 91       	ld	r30, X+
    4f36:	fc 91       	ld	r31, X
    4f38:	15 97       	sbiw	r26, 0x05	; 5
    4f3a:	93 81       	ldd	r25, Z+3	; 0x03
    4f3c:	82 81       	ldd	r24, Z+2	; 0x02
    4f3e:	25 81       	ldd	r18, Z+5	; 0x05
    4f40:	98 1b       	sub	r25, r24
    4f42:	92 23       	and	r25, r18
    4f44:	84 81       	ldd	r24, Z+4	; 0x04
    4f46:	98 17       	cp	r25, r24
    4f48:	61 f0       	breq	.+24     	; 0x4f62 <__vector_25+0x6a>
    4f4a:	83 81       	ldd	r24, Z+3	; 0x03
    4f4c:	26 95       	lsr	r18
    4f4e:	28 23       	and	r18, r24
    4f50:	c0 81       	ld	r28, Z
    4f52:	d1 81       	ldd	r29, Z+1	; 0x01
    4f54:	c2 0f       	add	r28, r18
    4f56:	d1 1d       	adc	r29, r1
    4f58:	68 83       	st	Y, r22
    4f5a:	8f 5f       	subi	r24, 0xFF	; 255
    4f5c:	95 81       	ldd	r25, Z+5	; 0x05
    4f5e:	89 23       	and	r24, r25
    4f60:	83 83       	std	Z+3, r24	; 0x03
    4f62:	16 96       	adiw	r26, 0x06	; 6
    4f64:	ed 91       	ld	r30, X+
    4f66:	fc 91       	ld	r31, X
    4f68:	17 97       	sbiw	r26, 0x07	; 7
    4f6a:	30 97       	sbiw	r30, 0x00	; 0
    4f6c:	11 f0       	breq	.+4      	; 0x4f72 <__vector_25+0x7a>
    4f6e:	cd 01       	movw	r24, r26
    4f70:	19 95       	eicall
    4f72:	ff 91       	pop	r31
    4f74:	ef 91       	pop	r30
    4f76:	df 91       	pop	r29
    4f78:	cf 91       	pop	r28
    4f7a:	bf 91       	pop	r27
    4f7c:	af 91       	pop	r26
    4f7e:	9f 91       	pop	r25
    4f80:	8f 91       	pop	r24
    4f82:	7f 91       	pop	r23
    4f84:	6f 91       	pop	r22
    4f86:	5f 91       	pop	r21
    4f88:	4f 91       	pop	r20
    4f8a:	3f 91       	pop	r19
    4f8c:	2f 91       	pop	r18
    4f8e:	0f 90       	pop	r0
    4f90:	0b be       	out	0x3b, r0	; 59
    4f92:	0f 90       	pop	r0
    4f94:	0f be       	out	0x3f, r0	; 63
    4f96:	0f 90       	pop	r0
    4f98:	1f 90       	pop	r1
    4f9a:	18 95       	reti

00004f9c <__vector_26>:
    4f9c:	1f 92       	push	r1
    4f9e:	0f 92       	push	r0
    4fa0:	0f b6       	in	r0, 0x3f	; 63
    4fa2:	0f 92       	push	r0
    4fa4:	11 24       	eor	r1, r1
    4fa6:	0b b6       	in	r0, 0x3b	; 59
    4fa8:	0f 92       	push	r0
    4faa:	2f 93       	push	r18
    4fac:	8f 93       	push	r24
    4fae:	9f 93       	push	r25
    4fb0:	af 93       	push	r26
    4fb2:	bf 93       	push	r27
    4fb4:	ef 93       	push	r30
    4fb6:	ff 93       	push	r31
    4fb8:	e0 91 3b 18 	lds	r30, 0x183B	; 0x80183b <_ser_handle>
    4fbc:	f0 91 3c 18 	lds	r31, 0x183C	; 0x80183c <_ser_handle+0x1>
    4fc0:	30 97       	sbiw	r30, 0x00	; 0
    4fc2:	b9 f0       	breq	.+46     	; 0x4ff2 <__vector_26+0x56>
    4fc4:	02 80       	ldd	r0, Z+2	; 0x02
    4fc6:	f3 81       	ldd	r31, Z+3	; 0x03
    4fc8:	e0 2d       	mov	r30, r0
    4fca:	93 81       	ldd	r25, Z+3	; 0x03
    4fcc:	82 81       	ldd	r24, Z+2	; 0x02
    4fce:	98 17       	cp	r25, r24
    4fd0:	b1 f0       	breq	.+44     	; 0x4ffe <__vector_26+0x62>
    4fd2:	92 81       	ldd	r25, Z+2	; 0x02
    4fd4:	85 81       	ldd	r24, Z+5	; 0x05
    4fd6:	28 2f       	mov	r18, r24
    4fd8:	26 95       	lsr	r18
    4fda:	29 23       	and	r18, r25
    4fdc:	a0 81       	ld	r26, Z
    4fde:	b1 81       	ldd	r27, Z+1	; 0x01
    4fe0:	a2 0f       	add	r26, r18
    4fe2:	b1 1d       	adc	r27, r1
    4fe4:	2c 91       	ld	r18, X
    4fe6:	9f 5f       	subi	r25, 0xFF	; 255
    4fe8:	89 23       	and	r24, r25
    4fea:	82 83       	std	Z+2, r24	; 0x02
    4fec:	20 93 c6 00 	sts	0x00C6, r18	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7c00c6>
    4ff0:	0b c0       	rjmp	.+22     	; 0x5008 <__vector_26+0x6c>
    4ff2:	e1 ec       	ldi	r30, 0xC1	; 193
    4ff4:	f0 e0       	ldi	r31, 0x00	; 0
    4ff6:	80 81       	ld	r24, Z
    4ff8:	8f 7d       	andi	r24, 0xDF	; 223
    4ffa:	80 83       	st	Z, r24
    4ffc:	05 c0       	rjmp	.+10     	; 0x5008 <__vector_26+0x6c>
    4ffe:	e1 ec       	ldi	r30, 0xC1	; 193
    5000:	f0 e0       	ldi	r31, 0x00	; 0
    5002:	80 81       	ld	r24, Z
    5004:	8f 7d       	andi	r24, 0xDF	; 223
    5006:	80 83       	st	Z, r24
    5008:	ff 91       	pop	r31
    500a:	ef 91       	pop	r30
    500c:	bf 91       	pop	r27
    500e:	af 91       	pop	r26
    5010:	9f 91       	pop	r25
    5012:	8f 91       	pop	r24
    5014:	2f 91       	pop	r18
    5016:	0f 90       	pop	r0
    5018:	0b be       	out	0x3b, r0	; 59
    501a:	0f 90       	pop	r0
    501c:	0f be       	out	0x3f, r0	; 63
    501e:	0f 90       	pop	r0
    5020:	1f 90       	pop	r1
    5022:	18 95       	reti

00005024 <__vector_36>:
    5024:	1f 92       	push	r1
    5026:	0f 92       	push	r0
    5028:	0f b6       	in	r0, 0x3f	; 63
    502a:	0f 92       	push	r0
    502c:	11 24       	eor	r1, r1
    502e:	0b b6       	in	r0, 0x3b	; 59
    5030:	0f 92       	push	r0
    5032:	2f 93       	push	r18
    5034:	3f 93       	push	r19
    5036:	4f 93       	push	r20
    5038:	5f 93       	push	r21
    503a:	6f 93       	push	r22
    503c:	7f 93       	push	r23
    503e:	8f 93       	push	r24
    5040:	9f 93       	push	r25
    5042:	af 93       	push	r26
    5044:	bf 93       	push	r27
    5046:	cf 93       	push	r28
    5048:	df 93       	push	r29
    504a:	ef 93       	push	r30
    504c:	ff 93       	push	r31
    504e:	a0 91 3d 18 	lds	r26, 0x183D	; 0x80183d <_ser_handle+0x2>
    5052:	b0 91 3e 18 	lds	r27, 0x183E	; 0x80183e <_ser_handle+0x3>
    5056:	10 97       	sbiw	r26, 0x00	; 0
    5058:	11 f1       	breq	.+68     	; 0x509e <__vector_36+0x7a>
    505a:	60 91 ce 00 	lds	r22, 0x00CE	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7c00ce>
    505e:	14 96       	adiw	r26, 0x04	; 4
    5060:	ed 91       	ld	r30, X+
    5062:	fc 91       	ld	r31, X
    5064:	15 97       	sbiw	r26, 0x05	; 5
    5066:	93 81       	ldd	r25, Z+3	; 0x03
    5068:	82 81       	ldd	r24, Z+2	; 0x02
    506a:	25 81       	ldd	r18, Z+5	; 0x05
    506c:	98 1b       	sub	r25, r24
    506e:	92 23       	and	r25, r18
    5070:	84 81       	ldd	r24, Z+4	; 0x04
    5072:	98 17       	cp	r25, r24
    5074:	61 f0       	breq	.+24     	; 0x508e <__vector_36+0x6a>
    5076:	83 81       	ldd	r24, Z+3	; 0x03
    5078:	26 95       	lsr	r18
    507a:	28 23       	and	r18, r24
    507c:	c0 81       	ld	r28, Z
    507e:	d1 81       	ldd	r29, Z+1	; 0x01
    5080:	c2 0f       	add	r28, r18
    5082:	d1 1d       	adc	r29, r1
    5084:	68 83       	st	Y, r22
    5086:	8f 5f       	subi	r24, 0xFF	; 255
    5088:	95 81       	ldd	r25, Z+5	; 0x05
    508a:	89 23       	and	r24, r25
    508c:	83 83       	std	Z+3, r24	; 0x03
    508e:	16 96       	adiw	r26, 0x06	; 6
    5090:	ed 91       	ld	r30, X+
    5092:	fc 91       	ld	r31, X
    5094:	17 97       	sbiw	r26, 0x07	; 7
    5096:	30 97       	sbiw	r30, 0x00	; 0
    5098:	11 f0       	breq	.+4      	; 0x509e <__vector_36+0x7a>
    509a:	cd 01       	movw	r24, r26
    509c:	19 95       	eicall
    509e:	ff 91       	pop	r31
    50a0:	ef 91       	pop	r30
    50a2:	df 91       	pop	r29
    50a4:	cf 91       	pop	r28
    50a6:	bf 91       	pop	r27
    50a8:	af 91       	pop	r26
    50aa:	9f 91       	pop	r25
    50ac:	8f 91       	pop	r24
    50ae:	7f 91       	pop	r23
    50b0:	6f 91       	pop	r22
    50b2:	5f 91       	pop	r21
    50b4:	4f 91       	pop	r20
    50b6:	3f 91       	pop	r19
    50b8:	2f 91       	pop	r18
    50ba:	0f 90       	pop	r0
    50bc:	0b be       	out	0x3b, r0	; 59
    50be:	0f 90       	pop	r0
    50c0:	0f be       	out	0x3f, r0	; 63
    50c2:	0f 90       	pop	r0
    50c4:	1f 90       	pop	r1
    50c6:	18 95       	reti

000050c8 <__vector_37>:
    50c8:	1f 92       	push	r1
    50ca:	0f 92       	push	r0
    50cc:	0f b6       	in	r0, 0x3f	; 63
    50ce:	0f 92       	push	r0
    50d0:	11 24       	eor	r1, r1
    50d2:	0b b6       	in	r0, 0x3b	; 59
    50d4:	0f 92       	push	r0
    50d6:	2f 93       	push	r18
    50d8:	8f 93       	push	r24
    50da:	9f 93       	push	r25
    50dc:	af 93       	push	r26
    50de:	bf 93       	push	r27
    50e0:	ef 93       	push	r30
    50e2:	ff 93       	push	r31
    50e4:	e0 91 3d 18 	lds	r30, 0x183D	; 0x80183d <_ser_handle+0x2>
    50e8:	f0 91 3e 18 	lds	r31, 0x183E	; 0x80183e <_ser_handle+0x3>
    50ec:	30 97       	sbiw	r30, 0x00	; 0
    50ee:	b9 f0       	breq	.+46     	; 0x511e <__vector_37+0x56>
    50f0:	02 80       	ldd	r0, Z+2	; 0x02
    50f2:	f3 81       	ldd	r31, Z+3	; 0x03
    50f4:	e0 2d       	mov	r30, r0
    50f6:	93 81       	ldd	r25, Z+3	; 0x03
    50f8:	82 81       	ldd	r24, Z+2	; 0x02
    50fa:	98 17       	cp	r25, r24
    50fc:	b1 f0       	breq	.+44     	; 0x512a <__vector_37+0x62>
    50fe:	92 81       	ldd	r25, Z+2	; 0x02
    5100:	85 81       	ldd	r24, Z+5	; 0x05
    5102:	28 2f       	mov	r18, r24
    5104:	26 95       	lsr	r18
    5106:	29 23       	and	r18, r25
    5108:	a0 81       	ld	r26, Z
    510a:	b1 81       	ldd	r27, Z+1	; 0x01
    510c:	a2 0f       	add	r26, r18
    510e:	b1 1d       	adc	r27, r1
    5110:	2c 91       	ld	r18, X
    5112:	9f 5f       	subi	r25, 0xFF	; 255
    5114:	89 23       	and	r24, r25
    5116:	82 83       	std	Z+2, r24	; 0x02
    5118:	20 93 ce 00 	sts	0x00CE, r18	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7c00ce>
    511c:	0b c0       	rjmp	.+22     	; 0x5134 <__vector_37+0x6c>
    511e:	e9 ec       	ldi	r30, 0xC9	; 201
    5120:	f0 e0       	ldi	r31, 0x00	; 0
    5122:	80 81       	ld	r24, Z
    5124:	8f 7d       	andi	r24, 0xDF	; 223
    5126:	80 83       	st	Z, r24
    5128:	05 c0       	rjmp	.+10     	; 0x5134 <__vector_37+0x6c>
    512a:	e9 ec       	ldi	r30, 0xC9	; 201
    512c:	f0 e0       	ldi	r31, 0x00	; 0
    512e:	80 81       	ld	r24, Z
    5130:	8f 7d       	andi	r24, 0xDF	; 223
    5132:	80 83       	st	Z, r24
    5134:	ff 91       	pop	r31
    5136:	ef 91       	pop	r30
    5138:	bf 91       	pop	r27
    513a:	af 91       	pop	r26
    513c:	9f 91       	pop	r25
    513e:	8f 91       	pop	r24
    5140:	2f 91       	pop	r18
    5142:	0f 90       	pop	r0
    5144:	0b be       	out	0x3b, r0	; 59
    5146:	0f 90       	pop	r0
    5148:	0f be       	out	0x3f, r0	; 63
    514a:	0f 90       	pop	r0
    514c:	1f 90       	pop	r1
    514e:	18 95       	reti

00005150 <__vector_51>:
    5150:	1f 92       	push	r1
    5152:	0f 92       	push	r0
    5154:	0f b6       	in	r0, 0x3f	; 63
    5156:	0f 92       	push	r0
    5158:	11 24       	eor	r1, r1
    515a:	0b b6       	in	r0, 0x3b	; 59
    515c:	0f 92       	push	r0
    515e:	2f 93       	push	r18
    5160:	3f 93       	push	r19
    5162:	4f 93       	push	r20
    5164:	5f 93       	push	r21
    5166:	6f 93       	push	r22
    5168:	7f 93       	push	r23
    516a:	8f 93       	push	r24
    516c:	9f 93       	push	r25
    516e:	af 93       	push	r26
    5170:	bf 93       	push	r27
    5172:	cf 93       	push	r28
    5174:	df 93       	push	r29
    5176:	ef 93       	push	r30
    5178:	ff 93       	push	r31
    517a:	a0 91 3f 18 	lds	r26, 0x183F	; 0x80183f <_ser_handle+0x4>
    517e:	b0 91 40 18 	lds	r27, 0x1840	; 0x801840 <_ser_handle+0x5>
    5182:	10 97       	sbiw	r26, 0x00	; 0
    5184:	11 f1       	breq	.+68     	; 0x51ca <__vector_51+0x7a>
    5186:	60 91 d6 00 	lds	r22, 0x00D6	; 0x8000d6 <__TEXT_REGION_LENGTH__+0x7c00d6>
    518a:	14 96       	adiw	r26, 0x04	; 4
    518c:	ed 91       	ld	r30, X+
    518e:	fc 91       	ld	r31, X
    5190:	15 97       	sbiw	r26, 0x05	; 5
    5192:	93 81       	ldd	r25, Z+3	; 0x03
    5194:	82 81       	ldd	r24, Z+2	; 0x02
    5196:	25 81       	ldd	r18, Z+5	; 0x05
    5198:	98 1b       	sub	r25, r24
    519a:	92 23       	and	r25, r18
    519c:	84 81       	ldd	r24, Z+4	; 0x04
    519e:	98 17       	cp	r25, r24
    51a0:	61 f0       	breq	.+24     	; 0x51ba <__vector_51+0x6a>
    51a2:	83 81       	ldd	r24, Z+3	; 0x03
    51a4:	26 95       	lsr	r18
    51a6:	28 23       	and	r18, r24
    51a8:	c0 81       	ld	r28, Z
    51aa:	d1 81       	ldd	r29, Z+1	; 0x01
    51ac:	c2 0f       	add	r28, r18
    51ae:	d1 1d       	adc	r29, r1
    51b0:	68 83       	st	Y, r22
    51b2:	8f 5f       	subi	r24, 0xFF	; 255
    51b4:	95 81       	ldd	r25, Z+5	; 0x05
    51b6:	89 23       	and	r24, r25
    51b8:	83 83       	std	Z+3, r24	; 0x03
    51ba:	16 96       	adiw	r26, 0x06	; 6
    51bc:	ed 91       	ld	r30, X+
    51be:	fc 91       	ld	r31, X
    51c0:	17 97       	sbiw	r26, 0x07	; 7
    51c2:	30 97       	sbiw	r30, 0x00	; 0
    51c4:	11 f0       	breq	.+4      	; 0x51ca <__vector_51+0x7a>
    51c6:	cd 01       	movw	r24, r26
    51c8:	19 95       	eicall
    51ca:	ff 91       	pop	r31
    51cc:	ef 91       	pop	r30
    51ce:	df 91       	pop	r29
    51d0:	cf 91       	pop	r28
    51d2:	bf 91       	pop	r27
    51d4:	af 91       	pop	r26
    51d6:	9f 91       	pop	r25
    51d8:	8f 91       	pop	r24
    51da:	7f 91       	pop	r23
    51dc:	6f 91       	pop	r22
    51de:	5f 91       	pop	r21
    51e0:	4f 91       	pop	r20
    51e2:	3f 91       	pop	r19
    51e4:	2f 91       	pop	r18
    51e6:	0f 90       	pop	r0
    51e8:	0b be       	out	0x3b, r0	; 59
    51ea:	0f 90       	pop	r0
    51ec:	0f be       	out	0x3f, r0	; 63
    51ee:	0f 90       	pop	r0
    51f0:	1f 90       	pop	r1
    51f2:	18 95       	reti

000051f4 <__vector_52>:
    51f4:	1f 92       	push	r1
    51f6:	0f 92       	push	r0
    51f8:	0f b6       	in	r0, 0x3f	; 63
    51fa:	0f 92       	push	r0
    51fc:	11 24       	eor	r1, r1
    51fe:	0b b6       	in	r0, 0x3b	; 59
    5200:	0f 92       	push	r0
    5202:	2f 93       	push	r18
    5204:	8f 93       	push	r24
    5206:	9f 93       	push	r25
    5208:	af 93       	push	r26
    520a:	bf 93       	push	r27
    520c:	ef 93       	push	r30
    520e:	ff 93       	push	r31
    5210:	e0 91 3f 18 	lds	r30, 0x183F	; 0x80183f <_ser_handle+0x4>
    5214:	f0 91 40 18 	lds	r31, 0x1840	; 0x801840 <_ser_handle+0x5>
    5218:	30 97       	sbiw	r30, 0x00	; 0
    521a:	b9 f0       	breq	.+46     	; 0x524a <__vector_52+0x56>
    521c:	02 80       	ldd	r0, Z+2	; 0x02
    521e:	f3 81       	ldd	r31, Z+3	; 0x03
    5220:	e0 2d       	mov	r30, r0
    5222:	93 81       	ldd	r25, Z+3	; 0x03
    5224:	82 81       	ldd	r24, Z+2	; 0x02
    5226:	98 17       	cp	r25, r24
    5228:	b1 f0       	breq	.+44     	; 0x5256 <__vector_52+0x62>
    522a:	92 81       	ldd	r25, Z+2	; 0x02
    522c:	85 81       	ldd	r24, Z+5	; 0x05
    522e:	28 2f       	mov	r18, r24
    5230:	26 95       	lsr	r18
    5232:	29 23       	and	r18, r25
    5234:	a0 81       	ld	r26, Z
    5236:	b1 81       	ldd	r27, Z+1	; 0x01
    5238:	a2 0f       	add	r26, r18
    523a:	b1 1d       	adc	r27, r1
    523c:	2c 91       	ld	r18, X
    523e:	9f 5f       	subi	r25, 0xFF	; 255
    5240:	89 23       	and	r24, r25
    5242:	82 83       	std	Z+2, r24	; 0x02
    5244:	20 93 d6 00 	sts	0x00D6, r18	; 0x8000d6 <__TEXT_REGION_LENGTH__+0x7c00d6>
    5248:	0b c0       	rjmp	.+22     	; 0x5260 <__vector_52+0x6c>
    524a:	e1 ed       	ldi	r30, 0xD1	; 209
    524c:	f0 e0       	ldi	r31, 0x00	; 0
    524e:	80 81       	ld	r24, Z
    5250:	8f 7d       	andi	r24, 0xDF	; 223
    5252:	80 83       	st	Z, r24
    5254:	05 c0       	rjmp	.+10     	; 0x5260 <__vector_52+0x6c>
    5256:	e1 ed       	ldi	r30, 0xD1	; 209
    5258:	f0 e0       	ldi	r31, 0x00	; 0
    525a:	80 81       	ld	r24, Z
    525c:	8f 7d       	andi	r24, 0xDF	; 223
    525e:	80 83       	st	Z, r24
    5260:	ff 91       	pop	r31
    5262:	ef 91       	pop	r30
    5264:	bf 91       	pop	r27
    5266:	af 91       	pop	r26
    5268:	9f 91       	pop	r25
    526a:	8f 91       	pop	r24
    526c:	2f 91       	pop	r18
    526e:	0f 90       	pop	r0
    5270:	0b be       	out	0x3b, r0	; 59
    5272:	0f 90       	pop	r0
    5274:	0f be       	out	0x3f, r0	; 63
    5276:	0f 90       	pop	r0
    5278:	1f 90       	pop	r1
    527a:	18 95       	reti

0000527c <__vector_54>:
    527c:	1f 92       	push	r1
    527e:	0f 92       	push	r0
    5280:	0f b6       	in	r0, 0x3f	; 63
    5282:	0f 92       	push	r0
    5284:	11 24       	eor	r1, r1
    5286:	0b b6       	in	r0, 0x3b	; 59
    5288:	0f 92       	push	r0
    528a:	2f 93       	push	r18
    528c:	3f 93       	push	r19
    528e:	4f 93       	push	r20
    5290:	5f 93       	push	r21
    5292:	6f 93       	push	r22
    5294:	7f 93       	push	r23
    5296:	8f 93       	push	r24
    5298:	9f 93       	push	r25
    529a:	af 93       	push	r26
    529c:	bf 93       	push	r27
    529e:	cf 93       	push	r28
    52a0:	df 93       	push	r29
    52a2:	ef 93       	push	r30
    52a4:	ff 93       	push	r31
    52a6:	a0 91 41 18 	lds	r26, 0x1841	; 0x801841 <_ser_handle+0x6>
    52aa:	b0 91 42 18 	lds	r27, 0x1842	; 0x801842 <_ser_handle+0x7>
    52ae:	10 97       	sbiw	r26, 0x00	; 0
    52b0:	11 f1       	breq	.+68     	; 0x52f6 <__vector_54+0x7a>
    52b2:	60 91 36 01 	lds	r22, 0x0136	; 0x800136 <__TEXT_REGION_LENGTH__+0x7c0136>
    52b6:	14 96       	adiw	r26, 0x04	; 4
    52b8:	ed 91       	ld	r30, X+
    52ba:	fc 91       	ld	r31, X
    52bc:	15 97       	sbiw	r26, 0x05	; 5
    52be:	93 81       	ldd	r25, Z+3	; 0x03
    52c0:	82 81       	ldd	r24, Z+2	; 0x02
    52c2:	25 81       	ldd	r18, Z+5	; 0x05
    52c4:	98 1b       	sub	r25, r24
    52c6:	92 23       	and	r25, r18
    52c8:	84 81       	ldd	r24, Z+4	; 0x04
    52ca:	98 17       	cp	r25, r24
    52cc:	61 f0       	breq	.+24     	; 0x52e6 <__vector_54+0x6a>
    52ce:	83 81       	ldd	r24, Z+3	; 0x03
    52d0:	26 95       	lsr	r18
    52d2:	28 23       	and	r18, r24
    52d4:	c0 81       	ld	r28, Z
    52d6:	d1 81       	ldd	r29, Z+1	; 0x01
    52d8:	c2 0f       	add	r28, r18
    52da:	d1 1d       	adc	r29, r1
    52dc:	68 83       	st	Y, r22
    52de:	8f 5f       	subi	r24, 0xFF	; 255
    52e0:	95 81       	ldd	r25, Z+5	; 0x05
    52e2:	89 23       	and	r24, r25
    52e4:	83 83       	std	Z+3, r24	; 0x03
    52e6:	16 96       	adiw	r26, 0x06	; 6
    52e8:	ed 91       	ld	r30, X+
    52ea:	fc 91       	ld	r31, X
    52ec:	17 97       	sbiw	r26, 0x07	; 7
    52ee:	30 97       	sbiw	r30, 0x00	; 0
    52f0:	11 f0       	breq	.+4      	; 0x52f6 <__vector_54+0x7a>
    52f2:	cd 01       	movw	r24, r26
    52f4:	19 95       	eicall
    52f6:	ff 91       	pop	r31
    52f8:	ef 91       	pop	r30
    52fa:	df 91       	pop	r29
    52fc:	cf 91       	pop	r28
    52fe:	bf 91       	pop	r27
    5300:	af 91       	pop	r26
    5302:	9f 91       	pop	r25
    5304:	8f 91       	pop	r24
    5306:	7f 91       	pop	r23
    5308:	6f 91       	pop	r22
    530a:	5f 91       	pop	r21
    530c:	4f 91       	pop	r20
    530e:	3f 91       	pop	r19
    5310:	2f 91       	pop	r18
    5312:	0f 90       	pop	r0
    5314:	0b be       	out	0x3b, r0	; 59
    5316:	0f 90       	pop	r0
    5318:	0f be       	out	0x3f, r0	; 63
    531a:	0f 90       	pop	r0
    531c:	1f 90       	pop	r1
    531e:	18 95       	reti

00005320 <__vector_55>:
    5320:	1f 92       	push	r1
    5322:	0f 92       	push	r0
    5324:	0f b6       	in	r0, 0x3f	; 63
    5326:	0f 92       	push	r0
    5328:	11 24       	eor	r1, r1
    532a:	0b b6       	in	r0, 0x3b	; 59
    532c:	0f 92       	push	r0
    532e:	2f 93       	push	r18
    5330:	8f 93       	push	r24
    5332:	9f 93       	push	r25
    5334:	af 93       	push	r26
    5336:	bf 93       	push	r27
    5338:	ef 93       	push	r30
    533a:	ff 93       	push	r31
    533c:	e0 91 41 18 	lds	r30, 0x1841	; 0x801841 <_ser_handle+0x6>
    5340:	f0 91 42 18 	lds	r31, 0x1842	; 0x801842 <_ser_handle+0x7>
    5344:	30 97       	sbiw	r30, 0x00	; 0
    5346:	b9 f0       	breq	.+46     	; 0x5376 <__vector_55+0x56>
    5348:	02 80       	ldd	r0, Z+2	; 0x02
    534a:	f3 81       	ldd	r31, Z+3	; 0x03
    534c:	e0 2d       	mov	r30, r0
    534e:	93 81       	ldd	r25, Z+3	; 0x03
    5350:	82 81       	ldd	r24, Z+2	; 0x02
    5352:	98 17       	cp	r25, r24
    5354:	b1 f0       	breq	.+44     	; 0x5382 <__vector_55+0x62>
    5356:	92 81       	ldd	r25, Z+2	; 0x02
    5358:	85 81       	ldd	r24, Z+5	; 0x05
    535a:	28 2f       	mov	r18, r24
    535c:	26 95       	lsr	r18
    535e:	29 23       	and	r18, r25
    5360:	a0 81       	ld	r26, Z
    5362:	b1 81       	ldd	r27, Z+1	; 0x01
    5364:	a2 0f       	add	r26, r18
    5366:	b1 1d       	adc	r27, r1
    5368:	2c 91       	ld	r18, X
    536a:	9f 5f       	subi	r25, 0xFF	; 255
    536c:	89 23       	and	r24, r25
    536e:	82 83       	std	Z+2, r24	; 0x02
    5370:	20 93 36 01 	sts	0x0136, r18	; 0x800136 <__TEXT_REGION_LENGTH__+0x7c0136>
    5374:	0b c0       	rjmp	.+22     	; 0x538c <__vector_55+0x6c>
    5376:	e1 e3       	ldi	r30, 0x31	; 49
    5378:	f1 e0       	ldi	r31, 0x01	; 1
    537a:	80 81       	ld	r24, Z
    537c:	8f 7d       	andi	r24, 0xDF	; 223
    537e:	80 83       	st	Z, r24
    5380:	05 c0       	rjmp	.+10     	; 0x538c <__vector_55+0x6c>
    5382:	e1 e3       	ldi	r30, 0x31	; 49
    5384:	f1 e0       	ldi	r31, 0x01	; 1
    5386:	80 81       	ld	r24, Z
    5388:	8f 7d       	andi	r24, 0xDF	; 223
    538a:	80 83       	st	Z, r24
    538c:	ff 91       	pop	r31
    538e:	ef 91       	pop	r30
    5390:	bf 91       	pop	r27
    5392:	af 91       	pop	r26
    5394:	9f 91       	pop	r25
    5396:	8f 91       	pop	r24
    5398:	2f 91       	pop	r18
    539a:	0f 90       	pop	r0
    539c:	0b be       	out	0x3b, r0	; 59
    539e:	0f 90       	pop	r0
    53a0:	0f be       	out	0x3f, r0	; 63
    53a2:	0f 90       	pop	r0
    53a4:	1f 90       	pop	r1
    53a6:	18 95       	reti

000053a8 <usart_getchar>:
    53a8:	cf 93       	push	r28
    53aa:	df 93       	push	r29
    53ac:	1f 92       	push	r1
    53ae:	cd b7       	in	r28, 0x3d	; 61
    53b0:	de b7       	in	r29, 0x3e	; 62
    53b2:	be 01       	movw	r22, r28
    53b4:	6f 5f       	subi	r22, 0xFF	; 255
    53b6:	7f 4f       	sbci	r23, 0xFF	; 255
    53b8:	80 91 43 18 	lds	r24, 0x1843	; 0x801843 <_com_serial_instance>
    53bc:	90 91 44 18 	lds	r25, 0x1844	; 0x801844 <_com_serial_instance+0x1>
    53c0:	7b dd       	rcall	.-1290   	; 0x4eb8 <serial_getByte>
    53c2:	81 11       	cpse	r24, r1
    53c4:	f6 cf       	rjmp	.-20     	; 0x53b2 <usart_getchar+0xa>
    53c6:	89 81       	ldd	r24, Y+1	; 0x01
    53c8:	90 e0       	ldi	r25, 0x00	; 0
    53ca:	0f 90       	pop	r0
    53cc:	df 91       	pop	r29
    53ce:	cf 91       	pop	r28
    53d0:	08 95       	ret

000053d2 <usart_putchar>:
    53d2:	68 2f       	mov	r22, r24
    53d4:	80 91 43 18 	lds	r24, 0x1843	; 0x801843 <_com_serial_instance>
    53d8:	90 91 44 18 	lds	r25, 0x1844	; 0x801844 <_com_serial_instance+0x1>
    53dc:	ed dc       	rcall	.-1574   	; 0x4db8 <serial_sendByte>
    53de:	80 e0       	ldi	r24, 0x00	; 0
    53e0:	90 e0       	ldi	r25, 0x00	; 0
    53e2:	08 95       	ret

000053e4 <stdio_initialise>:
    53e4:	8f 92       	push	r8
    53e6:	9f 92       	push	r9
    53e8:	af 92       	push	r10
    53ea:	cf 92       	push	r12
    53ec:	ef 92       	push	r14
    53ee:	0f 93       	push	r16
    53f0:	81 2c       	mov	r8, r1
    53f2:	91 2c       	mov	r9, r1
    53f4:	68 94       	set
    53f6:	aa 24       	eor	r10, r10
    53f8:	a7 f8       	bld	r10, 7
    53fa:	68 94       	set
    53fc:	cc 24       	eor	r12, r12
    53fe:	c7 f8       	bld	r12, 7
    5400:	e1 2c       	mov	r14, r1
    5402:	00 e0       	ldi	r16, 0x00	; 0
    5404:	23 e0       	ldi	r18, 0x03	; 3
    5406:	40 e0       	ldi	r20, 0x00	; 0
    5408:	51 ee       	ldi	r21, 0xE1	; 225
    540a:	60 e0       	ldi	r22, 0x00	; 0
    540c:	70 e0       	ldi	r23, 0x00	; 0
    540e:	33 dc       	rcall	.-1946   	; 0x4c76 <serial_create>
    5410:	90 93 44 18 	sts	0x1844, r25	; 0x801844 <_com_serial_instance+0x1>
    5414:	80 93 43 18 	sts	0x1843, r24	; 0x801843 <_com_serial_instance>
    5418:	ee ec       	ldi	r30, 0xCE	; 206
    541a:	f8 e1       	ldi	r31, 0x18	; 24
    541c:	83 e1       	ldi	r24, 0x13	; 19
    541e:	92 e0       	ldi	r25, 0x02	; 2
    5420:	91 83       	std	Z+1, r25	; 0x01
    5422:	80 83       	st	Z, r24
    5424:	93 83       	std	Z+3, r25	; 0x03
    5426:	82 83       	std	Z+2, r24	; 0x02
    5428:	0f 91       	pop	r16
    542a:	ef 90       	pop	r14
    542c:	cf 90       	pop	r12
    542e:	af 90       	pop	r10
    5430:	9f 90       	pop	r9
    5432:	8f 90       	pop	r8
    5434:	08 95       	ret

00005436 <_turn_off>:
    5436:	90 e0       	ldi	r25, 0x00	; 0
    5438:	fc 01       	movw	r30, r24
    543a:	ee 0f       	add	r30, r30
    543c:	ff 1f       	adc	r31, r31
    543e:	e8 0f       	add	r30, r24
    5440:	f9 1f       	adc	r31, r25
    5442:	ee 0f       	add	r30, r30
    5444:	ff 1f       	adc	r31, r31
    5446:	eb 5b       	subi	r30, 0xBB	; 187
    5448:	f7 4e       	sbci	r31, 0xE7	; 231
    544a:	23 81       	ldd	r18, Z+3	; 0x03
    544c:	21 11       	cpse	r18, r1
    544e:	1f c0       	rjmp	.+62     	; 0x548e <_turn_off+0x58>
    5450:	9c 01       	movw	r18, r24
    5452:	22 0f       	add	r18, r18
    5454:	33 1f       	adc	r19, r19
    5456:	f9 01       	movw	r30, r18
    5458:	e8 0f       	add	r30, r24
    545a:	f9 1f       	adc	r31, r25
    545c:	ee 0f       	add	r30, r30
    545e:	ff 1f       	adc	r31, r31
    5460:	eb 5b       	subi	r30, 0xBB	; 187
    5462:	f7 4e       	sbci	r31, 0xE7	; 231
    5464:	a0 81       	ld	r26, Z
    5466:	b1 81       	ldd	r27, Z+1	; 0x01
    5468:	4c 91       	ld	r20, X
    546a:	f9 01       	movw	r30, r18
    546c:	e8 0f       	add	r30, r24
    546e:	f9 1f       	adc	r31, r25
    5470:	ee 0f       	add	r30, r30
    5472:	ff 1f       	adc	r31, r31
    5474:	eb 5b       	subi	r30, 0xBB	; 187
    5476:	f7 4e       	sbci	r31, 0xE7	; 231
    5478:	81 e0       	ldi	r24, 0x01	; 1
    547a:	90 e0       	ldi	r25, 0x00	; 0
    547c:	02 80       	ldd	r0, Z+2	; 0x02
    547e:	02 c0       	rjmp	.+4      	; 0x5484 <_turn_off+0x4e>
    5480:	88 0f       	add	r24, r24
    5482:	99 1f       	adc	r25, r25
    5484:	0a 94       	dec	r0
    5486:	e2 f7       	brpl	.-8      	; 0x5480 <_turn_off+0x4a>
    5488:	84 2b       	or	r24, r20
    548a:	8c 93       	st	X, r24
    548c:	08 95       	ret
    548e:	fc 01       	movw	r30, r24
    5490:	ee 0f       	add	r30, r30
    5492:	ff 1f       	adc	r31, r31
    5494:	df 01       	movw	r26, r30
    5496:	a8 0f       	add	r26, r24
    5498:	b9 1f       	adc	r27, r25
    549a:	aa 0f       	add	r26, r26
    549c:	bb 1f       	adc	r27, r27
    549e:	ab 5b       	subi	r26, 0xBB	; 187
    54a0:	b7 4e       	sbci	r27, 0xE7	; 231
    54a2:	0d 90       	ld	r0, X+
    54a4:	bc 91       	ld	r27, X
    54a6:	a0 2d       	mov	r26, r0
    54a8:	2c 91       	ld	r18, X
    54aa:	e8 0f       	add	r30, r24
    54ac:	f9 1f       	adc	r31, r25
    54ae:	ee 0f       	add	r30, r30
    54b0:	ff 1f       	adc	r31, r31
    54b2:	eb 5b       	subi	r30, 0xBB	; 187
    54b4:	f7 4e       	sbci	r31, 0xE7	; 231
    54b6:	81 e0       	ldi	r24, 0x01	; 1
    54b8:	90 e0       	ldi	r25, 0x00	; 0
    54ba:	02 80       	ldd	r0, Z+2	; 0x02
    54bc:	02 c0       	rjmp	.+4      	; 0x54c2 <_turn_off+0x8c>
    54be:	88 0f       	add	r24, r24
    54c0:	99 1f       	adc	r25, r25
    54c2:	0a 94       	dec	r0
    54c4:	e2 f7       	brpl	.-8      	; 0x54be <_turn_off+0x88>
    54c6:	80 95       	com	r24
    54c8:	82 23       	and	r24, r18
    54ca:	8c 93       	st	X, r24
    54cc:	08 95       	ret

000054ce <_turn_on>:
    54ce:	90 e0       	ldi	r25, 0x00	; 0
    54d0:	fc 01       	movw	r30, r24
    54d2:	ee 0f       	add	r30, r30
    54d4:	ff 1f       	adc	r31, r31
    54d6:	e8 0f       	add	r30, r24
    54d8:	f9 1f       	adc	r31, r25
    54da:	ee 0f       	add	r30, r30
    54dc:	ff 1f       	adc	r31, r31
    54de:	eb 5b       	subi	r30, 0xBB	; 187
    54e0:	f7 4e       	sbci	r31, 0xE7	; 231
    54e2:	23 81       	ldd	r18, Z+3	; 0x03
    54e4:	21 11       	cpse	r18, r1
    54e6:	20 c0       	rjmp	.+64     	; 0x5528 <_turn_on+0x5a>
    54e8:	9c 01       	movw	r18, r24
    54ea:	22 0f       	add	r18, r18
    54ec:	33 1f       	adc	r19, r19
    54ee:	f9 01       	movw	r30, r18
    54f0:	e8 0f       	add	r30, r24
    54f2:	f9 1f       	adc	r31, r25
    54f4:	ee 0f       	add	r30, r30
    54f6:	ff 1f       	adc	r31, r31
    54f8:	eb 5b       	subi	r30, 0xBB	; 187
    54fa:	f7 4e       	sbci	r31, 0xE7	; 231
    54fc:	a0 81       	ld	r26, Z
    54fe:	b1 81       	ldd	r27, Z+1	; 0x01
    5500:	4c 91       	ld	r20, X
    5502:	f9 01       	movw	r30, r18
    5504:	e8 0f       	add	r30, r24
    5506:	f9 1f       	adc	r31, r25
    5508:	ee 0f       	add	r30, r30
    550a:	ff 1f       	adc	r31, r31
    550c:	eb 5b       	subi	r30, 0xBB	; 187
    550e:	f7 4e       	sbci	r31, 0xE7	; 231
    5510:	81 e0       	ldi	r24, 0x01	; 1
    5512:	90 e0       	ldi	r25, 0x00	; 0
    5514:	02 80       	ldd	r0, Z+2	; 0x02
    5516:	02 c0       	rjmp	.+4      	; 0x551c <_turn_on+0x4e>
    5518:	88 0f       	add	r24, r24
    551a:	99 1f       	adc	r25, r25
    551c:	0a 94       	dec	r0
    551e:	e2 f7       	brpl	.-8      	; 0x5518 <_turn_on+0x4a>
    5520:	80 95       	com	r24
    5522:	84 23       	and	r24, r20
    5524:	8c 93       	st	X, r24
    5526:	08 95       	ret
    5528:	fc 01       	movw	r30, r24
    552a:	ee 0f       	add	r30, r30
    552c:	ff 1f       	adc	r31, r31
    552e:	df 01       	movw	r26, r30
    5530:	a8 0f       	add	r26, r24
    5532:	b9 1f       	adc	r27, r25
    5534:	aa 0f       	add	r26, r26
    5536:	bb 1f       	adc	r27, r27
    5538:	ab 5b       	subi	r26, 0xBB	; 187
    553a:	b7 4e       	sbci	r27, 0xE7	; 231
    553c:	0d 90       	ld	r0, X+
    553e:	bc 91       	ld	r27, X
    5540:	a0 2d       	mov	r26, r0
    5542:	2c 91       	ld	r18, X
    5544:	e8 0f       	add	r30, r24
    5546:	f9 1f       	adc	r31, r25
    5548:	ee 0f       	add	r30, r30
    554a:	ff 1f       	adc	r31, r31
    554c:	eb 5b       	subi	r30, 0xBB	; 187
    554e:	f7 4e       	sbci	r31, 0xE7	; 231
    5550:	81 e0       	ldi	r24, 0x01	; 1
    5552:	90 e0       	ldi	r25, 0x00	; 0
    5554:	02 80       	ldd	r0, Z+2	; 0x02
    5556:	02 c0       	rjmp	.+4      	; 0x555c <_turn_on+0x8e>
    5558:	88 0f       	add	r24, r24
    555a:	99 1f       	adc	r25, r25
    555c:	0a 94       	dec	r0
    555e:	e2 f7       	brpl	.-8      	; 0x5558 <_turn_on+0x8a>
    5560:	82 2b       	or	r24, r18
    5562:	8c 93       	st	X, r24
    5564:	08 95       	ret

00005566 <status_leds_slowBlink>:
    5566:	cf 93       	push	r28
    5568:	df 93       	push	r29
    556a:	90 e0       	ldi	r25, 0x00	; 0
    556c:	fc 01       	movw	r30, r24
    556e:	ee 0f       	add	r30, r30
    5570:	ff 1f       	adc	r31, r31
    5572:	df 01       	movw	r26, r30
    5574:	a8 0f       	add	r26, r24
    5576:	b9 1f       	adc	r27, r25
    5578:	aa 0f       	add	r26, r26
    557a:	bb 1f       	adc	r27, r27
    557c:	ab 5b       	subi	r26, 0xBB	; 187
    557e:	b7 4e       	sbci	r27, 0xE7	; 231
    5580:	cd 91       	ld	r28, X+
    5582:	dc 91       	ld	r29, X
    5584:	11 97       	sbiw	r26, 0x01	; 1
    5586:	48 81       	ld	r20, Y
    5588:	21 e0       	ldi	r18, 0x01	; 1
    558a:	30 e0       	ldi	r19, 0x00	; 0
    558c:	12 96       	adiw	r26, 0x02	; 2
    558e:	0c 90       	ld	r0, X
    5590:	12 97       	sbiw	r26, 0x02	; 2
    5592:	02 c0       	rjmp	.+4      	; 0x5598 <status_leds_slowBlink+0x32>
    5594:	22 0f       	add	r18, r18
    5596:	33 1f       	adc	r19, r19
    5598:	0a 94       	dec	r0
    559a:	e2 f7       	brpl	.-8      	; 0x5594 <status_leds_slowBlink+0x2e>
    559c:	24 27       	eor	r18, r20
    559e:	28 83       	st	Y, r18
    55a0:	fd 01       	movw	r30, r26
    55a2:	81 e0       	ldi	r24, 0x01	; 1
    55a4:	84 83       	std	Z+4, r24	; 0x04
    55a6:	df 91       	pop	r29
    55a8:	cf 91       	pop	r28
    55aa:	08 95       	ret

000055ac <status_leds_fastBlink>:
    55ac:	cf 93       	push	r28
    55ae:	df 93       	push	r29
    55b0:	90 e0       	ldi	r25, 0x00	; 0
    55b2:	fc 01       	movw	r30, r24
    55b4:	ee 0f       	add	r30, r30
    55b6:	ff 1f       	adc	r31, r31
    55b8:	df 01       	movw	r26, r30
    55ba:	a8 0f       	add	r26, r24
    55bc:	b9 1f       	adc	r27, r25
    55be:	aa 0f       	add	r26, r26
    55c0:	bb 1f       	adc	r27, r27
    55c2:	ab 5b       	subi	r26, 0xBB	; 187
    55c4:	b7 4e       	sbci	r27, 0xE7	; 231
    55c6:	cd 91       	ld	r28, X+
    55c8:	dc 91       	ld	r29, X
    55ca:	11 97       	sbiw	r26, 0x01	; 1
    55cc:	48 81       	ld	r20, Y
    55ce:	21 e0       	ldi	r18, 0x01	; 1
    55d0:	30 e0       	ldi	r19, 0x00	; 0
    55d2:	12 96       	adiw	r26, 0x02	; 2
    55d4:	0c 90       	ld	r0, X
    55d6:	12 97       	sbiw	r26, 0x02	; 2
    55d8:	02 c0       	rjmp	.+4      	; 0x55de <status_leds_fastBlink+0x32>
    55da:	22 0f       	add	r18, r18
    55dc:	33 1f       	adc	r19, r19
    55de:	0a 94       	dec	r0
    55e0:	e2 f7       	brpl	.-8      	; 0x55da <status_leds_fastBlink+0x2e>
    55e2:	24 27       	eor	r18, r20
    55e4:	28 83       	st	Y, r18
    55e6:	fd 01       	movw	r30, r26
    55e8:	82 e0       	ldi	r24, 0x02	; 2
    55ea:	84 83       	std	Z+4, r24	; 0x04
    55ec:	df 91       	pop	r29
    55ee:	cf 91       	pop	r28
    55f0:	08 95       	ret

000055f2 <status_leds_ledOn>:
    55f2:	28 2f       	mov	r18, r24
    55f4:	30 e0       	ldi	r19, 0x00	; 0
    55f6:	f9 01       	movw	r30, r18
    55f8:	ee 0f       	add	r30, r30
    55fa:	ff 1f       	adc	r31, r31
    55fc:	e2 0f       	add	r30, r18
    55fe:	f3 1f       	adc	r31, r19
    5600:	ee 0f       	add	r30, r30
    5602:	ff 1f       	adc	r31, r31
    5604:	eb 5b       	subi	r30, 0xBB	; 187
    5606:	f7 4e       	sbci	r31, 0xE7	; 231
    5608:	93 e0       	ldi	r25, 0x03	; 3
    560a:	94 83       	std	Z+4, r25	; 0x04
    560c:	60 cf       	rjmp	.-320    	; 0x54ce <_turn_on>
    560e:	08 95       	ret

00005610 <status_leds_ledOff>:
    5610:	28 2f       	mov	r18, r24
    5612:	30 e0       	ldi	r19, 0x00	; 0
    5614:	f9 01       	movw	r30, r18
    5616:	ee 0f       	add	r30, r30
    5618:	ff 1f       	adc	r31, r31
    561a:	e2 0f       	add	r30, r18
    561c:	f3 1f       	adc	r31, r19
    561e:	ee 0f       	add	r30, r30
    5620:	ff 1f       	adc	r31, r31
    5622:	eb 5b       	subi	r30, 0xBB	; 187
    5624:	f7 4e       	sbci	r31, 0xE7	; 231
    5626:	94 e0       	ldi	r25, 0x04	; 4
    5628:	94 83       	std	Z+4, r25	; 0x04
    562a:	05 cf       	rjmp	.-502    	; 0x5436 <_turn_off>
    562c:	08 95       	ret

0000562e <status_leds_longPuls>:
    562e:	90 e0       	ldi	r25, 0x00	; 0
    5630:	fc 01       	movw	r30, r24
    5632:	ee 0f       	add	r30, r30
    5634:	ff 1f       	adc	r31, r31
    5636:	df 01       	movw	r26, r30
    5638:	a8 0f       	add	r26, r24
    563a:	b9 1f       	adc	r27, r25
    563c:	aa 0f       	add	r26, r26
    563e:	bb 1f       	adc	r27, r27
    5640:	ab 5b       	subi	r26, 0xBB	; 187
    5642:	b7 4e       	sbci	r27, 0xE7	; 231
    5644:	26 e0       	ldi	r18, 0x06	; 6
    5646:	15 96       	adiw	r26, 0x05	; 5
    5648:	2c 93       	st	X, r18
    564a:	15 97       	sbiw	r26, 0x05	; 5
    564c:	fd 01       	movw	r30, r26
    564e:	14 82       	std	Z+4, r1	; 0x04
    5650:	08 95       	ret

00005652 <status_leds_shortPuls>:
    5652:	90 e0       	ldi	r25, 0x00	; 0
    5654:	fc 01       	movw	r30, r24
    5656:	ee 0f       	add	r30, r30
    5658:	ff 1f       	adc	r31, r31
    565a:	df 01       	movw	r26, r30
    565c:	a8 0f       	add	r26, r24
    565e:	b9 1f       	adc	r27, r25
    5660:	aa 0f       	add	r26, r26
    5662:	bb 1f       	adc	r27, r27
    5664:	ab 5b       	subi	r26, 0xBB	; 187
    5666:	b7 4e       	sbci	r27, 0xE7	; 231
    5668:	15 96       	adiw	r26, 0x05	; 5
    566a:	1c 92       	st	X, r1
    566c:	15 97       	sbiw	r26, 0x05	; 5
    566e:	fd 01       	movw	r30, r26
    5670:	14 82       	std	Z+4, r1	; 0x04
    5672:	08 95       	ret

00005674 <_initTwiInterface>:
    5674:	80 91 6b 18 	lds	r24, 0x186B	; 0x80186b <_twiIsInitiated>
    5678:	81 11       	cpse	r24, r1
    567a:	0c c0       	rjmp	.+24     	; 0x5694 <_initTwiInterface+0x20>
    567c:	8c e0       	ldi	r24, 0x0C	; 12
    567e:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7c00b8>
    5682:	8f ef       	ldi	r24, 0xFF	; 255
    5684:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7c00bb>
    5688:	84 e0       	ldi	r24, 0x04	; 4
    568a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    568e:	81 e0       	ldi	r24, 0x01	; 1
    5690:	80 93 6b 18 	sts	0x186B, r24	; 0x80186b <_twiIsInitiated>
    5694:	08 95       	ret

00005696 <twiCreate>:
    5696:	af 92       	push	r10
    5698:	bf 92       	push	r11
    569a:	cf 92       	push	r12
    569c:	df 92       	push	r13
    569e:	ef 92       	push	r14
    56a0:	ff 92       	push	r15
    56a2:	0f 93       	push	r16
    56a4:	1f 93       	push	r17
    56a6:	cf 93       	push	r28
    56a8:	df 93       	push	r29
    56aa:	a8 2e       	mov	r10, r24
    56ac:	b6 2e       	mov	r11, r22
    56ae:	69 01       	movw	r12, r18
    56b0:	7a 01       	movw	r14, r20
    56b2:	84 e0       	ldi	r24, 0x04	; 4
    56b4:	90 e0       	ldi	r25, 0x00	; 0
    56b6:	5f d3       	rcall	.+1726   	; 0x5d76 <malloc>
    56b8:	ec 01       	movw	r28, r24
    56ba:	89 2b       	or	r24, r25
    56bc:	61 f1       	breq	.+88     	; 0x5716 <twiCreate+0x80>
    56be:	a8 82       	st	Y, r10
    56c0:	81 e0       	ldi	r24, 0x01	; 1
    56c2:	b8 12       	cpse	r11, r24
    56c4:	12 c0       	rjmp	.+36     	; 0x56ea <twiCreate+0x54>
    56c6:	c7 01       	movw	r24, r14
    56c8:	b6 01       	movw	r22, r12
    56ca:	20 ea       	ldi	r18, 0xA0	; 160
    56cc:	36 e8       	ldi	r19, 0x86	; 134
    56ce:	41 e0       	ldi	r20, 0x01	; 1
    56d0:	50 e0       	ldi	r21, 0x00	; 0
    56d2:	27 d3       	rcall	.+1614   	; 0x5d22 <__udivmodsi4>
    56d4:	da 01       	movw	r26, r20
    56d6:	c9 01       	movw	r24, r18
    56d8:	40 97       	sbiw	r24, 0x10	; 16
    56da:	a1 09       	sbc	r26, r1
    56dc:	b1 09       	sbc	r27, r1
    56de:	b6 95       	lsr	r27
    56e0:	a7 95       	ror	r26
    56e2:	97 95       	ror	r25
    56e4:	87 95       	ror	r24
    56e6:	89 83       	std	Y+1, r24	; 0x01
    56e8:	11 c0       	rjmp	.+34     	; 0x570c <twiCreate+0x76>
    56ea:	c7 01       	movw	r24, r14
    56ec:	b6 01       	movw	r22, r12
    56ee:	20 e8       	ldi	r18, 0x80	; 128
    56f0:	3a e1       	ldi	r19, 0x1A	; 26
    56f2:	46 e0       	ldi	r20, 0x06	; 6
    56f4:	50 e0       	ldi	r21, 0x00	; 0
    56f6:	15 d3       	rcall	.+1578   	; 0x5d22 <__udivmodsi4>
    56f8:	da 01       	movw	r26, r20
    56fa:	c9 01       	movw	r24, r18
    56fc:	40 97       	sbiw	r24, 0x10	; 16
    56fe:	a1 09       	sbc	r26, r1
    5700:	b1 09       	sbc	r27, r1
    5702:	b6 95       	lsr	r27
    5704:	a7 95       	ror	r26
    5706:	97 95       	ror	r25
    5708:	87 95       	ror	r24
    570a:	89 83       	std	Y+1, r24	; 0x01
    570c:	1b 83       	std	Y+3, r17	; 0x03
    570e:	0a 83       	std	Y+2, r16	; 0x02
    5710:	8c 2f       	mov	r24, r28
    5712:	9d 2f       	mov	r25, r29
    5714:	02 c0       	rjmp	.+4      	; 0x571a <twiCreate+0x84>
    5716:	80 e0       	ldi	r24, 0x00	; 0
    5718:	90 e0       	ldi	r25, 0x00	; 0
    571a:	df 91       	pop	r29
    571c:	cf 91       	pop	r28
    571e:	1f 91       	pop	r17
    5720:	0f 91       	pop	r16
    5722:	ff 90       	pop	r15
    5724:	ef 90       	pop	r14
    5726:	df 90       	pop	r13
    5728:	cf 90       	pop	r12
    572a:	bf 90       	pop	r11
    572c:	af 90       	pop	r10
    572e:	08 95       	ret

00005730 <twiIsBusy>:
    5730:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    5734:	81 70       	andi	r24, 0x01	; 1
    5736:	08 95       	ret

00005738 <twiTransmit>:
    5738:	ff 92       	push	r15
    573a:	0f 93       	push	r16
    573c:	1f 93       	push	r17
    573e:	cf 93       	push	r28
    5740:	df 93       	push	r29
    5742:	00 97       	sbiw	r24, 0x00	; 0
    5744:	d1 f1       	breq	.+116    	; 0x57ba <twiTransmit+0x82>
    5746:	4a 30       	cpi	r20, 0x0A	; 10
    5748:	d0 f5       	brcc	.+116    	; 0x57be <twiTransmit+0x86>
    574a:	f4 2e       	mov	r15, r20
    574c:	8b 01       	movw	r16, r22
    574e:	ec 01       	movw	r28, r24
    5750:	ef df       	rcall	.-34     	; 0x5730 <twiIsBusy>
    5752:	81 11       	cpse	r24, r1
    5754:	36 c0       	rjmp	.+108    	; 0x57c2 <twiTransmit+0x8a>
    5756:	80 91 5e 18 	lds	r24, 0x185E	; 0x80185e <_twiCurrentHandler>
    575a:	90 91 5f 18 	lds	r25, 0x185F	; 0x80185f <_twiCurrentHandler+0x1>
    575e:	c8 17       	cp	r28, r24
    5760:	d9 07       	cpc	r29, r25
    5762:	41 f0       	breq	.+16     	; 0x5774 <twiTransmit+0x3c>
    5764:	87 df       	rcall	.-242    	; 0x5674 <_initTwiInterface>
    5766:	89 81       	ldd	r24, Y+1	; 0x01
    5768:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7c00b8>
    576c:	d0 93 5f 18 	sts	0x185F, r29	; 0x80185f <_twiCurrentHandler+0x1>
    5770:	c0 93 5e 18 	sts	0x185E, r28	; 0x80185e <_twiCurrentHandler>
    5774:	81 e0       	ldi	r24, 0x01	; 1
    5776:	8f 0d       	add	r24, r15
    5778:	80 93 60 18 	sts	0x1860, r24	; 0x801860 <_twiMessageLen>
    577c:	88 81       	ld	r24, Y
    577e:	88 0f       	add	r24, r24
    5780:	80 93 61 18 	sts	0x1861, r24	; 0x801861 <_twiMessageBuffer>
    5784:	ff 20       	and	r15, r15
    5786:	89 f0       	breq	.+34     	; 0x57aa <twiTransmit+0x72>
    5788:	f8 01       	movw	r30, r16
    578a:	a2 e6       	ldi	r26, 0x62	; 98
    578c:	b8 e1       	ldi	r27, 0x18	; 24
    578e:	4f ef       	ldi	r20, 0xFF	; 255
    5790:	4f 0d       	add	r20, r15
    5792:	64 2f       	mov	r22, r20
    5794:	70 e0       	ldi	r23, 0x00	; 0
    5796:	cb 01       	movw	r24, r22
    5798:	01 96       	adiw	r24, 0x01	; 1
    579a:	b8 01       	movw	r22, r16
    579c:	68 0f       	add	r22, r24
    579e:	79 1f       	adc	r23, r25
    57a0:	81 91       	ld	r24, Z+
    57a2:	8d 93       	st	X+, r24
    57a4:	e6 17       	cp	r30, r22
    57a6:	f7 07       	cpc	r31, r23
    57a8:	d9 f7       	brne	.-10     	; 0x57a0 <twiTransmit+0x68>
    57aa:	88 ef       	ldi	r24, 0xF8	; 248
    57ac:	80 93 21 02 	sts	0x0221, r24	; 0x800221 <_twiCurrentState>
    57b0:	85 ea       	ldi	r24, 0xA5	; 165
    57b2:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    57b6:	84 e0       	ldi	r24, 0x04	; 4
    57b8:	05 c0       	rjmp	.+10     	; 0x57c4 <twiTransmit+0x8c>
    57ba:	86 e0       	ldi	r24, 0x06	; 6
    57bc:	03 c0       	rjmp	.+6      	; 0x57c4 <twiTransmit+0x8c>
    57be:	87 e0       	ldi	r24, 0x07	; 7
    57c0:	01 c0       	rjmp	.+2      	; 0x57c4 <twiTransmit+0x8c>
    57c2:	82 e0       	ldi	r24, 0x02	; 2
    57c4:	df 91       	pop	r29
    57c6:	cf 91       	pop	r28
    57c8:	1f 91       	pop	r17
    57ca:	0f 91       	pop	r16
    57cc:	ff 90       	pop	r15
    57ce:	08 95       	ret

000057d0 <twiReceive>:
    57d0:	1f 93       	push	r17
    57d2:	cf 93       	push	r28
    57d4:	df 93       	push	r29
    57d6:	00 97       	sbiw	r24, 0x00	; 0
    57d8:	29 f1       	breq	.+74     	; 0x5824 <twiReceive+0x54>
    57da:	6b 30       	cpi	r22, 0x0B	; 11
    57dc:	28 f5       	brcc	.+74     	; 0x5828 <twiReceive+0x58>
    57de:	16 2f       	mov	r17, r22
    57e0:	ec 01       	movw	r28, r24
    57e2:	a6 df       	rcall	.-180    	; 0x5730 <twiIsBusy>
    57e4:	81 11       	cpse	r24, r1
    57e6:	22 c0       	rjmp	.+68     	; 0x582c <twiReceive+0x5c>
    57e8:	80 91 5e 18 	lds	r24, 0x185E	; 0x80185e <_twiCurrentHandler>
    57ec:	90 91 5f 18 	lds	r25, 0x185F	; 0x80185f <_twiCurrentHandler+0x1>
    57f0:	c8 17       	cp	r28, r24
    57f2:	d9 07       	cpc	r29, r25
    57f4:	41 f0       	breq	.+16     	; 0x5806 <twiReceive+0x36>
    57f6:	3e df       	rcall	.-388    	; 0x5674 <_initTwiInterface>
    57f8:	89 81       	ldd	r24, Y+1	; 0x01
    57fa:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7c00b8>
    57fe:	d0 93 5f 18 	sts	0x185F, r29	; 0x80185f <_twiCurrentHandler+0x1>
    5802:	c0 93 5e 18 	sts	0x185E, r28	; 0x80185e <_twiCurrentHandler>
    5806:	10 93 60 18 	sts	0x1860, r17	; 0x801860 <_twiMessageLen>
    580a:	88 81       	ld	r24, Y
    580c:	88 0f       	add	r24, r24
    580e:	81 60       	ori	r24, 0x01	; 1
    5810:	80 93 61 18 	sts	0x1861, r24	; 0x801861 <_twiMessageBuffer>
    5814:	88 ef       	ldi	r24, 0xF8	; 248
    5816:	80 93 21 02 	sts	0x0221, r24	; 0x800221 <_twiCurrentState>
    581a:	85 ea       	ldi	r24, 0xA5	; 165
    581c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    5820:	85 e0       	ldi	r24, 0x05	; 5
    5822:	05 c0       	rjmp	.+10     	; 0x582e <twiReceive+0x5e>
    5824:	86 e0       	ldi	r24, 0x06	; 6
    5826:	03 c0       	rjmp	.+6      	; 0x582e <twiReceive+0x5e>
    5828:	87 e0       	ldi	r24, 0x07	; 7
    582a:	01 c0       	rjmp	.+2      	; 0x582e <twiReceive+0x5e>
    582c:	82 e0       	ldi	r24, 0x02	; 2
    582e:	df 91       	pop	r29
    5830:	cf 91       	pop	r28
    5832:	1f 91       	pop	r17
    5834:	08 95       	ret

00005836 <__vector_39>:
    5836:	1f 92       	push	r1
    5838:	0f 92       	push	r0
    583a:	0f b6       	in	r0, 0x3f	; 63
    583c:	0f 92       	push	r0
    583e:	11 24       	eor	r1, r1
    5840:	0b b6       	in	r0, 0x3b	; 59
    5842:	0f 92       	push	r0
    5844:	2f 93       	push	r18
    5846:	3f 93       	push	r19
    5848:	4f 93       	push	r20
    584a:	5f 93       	push	r21
    584c:	6f 93       	push	r22
    584e:	7f 93       	push	r23
    5850:	8f 93       	push	r24
    5852:	9f 93       	push	r25
    5854:	af 93       	push	r26
    5856:	bf 93       	push	r27
    5858:	ef 93       	push	r30
    585a:	ff 93       	push	r31
    585c:	e0 91 b9 00 	lds	r30, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7c00b9>
    5860:	8e 2f       	mov	r24, r30
    5862:	90 e0       	ldi	r25, 0x00	; 0
    5864:	fc 01       	movw	r30, r24
    5866:	38 97       	sbiw	r30, 0x08	; 8
    5868:	e1 35       	cpi	r30, 0x51	; 81
    586a:	f1 05       	cpc	r31, r1
    586c:	08 f0       	brcs	.+2      	; 0x5870 <__vector_39+0x3a>
    586e:	75 c0       	rjmp	.+234    	; 0x595a <__vector_39+0x124>
    5870:	88 27       	eor	r24, r24
    5872:	e4 58       	subi	r30, 0x84	; 132
    5874:	ff 4f       	sbci	r31, 0xFF	; 255
    5876:	8f 4f       	sbci	r24, 0xFF	; 255
    5878:	76 c2       	rjmp	.+1260   	; 0x5d66 <__tablejump2__>
    587a:	10 92 5d 18 	sts	0x185D, r1	; 0x80185d <_index.1885>
    587e:	e0 91 5d 18 	lds	r30, 0x185D	; 0x80185d <_index.1885>
    5882:	80 91 60 18 	lds	r24, 0x1860	; 0x801860 <_twiMessageLen>
    5886:	e8 17       	cp	r30, r24
    5888:	70 f4       	brcc	.+28     	; 0x58a6 <__vector_39+0x70>
    588a:	81 e0       	ldi	r24, 0x01	; 1
    588c:	8e 0f       	add	r24, r30
    588e:	80 93 5d 18 	sts	0x185D, r24	; 0x80185d <_index.1885>
    5892:	f0 e0       	ldi	r31, 0x00	; 0
    5894:	ef 59       	subi	r30, 0x9F	; 159
    5896:	f7 4e       	sbci	r31, 0xE7	; 231
    5898:	80 81       	ld	r24, Z
    589a:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7c00bb>
    589e:	85 e8       	ldi	r24, 0x85	; 133
    58a0:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    58a4:	72 c0       	rjmp	.+228    	; 0x598a <__vector_39+0x154>
    58a6:	84 e9       	ldi	r24, 0x94	; 148
    58a8:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    58ac:	80 91 5e 18 	lds	r24, 0x185E	; 0x80185e <_twiCurrentHandler>
    58b0:	90 91 5f 18 	lds	r25, 0x185F	; 0x80185f <_twiCurrentHandler+0x1>
    58b4:	dc 01       	movw	r26, r24
    58b6:	12 96       	adiw	r26, 0x02	; 2
    58b8:	ed 91       	ld	r30, X+
    58ba:	fc 91       	ld	r31, X
    58bc:	13 97       	sbiw	r26, 0x03	; 3
    58be:	30 97       	sbiw	r30, 0x00	; 0
    58c0:	09 f4       	brne	.+2      	; 0x58c4 <__vector_39+0x8e>
    58c2:	63 c0       	rjmp	.+198    	; 0x598a <__vector_39+0x154>
    58c4:	20 e0       	ldi	r18, 0x00	; 0
    58c6:	40 e0       	ldi	r20, 0x00	; 0
    58c8:	50 e0       	ldi	r21, 0x00	; 0
    58ca:	64 e0       	ldi	r22, 0x04	; 4
    58cc:	19 95       	eicall
    58ce:	5d c0       	rjmp	.+186    	; 0x598a <__vector_39+0x154>
    58d0:	e0 91 5d 18 	lds	r30, 0x185D	; 0x80185d <_index.1885>
    58d4:	81 e0       	ldi	r24, 0x01	; 1
    58d6:	8e 0f       	add	r24, r30
    58d8:	80 93 5d 18 	sts	0x185D, r24	; 0x80185d <_index.1885>
    58dc:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7c00bb>
    58e0:	f0 e0       	ldi	r31, 0x00	; 0
    58e2:	ef 59       	subi	r30, 0x9F	; 159
    58e4:	f7 4e       	sbci	r31, 0xE7	; 231
    58e6:	80 83       	st	Z, r24
    58e8:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7c00b9>
    58ec:	80 34       	cpi	r24, 0x40	; 64
    58ee:	11 f4       	brne	.+4      	; 0x58f4 <__vector_39+0xbe>
    58f0:	10 92 5d 18 	sts	0x185D, r1	; 0x80185d <_index.1885>
    58f4:	20 91 5d 18 	lds	r18, 0x185D	; 0x80185d <_index.1885>
    58f8:	30 e0       	ldi	r19, 0x00	; 0
    58fa:	80 91 60 18 	lds	r24, 0x1860	; 0x801860 <_twiMessageLen>
    58fe:	90 e0       	ldi	r25, 0x00	; 0
    5900:	01 97       	sbiw	r24, 0x01	; 1
    5902:	28 17       	cp	r18, r24
    5904:	39 07       	cpc	r19, r25
    5906:	24 f4       	brge	.+8      	; 0x5910 <__vector_39+0xda>
    5908:	85 ec       	ldi	r24, 0xC5	; 197
    590a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    590e:	3d c0       	rjmp	.+122    	; 0x598a <__vector_39+0x154>
    5910:	85 e8       	ldi	r24, 0x85	; 133
    5912:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    5916:	39 c0       	rjmp	.+114    	; 0x598a <__vector_39+0x154>
    5918:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7c00bb>
    591c:	e0 91 5d 18 	lds	r30, 0x185D	; 0x80185d <_index.1885>
    5920:	f0 e0       	ldi	r31, 0x00	; 0
    5922:	ef 59       	subi	r30, 0x9F	; 159
    5924:	f7 4e       	sbci	r31, 0xE7	; 231
    5926:	80 83       	st	Z, r24
    5928:	84 e9       	ldi	r24, 0x94	; 148
    592a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    592e:	80 91 5e 18 	lds	r24, 0x185E	; 0x80185e <_twiCurrentHandler>
    5932:	90 91 5f 18 	lds	r25, 0x185F	; 0x80185f <_twiCurrentHandler+0x1>
    5936:	dc 01       	movw	r26, r24
    5938:	12 96       	adiw	r26, 0x02	; 2
    593a:	ed 91       	ld	r30, X+
    593c:	fc 91       	ld	r31, X
    593e:	13 97       	sbiw	r26, 0x03	; 3
    5940:	30 97       	sbiw	r30, 0x00	; 0
    5942:	19 f1       	breq	.+70     	; 0x598a <__vector_39+0x154>
    5944:	20 91 60 18 	lds	r18, 0x1860	; 0x801860 <_twiMessageLen>
    5948:	41 e6       	ldi	r20, 0x61	; 97
    594a:	58 e1       	ldi	r21, 0x18	; 24
    594c:	65 e0       	ldi	r22, 0x05	; 5
    594e:	19 95       	eicall
    5950:	1c c0       	rjmp	.+56     	; 0x598a <__vector_39+0x154>
    5952:	85 ea       	ldi	r24, 0xA5	; 165
    5954:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    5958:	18 c0       	rjmp	.+48     	; 0x598a <__vector_39+0x154>
    595a:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7c00b9>
    595e:	80 93 21 02 	sts	0x0221, r24	; 0x800221 <_twiCurrentState>
    5962:	84 e0       	ldi	r24, 0x04	; 4
    5964:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    5968:	80 91 5e 18 	lds	r24, 0x185E	; 0x80185e <_twiCurrentHandler>
    596c:	90 91 5f 18 	lds	r25, 0x185F	; 0x80185f <_twiCurrentHandler+0x1>
    5970:	dc 01       	movw	r26, r24
    5972:	12 96       	adiw	r26, 0x02	; 2
    5974:	ed 91       	ld	r30, X+
    5976:	fc 91       	ld	r31, X
    5978:	13 97       	sbiw	r26, 0x03	; 3
    597a:	30 97       	sbiw	r30, 0x00	; 0
    597c:	31 f0       	breq	.+12     	; 0x598a <__vector_39+0x154>
    597e:	20 e0       	ldi	r18, 0x00	; 0
    5980:	40 e0       	ldi	r20, 0x00	; 0
    5982:	50 e0       	ldi	r21, 0x00	; 0
    5984:	60 91 21 02 	lds	r22, 0x0221	; 0x800221 <_twiCurrentState>
    5988:	19 95       	eicall
    598a:	ff 91       	pop	r31
    598c:	ef 91       	pop	r30
    598e:	bf 91       	pop	r27
    5990:	af 91       	pop	r26
    5992:	9f 91       	pop	r25
    5994:	8f 91       	pop	r24
    5996:	7f 91       	pop	r23
    5998:	6f 91       	pop	r22
    599a:	5f 91       	pop	r21
    599c:	4f 91       	pop	r20
    599e:	3f 91       	pop	r19
    59a0:	2f 91       	pop	r18
    59a2:	0f 90       	pop	r0
    59a4:	0b be       	out	0x3b, r0	; 59
    59a6:	0f 90       	pop	r0
    59a8:	0f be       	out	0x3f, r0	; 63
    59aa:	0f 90       	pop	r0
    59ac:	1f 90       	pop	r1
    59ae:	18 95       	reti

000059b0 <fifo_init>:
    59b0:	fc 01       	movw	r30, r24
    59b2:	41 11       	cpse	r20, r1
    59b4:	01 c0       	rjmp	.+2      	; 0x59b8 <fifo_init+0x8>
    59b6:	00 d3       	rcall	.+1536   	; 0x5fb8 <abort>
    59b8:	84 2f       	mov	r24, r20
    59ba:	90 e0       	ldi	r25, 0x00	; 0
    59bc:	9c 01       	movw	r18, r24
    59be:	21 50       	subi	r18, 0x01	; 1
    59c0:	31 09       	sbc	r19, r1
    59c2:	82 23       	and	r24, r18
    59c4:	93 23       	and	r25, r19
    59c6:	89 2b       	or	r24, r25
    59c8:	09 f0       	breq	.+2      	; 0x59cc <fifo_init+0x1c>
    59ca:	f6 d2       	rcall	.+1516   	; 0x5fb8 <abort>
    59cc:	41 38       	cpi	r20, 0x81	; 129
    59ce:	08 f0       	brcs	.+2      	; 0x59d2 <fifo_init+0x22>
    59d0:	f3 d2       	rcall	.+1510   	; 0x5fb8 <abort>
    59d2:	12 82       	std	Z+2, r1	; 0x02
    59d4:	13 82       	std	Z+3, r1	; 0x03
    59d6:	44 83       	std	Z+4, r20	; 0x04
    59d8:	44 0f       	add	r20, r20
    59da:	41 50       	subi	r20, 0x01	; 1
    59dc:	45 83       	std	Z+5, r20	; 0x05
    59de:	71 83       	std	Z+1, r23	; 0x01
    59e0:	60 83       	st	Z, r22
    59e2:	80 e0       	ldi	r24, 0x00	; 0
    59e4:	90 e0       	ldi	r25, 0x00	; 0
    59e6:	08 95       	ret

000059e8 <__subsf3>:
    59e8:	50 58       	subi	r21, 0x80	; 128

000059ea <__addsf3>:
    59ea:	bb 27       	eor	r27, r27
    59ec:	aa 27       	eor	r26, r26
    59ee:	0e d0       	rcall	.+28     	; 0x5a0c <__addsf3x>
    59f0:	21 c1       	rjmp	.+578    	; 0x5c34 <__fp_round>
    59f2:	12 d1       	rcall	.+548    	; 0x5c18 <__fp_pscA>
    59f4:	30 f0       	brcs	.+12     	; 0x5a02 <__addsf3+0x18>
    59f6:	17 d1       	rcall	.+558    	; 0x5c26 <__fp_pscB>
    59f8:	20 f0       	brcs	.+8      	; 0x5a02 <__addsf3+0x18>
    59fa:	31 f4       	brne	.+12     	; 0x5a08 <__addsf3+0x1e>
    59fc:	9f 3f       	cpi	r25, 0xFF	; 255
    59fe:	11 f4       	brne	.+4      	; 0x5a04 <__addsf3+0x1a>
    5a00:	1e f4       	brtc	.+6      	; 0x5a08 <__addsf3+0x1e>
    5a02:	07 c1       	rjmp	.+526    	; 0x5c12 <__fp_nan>
    5a04:	0e f4       	brtc	.+2      	; 0x5a08 <__addsf3+0x1e>
    5a06:	e0 95       	com	r30
    5a08:	e7 fb       	bst	r30, 7
    5a0a:	fd c0       	rjmp	.+506    	; 0x5c06 <__fp_inf>

00005a0c <__addsf3x>:
    5a0c:	e9 2f       	mov	r30, r25
    5a0e:	0e 94 24 20 	call	0x4048	; 0x4048 <__fp_split3>
    5a12:	78 f3       	brcs	.-34     	; 0x59f2 <__addsf3+0x8>
    5a14:	ba 17       	cp	r27, r26
    5a16:	62 07       	cpc	r22, r18
    5a18:	73 07       	cpc	r23, r19
    5a1a:	84 07       	cpc	r24, r20
    5a1c:	95 07       	cpc	r25, r21
    5a1e:	20 f0       	brcs	.+8      	; 0x5a28 <__addsf3x+0x1c>
    5a20:	79 f4       	brne	.+30     	; 0x5a40 <__addsf3x+0x34>
    5a22:	a6 f5       	brtc	.+104    	; 0x5a8c <__addsf3x+0x80>
    5a24:	0c 94 46 20 	jmp	0x408c	; 0x408c <__fp_zero>
    5a28:	0e f4       	brtc	.+2      	; 0x5a2c <__addsf3x+0x20>
    5a2a:	e0 95       	com	r30
    5a2c:	0b 2e       	mov	r0, r27
    5a2e:	ba 2f       	mov	r27, r26
    5a30:	a0 2d       	mov	r26, r0
    5a32:	0b 01       	movw	r0, r22
    5a34:	b9 01       	movw	r22, r18
    5a36:	90 01       	movw	r18, r0
    5a38:	0c 01       	movw	r0, r24
    5a3a:	ca 01       	movw	r24, r20
    5a3c:	a0 01       	movw	r20, r0
    5a3e:	11 24       	eor	r1, r1
    5a40:	ff 27       	eor	r31, r31
    5a42:	59 1b       	sub	r21, r25
    5a44:	99 f0       	breq	.+38     	; 0x5a6c <__addsf3x+0x60>
    5a46:	59 3f       	cpi	r21, 0xF9	; 249
    5a48:	50 f4       	brcc	.+20     	; 0x5a5e <__addsf3x+0x52>
    5a4a:	50 3e       	cpi	r21, 0xE0	; 224
    5a4c:	68 f1       	brcs	.+90     	; 0x5aa8 <__addsf3x+0x9c>
    5a4e:	1a 16       	cp	r1, r26
    5a50:	f0 40       	sbci	r31, 0x00	; 0
    5a52:	a2 2f       	mov	r26, r18
    5a54:	23 2f       	mov	r18, r19
    5a56:	34 2f       	mov	r19, r20
    5a58:	44 27       	eor	r20, r20
    5a5a:	58 5f       	subi	r21, 0xF8	; 248
    5a5c:	f3 cf       	rjmp	.-26     	; 0x5a44 <__addsf3x+0x38>
    5a5e:	46 95       	lsr	r20
    5a60:	37 95       	ror	r19
    5a62:	27 95       	ror	r18
    5a64:	a7 95       	ror	r26
    5a66:	f0 40       	sbci	r31, 0x00	; 0
    5a68:	53 95       	inc	r21
    5a6a:	c9 f7       	brne	.-14     	; 0x5a5e <__addsf3x+0x52>
    5a6c:	7e f4       	brtc	.+30     	; 0x5a8c <__addsf3x+0x80>
    5a6e:	1f 16       	cp	r1, r31
    5a70:	ba 0b       	sbc	r27, r26
    5a72:	62 0b       	sbc	r22, r18
    5a74:	73 0b       	sbc	r23, r19
    5a76:	84 0b       	sbc	r24, r20
    5a78:	ba f0       	brmi	.+46     	; 0x5aa8 <__addsf3x+0x9c>
    5a7a:	91 50       	subi	r25, 0x01	; 1
    5a7c:	a1 f0       	breq	.+40     	; 0x5aa6 <__addsf3x+0x9a>
    5a7e:	ff 0f       	add	r31, r31
    5a80:	bb 1f       	adc	r27, r27
    5a82:	66 1f       	adc	r22, r22
    5a84:	77 1f       	adc	r23, r23
    5a86:	88 1f       	adc	r24, r24
    5a88:	c2 f7       	brpl	.-16     	; 0x5a7a <__addsf3x+0x6e>
    5a8a:	0e c0       	rjmp	.+28     	; 0x5aa8 <__addsf3x+0x9c>
    5a8c:	ba 0f       	add	r27, r26
    5a8e:	62 1f       	adc	r22, r18
    5a90:	73 1f       	adc	r23, r19
    5a92:	84 1f       	adc	r24, r20
    5a94:	48 f4       	brcc	.+18     	; 0x5aa8 <__addsf3x+0x9c>
    5a96:	87 95       	ror	r24
    5a98:	77 95       	ror	r23
    5a9a:	67 95       	ror	r22
    5a9c:	b7 95       	ror	r27
    5a9e:	f7 95       	ror	r31
    5aa0:	9e 3f       	cpi	r25, 0xFE	; 254
    5aa2:	08 f0       	brcs	.+2      	; 0x5aa6 <__addsf3x+0x9a>
    5aa4:	b1 cf       	rjmp	.-158    	; 0x5a08 <__addsf3+0x1e>
    5aa6:	93 95       	inc	r25
    5aa8:	88 0f       	add	r24, r24
    5aaa:	08 f0       	brcs	.+2      	; 0x5aae <__addsf3x+0xa2>
    5aac:	99 27       	eor	r25, r25
    5aae:	ee 0f       	add	r30, r30
    5ab0:	97 95       	ror	r25
    5ab2:	87 95       	ror	r24
    5ab4:	08 95       	ret

00005ab6 <__divsf3>:
    5ab6:	0d d0       	rcall	.+26     	; 0x5ad2 <__divsf3x>
    5ab8:	bd c0       	rjmp	.+378    	; 0x5c34 <__fp_round>
    5aba:	b5 d0       	rcall	.+362    	; 0x5c26 <__fp_pscB>
    5abc:	48 f0       	brcs	.+18     	; 0x5ad0 <__divsf3+0x1a>
    5abe:	ac d0       	rcall	.+344    	; 0x5c18 <__fp_pscA>
    5ac0:	38 f0       	brcs	.+14     	; 0x5ad0 <__divsf3+0x1a>
    5ac2:	21 f4       	brne	.+8      	; 0x5acc <__divsf3+0x16>
    5ac4:	5f 3f       	cpi	r21, 0xFF	; 255
    5ac6:	21 f0       	breq	.+8      	; 0x5ad0 <__divsf3+0x1a>
    5ac8:	9e c0       	rjmp	.+316    	; 0x5c06 <__fp_inf>
    5aca:	51 11       	cpse	r21, r1
    5acc:	0c 94 47 20 	jmp	0x408e	; 0x408e <__fp_szero>
    5ad0:	a0 c0       	rjmp	.+320    	; 0x5c12 <__fp_nan>

00005ad2 <__divsf3x>:
    5ad2:	0e 94 24 20 	call	0x4048	; 0x4048 <__fp_split3>
    5ad6:	88 f3       	brcs	.-30     	; 0x5aba <__divsf3+0x4>

00005ad8 <__divsf3_pse>:
    5ad8:	99 23       	and	r25, r25
    5ada:	b9 f3       	breq	.-18     	; 0x5aca <__divsf3+0x14>
    5adc:	55 23       	and	r21, r21
    5ade:	a1 f3       	breq	.-24     	; 0x5ac8 <__divsf3+0x12>
    5ae0:	95 1b       	sub	r25, r21
    5ae2:	55 0b       	sbc	r21, r21
    5ae4:	bb 27       	eor	r27, r27
    5ae6:	aa 27       	eor	r26, r26
    5ae8:	62 17       	cp	r22, r18
    5aea:	73 07       	cpc	r23, r19
    5aec:	84 07       	cpc	r24, r20
    5aee:	38 f0       	brcs	.+14     	; 0x5afe <__divsf3_pse+0x26>
    5af0:	9f 5f       	subi	r25, 0xFF	; 255
    5af2:	5f 4f       	sbci	r21, 0xFF	; 255
    5af4:	22 0f       	add	r18, r18
    5af6:	33 1f       	adc	r19, r19
    5af8:	44 1f       	adc	r20, r20
    5afa:	aa 1f       	adc	r26, r26
    5afc:	a9 f3       	breq	.-22     	; 0x5ae8 <__divsf3_pse+0x10>
    5afe:	34 d0       	rcall	.+104    	; 0x5b68 <__divsf3_pse+0x90>
    5b00:	0e 2e       	mov	r0, r30
    5b02:	3a f0       	brmi	.+14     	; 0x5b12 <__divsf3_pse+0x3a>
    5b04:	e0 e8       	ldi	r30, 0x80	; 128
    5b06:	31 d0       	rcall	.+98     	; 0x5b6a <__divsf3_pse+0x92>
    5b08:	91 50       	subi	r25, 0x01	; 1
    5b0a:	50 40       	sbci	r21, 0x00	; 0
    5b0c:	e6 95       	lsr	r30
    5b0e:	00 1c       	adc	r0, r0
    5b10:	ca f7       	brpl	.-14     	; 0x5b04 <__divsf3_pse+0x2c>
    5b12:	2a d0       	rcall	.+84     	; 0x5b68 <__divsf3_pse+0x90>
    5b14:	fe 2f       	mov	r31, r30
    5b16:	28 d0       	rcall	.+80     	; 0x5b68 <__divsf3_pse+0x90>
    5b18:	66 0f       	add	r22, r22
    5b1a:	77 1f       	adc	r23, r23
    5b1c:	88 1f       	adc	r24, r24
    5b1e:	bb 1f       	adc	r27, r27
    5b20:	26 17       	cp	r18, r22
    5b22:	37 07       	cpc	r19, r23
    5b24:	48 07       	cpc	r20, r24
    5b26:	ab 07       	cpc	r26, r27
    5b28:	b0 e8       	ldi	r27, 0x80	; 128
    5b2a:	09 f0       	breq	.+2      	; 0x5b2e <__divsf3_pse+0x56>
    5b2c:	bb 0b       	sbc	r27, r27
    5b2e:	80 2d       	mov	r24, r0
    5b30:	bf 01       	movw	r22, r30
    5b32:	ff 27       	eor	r31, r31
    5b34:	93 58       	subi	r25, 0x83	; 131
    5b36:	5f 4f       	sbci	r21, 0xFF	; 255
    5b38:	32 f0       	brmi	.+12     	; 0x5b46 <__divsf3_pse+0x6e>
    5b3a:	9e 3f       	cpi	r25, 0xFE	; 254
    5b3c:	51 05       	cpc	r21, r1
    5b3e:	70 f0       	brcs	.+28     	; 0x5b5c <__divsf3_pse+0x84>
    5b40:	62 c0       	rjmp	.+196    	; 0x5c06 <__fp_inf>
    5b42:	0c 94 47 20 	jmp	0x408e	; 0x408e <__fp_szero>
    5b46:	5f 3f       	cpi	r21, 0xFF	; 255
    5b48:	e4 f3       	brlt	.-8      	; 0x5b42 <__divsf3_pse+0x6a>
    5b4a:	98 3e       	cpi	r25, 0xE8	; 232
    5b4c:	d4 f3       	brlt	.-12     	; 0x5b42 <__divsf3_pse+0x6a>
    5b4e:	86 95       	lsr	r24
    5b50:	77 95       	ror	r23
    5b52:	67 95       	ror	r22
    5b54:	b7 95       	ror	r27
    5b56:	f7 95       	ror	r31
    5b58:	9f 5f       	subi	r25, 0xFF	; 255
    5b5a:	c9 f7       	brne	.-14     	; 0x5b4e <__divsf3_pse+0x76>
    5b5c:	88 0f       	add	r24, r24
    5b5e:	91 1d       	adc	r25, r1
    5b60:	96 95       	lsr	r25
    5b62:	87 95       	ror	r24
    5b64:	97 f9       	bld	r25, 7
    5b66:	08 95       	ret
    5b68:	e1 e0       	ldi	r30, 0x01	; 1
    5b6a:	66 0f       	add	r22, r22
    5b6c:	77 1f       	adc	r23, r23
    5b6e:	88 1f       	adc	r24, r24
    5b70:	bb 1f       	adc	r27, r27
    5b72:	62 17       	cp	r22, r18
    5b74:	73 07       	cpc	r23, r19
    5b76:	84 07       	cpc	r24, r20
    5b78:	ba 07       	cpc	r27, r26
    5b7a:	20 f0       	brcs	.+8      	; 0x5b84 <__divsf3_pse+0xac>
    5b7c:	62 1b       	sub	r22, r18
    5b7e:	73 0b       	sbc	r23, r19
    5b80:	84 0b       	sbc	r24, r20
    5b82:	ba 0b       	sbc	r27, r26
    5b84:	ee 1f       	adc	r30, r30
    5b86:	88 f7       	brcc	.-30     	; 0x5b6a <__divsf3_pse+0x92>
    5b88:	e0 95       	com	r30
    5b8a:	08 95       	ret

00005b8c <__floatunsisf>:
    5b8c:	e8 94       	clt
    5b8e:	09 c0       	rjmp	.+18     	; 0x5ba2 <__floatsisf+0x12>

00005b90 <__floatsisf>:
    5b90:	97 fb       	bst	r25, 7
    5b92:	3e f4       	brtc	.+14     	; 0x5ba2 <__floatsisf+0x12>
    5b94:	90 95       	com	r25
    5b96:	80 95       	com	r24
    5b98:	70 95       	com	r23
    5b9a:	61 95       	neg	r22
    5b9c:	7f 4f       	sbci	r23, 0xFF	; 255
    5b9e:	8f 4f       	sbci	r24, 0xFF	; 255
    5ba0:	9f 4f       	sbci	r25, 0xFF	; 255
    5ba2:	99 23       	and	r25, r25
    5ba4:	a9 f0       	breq	.+42     	; 0x5bd0 <__floatsisf+0x40>
    5ba6:	f9 2f       	mov	r31, r25
    5ba8:	96 e9       	ldi	r25, 0x96	; 150
    5baa:	bb 27       	eor	r27, r27
    5bac:	93 95       	inc	r25
    5bae:	f6 95       	lsr	r31
    5bb0:	87 95       	ror	r24
    5bb2:	77 95       	ror	r23
    5bb4:	67 95       	ror	r22
    5bb6:	b7 95       	ror	r27
    5bb8:	f1 11       	cpse	r31, r1
    5bba:	f8 cf       	rjmp	.-16     	; 0x5bac <__floatsisf+0x1c>
    5bbc:	fa f4       	brpl	.+62     	; 0x5bfc <__floatsisf+0x6c>
    5bbe:	bb 0f       	add	r27, r27
    5bc0:	11 f4       	brne	.+4      	; 0x5bc6 <__floatsisf+0x36>
    5bc2:	60 ff       	sbrs	r22, 0
    5bc4:	1b c0       	rjmp	.+54     	; 0x5bfc <__floatsisf+0x6c>
    5bc6:	6f 5f       	subi	r22, 0xFF	; 255
    5bc8:	7f 4f       	sbci	r23, 0xFF	; 255
    5bca:	8f 4f       	sbci	r24, 0xFF	; 255
    5bcc:	9f 4f       	sbci	r25, 0xFF	; 255
    5bce:	16 c0       	rjmp	.+44     	; 0x5bfc <__floatsisf+0x6c>
    5bd0:	88 23       	and	r24, r24
    5bd2:	11 f0       	breq	.+4      	; 0x5bd8 <__floatsisf+0x48>
    5bd4:	96 e9       	ldi	r25, 0x96	; 150
    5bd6:	11 c0       	rjmp	.+34     	; 0x5bfa <__floatsisf+0x6a>
    5bd8:	77 23       	and	r23, r23
    5bda:	21 f0       	breq	.+8      	; 0x5be4 <__floatsisf+0x54>
    5bdc:	9e e8       	ldi	r25, 0x8E	; 142
    5bde:	87 2f       	mov	r24, r23
    5be0:	76 2f       	mov	r23, r22
    5be2:	05 c0       	rjmp	.+10     	; 0x5bee <__floatsisf+0x5e>
    5be4:	66 23       	and	r22, r22
    5be6:	71 f0       	breq	.+28     	; 0x5c04 <__floatsisf+0x74>
    5be8:	96 e8       	ldi	r25, 0x86	; 134
    5bea:	86 2f       	mov	r24, r22
    5bec:	70 e0       	ldi	r23, 0x00	; 0
    5bee:	60 e0       	ldi	r22, 0x00	; 0
    5bf0:	2a f0       	brmi	.+10     	; 0x5bfc <__floatsisf+0x6c>
    5bf2:	9a 95       	dec	r25
    5bf4:	66 0f       	add	r22, r22
    5bf6:	77 1f       	adc	r23, r23
    5bf8:	88 1f       	adc	r24, r24
    5bfa:	da f7       	brpl	.-10     	; 0x5bf2 <__floatsisf+0x62>
    5bfc:	88 0f       	add	r24, r24
    5bfe:	96 95       	lsr	r25
    5c00:	87 95       	ror	r24
    5c02:	97 f9       	bld	r25, 7
    5c04:	08 95       	ret

00005c06 <__fp_inf>:
    5c06:	97 f9       	bld	r25, 7
    5c08:	9f 67       	ori	r25, 0x7F	; 127
    5c0a:	80 e8       	ldi	r24, 0x80	; 128
    5c0c:	70 e0       	ldi	r23, 0x00	; 0
    5c0e:	60 e0       	ldi	r22, 0x00	; 0
    5c10:	08 95       	ret

00005c12 <__fp_nan>:
    5c12:	9f ef       	ldi	r25, 0xFF	; 255
    5c14:	80 ec       	ldi	r24, 0xC0	; 192
    5c16:	08 95       	ret

00005c18 <__fp_pscA>:
    5c18:	00 24       	eor	r0, r0
    5c1a:	0a 94       	dec	r0
    5c1c:	16 16       	cp	r1, r22
    5c1e:	17 06       	cpc	r1, r23
    5c20:	18 06       	cpc	r1, r24
    5c22:	09 06       	cpc	r0, r25
    5c24:	08 95       	ret

00005c26 <__fp_pscB>:
    5c26:	00 24       	eor	r0, r0
    5c28:	0a 94       	dec	r0
    5c2a:	12 16       	cp	r1, r18
    5c2c:	13 06       	cpc	r1, r19
    5c2e:	14 06       	cpc	r1, r20
    5c30:	05 06       	cpc	r0, r21
    5c32:	08 95       	ret

00005c34 <__fp_round>:
    5c34:	09 2e       	mov	r0, r25
    5c36:	03 94       	inc	r0
    5c38:	00 0c       	add	r0, r0
    5c3a:	11 f4       	brne	.+4      	; 0x5c40 <__fp_round+0xc>
    5c3c:	88 23       	and	r24, r24
    5c3e:	52 f0       	brmi	.+20     	; 0x5c54 <__fp_round+0x20>
    5c40:	bb 0f       	add	r27, r27
    5c42:	40 f4       	brcc	.+16     	; 0x5c54 <__fp_round+0x20>
    5c44:	bf 2b       	or	r27, r31
    5c46:	11 f4       	brne	.+4      	; 0x5c4c <__fp_round+0x18>
    5c48:	60 ff       	sbrs	r22, 0
    5c4a:	04 c0       	rjmp	.+8      	; 0x5c54 <__fp_round+0x20>
    5c4c:	6f 5f       	subi	r22, 0xFF	; 255
    5c4e:	7f 4f       	sbci	r23, 0xFF	; 255
    5c50:	8f 4f       	sbci	r24, 0xFF	; 255
    5c52:	9f 4f       	sbci	r25, 0xFF	; 255
    5c54:	08 95       	ret

00005c56 <__mulsf3>:
    5c56:	0c d0       	rcall	.+24     	; 0x5c70 <__mulsf3x>
    5c58:	ed cf       	rjmp	.-38     	; 0x5c34 <__fp_round>
    5c5a:	de df       	rcall	.-68     	; 0x5c18 <__fp_pscA>
    5c5c:	28 f0       	brcs	.+10     	; 0x5c68 <__mulsf3+0x12>
    5c5e:	e3 df       	rcall	.-58     	; 0x5c26 <__fp_pscB>
    5c60:	18 f0       	brcs	.+6      	; 0x5c68 <__mulsf3+0x12>
    5c62:	95 23       	and	r25, r21
    5c64:	09 f0       	breq	.+2      	; 0x5c68 <__mulsf3+0x12>
    5c66:	cf cf       	rjmp	.-98     	; 0x5c06 <__fp_inf>
    5c68:	d4 cf       	rjmp	.-88     	; 0x5c12 <__fp_nan>
    5c6a:	11 24       	eor	r1, r1
    5c6c:	0c 94 47 20 	jmp	0x408e	; 0x408e <__fp_szero>

00005c70 <__mulsf3x>:
    5c70:	0e 94 24 20 	call	0x4048	; 0x4048 <__fp_split3>
    5c74:	90 f3       	brcs	.-28     	; 0x5c5a <__mulsf3+0x4>

00005c76 <__mulsf3_pse>:
    5c76:	95 9f       	mul	r25, r21
    5c78:	c1 f3       	breq	.-16     	; 0x5c6a <__mulsf3+0x14>
    5c7a:	95 0f       	add	r25, r21
    5c7c:	50 e0       	ldi	r21, 0x00	; 0
    5c7e:	55 1f       	adc	r21, r21
    5c80:	62 9f       	mul	r22, r18
    5c82:	f0 01       	movw	r30, r0
    5c84:	72 9f       	mul	r23, r18
    5c86:	bb 27       	eor	r27, r27
    5c88:	f0 0d       	add	r31, r0
    5c8a:	b1 1d       	adc	r27, r1
    5c8c:	63 9f       	mul	r22, r19
    5c8e:	aa 27       	eor	r26, r26
    5c90:	f0 0d       	add	r31, r0
    5c92:	b1 1d       	adc	r27, r1
    5c94:	aa 1f       	adc	r26, r26
    5c96:	64 9f       	mul	r22, r20
    5c98:	66 27       	eor	r22, r22
    5c9a:	b0 0d       	add	r27, r0
    5c9c:	a1 1d       	adc	r26, r1
    5c9e:	66 1f       	adc	r22, r22
    5ca0:	82 9f       	mul	r24, r18
    5ca2:	22 27       	eor	r18, r18
    5ca4:	b0 0d       	add	r27, r0
    5ca6:	a1 1d       	adc	r26, r1
    5ca8:	62 1f       	adc	r22, r18
    5caa:	73 9f       	mul	r23, r19
    5cac:	b0 0d       	add	r27, r0
    5cae:	a1 1d       	adc	r26, r1
    5cb0:	62 1f       	adc	r22, r18
    5cb2:	83 9f       	mul	r24, r19
    5cb4:	a0 0d       	add	r26, r0
    5cb6:	61 1d       	adc	r22, r1
    5cb8:	22 1f       	adc	r18, r18
    5cba:	74 9f       	mul	r23, r20
    5cbc:	33 27       	eor	r19, r19
    5cbe:	a0 0d       	add	r26, r0
    5cc0:	61 1d       	adc	r22, r1
    5cc2:	23 1f       	adc	r18, r19
    5cc4:	84 9f       	mul	r24, r20
    5cc6:	60 0d       	add	r22, r0
    5cc8:	21 1d       	adc	r18, r1
    5cca:	82 2f       	mov	r24, r18
    5ccc:	76 2f       	mov	r23, r22
    5cce:	6a 2f       	mov	r22, r26
    5cd0:	11 24       	eor	r1, r1
    5cd2:	9f 57       	subi	r25, 0x7F	; 127
    5cd4:	50 40       	sbci	r21, 0x00	; 0
    5cd6:	92 f0       	brmi	.+36     	; 0x5cfc <__mulsf3_pse+0x86>
    5cd8:	e9 f0       	breq	.+58     	; 0x5d14 <__mulsf3_pse+0x9e>
    5cda:	88 23       	and	r24, r24
    5cdc:	4a f0       	brmi	.+18     	; 0x5cf0 <__mulsf3_pse+0x7a>
    5cde:	ee 0f       	add	r30, r30
    5ce0:	ff 1f       	adc	r31, r31
    5ce2:	bb 1f       	adc	r27, r27
    5ce4:	66 1f       	adc	r22, r22
    5ce6:	77 1f       	adc	r23, r23
    5ce8:	88 1f       	adc	r24, r24
    5cea:	91 50       	subi	r25, 0x01	; 1
    5cec:	50 40       	sbci	r21, 0x00	; 0
    5cee:	a9 f7       	brne	.-22     	; 0x5cda <__mulsf3_pse+0x64>
    5cf0:	9e 3f       	cpi	r25, 0xFE	; 254
    5cf2:	51 05       	cpc	r21, r1
    5cf4:	78 f0       	brcs	.+30     	; 0x5d14 <__mulsf3_pse+0x9e>
    5cf6:	87 cf       	rjmp	.-242    	; 0x5c06 <__fp_inf>
    5cf8:	0c 94 47 20 	jmp	0x408e	; 0x408e <__fp_szero>
    5cfc:	5f 3f       	cpi	r21, 0xFF	; 255
    5cfe:	e4 f3       	brlt	.-8      	; 0x5cf8 <__mulsf3_pse+0x82>
    5d00:	98 3e       	cpi	r25, 0xE8	; 232
    5d02:	d4 f3       	brlt	.-12     	; 0x5cf8 <__mulsf3_pse+0x82>
    5d04:	86 95       	lsr	r24
    5d06:	77 95       	ror	r23
    5d08:	67 95       	ror	r22
    5d0a:	b7 95       	ror	r27
    5d0c:	f7 95       	ror	r31
    5d0e:	e7 95       	ror	r30
    5d10:	9f 5f       	subi	r25, 0xFF	; 255
    5d12:	c1 f7       	brne	.-16     	; 0x5d04 <__mulsf3_pse+0x8e>
    5d14:	fe 2b       	or	r31, r30
    5d16:	88 0f       	add	r24, r24
    5d18:	91 1d       	adc	r25, r1
    5d1a:	96 95       	lsr	r25
    5d1c:	87 95       	ror	r24
    5d1e:	97 f9       	bld	r25, 7
    5d20:	08 95       	ret

00005d22 <__udivmodsi4>:
    5d22:	a1 e2       	ldi	r26, 0x21	; 33
    5d24:	1a 2e       	mov	r1, r26
    5d26:	aa 1b       	sub	r26, r26
    5d28:	bb 1b       	sub	r27, r27
    5d2a:	fd 01       	movw	r30, r26
    5d2c:	0d c0       	rjmp	.+26     	; 0x5d48 <__udivmodsi4_ep>

00005d2e <__udivmodsi4_loop>:
    5d2e:	aa 1f       	adc	r26, r26
    5d30:	bb 1f       	adc	r27, r27
    5d32:	ee 1f       	adc	r30, r30
    5d34:	ff 1f       	adc	r31, r31
    5d36:	a2 17       	cp	r26, r18
    5d38:	b3 07       	cpc	r27, r19
    5d3a:	e4 07       	cpc	r30, r20
    5d3c:	f5 07       	cpc	r31, r21
    5d3e:	20 f0       	brcs	.+8      	; 0x5d48 <__udivmodsi4_ep>
    5d40:	a2 1b       	sub	r26, r18
    5d42:	b3 0b       	sbc	r27, r19
    5d44:	e4 0b       	sbc	r30, r20
    5d46:	f5 0b       	sbc	r31, r21

00005d48 <__udivmodsi4_ep>:
    5d48:	66 1f       	adc	r22, r22
    5d4a:	77 1f       	adc	r23, r23
    5d4c:	88 1f       	adc	r24, r24
    5d4e:	99 1f       	adc	r25, r25
    5d50:	1a 94       	dec	r1
    5d52:	69 f7       	brne	.-38     	; 0x5d2e <__udivmodsi4_loop>
    5d54:	60 95       	com	r22
    5d56:	70 95       	com	r23
    5d58:	80 95       	com	r24
    5d5a:	90 95       	com	r25
    5d5c:	9b 01       	movw	r18, r22
    5d5e:	ac 01       	movw	r20, r24
    5d60:	bd 01       	movw	r22, r26
    5d62:	cf 01       	movw	r24, r30
    5d64:	08 95       	ret

00005d66 <__tablejump2__>:
    5d66:	ee 0f       	add	r30, r30
    5d68:	ff 1f       	adc	r31, r31
    5d6a:	88 1f       	adc	r24, r24
    5d6c:	8b bf       	out	0x3b, r24	; 59
    5d6e:	07 90       	elpm	r0, Z+
    5d70:	f6 91       	elpm	r31, Z
    5d72:	e0 2d       	mov	r30, r0
    5d74:	19 94       	eijmp

00005d76 <malloc>:
    5d76:	0f 93       	push	r16
    5d78:	1f 93       	push	r17
    5d7a:	cf 93       	push	r28
    5d7c:	df 93       	push	r29
    5d7e:	82 30       	cpi	r24, 0x02	; 2
    5d80:	91 05       	cpc	r25, r1
    5d82:	10 f4       	brcc	.+4      	; 0x5d88 <malloc+0x12>
    5d84:	82 e0       	ldi	r24, 0x02	; 2
    5d86:	90 e0       	ldi	r25, 0x00	; 0
    5d88:	e0 91 cc 18 	lds	r30, 0x18CC	; 0x8018cc <__flp>
    5d8c:	f0 91 cd 18 	lds	r31, 0x18CD	; 0x8018cd <__flp+0x1>
    5d90:	20 e0       	ldi	r18, 0x00	; 0
    5d92:	30 e0       	ldi	r19, 0x00	; 0
    5d94:	a0 e0       	ldi	r26, 0x00	; 0
    5d96:	b0 e0       	ldi	r27, 0x00	; 0
    5d98:	30 97       	sbiw	r30, 0x00	; 0
    5d9a:	19 f1       	breq	.+70     	; 0x5de2 <malloc+0x6c>
    5d9c:	40 81       	ld	r20, Z
    5d9e:	51 81       	ldd	r21, Z+1	; 0x01
    5da0:	02 81       	ldd	r16, Z+2	; 0x02
    5da2:	13 81       	ldd	r17, Z+3	; 0x03
    5da4:	48 17       	cp	r20, r24
    5da6:	59 07       	cpc	r21, r25
    5da8:	c8 f0       	brcs	.+50     	; 0x5ddc <malloc+0x66>
    5daa:	84 17       	cp	r24, r20
    5dac:	95 07       	cpc	r25, r21
    5dae:	69 f4       	brne	.+26     	; 0x5dca <malloc+0x54>
    5db0:	10 97       	sbiw	r26, 0x00	; 0
    5db2:	31 f0       	breq	.+12     	; 0x5dc0 <malloc+0x4a>
    5db4:	12 96       	adiw	r26, 0x02	; 2
    5db6:	0c 93       	st	X, r16
    5db8:	12 97       	sbiw	r26, 0x02	; 2
    5dba:	13 96       	adiw	r26, 0x03	; 3
    5dbc:	1c 93       	st	X, r17
    5dbe:	27 c0       	rjmp	.+78     	; 0x5e0e <malloc+0x98>
    5dc0:	00 93 cc 18 	sts	0x18CC, r16	; 0x8018cc <__flp>
    5dc4:	10 93 cd 18 	sts	0x18CD, r17	; 0x8018cd <__flp+0x1>
    5dc8:	22 c0       	rjmp	.+68     	; 0x5e0e <malloc+0x98>
    5dca:	21 15       	cp	r18, r1
    5dcc:	31 05       	cpc	r19, r1
    5dce:	19 f0       	breq	.+6      	; 0x5dd6 <malloc+0x60>
    5dd0:	42 17       	cp	r20, r18
    5dd2:	53 07       	cpc	r21, r19
    5dd4:	18 f4       	brcc	.+6      	; 0x5ddc <malloc+0x66>
    5dd6:	9a 01       	movw	r18, r20
    5dd8:	bd 01       	movw	r22, r26
    5dda:	ef 01       	movw	r28, r30
    5ddc:	df 01       	movw	r26, r30
    5dde:	f8 01       	movw	r30, r16
    5de0:	db cf       	rjmp	.-74     	; 0x5d98 <malloc+0x22>
    5de2:	21 15       	cp	r18, r1
    5de4:	31 05       	cpc	r19, r1
    5de6:	f9 f0       	breq	.+62     	; 0x5e26 <malloc+0xb0>
    5de8:	28 1b       	sub	r18, r24
    5dea:	39 0b       	sbc	r19, r25
    5dec:	24 30       	cpi	r18, 0x04	; 4
    5dee:	31 05       	cpc	r19, r1
    5df0:	80 f4       	brcc	.+32     	; 0x5e12 <malloc+0x9c>
    5df2:	8a 81       	ldd	r24, Y+2	; 0x02
    5df4:	9b 81       	ldd	r25, Y+3	; 0x03
    5df6:	61 15       	cp	r22, r1
    5df8:	71 05       	cpc	r23, r1
    5dfa:	21 f0       	breq	.+8      	; 0x5e04 <malloc+0x8e>
    5dfc:	fb 01       	movw	r30, r22
    5dfe:	93 83       	std	Z+3, r25	; 0x03
    5e00:	82 83       	std	Z+2, r24	; 0x02
    5e02:	04 c0       	rjmp	.+8      	; 0x5e0c <malloc+0x96>
    5e04:	90 93 cd 18 	sts	0x18CD, r25	; 0x8018cd <__flp+0x1>
    5e08:	80 93 cc 18 	sts	0x18CC, r24	; 0x8018cc <__flp>
    5e0c:	fe 01       	movw	r30, r28
    5e0e:	32 96       	adiw	r30, 0x02	; 2
    5e10:	44 c0       	rjmp	.+136    	; 0x5e9a <malloc+0x124>
    5e12:	fe 01       	movw	r30, r28
    5e14:	e2 0f       	add	r30, r18
    5e16:	f3 1f       	adc	r31, r19
    5e18:	81 93       	st	Z+, r24
    5e1a:	91 93       	st	Z+, r25
    5e1c:	22 50       	subi	r18, 0x02	; 2
    5e1e:	31 09       	sbc	r19, r1
    5e20:	39 83       	std	Y+1, r19	; 0x01
    5e22:	28 83       	st	Y, r18
    5e24:	3a c0       	rjmp	.+116    	; 0x5e9a <malloc+0x124>
    5e26:	20 91 ca 18 	lds	r18, 0x18CA	; 0x8018ca <__brkval>
    5e2a:	30 91 cb 18 	lds	r19, 0x18CB	; 0x8018cb <__brkval+0x1>
    5e2e:	23 2b       	or	r18, r19
    5e30:	41 f4       	brne	.+16     	; 0x5e42 <malloc+0xcc>
    5e32:	20 91 02 02 	lds	r18, 0x0202	; 0x800202 <__malloc_heap_start>
    5e36:	30 91 03 02 	lds	r19, 0x0203	; 0x800203 <__malloc_heap_start+0x1>
    5e3a:	30 93 cb 18 	sts	0x18CB, r19	; 0x8018cb <__brkval+0x1>
    5e3e:	20 93 ca 18 	sts	0x18CA, r18	; 0x8018ca <__brkval>
    5e42:	20 91 00 02 	lds	r18, 0x0200	; 0x800200 <__DATA_REGION_ORIGIN__>
    5e46:	30 91 01 02 	lds	r19, 0x0201	; 0x800201 <__DATA_REGION_ORIGIN__+0x1>
    5e4a:	21 15       	cp	r18, r1
    5e4c:	31 05       	cpc	r19, r1
    5e4e:	41 f4       	brne	.+16     	; 0x5e60 <malloc+0xea>
    5e50:	2d b7       	in	r18, 0x3d	; 61
    5e52:	3e b7       	in	r19, 0x3e	; 62
    5e54:	40 91 04 02 	lds	r20, 0x0204	; 0x800204 <__malloc_margin>
    5e58:	50 91 05 02 	lds	r21, 0x0205	; 0x800205 <__malloc_margin+0x1>
    5e5c:	24 1b       	sub	r18, r20
    5e5e:	35 0b       	sbc	r19, r21
    5e60:	e0 91 ca 18 	lds	r30, 0x18CA	; 0x8018ca <__brkval>
    5e64:	f0 91 cb 18 	lds	r31, 0x18CB	; 0x8018cb <__brkval+0x1>
    5e68:	e2 17       	cp	r30, r18
    5e6a:	f3 07       	cpc	r31, r19
    5e6c:	a0 f4       	brcc	.+40     	; 0x5e96 <malloc+0x120>
    5e6e:	2e 1b       	sub	r18, r30
    5e70:	3f 0b       	sbc	r19, r31
    5e72:	28 17       	cp	r18, r24
    5e74:	39 07       	cpc	r19, r25
    5e76:	78 f0       	brcs	.+30     	; 0x5e96 <malloc+0x120>
    5e78:	ac 01       	movw	r20, r24
    5e7a:	4e 5f       	subi	r20, 0xFE	; 254
    5e7c:	5f 4f       	sbci	r21, 0xFF	; 255
    5e7e:	24 17       	cp	r18, r20
    5e80:	35 07       	cpc	r19, r21
    5e82:	48 f0       	brcs	.+18     	; 0x5e96 <malloc+0x120>
    5e84:	4e 0f       	add	r20, r30
    5e86:	5f 1f       	adc	r21, r31
    5e88:	50 93 cb 18 	sts	0x18CB, r21	; 0x8018cb <__brkval+0x1>
    5e8c:	40 93 ca 18 	sts	0x18CA, r20	; 0x8018ca <__brkval>
    5e90:	81 93       	st	Z+, r24
    5e92:	91 93       	st	Z+, r25
    5e94:	02 c0       	rjmp	.+4      	; 0x5e9a <malloc+0x124>
    5e96:	e0 e0       	ldi	r30, 0x00	; 0
    5e98:	f0 e0       	ldi	r31, 0x00	; 0
    5e9a:	cf 01       	movw	r24, r30
    5e9c:	df 91       	pop	r29
    5e9e:	cf 91       	pop	r28
    5ea0:	1f 91       	pop	r17
    5ea2:	0f 91       	pop	r16
    5ea4:	08 95       	ret

00005ea6 <free>:
    5ea6:	cf 93       	push	r28
    5ea8:	df 93       	push	r29
    5eaa:	00 97       	sbiw	r24, 0x00	; 0
    5eac:	09 f4       	brne	.+2      	; 0x5eb0 <free+0xa>
    5eae:	81 c0       	rjmp	.+258    	; 0x5fb2 <free+0x10c>
    5eb0:	fc 01       	movw	r30, r24
    5eb2:	32 97       	sbiw	r30, 0x02	; 2
    5eb4:	13 82       	std	Z+3, r1	; 0x03
    5eb6:	12 82       	std	Z+2, r1	; 0x02
    5eb8:	a0 91 cc 18 	lds	r26, 0x18CC	; 0x8018cc <__flp>
    5ebc:	b0 91 cd 18 	lds	r27, 0x18CD	; 0x8018cd <__flp+0x1>
    5ec0:	10 97       	sbiw	r26, 0x00	; 0
    5ec2:	81 f4       	brne	.+32     	; 0x5ee4 <free+0x3e>
    5ec4:	20 81       	ld	r18, Z
    5ec6:	31 81       	ldd	r19, Z+1	; 0x01
    5ec8:	82 0f       	add	r24, r18
    5eca:	93 1f       	adc	r25, r19
    5ecc:	20 91 ca 18 	lds	r18, 0x18CA	; 0x8018ca <__brkval>
    5ed0:	30 91 cb 18 	lds	r19, 0x18CB	; 0x8018cb <__brkval+0x1>
    5ed4:	28 17       	cp	r18, r24
    5ed6:	39 07       	cpc	r19, r25
    5ed8:	51 f5       	brne	.+84     	; 0x5f2e <free+0x88>
    5eda:	f0 93 cb 18 	sts	0x18CB, r31	; 0x8018cb <__brkval+0x1>
    5ede:	e0 93 ca 18 	sts	0x18CA, r30	; 0x8018ca <__brkval>
    5ee2:	67 c0       	rjmp	.+206    	; 0x5fb2 <free+0x10c>
    5ee4:	ed 01       	movw	r28, r26
    5ee6:	20 e0       	ldi	r18, 0x00	; 0
    5ee8:	30 e0       	ldi	r19, 0x00	; 0
    5eea:	ce 17       	cp	r28, r30
    5eec:	df 07       	cpc	r29, r31
    5eee:	40 f4       	brcc	.+16     	; 0x5f00 <free+0x5a>
    5ef0:	4a 81       	ldd	r20, Y+2	; 0x02
    5ef2:	5b 81       	ldd	r21, Y+3	; 0x03
    5ef4:	9e 01       	movw	r18, r28
    5ef6:	41 15       	cp	r20, r1
    5ef8:	51 05       	cpc	r21, r1
    5efa:	f1 f0       	breq	.+60     	; 0x5f38 <free+0x92>
    5efc:	ea 01       	movw	r28, r20
    5efe:	f5 cf       	rjmp	.-22     	; 0x5eea <free+0x44>
    5f00:	d3 83       	std	Z+3, r29	; 0x03
    5f02:	c2 83       	std	Z+2, r28	; 0x02
    5f04:	40 81       	ld	r20, Z
    5f06:	51 81       	ldd	r21, Z+1	; 0x01
    5f08:	84 0f       	add	r24, r20
    5f0a:	95 1f       	adc	r25, r21
    5f0c:	c8 17       	cp	r28, r24
    5f0e:	d9 07       	cpc	r29, r25
    5f10:	59 f4       	brne	.+22     	; 0x5f28 <free+0x82>
    5f12:	88 81       	ld	r24, Y
    5f14:	99 81       	ldd	r25, Y+1	; 0x01
    5f16:	84 0f       	add	r24, r20
    5f18:	95 1f       	adc	r25, r21
    5f1a:	02 96       	adiw	r24, 0x02	; 2
    5f1c:	91 83       	std	Z+1, r25	; 0x01
    5f1e:	80 83       	st	Z, r24
    5f20:	8a 81       	ldd	r24, Y+2	; 0x02
    5f22:	9b 81       	ldd	r25, Y+3	; 0x03
    5f24:	93 83       	std	Z+3, r25	; 0x03
    5f26:	82 83       	std	Z+2, r24	; 0x02
    5f28:	21 15       	cp	r18, r1
    5f2a:	31 05       	cpc	r19, r1
    5f2c:	29 f4       	brne	.+10     	; 0x5f38 <free+0x92>
    5f2e:	f0 93 cd 18 	sts	0x18CD, r31	; 0x8018cd <__flp+0x1>
    5f32:	e0 93 cc 18 	sts	0x18CC, r30	; 0x8018cc <__flp>
    5f36:	3d c0       	rjmp	.+122    	; 0x5fb2 <free+0x10c>
    5f38:	e9 01       	movw	r28, r18
    5f3a:	fb 83       	std	Y+3, r31	; 0x03
    5f3c:	ea 83       	std	Y+2, r30	; 0x02
    5f3e:	49 91       	ld	r20, Y+
    5f40:	59 91       	ld	r21, Y+
    5f42:	c4 0f       	add	r28, r20
    5f44:	d5 1f       	adc	r29, r21
    5f46:	ec 17       	cp	r30, r28
    5f48:	fd 07       	cpc	r31, r29
    5f4a:	61 f4       	brne	.+24     	; 0x5f64 <free+0xbe>
    5f4c:	80 81       	ld	r24, Z
    5f4e:	91 81       	ldd	r25, Z+1	; 0x01
    5f50:	84 0f       	add	r24, r20
    5f52:	95 1f       	adc	r25, r21
    5f54:	02 96       	adiw	r24, 0x02	; 2
    5f56:	e9 01       	movw	r28, r18
    5f58:	99 83       	std	Y+1, r25	; 0x01
    5f5a:	88 83       	st	Y, r24
    5f5c:	82 81       	ldd	r24, Z+2	; 0x02
    5f5e:	93 81       	ldd	r25, Z+3	; 0x03
    5f60:	9b 83       	std	Y+3, r25	; 0x03
    5f62:	8a 83       	std	Y+2, r24	; 0x02
    5f64:	e0 e0       	ldi	r30, 0x00	; 0
    5f66:	f0 e0       	ldi	r31, 0x00	; 0
    5f68:	12 96       	adiw	r26, 0x02	; 2
    5f6a:	8d 91       	ld	r24, X+
    5f6c:	9c 91       	ld	r25, X
    5f6e:	13 97       	sbiw	r26, 0x03	; 3
    5f70:	00 97       	sbiw	r24, 0x00	; 0
    5f72:	19 f0       	breq	.+6      	; 0x5f7a <free+0xd4>
    5f74:	fd 01       	movw	r30, r26
    5f76:	dc 01       	movw	r26, r24
    5f78:	f7 cf       	rjmp	.-18     	; 0x5f68 <free+0xc2>
    5f7a:	8d 91       	ld	r24, X+
    5f7c:	9c 91       	ld	r25, X
    5f7e:	11 97       	sbiw	r26, 0x01	; 1
    5f80:	9d 01       	movw	r18, r26
    5f82:	2e 5f       	subi	r18, 0xFE	; 254
    5f84:	3f 4f       	sbci	r19, 0xFF	; 255
    5f86:	82 0f       	add	r24, r18
    5f88:	93 1f       	adc	r25, r19
    5f8a:	20 91 ca 18 	lds	r18, 0x18CA	; 0x8018ca <__brkval>
    5f8e:	30 91 cb 18 	lds	r19, 0x18CB	; 0x8018cb <__brkval+0x1>
    5f92:	28 17       	cp	r18, r24
    5f94:	39 07       	cpc	r19, r25
    5f96:	69 f4       	brne	.+26     	; 0x5fb2 <free+0x10c>
    5f98:	30 97       	sbiw	r30, 0x00	; 0
    5f9a:	29 f4       	brne	.+10     	; 0x5fa6 <free+0x100>
    5f9c:	10 92 cd 18 	sts	0x18CD, r1	; 0x8018cd <__flp+0x1>
    5fa0:	10 92 cc 18 	sts	0x18CC, r1	; 0x8018cc <__flp>
    5fa4:	02 c0       	rjmp	.+4      	; 0x5faa <free+0x104>
    5fa6:	13 82       	std	Z+3, r1	; 0x03
    5fa8:	12 82       	std	Z+2, r1	; 0x02
    5faa:	b0 93 cb 18 	sts	0x18CB, r27	; 0x8018cb <__brkval+0x1>
    5fae:	a0 93 ca 18 	sts	0x18CA, r26	; 0x8018ca <__brkval>
    5fb2:	df 91       	pop	r29
    5fb4:	cf 91       	pop	r28
    5fb6:	08 95       	ret

00005fb8 <abort>:
    5fb8:	81 e0       	ldi	r24, 0x01	; 1
    5fba:	90 e0       	ldi	r25, 0x00	; 0
    5fbc:	f8 94       	cli
    5fbe:	7d c3       	rjmp	.+1786   	; 0x66ba <_exit>

00005fc0 <memcpy>:
    5fc0:	fb 01       	movw	r30, r22
    5fc2:	dc 01       	movw	r26, r24
    5fc4:	02 c0       	rjmp	.+4      	; 0x5fca <memcpy+0xa>
    5fc6:	01 90       	ld	r0, Z+
    5fc8:	0d 92       	st	X+, r0
    5fca:	41 50       	subi	r20, 0x01	; 1
    5fcc:	50 40       	sbci	r21, 0x00	; 0
    5fce:	d8 f7       	brcc	.-10     	; 0x5fc6 <memcpy+0x6>
    5fd0:	08 95       	ret

00005fd2 <memset>:
    5fd2:	dc 01       	movw	r26, r24
    5fd4:	01 c0       	rjmp	.+2      	; 0x5fd8 <memset+0x6>
    5fd6:	6d 93       	st	X+, r22
    5fd8:	41 50       	subi	r20, 0x01	; 1
    5fda:	50 40       	sbci	r21, 0x00	; 0
    5fdc:	e0 f7       	brcc	.-8      	; 0x5fd6 <memset+0x4>
    5fde:	08 95       	ret

00005fe0 <strcasestr>:
    5fe0:	fb 01       	movw	r30, r22
    5fe2:	51 91       	ld	r21, Z+
    5fe4:	55 23       	and	r21, r21
    5fe6:	b1 f0       	breq	.+44     	; 0x6014 <strcasestr+0x34>
    5fe8:	bf 01       	movw	r22, r30
    5fea:	dc 01       	movw	r26, r24
    5fec:	05 2e       	mov	r0, r21
    5fee:	4d 91       	ld	r20, X+
    5ff0:	44 23       	and	r20, r20
    5ff2:	69 f0       	breq	.+26     	; 0x600e <strcasestr+0x2e>
    5ff4:	10 d0       	rcall	.+32     	; 0x6016 <strcasestr+0x36>
    5ff6:	d9 f7       	brne	.-10     	; 0x5fee <strcasestr+0xe>
    5ff8:	cd 01       	movw	r24, r26
    5ffa:	01 90       	ld	r0, Z+
    5ffc:	00 20       	and	r0, r0
    5ffe:	49 f0       	breq	.+18     	; 0x6012 <strcasestr+0x32>
    6000:	4d 91       	ld	r20, X+
    6002:	41 11       	cpse	r20, r1
    6004:	08 d0       	rcall	.+16     	; 0x6016 <strcasestr+0x36>
    6006:	c9 f3       	breq	.-14     	; 0x5ffa <strcasestr+0x1a>
    6008:	fb 01       	movw	r30, r22
    600a:	41 11       	cpse	r20, r1
    600c:	ee cf       	rjmp	.-36     	; 0x5fea <strcasestr+0xa>
    600e:	81 e0       	ldi	r24, 0x01	; 1
    6010:	90 e0       	ldi	r25, 0x00	; 0
    6012:	01 97       	sbiw	r24, 0x01	; 1
    6014:	08 95       	ret
    6016:	40 25       	eor	r20, r0
    6018:	39 f0       	breq	.+14     	; 0x6028 <strcasestr+0x48>
    601a:	40 32       	cpi	r20, 0x20	; 32
    601c:	29 f4       	brne	.+10     	; 0x6028 <strcasestr+0x48>
    601e:	40 29       	or	r20, r0
    6020:	4b 57       	subi	r20, 0x7B	; 123
    6022:	46 5e       	subi	r20, 0xE6	; 230
    6024:	08 f0       	brcs	.+2      	; 0x6028 <strcasestr+0x48>
    6026:	18 94       	sez
    6028:	08 95       	ret

0000602a <strcat>:
    602a:	fb 01       	movw	r30, r22
    602c:	dc 01       	movw	r26, r24
    602e:	0d 90       	ld	r0, X+
    6030:	00 20       	and	r0, r0
    6032:	e9 f7       	brne	.-6      	; 0x602e <strcat+0x4>
    6034:	11 97       	sbiw	r26, 0x01	; 1
    6036:	01 90       	ld	r0, Z+
    6038:	0d 92       	st	X+, r0
    603a:	00 20       	and	r0, r0
    603c:	e1 f7       	brne	.-8      	; 0x6036 <strcat+0xc>
    603e:	08 95       	ret

00006040 <strcpy>:
    6040:	fb 01       	movw	r30, r22
    6042:	dc 01       	movw	r26, r24
    6044:	01 90       	ld	r0, Z+
    6046:	0d 92       	st	X+, r0
    6048:	00 20       	and	r0, r0
    604a:	e1 f7       	brne	.-8      	; 0x6044 <strcpy+0x4>
    604c:	08 95       	ret

0000604e <strncasecmp>:
    604e:	fb 01       	movw	r30, r22
    6050:	dc 01       	movw	r26, r24
    6052:	41 50       	subi	r20, 0x01	; 1
    6054:	50 40       	sbci	r21, 0x00	; 0
    6056:	88 f0       	brcs	.+34     	; 0x607a <strncasecmp+0x2c>
    6058:	8d 91       	ld	r24, X+
    605a:	81 34       	cpi	r24, 0x41	; 65
    605c:	1c f0       	brlt	.+6      	; 0x6064 <strncasecmp+0x16>
    605e:	8b 35       	cpi	r24, 0x5B	; 91
    6060:	0c f4       	brge	.+2      	; 0x6064 <strncasecmp+0x16>
    6062:	80 5e       	subi	r24, 0xE0	; 224
    6064:	61 91       	ld	r22, Z+
    6066:	61 34       	cpi	r22, 0x41	; 65
    6068:	1c f0       	brlt	.+6      	; 0x6070 <strncasecmp+0x22>
    606a:	6b 35       	cpi	r22, 0x5B	; 91
    606c:	0c f4       	brge	.+2      	; 0x6070 <strncasecmp+0x22>
    606e:	60 5e       	subi	r22, 0xE0	; 224
    6070:	86 1b       	sub	r24, r22
    6072:	61 11       	cpse	r22, r1
    6074:	71 f3       	breq	.-36     	; 0x6052 <strncasecmp+0x4>
    6076:	99 0b       	sbc	r25, r25
    6078:	08 95       	ret
    607a:	88 1b       	sub	r24, r24
    607c:	fc cf       	rjmp	.-8      	; 0x6076 <strncasecmp+0x28>

0000607e <printf>:
    607e:	cf 93       	push	r28
    6080:	df 93       	push	r29
    6082:	cd b7       	in	r28, 0x3d	; 61
    6084:	de b7       	in	r29, 0x3e	; 62
    6086:	ae 01       	movw	r20, r28
    6088:	4a 5f       	subi	r20, 0xFA	; 250
    608a:	5f 4f       	sbci	r21, 0xFF	; 255
    608c:	fa 01       	movw	r30, r20
    608e:	61 91       	ld	r22, Z+
    6090:	71 91       	ld	r23, Z+
    6092:	af 01       	movw	r20, r30
    6094:	80 91 d0 18 	lds	r24, 0x18D0	; 0x8018d0 <__iob+0x2>
    6098:	90 91 d1 18 	lds	r25, 0x18D1	; 0x8018d1 <__iob+0x3>
    609c:	61 d0       	rcall	.+194    	; 0x6160 <vfprintf>
    609e:	df 91       	pop	r29
    60a0:	cf 91       	pop	r28
    60a2:	08 95       	ret

000060a4 <puts>:
    60a4:	0f 93       	push	r16
    60a6:	1f 93       	push	r17
    60a8:	cf 93       	push	r28
    60aa:	df 93       	push	r29
    60ac:	e0 91 d0 18 	lds	r30, 0x18D0	; 0x8018d0 <__iob+0x2>
    60b0:	f0 91 d1 18 	lds	r31, 0x18D1	; 0x8018d1 <__iob+0x3>
    60b4:	23 81       	ldd	r18, Z+3	; 0x03
    60b6:	21 ff       	sbrs	r18, 1
    60b8:	1b c0       	rjmp	.+54     	; 0x60f0 <puts+0x4c>
    60ba:	8c 01       	movw	r16, r24
    60bc:	d0 e0       	ldi	r29, 0x00	; 0
    60be:	c0 e0       	ldi	r28, 0x00	; 0
    60c0:	f8 01       	movw	r30, r16
    60c2:	81 91       	ld	r24, Z+
    60c4:	8f 01       	movw	r16, r30
    60c6:	60 91 d0 18 	lds	r22, 0x18D0	; 0x8018d0 <__iob+0x2>
    60ca:	70 91 d1 18 	lds	r23, 0x18D1	; 0x8018d1 <__iob+0x3>
    60ce:	db 01       	movw	r26, r22
    60d0:	18 96       	adiw	r26, 0x08	; 8
    60d2:	ed 91       	ld	r30, X+
    60d4:	fc 91       	ld	r31, X
    60d6:	19 97       	sbiw	r26, 0x09	; 9
    60d8:	88 23       	and	r24, r24
    60da:	31 f0       	breq	.+12     	; 0x60e8 <puts+0x44>
    60dc:	19 95       	eicall
    60de:	89 2b       	or	r24, r25
    60e0:	79 f3       	breq	.-34     	; 0x60c0 <puts+0x1c>
    60e2:	df ef       	ldi	r29, 0xFF	; 255
    60e4:	cf ef       	ldi	r28, 0xFF	; 255
    60e6:	ec cf       	rjmp	.-40     	; 0x60c0 <puts+0x1c>
    60e8:	8a e0       	ldi	r24, 0x0A	; 10
    60ea:	19 95       	eicall
    60ec:	89 2b       	or	r24, r25
    60ee:	19 f0       	breq	.+6      	; 0x60f6 <puts+0x52>
    60f0:	8f ef       	ldi	r24, 0xFF	; 255
    60f2:	9f ef       	ldi	r25, 0xFF	; 255
    60f4:	02 c0       	rjmp	.+4      	; 0x60fa <puts+0x56>
    60f6:	8d 2f       	mov	r24, r29
    60f8:	9c 2f       	mov	r25, r28
    60fa:	df 91       	pop	r29
    60fc:	cf 91       	pop	r28
    60fe:	1f 91       	pop	r17
    6100:	0f 91       	pop	r16
    6102:	08 95       	ret

00006104 <sprintf>:
    6104:	0f 93       	push	r16
    6106:	1f 93       	push	r17
    6108:	cf 93       	push	r28
    610a:	df 93       	push	r29
    610c:	cd b7       	in	r28, 0x3d	; 61
    610e:	de b7       	in	r29, 0x3e	; 62
    6110:	2e 97       	sbiw	r28, 0x0e	; 14
    6112:	0f b6       	in	r0, 0x3f	; 63
    6114:	f8 94       	cli
    6116:	de bf       	out	0x3e, r29	; 62
    6118:	0f be       	out	0x3f, r0	; 63
    611a:	cd bf       	out	0x3d, r28	; 61
    611c:	0e 89       	ldd	r16, Y+22	; 0x16
    611e:	1f 89       	ldd	r17, Y+23	; 0x17
    6120:	86 e0       	ldi	r24, 0x06	; 6
    6122:	8c 83       	std	Y+4, r24	; 0x04
    6124:	1a 83       	std	Y+2, r17	; 0x02
    6126:	09 83       	std	Y+1, r16	; 0x01
    6128:	8f ef       	ldi	r24, 0xFF	; 255
    612a:	9f e7       	ldi	r25, 0x7F	; 127
    612c:	9e 83       	std	Y+6, r25	; 0x06
    612e:	8d 83       	std	Y+5, r24	; 0x05
    6130:	ae 01       	movw	r20, r28
    6132:	46 5e       	subi	r20, 0xE6	; 230
    6134:	5f 4f       	sbci	r21, 0xFF	; 255
    6136:	68 8d       	ldd	r22, Y+24	; 0x18
    6138:	79 8d       	ldd	r23, Y+25	; 0x19
    613a:	ce 01       	movw	r24, r28
    613c:	01 96       	adiw	r24, 0x01	; 1
    613e:	10 d0       	rcall	.+32     	; 0x6160 <vfprintf>
    6140:	ef 81       	ldd	r30, Y+7	; 0x07
    6142:	f8 85       	ldd	r31, Y+8	; 0x08
    6144:	e0 0f       	add	r30, r16
    6146:	f1 1f       	adc	r31, r17
    6148:	10 82       	st	Z, r1
    614a:	2e 96       	adiw	r28, 0x0e	; 14
    614c:	0f b6       	in	r0, 0x3f	; 63
    614e:	f8 94       	cli
    6150:	de bf       	out	0x3e, r29	; 62
    6152:	0f be       	out	0x3f, r0	; 63
    6154:	cd bf       	out	0x3d, r28	; 61
    6156:	df 91       	pop	r29
    6158:	cf 91       	pop	r28
    615a:	1f 91       	pop	r17
    615c:	0f 91       	pop	r16
    615e:	08 95       	ret

00006160 <vfprintf>:
    6160:	2f 92       	push	r2
    6162:	3f 92       	push	r3
    6164:	4f 92       	push	r4
    6166:	5f 92       	push	r5
    6168:	6f 92       	push	r6
    616a:	7f 92       	push	r7
    616c:	8f 92       	push	r8
    616e:	9f 92       	push	r9
    6170:	af 92       	push	r10
    6172:	bf 92       	push	r11
    6174:	cf 92       	push	r12
    6176:	df 92       	push	r13
    6178:	ef 92       	push	r14
    617a:	ff 92       	push	r15
    617c:	0f 93       	push	r16
    617e:	1f 93       	push	r17
    6180:	cf 93       	push	r28
    6182:	df 93       	push	r29
    6184:	cd b7       	in	r28, 0x3d	; 61
    6186:	de b7       	in	r29, 0x3e	; 62
    6188:	2b 97       	sbiw	r28, 0x0b	; 11
    618a:	0f b6       	in	r0, 0x3f	; 63
    618c:	f8 94       	cli
    618e:	de bf       	out	0x3e, r29	; 62
    6190:	0f be       	out	0x3f, r0	; 63
    6192:	cd bf       	out	0x3d, r28	; 61
    6194:	6c 01       	movw	r12, r24
    6196:	7b 01       	movw	r14, r22
    6198:	8a 01       	movw	r16, r20
    619a:	fc 01       	movw	r30, r24
    619c:	17 82       	std	Z+7, r1	; 0x07
    619e:	16 82       	std	Z+6, r1	; 0x06
    61a0:	83 81       	ldd	r24, Z+3	; 0x03
    61a2:	81 ff       	sbrs	r24, 1
    61a4:	bf c1       	rjmp	.+894    	; 0x6524 <vfprintf+0x3c4>
    61a6:	ce 01       	movw	r24, r28
    61a8:	01 96       	adiw	r24, 0x01	; 1
    61aa:	3c 01       	movw	r6, r24
    61ac:	f6 01       	movw	r30, r12
    61ae:	93 81       	ldd	r25, Z+3	; 0x03
    61b0:	f7 01       	movw	r30, r14
    61b2:	93 fd       	sbrc	r25, 3
    61b4:	85 91       	lpm	r24, Z+
    61b6:	93 ff       	sbrs	r25, 3
    61b8:	81 91       	ld	r24, Z+
    61ba:	7f 01       	movw	r14, r30
    61bc:	88 23       	and	r24, r24
    61be:	09 f4       	brne	.+2      	; 0x61c2 <vfprintf+0x62>
    61c0:	ad c1       	rjmp	.+858    	; 0x651c <vfprintf+0x3bc>
    61c2:	85 32       	cpi	r24, 0x25	; 37
    61c4:	39 f4       	brne	.+14     	; 0x61d4 <vfprintf+0x74>
    61c6:	93 fd       	sbrc	r25, 3
    61c8:	85 91       	lpm	r24, Z+
    61ca:	93 ff       	sbrs	r25, 3
    61cc:	81 91       	ld	r24, Z+
    61ce:	7f 01       	movw	r14, r30
    61d0:	85 32       	cpi	r24, 0x25	; 37
    61d2:	21 f4       	brne	.+8      	; 0x61dc <vfprintf+0x7c>
    61d4:	b6 01       	movw	r22, r12
    61d6:	90 e0       	ldi	r25, 0x00	; 0
    61d8:	d6 d1       	rcall	.+940    	; 0x6586 <fputc>
    61da:	e8 cf       	rjmp	.-48     	; 0x61ac <vfprintf+0x4c>
    61dc:	91 2c       	mov	r9, r1
    61de:	21 2c       	mov	r2, r1
    61e0:	31 2c       	mov	r3, r1
    61e2:	ff e1       	ldi	r31, 0x1F	; 31
    61e4:	f3 15       	cp	r31, r3
    61e6:	d8 f0       	brcs	.+54     	; 0x621e <vfprintf+0xbe>
    61e8:	8b 32       	cpi	r24, 0x2B	; 43
    61ea:	79 f0       	breq	.+30     	; 0x620a <vfprintf+0xaa>
    61ec:	38 f4       	brcc	.+14     	; 0x61fc <vfprintf+0x9c>
    61ee:	80 32       	cpi	r24, 0x20	; 32
    61f0:	79 f0       	breq	.+30     	; 0x6210 <vfprintf+0xb0>
    61f2:	83 32       	cpi	r24, 0x23	; 35
    61f4:	a1 f4       	brne	.+40     	; 0x621e <vfprintf+0xbe>
    61f6:	23 2d       	mov	r18, r3
    61f8:	20 61       	ori	r18, 0x10	; 16
    61fa:	1d c0       	rjmp	.+58     	; 0x6236 <vfprintf+0xd6>
    61fc:	8d 32       	cpi	r24, 0x2D	; 45
    61fe:	61 f0       	breq	.+24     	; 0x6218 <vfprintf+0xb8>
    6200:	80 33       	cpi	r24, 0x30	; 48
    6202:	69 f4       	brne	.+26     	; 0x621e <vfprintf+0xbe>
    6204:	23 2d       	mov	r18, r3
    6206:	21 60       	ori	r18, 0x01	; 1
    6208:	16 c0       	rjmp	.+44     	; 0x6236 <vfprintf+0xd6>
    620a:	83 2d       	mov	r24, r3
    620c:	82 60       	ori	r24, 0x02	; 2
    620e:	38 2e       	mov	r3, r24
    6210:	e3 2d       	mov	r30, r3
    6212:	e4 60       	ori	r30, 0x04	; 4
    6214:	3e 2e       	mov	r3, r30
    6216:	2a c0       	rjmp	.+84     	; 0x626c <vfprintf+0x10c>
    6218:	f3 2d       	mov	r31, r3
    621a:	f8 60       	ori	r31, 0x08	; 8
    621c:	1d c0       	rjmp	.+58     	; 0x6258 <vfprintf+0xf8>
    621e:	37 fc       	sbrc	r3, 7
    6220:	2d c0       	rjmp	.+90     	; 0x627c <vfprintf+0x11c>
    6222:	20 ed       	ldi	r18, 0xD0	; 208
    6224:	28 0f       	add	r18, r24
    6226:	2a 30       	cpi	r18, 0x0A	; 10
    6228:	40 f0       	brcs	.+16     	; 0x623a <vfprintf+0xda>
    622a:	8e 32       	cpi	r24, 0x2E	; 46
    622c:	b9 f4       	brne	.+46     	; 0x625c <vfprintf+0xfc>
    622e:	36 fc       	sbrc	r3, 6
    6230:	75 c1       	rjmp	.+746    	; 0x651c <vfprintf+0x3bc>
    6232:	23 2d       	mov	r18, r3
    6234:	20 64       	ori	r18, 0x40	; 64
    6236:	32 2e       	mov	r3, r18
    6238:	19 c0       	rjmp	.+50     	; 0x626c <vfprintf+0x10c>
    623a:	36 fe       	sbrs	r3, 6
    623c:	06 c0       	rjmp	.+12     	; 0x624a <vfprintf+0xea>
    623e:	8a e0       	ldi	r24, 0x0A	; 10
    6240:	98 9e       	mul	r9, r24
    6242:	20 0d       	add	r18, r0
    6244:	11 24       	eor	r1, r1
    6246:	92 2e       	mov	r9, r18
    6248:	11 c0       	rjmp	.+34     	; 0x626c <vfprintf+0x10c>
    624a:	ea e0       	ldi	r30, 0x0A	; 10
    624c:	2e 9e       	mul	r2, r30
    624e:	20 0d       	add	r18, r0
    6250:	11 24       	eor	r1, r1
    6252:	22 2e       	mov	r2, r18
    6254:	f3 2d       	mov	r31, r3
    6256:	f0 62       	ori	r31, 0x20	; 32
    6258:	3f 2e       	mov	r3, r31
    625a:	08 c0       	rjmp	.+16     	; 0x626c <vfprintf+0x10c>
    625c:	8c 36       	cpi	r24, 0x6C	; 108
    625e:	21 f4       	brne	.+8      	; 0x6268 <vfprintf+0x108>
    6260:	83 2d       	mov	r24, r3
    6262:	80 68       	ori	r24, 0x80	; 128
    6264:	38 2e       	mov	r3, r24
    6266:	02 c0       	rjmp	.+4      	; 0x626c <vfprintf+0x10c>
    6268:	88 36       	cpi	r24, 0x68	; 104
    626a:	41 f4       	brne	.+16     	; 0x627c <vfprintf+0x11c>
    626c:	f7 01       	movw	r30, r14
    626e:	93 fd       	sbrc	r25, 3
    6270:	85 91       	lpm	r24, Z+
    6272:	93 ff       	sbrs	r25, 3
    6274:	81 91       	ld	r24, Z+
    6276:	7f 01       	movw	r14, r30
    6278:	81 11       	cpse	r24, r1
    627a:	b3 cf       	rjmp	.-154    	; 0x61e2 <vfprintf+0x82>
    627c:	98 2f       	mov	r25, r24
    627e:	9f 7d       	andi	r25, 0xDF	; 223
    6280:	95 54       	subi	r25, 0x45	; 69
    6282:	93 30       	cpi	r25, 0x03	; 3
    6284:	28 f4       	brcc	.+10     	; 0x6290 <vfprintf+0x130>
    6286:	0c 5f       	subi	r16, 0xFC	; 252
    6288:	1f 4f       	sbci	r17, 0xFF	; 255
    628a:	9f e3       	ldi	r25, 0x3F	; 63
    628c:	99 83       	std	Y+1, r25	; 0x01
    628e:	0d c0       	rjmp	.+26     	; 0x62aa <vfprintf+0x14a>
    6290:	83 36       	cpi	r24, 0x63	; 99
    6292:	31 f0       	breq	.+12     	; 0x62a0 <vfprintf+0x140>
    6294:	83 37       	cpi	r24, 0x73	; 115
    6296:	71 f0       	breq	.+28     	; 0x62b4 <vfprintf+0x154>
    6298:	83 35       	cpi	r24, 0x53	; 83
    629a:	09 f0       	breq	.+2      	; 0x629e <vfprintf+0x13e>
    629c:	55 c0       	rjmp	.+170    	; 0x6348 <vfprintf+0x1e8>
    629e:	20 c0       	rjmp	.+64     	; 0x62e0 <vfprintf+0x180>
    62a0:	f8 01       	movw	r30, r16
    62a2:	80 81       	ld	r24, Z
    62a4:	89 83       	std	Y+1, r24	; 0x01
    62a6:	0e 5f       	subi	r16, 0xFE	; 254
    62a8:	1f 4f       	sbci	r17, 0xFF	; 255
    62aa:	88 24       	eor	r8, r8
    62ac:	83 94       	inc	r8
    62ae:	91 2c       	mov	r9, r1
    62b0:	53 01       	movw	r10, r6
    62b2:	12 c0       	rjmp	.+36     	; 0x62d8 <vfprintf+0x178>
    62b4:	28 01       	movw	r4, r16
    62b6:	f2 e0       	ldi	r31, 0x02	; 2
    62b8:	4f 0e       	add	r4, r31
    62ba:	51 1c       	adc	r5, r1
    62bc:	f8 01       	movw	r30, r16
    62be:	a0 80       	ld	r10, Z
    62c0:	b1 80       	ldd	r11, Z+1	; 0x01
    62c2:	36 fe       	sbrs	r3, 6
    62c4:	03 c0       	rjmp	.+6      	; 0x62cc <vfprintf+0x16c>
    62c6:	69 2d       	mov	r22, r9
    62c8:	70 e0       	ldi	r23, 0x00	; 0
    62ca:	02 c0       	rjmp	.+4      	; 0x62d0 <vfprintf+0x170>
    62cc:	6f ef       	ldi	r22, 0xFF	; 255
    62ce:	7f ef       	ldi	r23, 0xFF	; 255
    62d0:	c5 01       	movw	r24, r10
    62d2:	4e d1       	rcall	.+668    	; 0x6570 <strnlen>
    62d4:	4c 01       	movw	r8, r24
    62d6:	82 01       	movw	r16, r4
    62d8:	f3 2d       	mov	r31, r3
    62da:	ff 77       	andi	r31, 0x7F	; 127
    62dc:	3f 2e       	mov	r3, r31
    62de:	15 c0       	rjmp	.+42     	; 0x630a <vfprintf+0x1aa>
    62e0:	28 01       	movw	r4, r16
    62e2:	22 e0       	ldi	r18, 0x02	; 2
    62e4:	42 0e       	add	r4, r18
    62e6:	51 1c       	adc	r5, r1
    62e8:	f8 01       	movw	r30, r16
    62ea:	a0 80       	ld	r10, Z
    62ec:	b1 80       	ldd	r11, Z+1	; 0x01
    62ee:	36 fe       	sbrs	r3, 6
    62f0:	03 c0       	rjmp	.+6      	; 0x62f8 <vfprintf+0x198>
    62f2:	69 2d       	mov	r22, r9
    62f4:	70 e0       	ldi	r23, 0x00	; 0
    62f6:	02 c0       	rjmp	.+4      	; 0x62fc <vfprintf+0x19c>
    62f8:	6f ef       	ldi	r22, 0xFF	; 255
    62fa:	7f ef       	ldi	r23, 0xFF	; 255
    62fc:	c5 01       	movw	r24, r10
    62fe:	2d d1       	rcall	.+602    	; 0x655a <strnlen_P>
    6300:	4c 01       	movw	r8, r24
    6302:	f3 2d       	mov	r31, r3
    6304:	f0 68       	ori	r31, 0x80	; 128
    6306:	3f 2e       	mov	r3, r31
    6308:	82 01       	movw	r16, r4
    630a:	33 fc       	sbrc	r3, 3
    630c:	19 c0       	rjmp	.+50     	; 0x6340 <vfprintf+0x1e0>
    630e:	82 2d       	mov	r24, r2
    6310:	90 e0       	ldi	r25, 0x00	; 0
    6312:	88 16       	cp	r8, r24
    6314:	99 06       	cpc	r9, r25
    6316:	a0 f4       	brcc	.+40     	; 0x6340 <vfprintf+0x1e0>
    6318:	b6 01       	movw	r22, r12
    631a:	80 e2       	ldi	r24, 0x20	; 32
    631c:	90 e0       	ldi	r25, 0x00	; 0
    631e:	33 d1       	rcall	.+614    	; 0x6586 <fputc>
    6320:	2a 94       	dec	r2
    6322:	f5 cf       	rjmp	.-22     	; 0x630e <vfprintf+0x1ae>
    6324:	f5 01       	movw	r30, r10
    6326:	37 fc       	sbrc	r3, 7
    6328:	85 91       	lpm	r24, Z+
    632a:	37 fe       	sbrs	r3, 7
    632c:	81 91       	ld	r24, Z+
    632e:	5f 01       	movw	r10, r30
    6330:	b6 01       	movw	r22, r12
    6332:	90 e0       	ldi	r25, 0x00	; 0
    6334:	28 d1       	rcall	.+592    	; 0x6586 <fputc>
    6336:	21 10       	cpse	r2, r1
    6338:	2a 94       	dec	r2
    633a:	21 e0       	ldi	r18, 0x01	; 1
    633c:	82 1a       	sub	r8, r18
    633e:	91 08       	sbc	r9, r1
    6340:	81 14       	cp	r8, r1
    6342:	91 04       	cpc	r9, r1
    6344:	79 f7       	brne	.-34     	; 0x6324 <vfprintf+0x1c4>
    6346:	e1 c0       	rjmp	.+450    	; 0x650a <vfprintf+0x3aa>
    6348:	84 36       	cpi	r24, 0x64	; 100
    634a:	11 f0       	breq	.+4      	; 0x6350 <vfprintf+0x1f0>
    634c:	89 36       	cpi	r24, 0x69	; 105
    634e:	39 f5       	brne	.+78     	; 0x639e <vfprintf+0x23e>
    6350:	f8 01       	movw	r30, r16
    6352:	37 fe       	sbrs	r3, 7
    6354:	07 c0       	rjmp	.+14     	; 0x6364 <vfprintf+0x204>
    6356:	60 81       	ld	r22, Z
    6358:	71 81       	ldd	r23, Z+1	; 0x01
    635a:	82 81       	ldd	r24, Z+2	; 0x02
    635c:	93 81       	ldd	r25, Z+3	; 0x03
    635e:	0c 5f       	subi	r16, 0xFC	; 252
    6360:	1f 4f       	sbci	r17, 0xFF	; 255
    6362:	08 c0       	rjmp	.+16     	; 0x6374 <vfprintf+0x214>
    6364:	60 81       	ld	r22, Z
    6366:	71 81       	ldd	r23, Z+1	; 0x01
    6368:	07 2e       	mov	r0, r23
    636a:	00 0c       	add	r0, r0
    636c:	88 0b       	sbc	r24, r24
    636e:	99 0b       	sbc	r25, r25
    6370:	0e 5f       	subi	r16, 0xFE	; 254
    6372:	1f 4f       	sbci	r17, 0xFF	; 255
    6374:	f3 2d       	mov	r31, r3
    6376:	ff 76       	andi	r31, 0x6F	; 111
    6378:	3f 2e       	mov	r3, r31
    637a:	97 ff       	sbrs	r25, 7
    637c:	09 c0       	rjmp	.+18     	; 0x6390 <vfprintf+0x230>
    637e:	90 95       	com	r25
    6380:	80 95       	com	r24
    6382:	70 95       	com	r23
    6384:	61 95       	neg	r22
    6386:	7f 4f       	sbci	r23, 0xFF	; 255
    6388:	8f 4f       	sbci	r24, 0xFF	; 255
    638a:	9f 4f       	sbci	r25, 0xFF	; 255
    638c:	f0 68       	ori	r31, 0x80	; 128
    638e:	3f 2e       	mov	r3, r31
    6390:	2a e0       	ldi	r18, 0x0A	; 10
    6392:	30 e0       	ldi	r19, 0x00	; 0
    6394:	a3 01       	movw	r20, r6
    6396:	33 d1       	rcall	.+614    	; 0x65fe <__ultoa_invert>
    6398:	88 2e       	mov	r8, r24
    639a:	86 18       	sub	r8, r6
    639c:	44 c0       	rjmp	.+136    	; 0x6426 <vfprintf+0x2c6>
    639e:	85 37       	cpi	r24, 0x75	; 117
    63a0:	31 f4       	brne	.+12     	; 0x63ae <vfprintf+0x24e>
    63a2:	23 2d       	mov	r18, r3
    63a4:	2f 7e       	andi	r18, 0xEF	; 239
    63a6:	b2 2e       	mov	r11, r18
    63a8:	2a e0       	ldi	r18, 0x0A	; 10
    63aa:	30 e0       	ldi	r19, 0x00	; 0
    63ac:	25 c0       	rjmp	.+74     	; 0x63f8 <vfprintf+0x298>
    63ae:	93 2d       	mov	r25, r3
    63b0:	99 7f       	andi	r25, 0xF9	; 249
    63b2:	b9 2e       	mov	r11, r25
    63b4:	8f 36       	cpi	r24, 0x6F	; 111
    63b6:	c1 f0       	breq	.+48     	; 0x63e8 <vfprintf+0x288>
    63b8:	18 f4       	brcc	.+6      	; 0x63c0 <vfprintf+0x260>
    63ba:	88 35       	cpi	r24, 0x58	; 88
    63bc:	79 f0       	breq	.+30     	; 0x63dc <vfprintf+0x27c>
    63be:	ae c0       	rjmp	.+348    	; 0x651c <vfprintf+0x3bc>
    63c0:	80 37       	cpi	r24, 0x70	; 112
    63c2:	19 f0       	breq	.+6      	; 0x63ca <vfprintf+0x26a>
    63c4:	88 37       	cpi	r24, 0x78	; 120
    63c6:	21 f0       	breq	.+8      	; 0x63d0 <vfprintf+0x270>
    63c8:	a9 c0       	rjmp	.+338    	; 0x651c <vfprintf+0x3bc>
    63ca:	e9 2f       	mov	r30, r25
    63cc:	e0 61       	ori	r30, 0x10	; 16
    63ce:	be 2e       	mov	r11, r30
    63d0:	b4 fe       	sbrs	r11, 4
    63d2:	0d c0       	rjmp	.+26     	; 0x63ee <vfprintf+0x28e>
    63d4:	fb 2d       	mov	r31, r11
    63d6:	f4 60       	ori	r31, 0x04	; 4
    63d8:	bf 2e       	mov	r11, r31
    63da:	09 c0       	rjmp	.+18     	; 0x63ee <vfprintf+0x28e>
    63dc:	34 fe       	sbrs	r3, 4
    63de:	0a c0       	rjmp	.+20     	; 0x63f4 <vfprintf+0x294>
    63e0:	29 2f       	mov	r18, r25
    63e2:	26 60       	ori	r18, 0x06	; 6
    63e4:	b2 2e       	mov	r11, r18
    63e6:	06 c0       	rjmp	.+12     	; 0x63f4 <vfprintf+0x294>
    63e8:	28 e0       	ldi	r18, 0x08	; 8
    63ea:	30 e0       	ldi	r19, 0x00	; 0
    63ec:	05 c0       	rjmp	.+10     	; 0x63f8 <vfprintf+0x298>
    63ee:	20 e1       	ldi	r18, 0x10	; 16
    63f0:	30 e0       	ldi	r19, 0x00	; 0
    63f2:	02 c0       	rjmp	.+4      	; 0x63f8 <vfprintf+0x298>
    63f4:	20 e1       	ldi	r18, 0x10	; 16
    63f6:	32 e0       	ldi	r19, 0x02	; 2
    63f8:	f8 01       	movw	r30, r16
    63fa:	b7 fe       	sbrs	r11, 7
    63fc:	07 c0       	rjmp	.+14     	; 0x640c <vfprintf+0x2ac>
    63fe:	60 81       	ld	r22, Z
    6400:	71 81       	ldd	r23, Z+1	; 0x01
    6402:	82 81       	ldd	r24, Z+2	; 0x02
    6404:	93 81       	ldd	r25, Z+3	; 0x03
    6406:	0c 5f       	subi	r16, 0xFC	; 252
    6408:	1f 4f       	sbci	r17, 0xFF	; 255
    640a:	06 c0       	rjmp	.+12     	; 0x6418 <vfprintf+0x2b8>
    640c:	60 81       	ld	r22, Z
    640e:	71 81       	ldd	r23, Z+1	; 0x01
    6410:	80 e0       	ldi	r24, 0x00	; 0
    6412:	90 e0       	ldi	r25, 0x00	; 0
    6414:	0e 5f       	subi	r16, 0xFE	; 254
    6416:	1f 4f       	sbci	r17, 0xFF	; 255
    6418:	a3 01       	movw	r20, r6
    641a:	f1 d0       	rcall	.+482    	; 0x65fe <__ultoa_invert>
    641c:	88 2e       	mov	r8, r24
    641e:	86 18       	sub	r8, r6
    6420:	fb 2d       	mov	r31, r11
    6422:	ff 77       	andi	r31, 0x7F	; 127
    6424:	3f 2e       	mov	r3, r31
    6426:	36 fe       	sbrs	r3, 6
    6428:	0d c0       	rjmp	.+26     	; 0x6444 <vfprintf+0x2e4>
    642a:	23 2d       	mov	r18, r3
    642c:	2e 7f       	andi	r18, 0xFE	; 254
    642e:	a2 2e       	mov	r10, r18
    6430:	89 14       	cp	r8, r9
    6432:	58 f4       	brcc	.+22     	; 0x644a <vfprintf+0x2ea>
    6434:	34 fe       	sbrs	r3, 4
    6436:	0b c0       	rjmp	.+22     	; 0x644e <vfprintf+0x2ee>
    6438:	32 fc       	sbrc	r3, 2
    643a:	09 c0       	rjmp	.+18     	; 0x644e <vfprintf+0x2ee>
    643c:	83 2d       	mov	r24, r3
    643e:	8e 7e       	andi	r24, 0xEE	; 238
    6440:	a8 2e       	mov	r10, r24
    6442:	05 c0       	rjmp	.+10     	; 0x644e <vfprintf+0x2ee>
    6444:	b8 2c       	mov	r11, r8
    6446:	a3 2c       	mov	r10, r3
    6448:	03 c0       	rjmp	.+6      	; 0x6450 <vfprintf+0x2f0>
    644a:	b8 2c       	mov	r11, r8
    644c:	01 c0       	rjmp	.+2      	; 0x6450 <vfprintf+0x2f0>
    644e:	b9 2c       	mov	r11, r9
    6450:	a4 fe       	sbrs	r10, 4
    6452:	0f c0       	rjmp	.+30     	; 0x6472 <vfprintf+0x312>
    6454:	fe 01       	movw	r30, r28
    6456:	e8 0d       	add	r30, r8
    6458:	f1 1d       	adc	r31, r1
    645a:	80 81       	ld	r24, Z
    645c:	80 33       	cpi	r24, 0x30	; 48
    645e:	21 f4       	brne	.+8      	; 0x6468 <vfprintf+0x308>
    6460:	9a 2d       	mov	r25, r10
    6462:	99 7e       	andi	r25, 0xE9	; 233
    6464:	a9 2e       	mov	r10, r25
    6466:	09 c0       	rjmp	.+18     	; 0x647a <vfprintf+0x31a>
    6468:	a2 fe       	sbrs	r10, 2
    646a:	06 c0       	rjmp	.+12     	; 0x6478 <vfprintf+0x318>
    646c:	b3 94       	inc	r11
    646e:	b3 94       	inc	r11
    6470:	04 c0       	rjmp	.+8      	; 0x647a <vfprintf+0x31a>
    6472:	8a 2d       	mov	r24, r10
    6474:	86 78       	andi	r24, 0x86	; 134
    6476:	09 f0       	breq	.+2      	; 0x647a <vfprintf+0x31a>
    6478:	b3 94       	inc	r11
    647a:	a3 fc       	sbrc	r10, 3
    647c:	10 c0       	rjmp	.+32     	; 0x649e <vfprintf+0x33e>
    647e:	a0 fe       	sbrs	r10, 0
    6480:	06 c0       	rjmp	.+12     	; 0x648e <vfprintf+0x32e>
    6482:	b2 14       	cp	r11, r2
    6484:	80 f4       	brcc	.+32     	; 0x64a6 <vfprintf+0x346>
    6486:	28 0c       	add	r2, r8
    6488:	92 2c       	mov	r9, r2
    648a:	9b 18       	sub	r9, r11
    648c:	0d c0       	rjmp	.+26     	; 0x64a8 <vfprintf+0x348>
    648e:	b2 14       	cp	r11, r2
    6490:	58 f4       	brcc	.+22     	; 0x64a8 <vfprintf+0x348>
    6492:	b6 01       	movw	r22, r12
    6494:	80 e2       	ldi	r24, 0x20	; 32
    6496:	90 e0       	ldi	r25, 0x00	; 0
    6498:	76 d0       	rcall	.+236    	; 0x6586 <fputc>
    649a:	b3 94       	inc	r11
    649c:	f8 cf       	rjmp	.-16     	; 0x648e <vfprintf+0x32e>
    649e:	b2 14       	cp	r11, r2
    64a0:	18 f4       	brcc	.+6      	; 0x64a8 <vfprintf+0x348>
    64a2:	2b 18       	sub	r2, r11
    64a4:	02 c0       	rjmp	.+4      	; 0x64aa <vfprintf+0x34a>
    64a6:	98 2c       	mov	r9, r8
    64a8:	21 2c       	mov	r2, r1
    64aa:	a4 fe       	sbrs	r10, 4
    64ac:	0f c0       	rjmp	.+30     	; 0x64cc <vfprintf+0x36c>
    64ae:	b6 01       	movw	r22, r12
    64b0:	80 e3       	ldi	r24, 0x30	; 48
    64b2:	90 e0       	ldi	r25, 0x00	; 0
    64b4:	68 d0       	rcall	.+208    	; 0x6586 <fputc>
    64b6:	a2 fe       	sbrs	r10, 2
    64b8:	16 c0       	rjmp	.+44     	; 0x64e6 <vfprintf+0x386>
    64ba:	a1 fc       	sbrc	r10, 1
    64bc:	03 c0       	rjmp	.+6      	; 0x64c4 <vfprintf+0x364>
    64be:	88 e7       	ldi	r24, 0x78	; 120
    64c0:	90 e0       	ldi	r25, 0x00	; 0
    64c2:	02 c0       	rjmp	.+4      	; 0x64c8 <vfprintf+0x368>
    64c4:	88 e5       	ldi	r24, 0x58	; 88
    64c6:	90 e0       	ldi	r25, 0x00	; 0
    64c8:	b6 01       	movw	r22, r12
    64ca:	0c c0       	rjmp	.+24     	; 0x64e4 <vfprintf+0x384>
    64cc:	8a 2d       	mov	r24, r10
    64ce:	86 78       	andi	r24, 0x86	; 134
    64d0:	51 f0       	breq	.+20     	; 0x64e6 <vfprintf+0x386>
    64d2:	a1 fe       	sbrs	r10, 1
    64d4:	02 c0       	rjmp	.+4      	; 0x64da <vfprintf+0x37a>
    64d6:	8b e2       	ldi	r24, 0x2B	; 43
    64d8:	01 c0       	rjmp	.+2      	; 0x64dc <vfprintf+0x37c>
    64da:	80 e2       	ldi	r24, 0x20	; 32
    64dc:	a7 fc       	sbrc	r10, 7
    64de:	8d e2       	ldi	r24, 0x2D	; 45
    64e0:	b6 01       	movw	r22, r12
    64e2:	90 e0       	ldi	r25, 0x00	; 0
    64e4:	50 d0       	rcall	.+160    	; 0x6586 <fputc>
    64e6:	89 14       	cp	r8, r9
    64e8:	30 f4       	brcc	.+12     	; 0x64f6 <vfprintf+0x396>
    64ea:	b6 01       	movw	r22, r12
    64ec:	80 e3       	ldi	r24, 0x30	; 48
    64ee:	90 e0       	ldi	r25, 0x00	; 0
    64f0:	4a d0       	rcall	.+148    	; 0x6586 <fputc>
    64f2:	9a 94       	dec	r9
    64f4:	f8 cf       	rjmp	.-16     	; 0x64e6 <vfprintf+0x386>
    64f6:	8a 94       	dec	r8
    64f8:	f3 01       	movw	r30, r6
    64fa:	e8 0d       	add	r30, r8
    64fc:	f1 1d       	adc	r31, r1
    64fe:	80 81       	ld	r24, Z
    6500:	b6 01       	movw	r22, r12
    6502:	90 e0       	ldi	r25, 0x00	; 0
    6504:	40 d0       	rcall	.+128    	; 0x6586 <fputc>
    6506:	81 10       	cpse	r8, r1
    6508:	f6 cf       	rjmp	.-20     	; 0x64f6 <vfprintf+0x396>
    650a:	22 20       	and	r2, r2
    650c:	09 f4       	brne	.+2      	; 0x6510 <vfprintf+0x3b0>
    650e:	4e ce       	rjmp	.-868    	; 0x61ac <vfprintf+0x4c>
    6510:	b6 01       	movw	r22, r12
    6512:	80 e2       	ldi	r24, 0x20	; 32
    6514:	90 e0       	ldi	r25, 0x00	; 0
    6516:	37 d0       	rcall	.+110    	; 0x6586 <fputc>
    6518:	2a 94       	dec	r2
    651a:	f7 cf       	rjmp	.-18     	; 0x650a <vfprintf+0x3aa>
    651c:	f6 01       	movw	r30, r12
    651e:	86 81       	ldd	r24, Z+6	; 0x06
    6520:	97 81       	ldd	r25, Z+7	; 0x07
    6522:	02 c0       	rjmp	.+4      	; 0x6528 <vfprintf+0x3c8>
    6524:	8f ef       	ldi	r24, 0xFF	; 255
    6526:	9f ef       	ldi	r25, 0xFF	; 255
    6528:	2b 96       	adiw	r28, 0x0b	; 11
    652a:	0f b6       	in	r0, 0x3f	; 63
    652c:	f8 94       	cli
    652e:	de bf       	out	0x3e, r29	; 62
    6530:	0f be       	out	0x3f, r0	; 63
    6532:	cd bf       	out	0x3d, r28	; 61
    6534:	df 91       	pop	r29
    6536:	cf 91       	pop	r28
    6538:	1f 91       	pop	r17
    653a:	0f 91       	pop	r16
    653c:	ff 90       	pop	r15
    653e:	ef 90       	pop	r14
    6540:	df 90       	pop	r13
    6542:	cf 90       	pop	r12
    6544:	bf 90       	pop	r11
    6546:	af 90       	pop	r10
    6548:	9f 90       	pop	r9
    654a:	8f 90       	pop	r8
    654c:	7f 90       	pop	r7
    654e:	6f 90       	pop	r6
    6550:	5f 90       	pop	r5
    6552:	4f 90       	pop	r4
    6554:	3f 90       	pop	r3
    6556:	2f 90       	pop	r2
    6558:	08 95       	ret

0000655a <strnlen_P>:
    655a:	fc 01       	movw	r30, r24
    655c:	05 90       	lpm	r0, Z+
    655e:	61 50       	subi	r22, 0x01	; 1
    6560:	70 40       	sbci	r23, 0x00	; 0
    6562:	01 10       	cpse	r0, r1
    6564:	d8 f7       	brcc	.-10     	; 0x655c <strnlen_P+0x2>
    6566:	80 95       	com	r24
    6568:	90 95       	com	r25
    656a:	8e 0f       	add	r24, r30
    656c:	9f 1f       	adc	r25, r31
    656e:	08 95       	ret

00006570 <strnlen>:
    6570:	fc 01       	movw	r30, r24
    6572:	61 50       	subi	r22, 0x01	; 1
    6574:	70 40       	sbci	r23, 0x00	; 0
    6576:	01 90       	ld	r0, Z+
    6578:	01 10       	cpse	r0, r1
    657a:	d8 f7       	brcc	.-10     	; 0x6572 <strnlen+0x2>
    657c:	80 95       	com	r24
    657e:	90 95       	com	r25
    6580:	8e 0f       	add	r24, r30
    6582:	9f 1f       	adc	r25, r31
    6584:	08 95       	ret

00006586 <fputc>:
    6586:	0f 93       	push	r16
    6588:	1f 93       	push	r17
    658a:	cf 93       	push	r28
    658c:	df 93       	push	r29
    658e:	fb 01       	movw	r30, r22
    6590:	23 81       	ldd	r18, Z+3	; 0x03
    6592:	21 fd       	sbrc	r18, 1
    6594:	03 c0       	rjmp	.+6      	; 0x659c <fputc+0x16>
    6596:	8f ef       	ldi	r24, 0xFF	; 255
    6598:	9f ef       	ldi	r25, 0xFF	; 255
    659a:	2c c0       	rjmp	.+88     	; 0x65f4 <fputc+0x6e>
    659c:	22 ff       	sbrs	r18, 2
    659e:	16 c0       	rjmp	.+44     	; 0x65cc <fputc+0x46>
    65a0:	46 81       	ldd	r20, Z+6	; 0x06
    65a2:	57 81       	ldd	r21, Z+7	; 0x07
    65a4:	24 81       	ldd	r18, Z+4	; 0x04
    65a6:	35 81       	ldd	r19, Z+5	; 0x05
    65a8:	42 17       	cp	r20, r18
    65aa:	53 07       	cpc	r21, r19
    65ac:	44 f4       	brge	.+16     	; 0x65be <fputc+0x38>
    65ae:	a0 81       	ld	r26, Z
    65b0:	b1 81       	ldd	r27, Z+1	; 0x01
    65b2:	9d 01       	movw	r18, r26
    65b4:	2f 5f       	subi	r18, 0xFF	; 255
    65b6:	3f 4f       	sbci	r19, 0xFF	; 255
    65b8:	31 83       	std	Z+1, r19	; 0x01
    65ba:	20 83       	st	Z, r18
    65bc:	8c 93       	st	X, r24
    65be:	26 81       	ldd	r18, Z+6	; 0x06
    65c0:	37 81       	ldd	r19, Z+7	; 0x07
    65c2:	2f 5f       	subi	r18, 0xFF	; 255
    65c4:	3f 4f       	sbci	r19, 0xFF	; 255
    65c6:	37 83       	std	Z+7, r19	; 0x07
    65c8:	26 83       	std	Z+6, r18	; 0x06
    65ca:	14 c0       	rjmp	.+40     	; 0x65f4 <fputc+0x6e>
    65cc:	8b 01       	movw	r16, r22
    65ce:	ec 01       	movw	r28, r24
    65d0:	fb 01       	movw	r30, r22
    65d2:	00 84       	ldd	r0, Z+8	; 0x08
    65d4:	f1 85       	ldd	r31, Z+9	; 0x09
    65d6:	e0 2d       	mov	r30, r0
    65d8:	19 95       	eicall
    65da:	89 2b       	or	r24, r25
    65dc:	e1 f6       	brne	.-72     	; 0x6596 <fputc+0x10>
    65de:	d8 01       	movw	r26, r16
    65e0:	16 96       	adiw	r26, 0x06	; 6
    65e2:	8d 91       	ld	r24, X+
    65e4:	9c 91       	ld	r25, X
    65e6:	17 97       	sbiw	r26, 0x07	; 7
    65e8:	01 96       	adiw	r24, 0x01	; 1
    65ea:	17 96       	adiw	r26, 0x07	; 7
    65ec:	9c 93       	st	X, r25
    65ee:	8e 93       	st	-X, r24
    65f0:	16 97       	sbiw	r26, 0x06	; 6
    65f2:	ce 01       	movw	r24, r28
    65f4:	df 91       	pop	r29
    65f6:	cf 91       	pop	r28
    65f8:	1f 91       	pop	r17
    65fa:	0f 91       	pop	r16
    65fc:	08 95       	ret

000065fe <__ultoa_invert>:
    65fe:	fa 01       	movw	r30, r20
    6600:	aa 27       	eor	r26, r26
    6602:	28 30       	cpi	r18, 0x08	; 8
    6604:	51 f1       	breq	.+84     	; 0x665a <__ultoa_invert+0x5c>
    6606:	20 31       	cpi	r18, 0x10	; 16
    6608:	81 f1       	breq	.+96     	; 0x666a <__ultoa_invert+0x6c>
    660a:	e8 94       	clt
    660c:	6f 93       	push	r22
    660e:	6e 7f       	andi	r22, 0xFE	; 254
    6610:	6e 5f       	subi	r22, 0xFE	; 254
    6612:	7f 4f       	sbci	r23, 0xFF	; 255
    6614:	8f 4f       	sbci	r24, 0xFF	; 255
    6616:	9f 4f       	sbci	r25, 0xFF	; 255
    6618:	af 4f       	sbci	r26, 0xFF	; 255
    661a:	b1 e0       	ldi	r27, 0x01	; 1
    661c:	3e d0       	rcall	.+124    	; 0x669a <__ultoa_invert+0x9c>
    661e:	b4 e0       	ldi	r27, 0x04	; 4
    6620:	3c d0       	rcall	.+120    	; 0x669a <__ultoa_invert+0x9c>
    6622:	67 0f       	add	r22, r23
    6624:	78 1f       	adc	r23, r24
    6626:	89 1f       	adc	r24, r25
    6628:	9a 1f       	adc	r25, r26
    662a:	a1 1d       	adc	r26, r1
    662c:	68 0f       	add	r22, r24
    662e:	79 1f       	adc	r23, r25
    6630:	8a 1f       	adc	r24, r26
    6632:	91 1d       	adc	r25, r1
    6634:	a1 1d       	adc	r26, r1
    6636:	6a 0f       	add	r22, r26
    6638:	71 1d       	adc	r23, r1
    663a:	81 1d       	adc	r24, r1
    663c:	91 1d       	adc	r25, r1
    663e:	a1 1d       	adc	r26, r1
    6640:	20 d0       	rcall	.+64     	; 0x6682 <__ultoa_invert+0x84>
    6642:	09 f4       	brne	.+2      	; 0x6646 <__ultoa_invert+0x48>
    6644:	68 94       	set
    6646:	3f 91       	pop	r19
    6648:	2a e0       	ldi	r18, 0x0A	; 10
    664a:	26 9f       	mul	r18, r22
    664c:	11 24       	eor	r1, r1
    664e:	30 19       	sub	r19, r0
    6650:	30 5d       	subi	r19, 0xD0	; 208
    6652:	31 93       	st	Z+, r19
    6654:	de f6       	brtc	.-74     	; 0x660c <__ultoa_invert+0xe>
    6656:	cf 01       	movw	r24, r30
    6658:	08 95       	ret
    665a:	46 2f       	mov	r20, r22
    665c:	47 70       	andi	r20, 0x07	; 7
    665e:	40 5d       	subi	r20, 0xD0	; 208
    6660:	41 93       	st	Z+, r20
    6662:	b3 e0       	ldi	r27, 0x03	; 3
    6664:	0f d0       	rcall	.+30     	; 0x6684 <__ultoa_invert+0x86>
    6666:	c9 f7       	brne	.-14     	; 0x665a <__ultoa_invert+0x5c>
    6668:	f6 cf       	rjmp	.-20     	; 0x6656 <__ultoa_invert+0x58>
    666a:	46 2f       	mov	r20, r22
    666c:	4f 70       	andi	r20, 0x0F	; 15
    666e:	40 5d       	subi	r20, 0xD0	; 208
    6670:	4a 33       	cpi	r20, 0x3A	; 58
    6672:	18 f0       	brcs	.+6      	; 0x667a <__ultoa_invert+0x7c>
    6674:	49 5d       	subi	r20, 0xD9	; 217
    6676:	31 fd       	sbrc	r19, 1
    6678:	40 52       	subi	r20, 0x20	; 32
    667a:	41 93       	st	Z+, r20
    667c:	02 d0       	rcall	.+4      	; 0x6682 <__ultoa_invert+0x84>
    667e:	a9 f7       	brne	.-22     	; 0x666a <__ultoa_invert+0x6c>
    6680:	ea cf       	rjmp	.-44     	; 0x6656 <__ultoa_invert+0x58>
    6682:	b4 e0       	ldi	r27, 0x04	; 4
    6684:	a6 95       	lsr	r26
    6686:	97 95       	ror	r25
    6688:	87 95       	ror	r24
    668a:	77 95       	ror	r23
    668c:	67 95       	ror	r22
    668e:	ba 95       	dec	r27
    6690:	c9 f7       	brne	.-14     	; 0x6684 <__ultoa_invert+0x86>
    6692:	00 97       	sbiw	r24, 0x00	; 0
    6694:	61 05       	cpc	r22, r1
    6696:	71 05       	cpc	r23, r1
    6698:	08 95       	ret
    669a:	9b 01       	movw	r18, r22
    669c:	ac 01       	movw	r20, r24
    669e:	0a 2e       	mov	r0, r26
    66a0:	06 94       	lsr	r0
    66a2:	57 95       	ror	r21
    66a4:	47 95       	ror	r20
    66a6:	37 95       	ror	r19
    66a8:	27 95       	ror	r18
    66aa:	ba 95       	dec	r27
    66ac:	c9 f7       	brne	.-14     	; 0x66a0 <__ultoa_invert+0xa2>
    66ae:	62 0f       	add	r22, r18
    66b0:	73 1f       	adc	r23, r19
    66b2:	84 1f       	adc	r24, r20
    66b4:	95 1f       	adc	r25, r21
    66b6:	a0 1d       	adc	r26, r0
    66b8:	08 95       	ret

000066ba <_exit>:
    66ba:	f8 94       	cli

000066bc <__stop_program>:
    66bc:	ff cf       	rjmp	.-2      	; 0x66bc <__stop_program>
